"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LimitOrderContract = void 0;
const ethers_1 = require("ethers");
const assert_1 = __importDefault(require("assert"));
const AggregationRouterV6_abi_json_1 = __importDefault(require("../abi/AggregationRouterV6.abi.json"));
const constants_1 = require("../constants");
const lopContract = new ethers_1.Interface(AggregationRouterV6_abi_json_1.default);
/**
 * @see https://github.com/1inch/limit-order-protocol/blob/3169ea46932ef44114a215a60d1d91ef022b416d/contracts/OrderMixin.sol#L27
 */
class LimitOrderContract {
    /**
     *  Fill order WITHOUT an extension and taker interaction
     *
     *  @see getFillOrderArgsCalldata
     *  @see getFillContractOrderCalldata
     */
    static getFillOrderCalldata(order, signature, takerTraits, amount) {
        const { r, yParityAndS: vs } = ethers_1.Signature.from(signature);
        const { args, trait } = takerTraits.encode();
        (0, assert_1.default)(args === constants_1.ZX, 'takerTraits contains args data, use LimitOrderContract.getFillOrderArgsCalldata method');
        return lopContract.encodeFunctionData('fillOrder', [
            order,
            r,
            vs,
            amount,
            trait
        ]);
    }
    /**
     *  Fill contract order (order maker is smart-contract) WITHOUT an extension and taker interaction
     *
     *  @see getFillContractOrderArgsCalldata
     *  @see getFillOrderCalldata
     */
    static getFillContractOrderCalldata(order, signature, takerTraits, amount) {
        const { args, trait } = takerTraits.encode();
        (0, assert_1.default)(args === constants_1.ZX, 'takerTraits contains args data, use LimitOrderContract.getFillContractOrderArgsCalldata method');
        return lopContract.encodeFunctionData('fillContractOrder', [
            order,
            signature,
            amount,
            trait,
            args
        ]);
    }
    /**
     *  Fill order WITH an extension or taker interaction
     *
     *  @see getFillOrderCalldata
     *  @see getFillContractOrderArgsCalldata
     */
    static getFillOrderArgsCalldata(order, signature, takerTraits, amount) {
        const { r, yParityAndS: vs } = ethers_1.Signature.from(signature);
        const { args, trait } = takerTraits.encode();
        return lopContract.encodeFunctionData('fillOrderArgs', [
            order,
            r,
            vs,
            amount,
            trait,
            args
        ]);
    }
    /**
     *  Fill contract order (order maker is smart-contract) WITH an extension or taker interaction
     *
     *  @see getFillOrderArgsCalldata
     *  @see getFillContractOrderCalldata
     */
    static getFillContractOrderArgsCalldata(order, signature, takerTraits, amount) {
        const { args, trait } = takerTraits.encode();
        return lopContract.encodeFunctionData('fillContractOrderArgs', [
            order,
            signature,
            amount,
            trait,
            args
        ]);
    }
}
exports.LimitOrderContract = LimitOrderContract;
//# sourceMappingURL=limit-order-contract.js.map