import { ApiConfig, LimitOrderApiItem, SortKey, StatusKey } from './types';
import { Pager } from './pager';
import { LimitOrder } from '../limit-order';
import { Address } from '../address';
export declare class Api {
    private readonly baseUrl;
    private readonly networkId;
    private readonly httpClient;
    private readonly authHeader;
    constructor(config: ApiConfig);
    /**
     * Submit order to orderbook
     * @param order
     * @param signature
     */
    submitOrder(order: LimitOrder, signature: string): Promise<void>;
    /**
     * Fetch orders created by `maker`
     */
    getOrdersByMaker(maker: Address, filters?: {
        pager?: Pager;
        /**
         * 1 - Valid orders,
         * 2 - Temporarily invalid orders,
         * 3 - Invalid orders.
         */
        statuses?: StatusKey[];
        takerAsset?: Address;
        makerAsset?: Address;
    }, sort?: SortKey): Promise<LimitOrderApiItem[]>;
    /**
     * Get limit order by hash
     *
     * Error will be thrown if order is not found
     */
    getOrderByHash(hash: string): Promise<LimitOrderApiItem>;
    private url;
    private headers;
}
