"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MakerTraits = void 0;
const byte_utils_1 = require("@1inch/byte-utils");
const assert_1 = __importDefault(require("assert"));
/**
 * The MakerTraits type is an uint256, and different parts of the number are used to encode different traits.
 * High bits are used for flags
 * 255 bit `NO_PARTIAL_FILLS_FLAG`          - if set, the order does not allow partial fills
 * 254 bit `ALLOW_MULTIPLE_FILLS_FLAG`      - if set, the order permits multiple fills
 * 253 bit                                  - unused
 * 252 bit `PRE_INTERACTION_CALL_FLAG`      - if set, the order requires pre-interaction call
 * 251 bit `POST_INTERACTION_CALL_FLAG`     - if set, the order requires post-interaction call
 * 250 bit `NEED_CHECK_EPOCH_MANAGER_FLAG`  - if set, the order requires to check the epoch manager
 * 249 bit `HAS_EXTENSION_FLAG`             - if set, the order has extension(s)
 * 248 bit `USE_PERMIT2_FLAG`               - if set, the order uses permit2
 * 247 bit `UNWRAP_WETH_FLAG`               - if set, the order requires to unwrap WETH
 *
 * Low 200 bits are used for allowed sender, expiration, nonceOrEpoch, and series
 * uint80 last 10 bytes of allowed sender address (0 if any)
 * uint40 expiration timestamp (0 if none)
 * uint40 nonce or epoch
 * uint40 series
 */
class MakerTraits {
    constructor(val) {
        this.value = new byte_utils_1.BN(val);
    }
    static default() {
        return new MakerTraits(0n);
    }
    /**
     * Last 10bytes of address
     */
    allowedSender() {
        return this.value
            .getMask(MakerTraits.ALLOWED_SENDER_MASK)
            .value.toString(16)
            .padStart(20, '0');
    }
    isPrivate() {
        return this.value.getMask(MakerTraits.ALLOWED_SENDER_MASK).value !== 0n;
    }
    withAllowedSender(sender) {
        (0, assert_1.default)(!sender.isZero(), 'Use withAnySender() to remove sender check');
        const lastHalf = (0, byte_utils_1.add0x)(sender.toString().slice(-20));
        this.value = this.value.setMask(MakerTraits.ALLOWED_SENDER_MASK, BigInt(lastHalf));
        return this;
    }
    /**
     * Removes `sender` check on contract
     */
    withAnySender() {
        this.value = this.value.setMask(MakerTraits.ALLOWED_SENDER_MASK, BigInt(0));
        return this;
    }
    /**
     * If null is return than order has no expiration
     */
    expiration() {
        const timestampSec = this.value.getMask(MakerTraits.EXPIRATION_MASK);
        if (timestampSec.isZero()) {
            return null;
        }
        return timestampSec.value;
    }
    /**
     * Set order expiration time
     *
     * @param expiration expiration timestamp in sec
     */
    withExpiration(expiration) {
        const expirationSec = expiration === null ? 0n : expiration;
        this.value = this.value.setMask(MakerTraits.EXPIRATION_MASK, expirationSec);
        return this;
    }
    /**
     * Returns epoch in case `isEpochManagerEnabled()` and nonce otherwise
     */
    nonceOrEpoch() {
        return this.value.getMask(MakerTraits.NONCE_OR_EPOCH_MASK).value;
    }
    /**
     * Set nonce
     * Note: nonce and epoch share the same field, so they cant be set together
     */
    withNonce(nonce) {
        this.value = this.value.setMask(MakerTraits.NONCE_OR_EPOCH_MASK, nonce);
        return this;
    }
    /**
     * Enable epoch manager check
     *
     * If set, the contract will check that order epoch equals to epoch on `SeriesEpochManager` contract
     * Note: epoch manager can be used only when `partialFills` AND `multipleFills` allowed
     * Note: nonce and epoch share the same field, so they cant be set together
     *
     * @param series subgroup for epoch
     * @param epoch unique order id inside series
     * @see https://github.com/1inch/limit-order-protocol/blob/23d655844191dea7960a186652307604a1ed480a/contracts/helpers/SeriesEpochManager.sol#L6
     */
    withEpoch(series, epoch) {
        this.setSeries(series);
        this.enableEpochManagerCheck();
        return this.withNonce(epoch);
    }
    /**
     * Get current series
     */
    series() {
        return this.value.getMask(MakerTraits.SERIES_MASK).value;
    }
    /**
     * Returns true if order has an extension and false otherwise
     */
    hasExtension() {
        return this.value.getBit(MakerTraits.HAS_EXTENSION_FLAG) === 1;
    }
    /**
     * Mark that order has an extension
     */
    withExtension() {
        this.value = this.value.setBit(MakerTraits.HAS_EXTENSION_FLAG, 1);
        return this;
    }
    /**
     * Is partial fills allowed for order
     */
    isPartialFillAllowed() {
        return this.value.getBit(MakerTraits.NO_PARTIAL_FILLS_FLAG) === 0;
    }
    /**
     * Disable partial fills for order
     */
    disablePartialFills() {
        this.value = this.value.setBit(MakerTraits.NO_PARTIAL_FILLS_FLAG, 1);
        return this;
    }
    /**
     * Allow partial fills for order
     */
    allowPartialFills() {
        this.value = this.value.setBit(MakerTraits.NO_PARTIAL_FILLS_FLAG, 0);
        return this;
    }
    /**
     * Set partial fill flag to passed value
     */
    setPartialFills(val) {
        return val ? this.allowPartialFills() : this.disablePartialFills();
    }
    /**
     * Returns true if order allowing more than one fill and false otherwise
     */
    isMultipleFillsAllowed() {
        return this.value.getBit(MakerTraits.ALLOW_MULTIPLE_FILLS_FLAG) === 1;
    }
    /**
     * Allow many fills for order
     */
    allowMultipleFills() {
        this.value = this.value.setBit(MakerTraits.ALLOW_MULTIPLE_FILLS_FLAG, 1);
        return this;
    }
    /**
     * Allow at max 1 fill for order
     */
    disableMultipleFills() {
        this.value = this.value.setBit(MakerTraits.ALLOW_MULTIPLE_FILLS_FLAG, 0);
        return this;
    }
    /**
     * If `val` is true, then multiple fills allowed, otherwise disallowed
     */
    setMultipleFills(val) {
        return val ? this.allowMultipleFills() : this.disableMultipleFills();
    }
    /**
     * Returns true if maker has pre-interaction and false otherwise
     */
    hasPreInteraction() {
        return this.value.getBit(MakerTraits.PRE_INTERACTION_CALL_FLAG) === 1;
    }
    /**
     * Enable maker pre-interaction
     */
    enablePreInteraction() {
        this.value = this.value.setBit(MakerTraits.PRE_INTERACTION_CALL_FLAG, 1);
        return this;
    }
    /**
     * Disable maker pre-interaction
     */
    disablePreInteraction() {
        this.value = this.value.setBit(MakerTraits.PRE_INTERACTION_CALL_FLAG, 0);
        return this;
    }
    /**
     * Returns true if maker has post-interaction and false otherwise
     */
    hasPostInteraction() {
        return this.value.getBit(MakerTraits.POST_INTERACTION_CALL_FLAG) === 1;
    }
    /**
     * Enable maker post-interaction
     */
    enablePostInteraction() {
        this.value = this.value.setBit(MakerTraits.POST_INTERACTION_CALL_FLAG, 1);
        return this;
    }
    /**
     * Disable maker post-interaction
     */
    disablePostInteraction() {
        this.value = this.value.setBit(MakerTraits.POST_INTERACTION_CALL_FLAG, 0);
        return this;
    }
    /**
     * Returns true if epoch manager enabled
     *
     * @see MakerTraits.enableEpochManagerCheck
     */
    isEpochManagerEnabled() {
        return (this.value.getBit(MakerTraits.NEED_CHECK_EPOCH_MANAGER_FLAG) === 1);
    }
    /**
     * Returns true if `permit2` enabled for maker funds transfer
     *
     * @see https://github.com/Uniswap/permit2
     */
    isPermit2() {
        return this.value.getBit(MakerTraits.USE_PERMIT2_FLAG) === 1;
    }
    /**
     * Use `permit2` to transfer maker funds to contract
     *
     * @see https://github.com/Uniswap/permit2
     */
    enablePermit2() {
        this.value = this.value.setBit(MakerTraits.USE_PERMIT2_FLAG, 1);
        return this;
    }
    /**
     * Do not use `permit2` to transfer maker funds to contract
     *
     * @see https://github.com/Uniswap/permit2
     */
    disablePermit2() {
        this.value = this.value.setBit(MakerTraits.USE_PERMIT2_FLAG, 0);
        return this;
    }
    /**
     * Is WRAPPED token will be unwrapped to NATIVE before sending to maker
     */
    isNativeUnwrapEnabled() {
        return this.value.getBit(MakerTraits.UNWRAP_WETH_FLAG) === 1;
    }
    /**
     * Unwrap WRAPPED token to NATIVE before sending it to maker
     */
    enableNativeUnwrap() {
        this.value = this.value.setBit(MakerTraits.UNWRAP_WETH_FLAG, 1);
        return this;
    }
    /**
     * Do not unwrap WRAPPED token to NATIVE before sending it to maker
     */
    disableNativeUnwrap() {
        this.value = this.value.setBit(MakerTraits.UNWRAP_WETH_FLAG, 0);
        return this;
    }
    asBigInt() {
        return this.value.value;
    }
    /**
     * Returns true if bit invalidator mode is used to invalidate order (cancel/mark as filled)
     *
     * Bit invalidator is cheaper in terms of gas, but can be used only when partial fills OR multiple fills are disabled
     *
     * @see https://github.com/1inch/limit-order-protocol/blob/3c9b8ab8bbc4c10ff8d615fc3d33f501993c292d/contracts/libraries/MakerTraitsLib.sol#L142
     */
    isBitInvalidatorMode() {
        return !this.isPartialFillAllowed() || !this.isMultipleFillsAllowed();
    }
    enableEpochManagerCheck() {
        (0, assert_1.default)(!this.isBitInvalidatorMode(), 'Epoch manager allowed only when partialFills and multipleFills enabled');
        this.value = this.value.setBit(MakerTraits.NEED_CHECK_EPOCH_MANAGER_FLAG, 1);
    }
    /**
     * Set series. Only when epoch manager enabled
     * Series is a subgroup for epoch's, it can be useful when you want to cancel a group of orders at once
     *
     * @see MakerTraits.enableEpochManagerCheck
     */
    setSeries(series) {
        this.value = this.value.setMask(MakerTraits.SERIES_MASK, series);
    }
}
exports.MakerTraits = MakerTraits;
// Low 200 bits are used for allowed sender, expiration, nonceOrEpoch, and series
MakerTraits.ALLOWED_SENDER_MASK = new byte_utils_1.BitMask(0n, 80n);
MakerTraits.EXPIRATION_MASK = new byte_utils_1.BitMask(80n, 120n);
MakerTraits.NONCE_OR_EPOCH_MASK = new byte_utils_1.BitMask(120n, 160n);
MakerTraits.SERIES_MASK = new byte_utils_1.BitMask(160n, 200n);
MakerTraits.NO_PARTIAL_FILLS_FLAG = 255n;
MakerTraits.ALLOW_MULTIPLE_FILLS_FLAG = 254n;
MakerTraits.PRE_INTERACTION_CALL_FLAG = 252n;
MakerTraits.POST_INTERACTION_CALL_FLAG = 251n;
MakerTraits.NEED_CHECK_EPOCH_MANAGER_FLAG = 250n;
MakerTraits.HAS_EXTENSION_FLAG = 249n;
MakerTraits.USE_PERMIT2_FLAG = 248n;
MakerTraits.UNWRAP_WETH_FLAG = 247n;
//# sourceMappingURL=maker-traits.js.map