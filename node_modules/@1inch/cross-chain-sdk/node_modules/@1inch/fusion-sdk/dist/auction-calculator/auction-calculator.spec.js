"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const limit_order_sdk_1 = require("@1inch/limit-order-sdk");
const ethers_1 = require("ethers");
const auction_calculator_1 = require("./auction-calculator");
const fusion_order_1 = require("../fusion-order");
const sdk_1 = require("../sdk");
describe('Auction Calculator', () => {
    it('should be created successfully from suffix and salt', () => {
        const auctionStartTime = 1708448252n;
        const postInteraction = fusion_order_1.SettlementPostInteractionData.new({
            integratorFee: {
                ratio: (0, sdk_1.bpsToRatioFormat)(1),
                receiver: limit_order_sdk_1.Address.fromBigInt(1n)
            },
            bankFee: 0n,
            resolvingStartTime: auctionStartTime,
            whitelist: [
                { address: limit_order_sdk_1.Address.ZERO_ADDRESS, allowFrom: auctionStartTime }
            ]
        });
        const auctionDetails = new fusion_order_1.AuctionDetails({
            startTime: auctionStartTime,
            initialRateBump: 50000,
            duration: 120n,
            points: []
        });
        const calculator = auction_calculator_1.AuctionCalculator.fromAuctionData(postInteraction, auctionDetails);
        const rate = calculator.calcRateBump(auctionStartTime + 60n);
        const auctionTakingAmount = calculator.calcAuctionTakingAmount(1420000000n, rate);
        expect(rate).toBe(25000);
        expect(auctionTakingAmount).toBe(1423692355n); // 1423550000 from rate + 142355 (1bps) integrator fee
    });
    describe('Gas bump', () => {
        const now = BigInt(Math.floor(Date.now() / 1000));
        const duration = 1800n; // 30m
        const takingAmount = (0, ethers_1.parseEther)('1');
        const calculator = new auction_calculator_1.AuctionCalculator(now - 60n, duration, 1000000n, [{ delay: 60, coefficient: 500000 }], 0n, {
            gasBumpEstimate: 10000n,
            gasPriceEstimate: 1000n // 1gwei
        });
        it('0 gwei = no gas fee', () => {
            const bump = calculator.calcRateBump(now);
            expect(calculator.calcAuctionTakingAmount(takingAmount, bump)).toBe((0, ethers_1.parseEther)('1.05'));
        });
        it('0.1 gwei = 0.01% gas fee', () => {
            const bump = calculator.calcRateBump(now, (0, ethers_1.parseUnits)('1', 8));
            expect(calculator.calcAuctionTakingAmount(takingAmount, bump)).toBe((0, ethers_1.parseEther)('1.0499'));
        });
        it('15 gwei = 1.5% gas fee', () => {
            const bump = calculator.calcRateBump(now, (0, ethers_1.parseUnits)('15', 9));
            expect(calculator.calcAuctionTakingAmount(takingAmount, bump)).toBe((0, ethers_1.parseEther)('1.035'));
        });
        it('100 gwei = 10% gas fee, should be capped with takingAmount', () => {
            const bump = calculator.calcRateBump(now, (0, ethers_1.parseUnits)('100', 9));
            expect(calculator.calcAuctionTakingAmount(takingAmount, bump)).toBe((0, ethers_1.parseEther)('1'));
        });
    });
});
//# sourceMappingURL=auction-calculator.spec.js.map