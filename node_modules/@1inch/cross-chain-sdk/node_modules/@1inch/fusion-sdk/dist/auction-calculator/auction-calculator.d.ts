import { SettlementPostInteractionData, AuctionDetails, AuctionPoint } from '../fusion-order';
import { AuctionGasCostInfo } from '../fusion-order/auction-details/types';
export declare class AuctionCalculator {
    private readonly startTime;
    private readonly duration;
    private readonly initialRateBump;
    private readonly points;
    private readonly takerFeeRatio;
    private readonly gasCost;
    private static GAS_PRICE_BASE;
    constructor(startTime: bigint, duration: bigint, initialRateBump: bigint, points: AuctionPoint[], takerFeeRatio: bigint, gasCost?: AuctionGasCostInfo);
    get finishTime(): bigint;
    static fromAuctionData(data: SettlementPostInteractionData, details: AuctionDetails): AuctionCalculator;
    static calcInitialRateBump(startAmount: bigint, endAmount: bigint): number;
    /**
     * Important!: method implementation is different from contract implementation
     * Because of that, sdk amount can be less than contract amount by 1 wad
     *
     * @see https://github.com/1inch/limit-order-settlement/blob/2eef6f86bf0142024f9a8bf054a0256b41d8362a/contracts/extensions/BaseExtension.sol#L66
     */
    static calcAuctionTakingAmount(takingAmount: bigint, rate: number, takerFeeRatio: bigint): bigint;
    /**
     * Encode estimation `baseFee` as `gasPriceEstimate` for `AuctionGasCostInfo`
     */
    static baseFeeToGasPriceEstimate(baseFee: bigint): bigint;
    /**
     * Calculates `gasBumpEstimate` for `AuctionGasCostInfo`
     *
     * @param endTakingAmount min return in destToken
     * @param gasCostInToToken gas cost in destToken
     */
    static calcGasBumpEstimate(endTakingAmount: bigint, gasCostInToToken: bigint): bigint;
    calcAuctionTakingAmount(takingAmount: bigint, rate: number): bigint;
    /**
     * @see https://github.com/1inch/limit-order-settlement/blob/273defdf7b0f1867299dcbc306f32f035579310f/contracts/extensions/BaseExtension.sol#L121
     * @param time auction timestamp in seconds
     * @param blockBaseFee blockBaseFee in Wei, if passed, then rate will be calculated as if order executed in block with `blockBaseFee`
     */
    calcRateBump(time: bigint, blockBaseFee?: bigint): number;
    private getGasPriceBump;
    private getAuctionBump;
}
