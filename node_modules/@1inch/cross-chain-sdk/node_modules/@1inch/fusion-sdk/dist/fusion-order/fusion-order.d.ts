import { Address, EIP712TypedData, Extension, LimitOrderV4Struct, OrderInfoData } from '@1inch/limit-order-sdk';
import { FusionExtension } from './fusion-extension';
import { AuctionDetails } from './auction-details';
import { AuctionWhitelistItem, IntegratorFee, SettlementPostInteractionData } from './settlement-post-interaction-data';
import { AuctionCalculator } from '../auction-calculator';
export declare class FusionOrder {
    /**
     * Fusion extension address
     * @see https://github.com/1inch/limit-order-settlement
     */
    readonly settlementExtensionContract: Address;
    private static _ORDER_FEE_BASE_POINTS;
    private static defaultExtra;
    readonly fusionExtension: FusionExtension;
    private inner;
    protected constructor(
    /**
     * Fusion extension address
     * @see https://github.com/1inch/limit-order-settlement
     */
    settlementExtensionContract: Address, orderInfo: OrderInfoData, auctionDetails: AuctionDetails, postInteractionData: SettlementPostInteractionData, extra?: {
        unwrapWETH?: boolean;
        /**
         * Required if `allowPartialFills` or `allowMultipleFills` is false
         */
        nonce?: bigint;
        /**
         * 0x prefixed without the token address
         */
        permit?: string;
        /**
         * Default is true
         */
        allowPartialFills?: boolean;
        /**
         * Default is true
         */
        allowMultipleFills?: boolean;
        /**
         * Order will expire in `orderExpirationDelay` after auction ends
         * Default 12s
         */
        orderExpirationDelay?: bigint;
        enablePermit2?: boolean;
        source?: string;
    }, extension?: FusionExtension);
    get extension(): Extension;
    get maker(): Address;
    get takerAsset(): Address;
    get makerAsset(): Address;
    get takingAmount(): bigint;
    get makingAmount(): bigint;
    get receiver(): Address;
    /**
     * Timestamp in sec
     */
    get deadline(): bigint;
    /**
     * Timestamp in sec
     */
    get auctionStartTime(): bigint;
    /**
     * Timestamp in sec
     */
    get auctionEndTime(): bigint;
    get isBitInvalidatorMode(): boolean;
    get partialFillAllowed(): boolean;
    get multipleFillsAllowed(): boolean;
    get nonce(): bigint;
    get salt(): bigint;
    static new(
    /**
     * Fusion extension address
     * @see https://github.com/1inch/limit-order-settlement
     */
    settlementExtension: Address, orderInfo: OrderInfoData, details: {
        auction: AuctionDetails;
        fees?: {
            integratorFee?: IntegratorFee;
            bankFee?: bigint;
        };
        whitelist: AuctionWhitelistItem[];
        /**
         * Time from which order can be executed
         */
        resolvingStartTime?: bigint;
    }, extra?: {
        unwrapWETH?: boolean;
        /**
         * Required if `allowPartialFills` or `allowMultipleFills` is false
         * Max size is 40bit
         */
        nonce?: bigint;
        permit?: string;
        /**
         * Default is true
         */
        allowPartialFills?: boolean;
        /**
         * Default is true
         */
        allowMultipleFills?: boolean;
        /**
         * Order will expire in `orderExpirationDelay` after auction ends
         * Default 12s
         */
        orderExpirationDelay?: bigint;
        enablePermit2?: boolean;
        source?: string;
    }): FusionOrder;
    /**
     * Create FusionOrder from order data and extension
     *
     */
    static fromDataAndExtension(order: LimitOrderV4Struct, extension: Extension): FusionOrder;
    build(): LimitOrderV4Struct;
    getOrderHash(chainId: number): string;
    getTypedData(chainId: number): EIP712TypedData;
    getCalculator(): AuctionCalculator;
    /**
     * Calculates required taking amount for passed `makingAmount` at block time `time`
     *
     * @param makingAmount maker swap amount
     * @param time execution time in sec
     * @param blockBaseFee block fee in wei.
     * */
    calcTakingAmount(makingAmount: bigint, time: bigint, blockBaseFee?: bigint): bigint;
    /**
     * Check whether address allowed to execute order at the given time
     *
     * @param executor address of executor
     * @param executionTime timestamp in sec at which order planning to execute
     */
    canExecuteAt(executor: Address, executionTime: bigint): boolean;
    /**
     * Check is order expired at a given time
     *
     * @param time timestamp in seconds
     */
    isExpiredAt(time: bigint): boolean;
    /**
     * Returns how much fee will be credited from a resolver deposit account
     * Token of fee set in Settlement extension constructor
     * Actual deployments can be found at https://github.com/1inch/limit-order-settlement/tree/master/deployments
     *
     * @param filledMakingAmount which resolver fills
     * @see https://github.com/1inch/limit-order-settlement/blob/0e3cae3653092ebb4ea5d2a338c87a54351ad883/contracts/extensions/ResolverFeeExtension.sol#L29
     */
    getResolverFee(filledMakingAmount: bigint): bigint;
    /**
     * Check if `wallet` can fill order before other
     */
    isExclusiveResolver(wallet: Address): boolean;
    /**
     * Check if the auction has exclusive resolver, and it is in the exclusivity period
     */
    isExclusivityPeriod(time?: bigint): boolean;
}
