"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const limit_order_sdk_1 = require("@1inch/limit-order-sdk");
const byte_utils_1 = require("@1inch/byte-utils");
const settlement_post_interaction_data_1 = require("./settlement-post-interaction-data");
const utils_1 = require("../../sdk/utils");
describe('SettlementPostInteractionData', () => {
    it('Should encode/decode with bank fee and whitelist', () => {
        const data = settlement_post_interaction_data_1.SettlementPostInteractionData.new({
            bankFee: 1n,
            resolvingStartTime: 1708117482n,
            whitelist: [
                {
                    address: limit_order_sdk_1.Address.ZERO_ADDRESS,
                    allowFrom: 0n
                }
            ]
        });
        const encoded = data.encode();
        expect((0, byte_utils_1.getBytesCount)(encoded)).toEqual(21n);
        expect(settlement_post_interaction_data_1.SettlementPostInteractionData.decode(encoded)).toStrictEqual(data);
    });
    it('Should encode/decode with no fees and whitelist', () => {
        const data = settlement_post_interaction_data_1.SettlementPostInteractionData.new({
            resolvingStartTime: 1708117482n,
            whitelist: [
                {
                    address: limit_order_sdk_1.Address.ZERO_ADDRESS,
                    allowFrom: 0n
                }
            ]
        });
        const encoded = data.encode();
        expect((0, byte_utils_1.getBytesCount)(encoded)).toEqual(17n);
        expect(settlement_post_interaction_data_1.SettlementPostInteractionData.decode(encoded)).toStrictEqual(data);
    });
    it('Should encode/decode with fees and whitelist', () => {
        const data = settlement_post_interaction_data_1.SettlementPostInteractionData.new({
            bankFee: 0n,
            resolvingStartTime: 1708117482n,
            whitelist: [
                {
                    address: limit_order_sdk_1.Address.ZERO_ADDRESS,
                    allowFrom: 0n
                }
            ],
            integratorFee: {
                receiver: limit_order_sdk_1.Address.fromBigInt(1n),
                ratio: (0, utils_1.bpsToRatioFormat)(10)
            }
        });
        expect(settlement_post_interaction_data_1.SettlementPostInteractionData.decode(data.encode())).toStrictEqual(data);
    });
    it('Should encode/decode with fees, custom receiver and whitelist', () => {
        const data = settlement_post_interaction_data_1.SettlementPostInteractionData.new({
            bankFee: 0n,
            resolvingStartTime: 1708117482n,
            whitelist: [
                {
                    address: limit_order_sdk_1.Address.ZERO_ADDRESS,
                    allowFrom: 0n
                }
            ],
            integratorFee: {
                receiver: limit_order_sdk_1.Address.fromBigInt(1n),
                ratio: (0, utils_1.bpsToRatioFormat)(10)
            },
            customReceiver: limit_order_sdk_1.Address.fromBigInt(1337n)
        });
        expect(settlement_post_interaction_data_1.SettlementPostInteractionData.decode(data.encode())).toStrictEqual(data);
    });
    it('Should generate correct whitelist', () => {
        const start = 1708117482n;
        const data = settlement_post_interaction_data_1.SettlementPostInteractionData.new({
            resolvingStartTime: start,
            whitelist: [
                {
                    address: limit_order_sdk_1.Address.fromBigInt(2n),
                    allowFrom: start + 1000n
                },
                {
                    address: limit_order_sdk_1.Address.ZERO_ADDRESS,
                    allowFrom: start - 10n // should be set to start
                },
                {
                    address: limit_order_sdk_1.Address.fromBigInt(1n),
                    allowFrom: start + 10n
                },
                {
                    address: limit_order_sdk_1.Address.fromBigInt(3n),
                    allowFrom: start + 10n
                }
            ]
        });
        expect(data.whitelist).toStrictEqual([
            {
                addressHalf: limit_order_sdk_1.Address.ZERO_ADDRESS.toString().slice(-20),
                delay: 0n
            },
            {
                addressHalf: limit_order_sdk_1.Address.fromBigInt(1n).toString().slice(-20),
                delay: 10n
            },
            {
                addressHalf: limit_order_sdk_1.Address.fromBigInt(3n).toString().slice(-20),
                delay: 0n
            },
            {
                addressHalf: limit_order_sdk_1.Address.fromBigInt(2n).toString().slice(-20),
                delay: 990n
            }
        ]);
        expect(data.canExecuteAt(limit_order_sdk_1.Address.fromBigInt(1n), start + 10n)).toEqual(true);
        expect(data.canExecuteAt(limit_order_sdk_1.Address.fromBigInt(1n), start + 9n)).toEqual(false);
        expect(data.canExecuteAt(limit_order_sdk_1.Address.fromBigInt(3n), start + 10n)).toEqual(true);
        expect(data.canExecuteAt(limit_order_sdk_1.Address.fromBigInt(3n), start + 9n)).toEqual(false);
        expect(data.canExecuteAt(limit_order_sdk_1.Address.fromBigInt(2n), start + 50n)).toEqual(false);
    });
});
//# sourceMappingURL=settlement-post-interaction-data.spec.js.map