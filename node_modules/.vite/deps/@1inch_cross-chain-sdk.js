import {
  __commonJS,
  __esm,
  __export,
  __privateAdd,
  __privateGet,
  __privateMethod,
  __privateSet,
  __privateWrapper,
  __publicField,
  __toCommonJS,
  __toESM
} from "./chunk-VR4NDDSO.js";

// node_modules/ethers/node_modules/tslib/tslib.es6.js
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __read: () => __read,
  __rest: () => __rest,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d, b2) {
  if (typeof b2 !== "function" && b2 !== null)
    throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
  extendStatics(d, b2);
  function __() {
    this.constructor = d;
  }
  d.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r2 = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r2 = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r2 = (c < 3 ? d(r2) : c > 3 ? d(target, key, r2) : d(target, key)) || r2;
  return c > 3 && r2 && Object.defineProperty(target, key, r2), r2;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1) throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f2, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n2) {
    return function(v) {
      return step([n2, v]);
    };
  }
  function step(op) {
    if (f2) throw new TypeError("Generator is already executing.");
    while (_) try {
      if (f2 = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
      if (y = 0, t) op = [op[0] & 2, t.value];
      switch (op[0]) {
        case 0:
        case 1:
          t = op;
          break;
        case 4:
          _.label++;
          return { value: op[1], done: false };
        case 5:
          _.label++;
          y = op[1];
          op = [0];
          continue;
        case 7:
          op = _.ops.pop();
          _.trys.pop();
          continue;
        default:
          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
            _ = 0;
            continue;
          }
          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
            _.label = op[1];
            break;
          }
          if (op[0] === 6 && _.label < t[1]) {
            _.label = t[1];
            t = op;
            break;
          }
          if (t && _.label < t[2]) {
            _.label = t[2];
            _.ops.push(op);
            break;
          }
          if (t[2]) _.ops.pop();
          _.trys.pop();
          continue;
      }
      op = body.call(thisArg, _);
    } catch (e) {
      op = [6, e];
      y = 0;
    } finally {
      f2 = t = 0;
    }
    if (op[0] & 5) throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m) return m.call(o);
  if (o && typeof o.length === "number") return {
    next: function() {
      if (o && i >= o.length) o = void 0;
      return { value: o && o[i++], done: !o };
    }
  };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n2) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m) return o;
  var i = m.call(o), r2, ar = [], e;
  try {
    while ((n2 === void 0 || n2-- > 0) && !(r2 = i.next()).done) ar.push(r2.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r2 && !r2.done && (m = i["return"])) m.call(i);
    } finally {
      if (e) throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r2 = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r2[k] = a[j];
  return r2;
}
function __spreadArray(to, from, pack3) {
  if (pack3 || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n2) {
    if (g[n2]) i[n2] = function(v) {
      return new Promise(function(a, b2) {
        q.push([n2, v, a, b2]) > 1 || resume(n2, v);
      });
    };
  }
  function resume(n2, v) {
    try {
      step(g[n2](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r2) {
    r2.value instanceof __await ? Promise.resolve(r2.value.v).then(fulfill, reject) : settle(q[0][2], r2);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f2, v) {
    if (f2(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n2, f2) {
    i[n2] = o[n2] ? function(v) {
      return (p = !p) ? { value: __await(o[n2](v)), done: n2 === "return" } : f2 ? f2(v) : v;
    } : f2;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n2) {
    i[n2] = o[n2] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n2](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod2) {
  if (mod2 && mod2.__esModule) return mod2;
  var result = {};
  if (mod2 != null) {
    for (var k in mod2) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding(result, mod2, k);
  }
  __setModuleDefault(result, mod2);
  return result;
}
function __importDefault(mod2) {
  return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
}
function __classPrivateFieldGet(receiver, state, kind, f2) {
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f2) {
  if (kind === "m") throw new TypeError("Private method is not writable");
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function") throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
var extendStatics, __assign, __createBinding, __setModuleDefault;
var init_tslib_es6 = __esm({
  "node_modules/ethers/node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d, b2) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b3) {
        d2.__proto__ = b3;
      } || function(d2, b3) {
        for (var p in b3) if (Object.prototype.hasOwnProperty.call(b3, p)) d2[p] = b3[p];
      };
      return extendStatics(d, b2);
    };
    __assign = function() {
      __assign = Object.assign || function __assign2(t) {
        for (var s, i = 1, n2 = arguments.length; i < n2; i++) {
          s = arguments[i];
          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
  }
});

// node_modules/ethers/lib.commonjs/_version.js
var require_version = __commonJS({
  "node_modules/ethers/lib.commonjs/_version.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.version = void 0;
    exports.version = "6.13.1";
  }
});

// node_modules/ethers/lib.commonjs/utils/properties.js
var require_properties = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/properties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defineProperties = exports.resolveProperties = void 0;
    function checkType2(value, type, name) {
      const types = type.split("|").map((t) => t.trim());
      for (let i = 0; i < types.length; i++) {
        switch (type) {
          case "any":
            return;
          case "bigint":
          case "boolean":
          case "number":
          case "string":
            if (typeof value === type) {
              return;
            }
        }
      }
      const error = new Error(`invalid value for type ${type}`);
      error.code = "INVALID_ARGUMENT";
      error.argument = `value.${name}`;
      error.value = value;
      throw error;
    }
    async function resolveProperties2(value) {
      const keys = Object.keys(value);
      const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
      return results.reduce((accum, v, index) => {
        accum[keys[index]] = v;
        return accum;
      }, {});
    }
    exports.resolveProperties = resolveProperties2;
    function defineProperties2(target, values, types) {
      for (let key in values) {
        let value = values[key];
        const type = types ? types[key] : null;
        if (type) {
          checkType2(value, type, key);
        }
        Object.defineProperty(target, key, { enumerable: true, value, writable: false });
      }
    }
    exports.defineProperties = defineProperties2;
  }
});

// node_modules/ethers/lib.commonjs/utils/errors.js
var require_errors = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assertPrivate = exports.assertNormalize = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.makeError = exports.isCallException = exports.isError = void 0;
    var _version_js_1 = require_version();
    var properties_js_1 = require_properties();
    function stringify2(value) {
      if (value == null) {
        return "null";
      }
      if (Array.isArray(value)) {
        return "[ " + value.map(stringify2).join(", ") + " ]";
      }
      if (value instanceof Uint8Array) {
        const HEX2 = "0123456789abcdef";
        let result = "0x";
        for (let i = 0; i < value.length; i++) {
          result += HEX2[value[i] >> 4];
          result += HEX2[value[i] & 15];
        }
        return result;
      }
      if (typeof value === "object" && typeof value.toJSON === "function") {
        return stringify2(value.toJSON());
      }
      switch (typeof value) {
        case "boolean":
        case "symbol":
          return value.toString();
        case "bigint":
          return BigInt(value).toString();
        case "number":
          return value.toString();
        case "string":
          return JSON.stringify(value);
        case "object": {
          const keys = Object.keys(value);
          keys.sort();
          return "{ " + keys.map((k) => `${stringify2(k)}: ${stringify2(value[k])}`).join(", ") + " }";
        }
      }
      return `[ COULD NOT SERIALIZE ]`;
    }
    function isError2(error, code) {
      return error && error.code === code;
    }
    exports.isError = isError2;
    function isCallException2(error) {
      return isError2(error, "CALL_EXCEPTION");
    }
    exports.isCallException = isCallException2;
    function makeError2(message, code, info) {
      let shortMessage = message;
      {
        const details = [];
        if (info) {
          if ("message" in info || "code" in info || "name" in info) {
            throw new Error(`value will overwrite populated values: ${stringify2(info)}`);
          }
          for (const key in info) {
            if (key === "shortMessage") {
              continue;
            }
            const value = info[key];
            details.push(key + "=" + stringify2(value));
          }
        }
        details.push(`code=${code}`);
        details.push(`version=${_version_js_1.version}`);
        if (details.length) {
          message += " (" + details.join(", ") + ")";
        }
      }
      let error;
      switch (code) {
        case "INVALID_ARGUMENT":
          error = new TypeError(message);
          break;
        case "NUMERIC_FAULT":
        case "BUFFER_OVERRUN":
          error = new RangeError(message);
          break;
        default:
          error = new Error(message);
      }
      (0, properties_js_1.defineProperties)(error, { code });
      if (info) {
        Object.assign(error, info);
      }
      if (error.shortMessage == null) {
        (0, properties_js_1.defineProperties)(error, { shortMessage });
      }
      return error;
    }
    exports.makeError = makeError2;
    function assert11(check, message, code, info) {
      if (!check) {
        throw makeError2(message, code, info);
      }
    }
    exports.assert = assert11;
    function assertArgument2(check, message, name, value) {
      assert11(check, message, "INVALID_ARGUMENT", { argument: name, value });
    }
    exports.assertArgument = assertArgument2;
    function assertArgumentCount2(count, expectedCount, message) {
      if (message == null) {
        message = "";
      }
      if (message) {
        message = ": " + message;
      }
      assert11(count >= expectedCount, "missing arguemnt" + message, "MISSING_ARGUMENT", {
        count,
        expectedCount
      });
      assert11(count <= expectedCount, "too many arguments" + message, "UNEXPECTED_ARGUMENT", {
        count,
        expectedCount
      });
    }
    exports.assertArgumentCount = assertArgumentCount2;
    var _normalizeForms2 = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad");
        }
        ;
        if (form === "NFD") {
          const check = String.fromCharCode(233).normalize("NFD");
          const expected = String.fromCharCode(101, 769);
          if (check !== expected) {
            throw new Error("broken");
          }
        }
        accum.push(form);
      } catch (error) {
      }
      return accum;
    }, []);
    function assertNormalize2(form) {
      assert11(_normalizeForms2.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
        operation: "String.prototype.normalize",
        info: { form }
      });
    }
    exports.assertNormalize = assertNormalize2;
    function assertPrivate2(givenGuard, guard, className) {
      if (className == null) {
        className = "";
      }
      if (givenGuard !== guard) {
        let method = className, operation = "new";
        if (className) {
          method += ".";
          operation += " " + className;
        }
        assert11(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
          operation
        });
      }
    }
    exports.assertPrivate = assertPrivate2;
  }
});

// node_modules/ethers/lib.commonjs/utils/data.js
var require_data = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/data.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.zeroPadBytes = exports.zeroPadValue = exports.stripZerosLeft = exports.dataSlice = exports.dataLength = exports.concat = exports.hexlify = exports.isBytesLike = exports.isHexString = exports.getBytesCopy = exports.getBytes = void 0;
    var errors_js_1 = require_errors();
    function _getBytes2(value, name, copy) {
      if (value instanceof Uint8Array) {
        if (copy) {
          return new Uint8Array(value);
        }
        return value;
      }
      if (typeof value === "string" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
        const result = new Uint8Array((value.length - 2) / 2);
        let offset = 2;
        for (let i = 0; i < result.length; i++) {
          result[i] = parseInt(value.substring(offset, offset + 2), 16);
          offset += 2;
        }
        return result;
      }
      (0, errors_js_1.assertArgument)(false, "invalid BytesLike value", name || "value", value);
    }
    function getBytes2(value, name) {
      return _getBytes2(value, name, false);
    }
    exports.getBytes = getBytes2;
    function getBytesCopy2(value, name) {
      return _getBytes2(value, name, true);
    }
    exports.getBytesCopy = getBytesCopy2;
    function isHexString4(value, length) {
      if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
        return false;
      }
      if (typeof length === "number" && value.length !== 2 + 2 * length) {
        return false;
      }
      if (length === true && value.length % 2 !== 0) {
        return false;
      }
      return true;
    }
    exports.isHexString = isHexString4;
    function isBytesLike3(value) {
      return isHexString4(value, true) || value instanceof Uint8Array;
    }
    exports.isBytesLike = isBytesLike3;
    var HexCharacters3 = "0123456789abcdef";
    function hexlify3(data) {
      const bytes3 = getBytes2(data);
      let result = "0x";
      for (let i = 0; i < bytes3.length; i++) {
        const v = bytes3[i];
        result += HexCharacters3[(v & 240) >> 4] + HexCharacters3[v & 15];
      }
      return result;
    }
    exports.hexlify = hexlify3;
    function concat3(datas) {
      return "0x" + datas.map((d) => hexlify3(d).substring(2)).join("");
    }
    exports.concat = concat3;
    function dataLength2(data) {
      if (isHexString4(data, true)) {
        return (data.length - 2) / 2;
      }
      return getBytes2(data).length;
    }
    exports.dataLength = dataLength2;
    function dataSlice2(data, start, end) {
      const bytes3 = getBytes2(data);
      if (end != null && end > bytes3.length) {
        (0, errors_js_1.assert)(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
          buffer: bytes3,
          length: bytes3.length,
          offset: end
        });
      }
      return hexlify3(bytes3.slice(start == null ? 0 : start, end == null ? bytes3.length : end));
    }
    exports.dataSlice = dataSlice2;
    function stripZerosLeft2(data) {
      let bytes3 = hexlify3(data).substring(2);
      while (bytes3.startsWith("00")) {
        bytes3 = bytes3.substring(2);
      }
      return "0x" + bytes3;
    }
    exports.stripZerosLeft = stripZerosLeft2;
    function zeroPad3(data, length, left) {
      const bytes3 = getBytes2(data);
      (0, errors_js_1.assert)(length >= bytes3.length, "padding exceeds data length", "BUFFER_OVERRUN", {
        buffer: new Uint8Array(bytes3),
        length,
        offset: length + 1
      });
      const result = new Uint8Array(length);
      result.fill(0);
      if (left) {
        result.set(bytes3, length - bytes3.length);
      } else {
        result.set(bytes3, 0);
      }
      return hexlify3(result);
    }
    function zeroPadValue2(data, length) {
      return zeroPad3(data, length, true);
    }
    exports.zeroPadValue = zeroPadValue2;
    function zeroPadBytes2(data, length) {
      return zeroPad3(data, length, false);
    }
    exports.zeroPadBytes = zeroPadBytes2;
  }
});

// node_modules/ethers/lib.commonjs/utils/maths.js
var require_maths = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/maths.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toQuantity = exports.toBeArray = exports.toBeHex = exports.toNumber = exports.getNumber = exports.toBigInt = exports.getUint = exports.getBigInt = exports.mask = exports.toTwos = exports.fromTwos = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var BN_012 = BigInt(0);
    var BN_17 = BigInt(1);
    var maxValue2 = 9007199254740991;
    function fromTwos2(_value, _width) {
      const value = getUint2(_value, "value");
      const width = BigInt(getNumber2(_width, "width"));
      (0, errors_js_1.assert)(value >> width === BN_012, "overflow", "NUMERIC_FAULT", {
        operation: "fromTwos",
        fault: "overflow",
        value: _value
      });
      if (value >> width - BN_17) {
        const mask3 = (BN_17 << width) - BN_17;
        return -((~value & mask3) + BN_17);
      }
      return value;
    }
    exports.fromTwos = fromTwos2;
    function toTwos2(_value, _width) {
      let value = getBigInt2(_value, "value");
      const width = BigInt(getNumber2(_width, "width"));
      const limit = BN_17 << width - BN_17;
      if (value < BN_012) {
        value = -value;
        (0, errors_js_1.assert)(value <= limit, "too low", "NUMERIC_FAULT", {
          operation: "toTwos",
          fault: "overflow",
          value: _value
        });
        const mask3 = (BN_17 << width) - BN_17;
        return (~value & mask3) + BN_17;
      } else {
        (0, errors_js_1.assert)(value < limit, "too high", "NUMERIC_FAULT", {
          operation: "toTwos",
          fault: "overflow",
          value: _value
        });
      }
      return value;
    }
    exports.toTwos = toTwos2;
    function mask2(_value, _bits) {
      const value = getUint2(_value, "value");
      const bits = BigInt(getNumber2(_bits, "bits"));
      return value & (BN_17 << bits) - BN_17;
    }
    exports.mask = mask2;
    function getBigInt2(value, name) {
      switch (typeof value) {
        case "bigint":
          return value;
        case "number":
          (0, errors_js_1.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
          (0, errors_js_1.assertArgument)(value >= -maxValue2 && value <= maxValue2, "overflow", name || "value", value);
          return BigInt(value);
        case "string":
          try {
            if (value === "") {
              throw new Error("empty string");
            }
            if (value[0] === "-" && value[1] !== "-") {
              return -BigInt(value.substring(1));
            }
            return BigInt(value);
          } catch (e) {
            (0, errors_js_1.assertArgument)(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
          }
      }
      (0, errors_js_1.assertArgument)(false, "invalid BigNumberish value", name || "value", value);
    }
    exports.getBigInt = getBigInt2;
    function getUint2(value, name) {
      const result = getBigInt2(value, name);
      (0, errors_js_1.assert)(result >= BN_012, "unsigned value cannot be negative", "NUMERIC_FAULT", {
        fault: "overflow",
        operation: "getUint",
        value
      });
      return result;
    }
    exports.getUint = getUint2;
    var Nibbles2 = "0123456789abcdef";
    function toBigInt2(value) {
      if (value instanceof Uint8Array) {
        let result = "0x0";
        for (const v of value) {
          result += Nibbles2[v >> 4];
          result += Nibbles2[v & 15];
        }
        return BigInt(result);
      }
      return getBigInt2(value);
    }
    exports.toBigInt = toBigInt2;
    function getNumber2(value, name) {
      switch (typeof value) {
        case "bigint":
          (0, errors_js_1.assertArgument)(value >= -maxValue2 && value <= maxValue2, "overflow", name || "value", value);
          return Number(value);
        case "number":
          (0, errors_js_1.assertArgument)(Number.isInteger(value), "underflow", name || "value", value);
          (0, errors_js_1.assertArgument)(value >= -maxValue2 && value <= maxValue2, "overflow", name || "value", value);
          return value;
        case "string":
          try {
            if (value === "") {
              throw new Error("empty string");
            }
            return getNumber2(BigInt(value), name);
          } catch (e) {
            (0, errors_js_1.assertArgument)(false, `invalid numeric string: ${e.message}`, name || "value", value);
          }
      }
      (0, errors_js_1.assertArgument)(false, "invalid numeric value", name || "value", value);
    }
    exports.getNumber = getNumber2;
    function toNumber2(value) {
      return getNumber2(toBigInt2(value));
    }
    exports.toNumber = toNumber2;
    function toBeHex2(_value, _width) {
      const value = getUint2(_value, "value");
      let result = value.toString(16);
      if (_width == null) {
        if (result.length % 2) {
          result = "0" + result;
        }
      } else {
        const width = getNumber2(_width, "width");
        (0, errors_js_1.assert)(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
          operation: "toBeHex",
          fault: "overflow",
          value: _value
        });
        while (result.length < width * 2) {
          result = "0" + result;
        }
      }
      return "0x" + result;
    }
    exports.toBeHex = toBeHex2;
    function toBeArray2(_value) {
      const value = getUint2(_value, "value");
      if (value === BN_012) {
        return new Uint8Array([]);
      }
      let hex = value.toString(16);
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      const result = new Uint8Array(hex.length / 2);
      for (let i = 0; i < result.length; i++) {
        const offset = i * 2;
        result[i] = parseInt(hex.substring(offset, offset + 2), 16);
      }
      return result;
    }
    exports.toBeArray = toBeArray2;
    function toQuantity2(value) {
      let result = (0, data_js_1.hexlify)((0, data_js_1.isBytesLike)(value) ? value : toBeArray2(value)).substring(2);
      while (result.startsWith("0")) {
        result = result.substring(1);
      }
      if (result === "") {
        result = "0";
      }
      return "0x" + result;
    }
    exports.toQuantity = toQuantity2;
  }
});

// node_modules/ethers/lib.commonjs/utils/base58.js
var require_base58 = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/base58.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeBase58 = exports.encodeBase58 = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var maths_js_1 = require_maths();
    var Alphabet = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
    var Lookup = null;
    function getAlpha(letter) {
      if (Lookup == null) {
        Lookup = {};
        for (let i = 0; i < Alphabet.length; i++) {
          Lookup[Alphabet[i]] = BigInt(i);
        }
      }
      const result = Lookup[letter];
      (0, errors_js_1.assertArgument)(result != null, `invalid base58 value`, "letter", letter);
      return result;
    }
    var BN_012 = BigInt(0);
    var BN_582 = BigInt(58);
    function encodeBase582(_value) {
      const bytes3 = (0, data_js_1.getBytes)(_value);
      let value = (0, maths_js_1.toBigInt)(bytes3);
      let result = "";
      while (value) {
        result = Alphabet[Number(value % BN_582)] + result;
        value /= BN_582;
      }
      for (let i = 0; i < bytes3.length; i++) {
        if (bytes3[i]) {
          break;
        }
        result = Alphabet[0] + result;
      }
      return result;
    }
    exports.encodeBase58 = encodeBase582;
    function decodeBase582(value) {
      let result = BN_012;
      for (let i = 0; i < value.length; i++) {
        result *= BN_582;
        result += getAlpha(value[i]);
      }
      return result;
    }
    exports.decodeBase58 = decodeBase582;
  }
});

// node_modules/ethers/lib.commonjs/utils/base64-browser.js
var require_base64_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/base64-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeBase64 = exports.decodeBase64 = void 0;
    var data_js_1 = require_data();
    function decodeBase642(textData) {
      textData = atob(textData);
      const data = new Uint8Array(textData.length);
      for (let i = 0; i < textData.length; i++) {
        data[i] = textData.charCodeAt(i);
      }
      return (0, data_js_1.getBytes)(data);
    }
    exports.decodeBase64 = decodeBase642;
    function encodeBase642(_data4) {
      const data = (0, data_js_1.getBytes)(_data4);
      let textData = "";
      for (let i = 0; i < data.length; i++) {
        textData += String.fromCharCode(data[i]);
      }
      return btoa(textData);
    }
    exports.encodeBase64 = encodeBase642;
  }
});

// node_modules/ethers/lib.commonjs/utils/events.js
var require_events = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/events.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EventPayload = void 0;
    var properties_js_1 = require_properties();
    var _listener2;
    var EventPayload2 = class {
      /**
       *  Create a new **EventPayload** for %%emitter%% with
       *  the %%listener%% and for %%filter%%.
       */
      constructor(emitter, listener, filter) {
        /**
         *  The event filter.
         */
        __publicField(this, "filter");
        /**
         *  The **EventEmitterable**.
         */
        __publicField(this, "emitter");
        __privateAdd(this, _listener2);
        __privateSet(this, _listener2, listener);
        (0, properties_js_1.defineProperties)(this, { emitter, filter });
      }
      /**
       *  Unregister the triggered listener for future events.
       */
      async removeListener() {
        if (__privateGet(this, _listener2) == null) {
          return;
        }
        await this.emitter.off(this.filter, __privateGet(this, _listener2));
      }
    };
    _listener2 = new WeakMap();
    exports.EventPayload = EventPayload2;
  }
});

// node_modules/ethers/lib.commonjs/utils/utf8.js
var require_utf8 = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/utf8.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8CodePoints = exports.toUtf8String = exports.toUtf8Bytes = exports.Utf8ErrorFuncs = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    function errorFunc3(reason, offset, bytes3, output2, badCodepoint) {
      (0, errors_js_1.assertArgument)(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes3);
    }
    function ignoreFunc3(reason, offset, bytes3, output2, badCodepoint) {
      if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
        let i = 0;
        for (let o = offset + 1; o < bytes3.length; o++) {
          if (bytes3[o] >> 6 !== 2) {
            break;
          }
          i++;
        }
        return i;
      }
      if (reason === "OVERRUN") {
        return bytes3.length - offset - 1;
      }
      return 0;
    }
    function replaceFunc3(reason, offset, bytes3, output2, badCodepoint) {
      if (reason === "OVERLONG") {
        (0, errors_js_1.assertArgument)(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
        output2.push(badCodepoint);
        return 0;
      }
      output2.push(65533);
      return ignoreFunc3(reason, offset, bytes3, output2, badCodepoint);
    }
    exports.Utf8ErrorFuncs = Object.freeze({
      error: errorFunc3,
      ignore: ignoreFunc3,
      replace: replaceFunc3
    });
    function getUtf8CodePoints3(_bytes, onError) {
      if (onError == null) {
        onError = exports.Utf8ErrorFuncs.error;
      }
      const bytes3 = (0, data_js_1.getBytes)(_bytes, "bytes");
      const result = [];
      let i = 0;
      while (i < bytes3.length) {
        const c = bytes3[i++];
        if (c >> 7 === 0) {
          result.push(c);
          continue;
        }
        let extraLength = null;
        let overlongMask = null;
        if ((c & 224) === 192) {
          extraLength = 1;
          overlongMask = 127;
        } else if ((c & 240) === 224) {
          extraLength = 2;
          overlongMask = 2047;
        } else if ((c & 248) === 240) {
          extraLength = 3;
          overlongMask = 65535;
        } else {
          if ((c & 192) === 128) {
            i += onError("UNEXPECTED_CONTINUE", i - 1, bytes3, result);
          } else {
            i += onError("BAD_PREFIX", i - 1, bytes3, result);
          }
          continue;
        }
        if (i - 1 + extraLength >= bytes3.length) {
          i += onError("OVERRUN", i - 1, bytes3, result);
          continue;
        }
        let res = c & (1 << 8 - extraLength - 1) - 1;
        for (let j = 0; j < extraLength; j++) {
          let nextChar = bytes3[i];
          if ((nextChar & 192) != 128) {
            i += onError("MISSING_CONTINUE", i, bytes3, result);
            res = null;
            break;
          }
          ;
          res = res << 6 | nextChar & 63;
          i++;
        }
        if (res === null) {
          continue;
        }
        if (res > 1114111) {
          i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes3, result, res);
          continue;
        }
        if (res >= 55296 && res <= 57343) {
          i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes3, result, res);
          continue;
        }
        if (res <= overlongMask) {
          i += onError("OVERLONG", i - 1 - extraLength, bytes3, result, res);
          continue;
        }
        result.push(res);
      }
      return result;
    }
    function toUtf8Bytes3(str, form) {
      (0, errors_js_1.assertArgument)(typeof str === "string", "invalid string value", "str", str);
      if (form != null) {
        (0, errors_js_1.assertNormalize)(form);
        str = str.normalize(form);
      }
      let result = [];
      for (let i = 0; i < str.length; i++) {
        const c = str.charCodeAt(i);
        if (c < 128) {
          result.push(c);
        } else if (c < 2048) {
          result.push(c >> 6 | 192);
          result.push(c & 63 | 128);
        } else if ((c & 64512) == 55296) {
          i++;
          const c2 = str.charCodeAt(i);
          (0, errors_js_1.assertArgument)(i < str.length && (c2 & 64512) === 56320, "invalid surrogate pair", "str", str);
          const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
          result.push(pair >> 18 | 240);
          result.push(pair >> 12 & 63 | 128);
          result.push(pair >> 6 & 63 | 128);
          result.push(pair & 63 | 128);
        } else {
          result.push(c >> 12 | 224);
          result.push(c >> 6 & 63 | 128);
          result.push(c & 63 | 128);
        }
      }
      return new Uint8Array(result);
    }
    exports.toUtf8Bytes = toUtf8Bytes3;
    function _toUtf8String3(codePoints) {
      return codePoints.map((codePoint) => {
        if (codePoint <= 65535) {
          return String.fromCharCode(codePoint);
        }
        codePoint -= 65536;
        return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
      }).join("");
    }
    function toUtf8String3(bytes3, onError) {
      return _toUtf8String3(getUtf8CodePoints3(bytes3, onError));
    }
    exports.toUtf8String = toUtf8String3;
    function toUtf8CodePoints3(str, form) {
      return getUtf8CodePoints3(toUtf8Bytes3(str, form));
    }
    exports.toUtf8CodePoints = toUtf8CodePoints3;
  }
});

// node_modules/ethers/lib.commonjs/utils/geturl-browser.js
var require_geturl_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/geturl-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getUrl = exports.createGetUrl = void 0;
    var errors_js_1 = require_errors();
    function createGetUrl2(options) {
      async function getUrl2(req, _signal2) {
        (0, errors_js_1.assert)(_signal2 == null || !_signal2.cancelled, "request cancelled before sending", "CANCELLED");
        const protocol = req.url.split(":")[0].toLowerCase();
        (0, errors_js_1.assert)(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
          info: { protocol },
          operation: "request"
        });
        (0, errors_js_1.assert)(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
          operation: "request"
        });
        let error = null;
        const controller = new AbortController();
        const timer = setTimeout(() => {
          error = (0, errors_js_1.makeError)("request timeout", "TIMEOUT");
          controller.abort();
        }, req.timeout);
        if (_signal2) {
          _signal2.addListener(() => {
            error = (0, errors_js_1.makeError)("request cancelled", "CANCELLED");
            controller.abort();
          });
        }
        const init = {
          method: req.method,
          headers: new Headers(Array.from(req)),
          body: req.body || void 0,
          signal: controller.signal
        };
        let resp;
        try {
          resp = await fetch(req.url, init);
        } catch (_error2) {
          clearTimeout(timer);
          if (error) {
            throw error;
          }
          throw _error2;
        }
        clearTimeout(timer);
        const headers = {};
        resp.headers.forEach((value, key) => {
          headers[key.toLowerCase()] = value;
        });
        const respBody = await resp.arrayBuffer();
        const body = respBody == null ? null : new Uint8Array(respBody);
        return {
          statusCode: resp.status,
          statusMessage: resp.statusText,
          headers,
          body
        };
      }
      return getUrl2;
    }
    exports.createGetUrl = createGetUrl2;
    var defaultGetUrl2 = createGetUrl2({});
    async function getUrl(req, _signal2) {
      return defaultGetUrl2(req, _signal2);
    }
    exports.getUrl = getUrl;
  }
});

// node_modules/ethers/lib.commonjs/utils/fetch.js
var require_fetch = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/fetch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchResponse = exports.FetchRequest = exports.FetchCancelSignal = void 0;
    var base64_js_1 = require_base64_browser();
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var properties_js_1 = require_properties();
    var utf8_js_1 = require_utf8();
    var geturl_js_1 = require_geturl_browser();
    var MAX_ATTEMPTS2 = 12;
    var SLOT_INTERVAL2 = 250;
    var defaultGetUrlFunc2 = (0, geturl_js_1.createGetUrl)();
    var reData2 = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
    var reIpfs2 = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
    var locked7 = false;
    async function dataGatewayFunc2(url, signal) {
      try {
        const match = url.match(reData2);
        if (!match) {
          throw new Error("invalid data");
        }
        return new FetchResponse2(200, "OK", {
          "content-type": match[1] || "text/plain"
        }, match[2] ? (0, base64_js_1.decodeBase64)(match[3]) : unpercent2(match[3]));
      } catch (error) {
        return new FetchResponse2(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest2(url));
      }
    }
    function getIpfsGatewayFunc2(baseUrl) {
      async function gatewayIpfs(url, signal) {
        try {
          const match = url.match(reIpfs2);
          if (!match) {
            throw new Error("invalid link");
          }
          return new FetchRequest2(`${baseUrl}${match[2]}`);
        } catch (error) {
          return new FetchResponse2(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest2(url));
        }
      }
      return gatewayIpfs;
    }
    var Gateways2 = {
      "data": dataGatewayFunc2,
      "ipfs": getIpfsGatewayFunc2("https://gateway.ipfs.io/ipfs/")
    };
    var fetchSignals2 = /* @__PURE__ */ new WeakMap();
    var _listeners2, _cancelled2;
    var FetchCancelSignal2 = class {
      constructor(request) {
        __privateAdd(this, _listeners2);
        __privateAdd(this, _cancelled2);
        __privateSet(this, _listeners2, []);
        __privateSet(this, _cancelled2, false);
        fetchSignals2.set(request, () => {
          if (__privateGet(this, _cancelled2)) {
            return;
          }
          __privateSet(this, _cancelled2, true);
          for (const listener of __privateGet(this, _listeners2)) {
            setTimeout(() => {
              listener();
            }, 0);
          }
          __privateSet(this, _listeners2, []);
        });
      }
      addListener(listener) {
        (0, errors_js_1.assert)(!__privateGet(this, _cancelled2), "singal already cancelled", "UNSUPPORTED_OPERATION", {
          operation: "fetchCancelSignal.addCancelListener"
        });
        __privateGet(this, _listeners2).push(listener);
      }
      get cancelled() {
        return __privateGet(this, _cancelled2);
      }
      checkSignal() {
        (0, errors_js_1.assert)(!this.cancelled, "cancelled", "CANCELLED", {});
      }
    };
    _listeners2 = new WeakMap();
    _cancelled2 = new WeakMap();
    exports.FetchCancelSignal = FetchCancelSignal2;
    function checkSignal2(signal) {
      if (signal == null) {
        throw new Error("missing signal; should not happen");
      }
      signal.checkSignal();
      return signal;
    }
    var _allowInsecure2, _gzip2, _headers3, _method2, _timeout2, _url2, _body3, _bodyType2, _creds2, _preflight2, _process2, _retry2, _signal2, _throttle2, _getUrlFunc2, _FetchRequest_instances2, send_fn2;
    var _FetchRequest2 = class _FetchRequest2 {
      /**
       *  Create a new FetchRequest instance with default values.
       *
       *  Once created, each property may be set before issuing a
       *  ``.send()`` to make the request.
       */
      constructor(url) {
        __privateAdd(this, _FetchRequest_instances2);
        __privateAdd(this, _allowInsecure2);
        __privateAdd(this, _gzip2);
        __privateAdd(this, _headers3);
        __privateAdd(this, _method2);
        __privateAdd(this, _timeout2);
        __privateAdd(this, _url2);
        __privateAdd(this, _body3);
        __privateAdd(this, _bodyType2);
        __privateAdd(this, _creds2);
        // Hooks
        __privateAdd(this, _preflight2);
        __privateAdd(this, _process2);
        __privateAdd(this, _retry2);
        __privateAdd(this, _signal2);
        __privateAdd(this, _throttle2);
        __privateAdd(this, _getUrlFunc2);
        __privateSet(this, _url2, String(url));
        __privateSet(this, _allowInsecure2, false);
        __privateSet(this, _gzip2, true);
        __privateSet(this, _headers3, {});
        __privateSet(this, _method2, "");
        __privateSet(this, _timeout2, 3e5);
        __privateSet(this, _throttle2, {
          slotInterval: SLOT_INTERVAL2,
          maxAttempts: MAX_ATTEMPTS2
        });
        __privateSet(this, _getUrlFunc2, null);
      }
      /**
       *  The fetch URL to request.
       */
      get url() {
        return __privateGet(this, _url2);
      }
      set url(url) {
        __privateSet(this, _url2, String(url));
      }
      /**
       *  The fetch body, if any, to send as the request body. //(default: null)//
       *
       *  When setting a body, the intrinsic ``Content-Type`` is automatically
       *  set and will be used if **not overridden** by setting a custom
       *  header.
       *
       *  If %%body%% is null, the body is cleared (along with the
       *  intrinsic ``Content-Type``).
       *
       *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
       *  ``text/plain``.
       *
       *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
       *  ``application/octet-stream``.
       *
       *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
       *  set to ``application/json``.
       */
      get body() {
        if (__privateGet(this, _body3) == null) {
          return null;
        }
        return new Uint8Array(__privateGet(this, _body3));
      }
      set body(body) {
        if (body == null) {
          __privateSet(this, _body3, void 0);
          __privateSet(this, _bodyType2, void 0);
        } else if (typeof body === "string") {
          __privateSet(this, _body3, (0, utf8_js_1.toUtf8Bytes)(body));
          __privateSet(this, _bodyType2, "text/plain");
        } else if (body instanceof Uint8Array) {
          __privateSet(this, _body3, body);
          __privateSet(this, _bodyType2, "application/octet-stream");
        } else if (typeof body === "object") {
          __privateSet(this, _body3, (0, utf8_js_1.toUtf8Bytes)(JSON.stringify(body)));
          __privateSet(this, _bodyType2, "application/json");
        } else {
          throw new Error("invalid body");
        }
      }
      /**
       *  Returns true if the request has a body.
       */
      hasBody() {
        return __privateGet(this, _body3) != null;
      }
      /**
       *  The HTTP method to use when requesting the URI. If no method
       *  has been explicitly set, then ``GET`` is used if the body is
       *  null and ``POST`` otherwise.
       */
      get method() {
        if (__privateGet(this, _method2)) {
          return __privateGet(this, _method2);
        }
        if (this.hasBody()) {
          return "POST";
        }
        return "GET";
      }
      set method(method) {
        if (method == null) {
          method = "";
        }
        __privateSet(this, _method2, String(method).toUpperCase());
      }
      /**
       *  The headers that will be used when requesting the URI. All
       *  keys are lower-case.
       *
       *  This object is a copy, so any changes will **NOT** be reflected
       *  in the ``FetchRequest``.
       *
       *  To set a header entry, use the ``setHeader`` method.
       */
      get headers() {
        const headers = Object.assign({}, __privateGet(this, _headers3));
        if (__privateGet(this, _creds2)) {
          headers["authorization"] = `Basic ${(0, base64_js_1.encodeBase64)((0, utf8_js_1.toUtf8Bytes)(__privateGet(this, _creds2)))}`;
        }
        ;
        if (this.allowGzip) {
          headers["accept-encoding"] = "gzip";
        }
        if (headers["content-type"] == null && __privateGet(this, _bodyType2)) {
          headers["content-type"] = __privateGet(this, _bodyType2);
        }
        if (this.body) {
          headers["content-length"] = String(this.body.length);
        }
        return headers;
      }
      /**
       *  Get the header for %%key%%, ignoring case.
       */
      getHeader(key) {
        return this.headers[key.toLowerCase()];
      }
      /**
       *  Set the header for %%key%% to %%value%%. All values are coerced
       *  to a string.
       */
      setHeader(key, value) {
        __privateGet(this, _headers3)[String(key).toLowerCase()] = String(value);
      }
      /**
       *  Clear all headers, resetting all intrinsic headers.
       */
      clearHeaders() {
        __privateSet(this, _headers3, {});
      }
      [Symbol.iterator]() {
        const headers = this.headers;
        const keys = Object.keys(headers);
        let index = 0;
        return {
          next: () => {
            if (index < keys.length) {
              const key = keys[index++];
              return {
                value: [key, headers[key]],
                done: false
              };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  The value that will be sent for the ``Authorization`` header.
       *
       *  To set the credentials, use the ``setCredentials`` method.
       */
      get credentials() {
        return __privateGet(this, _creds2) || null;
      }
      /**
       *  Sets an ``Authorization`` for %%username%% with %%password%%.
       */
      setCredentials(username, password) {
        (0, errors_js_1.assertArgument)(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
        __privateSet(this, _creds2, `${username}:${password}`);
      }
      /**
       *  Enable and request gzip-encoded responses. The response will
       *  automatically be decompressed. //(default: true)//
       */
      get allowGzip() {
        return __privateGet(this, _gzip2);
      }
      set allowGzip(value) {
        __privateSet(this, _gzip2, !!value);
      }
      /**
       *  Allow ``Authentication`` credentials to be sent over insecure
       *  channels. //(default: false)//
       */
      get allowInsecureAuthentication() {
        return !!__privateGet(this, _allowInsecure2);
      }
      set allowInsecureAuthentication(value) {
        __privateSet(this, _allowInsecure2, !!value);
      }
      /**
       *  The timeout (in milliseconds) to wait for a complete response.
       *  //(default: 5 minutes)//
       */
      get timeout() {
        return __privateGet(this, _timeout2);
      }
      set timeout(timeout) {
        (0, errors_js_1.assertArgument)(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
        __privateSet(this, _timeout2, timeout);
      }
      /**
       *  This function is called prior to each request, for example
       *  during a redirection or retry in case of server throttling.
       *
       *  This offers an opportunity to populate headers or update
       *  content before sending a request.
       */
      get preflightFunc() {
        return __privateGet(this, _preflight2) || null;
      }
      set preflightFunc(preflight) {
        __privateSet(this, _preflight2, preflight);
      }
      /**
       *  This function is called after each response, offering an
       *  opportunity to provide client-level throttling or updating
       *  response data.
       *
       *  Any error thrown in this causes the ``send()`` to throw.
       *
       *  To schedule a retry attempt (assuming the maximum retry limit
       *  has not been reached), use [[response.throwThrottleError]].
       */
      get processFunc() {
        return __privateGet(this, _process2) || null;
      }
      set processFunc(process2) {
        __privateSet(this, _process2, process2);
      }
      /**
       *  This function is called on each retry attempt.
       */
      get retryFunc() {
        return __privateGet(this, _retry2) || null;
      }
      set retryFunc(retry) {
        __privateSet(this, _retry2, retry);
      }
      /**
       *  This function is called to fetch content from HTTP and
       *  HTTPS URLs and is platform specific (e.g. nodejs vs
       *  browsers).
       *
       *  This is by default the currently registered global getUrl
       *  function, which can be changed using [[registerGetUrl]].
       *  If this has been set, setting is to ``null`` will cause
       *  this FetchRequest (and any future clones) to revert back to
       *  using the currently registered global getUrl function.
       *
       *  Setting this is generally not necessary, but may be useful
       *  for developers that wish to intercept requests or to
       *  configurege a proxy or other agent.
       */
      get getUrlFunc() {
        return __privateGet(this, _getUrlFunc2) || defaultGetUrlFunc2;
      }
      set getUrlFunc(value) {
        __privateSet(this, _getUrlFunc2, value);
      }
      toString() {
        return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${__privateGet(this, _body3) ? (0, data_js_1.hexlify)(__privateGet(this, _body3)) : "null"}>`;
      }
      /**
       *  Update the throttle parameters used to determine maximum
       *  attempts and exponential-backoff properties.
       */
      setThrottleParams(params) {
        if (params.slotInterval != null) {
          __privateGet(this, _throttle2).slotInterval = params.slotInterval;
        }
        if (params.maxAttempts != null) {
          __privateGet(this, _throttle2).maxAttempts = params.maxAttempts;
        }
      }
      /**
       *  Resolves to the response by sending the request.
       */
      send() {
        (0, errors_js_1.assert)(__privateGet(this, _signal2) == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
        __privateSet(this, _signal2, new FetchCancelSignal2(this));
        return __privateMethod(this, _FetchRequest_instances2, send_fn2).call(this, 0, getTime2() + this.timeout, 0, this, new FetchResponse2(0, "", {}, null, this));
      }
      /**
       *  Cancels the inflight response, causing a ``CANCELLED``
       *  error to be rejected from the [[send]].
       */
      cancel() {
        (0, errors_js_1.assert)(__privateGet(this, _signal2) != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
        const signal = fetchSignals2.get(this);
        if (!signal) {
          throw new Error("missing signal; should not happen");
        }
        signal();
      }
      /**
       *  Returns a new [[FetchRequest]] that represents the redirection
       *  to %%location%%.
       */
      redirect(location) {
        const current = this.url.split(":")[0].toLowerCase();
        const target = location.split(":")[0].toLowerCase();
        (0, errors_js_1.assert)(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
          operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
        });
        const req = new _FetchRequest2(location);
        req.method = "GET";
        req.allowGzip = this.allowGzip;
        req.timeout = this.timeout;
        __privateSet(req, _headers3, Object.assign({}, __privateGet(this, _headers3)));
        if (__privateGet(this, _body3)) {
          __privateSet(req, _body3, new Uint8Array(__privateGet(this, _body3)));
        }
        __privateSet(req, _bodyType2, __privateGet(this, _bodyType2));
        return req;
      }
      /**
       *  Create a new copy of this request.
       */
      clone() {
        const clone = new _FetchRequest2(this.url);
        __privateSet(clone, _method2, __privateGet(this, _method2));
        if (__privateGet(this, _body3)) {
          __privateSet(clone, _body3, __privateGet(this, _body3));
        }
        __privateSet(clone, _bodyType2, __privateGet(this, _bodyType2));
        __privateSet(clone, _headers3, Object.assign({}, __privateGet(this, _headers3)));
        __privateSet(clone, _creds2, __privateGet(this, _creds2));
        if (this.allowGzip) {
          clone.allowGzip = true;
        }
        clone.timeout = this.timeout;
        if (this.allowInsecureAuthentication) {
          clone.allowInsecureAuthentication = true;
        }
        __privateSet(clone, _preflight2, __privateGet(this, _preflight2));
        __privateSet(clone, _process2, __privateGet(this, _process2));
        __privateSet(clone, _retry2, __privateGet(this, _retry2));
        __privateSet(clone, _throttle2, Object.assign({}, __privateGet(this, _throttle2)));
        __privateSet(clone, _getUrlFunc2, __privateGet(this, _getUrlFunc2));
        return clone;
      }
      /**
       *  Locks all static configuration for gateways and FetchGetUrlFunc
       *  registration.
       */
      static lockConfig() {
        locked7 = true;
      }
      /**
       *  Get the current Gateway function for %%scheme%%.
       */
      static getGateway(scheme) {
        return Gateways2[scheme.toLowerCase()] || null;
      }
      /**
       *  Use the %%func%% when fetching URIs using %%scheme%%.
       *
       *  This method affects all requests globally.
       *
       *  If [[lockConfig]] has been called, no change is made and this
       *  throws.
       */
      static registerGateway(scheme, func) {
        scheme = scheme.toLowerCase();
        if (scheme === "http" || scheme === "https") {
          throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
        }
        if (locked7) {
          throw new Error("gateways locked");
        }
        Gateways2[scheme] = func;
      }
      /**
       *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
       *
       *  This method affects all requests globally.
       *
       *  If [[lockConfig]] has been called, no change is made and this
       *  throws.
       */
      static registerGetUrl(getUrl) {
        if (locked7) {
          throw new Error("gateways locked");
        }
        defaultGetUrlFunc2 = getUrl;
      }
      /**
       *  Creates a getUrl function that fetches content from HTTP and
       *  HTTPS URLs.
       *
       *  The available %%options%% are dependent on the platform
       *  implementation of the default getUrl function.
       *
       *  This is not generally something that is needed, but is useful
       *  when trying to customize simple behaviour when fetching HTTP
       *  content.
       */
      static createGetUrlFunc(options) {
        return (0, geturl_js_1.createGetUrl)(options);
      }
      /**
       *  Creates a function that can "fetch" data URIs.
       *
       *  Note that this is automatically done internally to support
       *  data URIs, so it is not necessary to register it.
       *
       *  This is not generally something that is needed, but may
       *  be useful in a wrapper to perfom custom data URI functionality.
       */
      static createDataGateway() {
        return dataGatewayFunc2;
      }
      /**
       *  Creates a function that will fetch IPFS (unvalidated) from
       *  a custom gateway baseUrl.
       *
       *  The default IPFS gateway used internally is
       *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
       */
      static createIpfsGatewayFunc(baseUrl) {
        return getIpfsGatewayFunc2(baseUrl);
      }
    };
    _allowInsecure2 = new WeakMap();
    _gzip2 = new WeakMap();
    _headers3 = new WeakMap();
    _method2 = new WeakMap();
    _timeout2 = new WeakMap();
    _url2 = new WeakMap();
    _body3 = new WeakMap();
    _bodyType2 = new WeakMap();
    _creds2 = new WeakMap();
    _preflight2 = new WeakMap();
    _process2 = new WeakMap();
    _retry2 = new WeakMap();
    _signal2 = new WeakMap();
    _throttle2 = new WeakMap();
    _getUrlFunc2 = new WeakMap();
    _FetchRequest_instances2 = new WeakSet();
    send_fn2 = async function(attempt, expires, delay, _request3, _response) {
      var _a2, _b, _c;
      if (attempt >= __privateGet(this, _throttle2).maxAttempts) {
        return _response.makeServerError("exceeded maximum retry limit");
      }
      (0, errors_js_1.assert)(getTime2() <= expires, "timeout", "TIMEOUT", {
        operation: "request.send",
        reason: "timeout",
        request: _request3
      });
      if (delay > 0) {
        await wait2(delay);
      }
      let req = this.clone();
      const scheme = (req.url.split(":")[0] || "").toLowerCase();
      if (scheme in Gateways2) {
        const result = await Gateways2[scheme](req.url, checkSignal2(__privateGet(_request3, _signal2)));
        if (result instanceof FetchResponse2) {
          let response2 = result;
          if (this.processFunc) {
            checkSignal2(__privateGet(_request3, _signal2));
            try {
              response2 = await this.processFunc(req, response2);
            } catch (error) {
              if (error.throttle == null || typeof error.stall !== "number") {
                response2.makeServerError("error in post-processing function", error).assertOk();
              }
            }
          }
          return response2;
        }
        req = result;
      }
      if (this.preflightFunc) {
        req = await this.preflightFunc(req);
      }
      const resp = await this.getUrlFunc(req, checkSignal2(__privateGet(_request3, _signal2)));
      let response = new FetchResponse2(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request3);
      if (response.statusCode === 301 || response.statusCode === 302) {
        try {
          const location = response.headers.location || "";
          return __privateMethod(_a2 = req.redirect(location), _FetchRequest_instances2, send_fn2).call(_a2, attempt + 1, expires, 0, _request3, response);
        } catch (error) {
        }
        return response;
      } else if (response.statusCode === 429) {
        if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {
          const retryAfter = response.headers["retry-after"];
          let delay2 = __privateGet(this, _throttle2).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
          if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
            delay2 = parseInt(retryAfter);
          }
          return __privateMethod(_b = req.clone(), _FetchRequest_instances2, send_fn2).call(_b, attempt + 1, expires, delay2, _request3, response);
        }
      }
      if (this.processFunc) {
        checkSignal2(__privateGet(_request3, _signal2));
        try {
          response = await this.processFunc(req, response);
        } catch (error) {
          if (error.throttle == null || typeof error.stall !== "number") {
            response.makeServerError("error in post-processing function", error).assertOk();
          }
          let delay2 = __privateGet(this, _throttle2).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
          ;
          if (error.stall >= 0) {
            delay2 = error.stall;
          }
          return __privateMethod(_c = req.clone(), _FetchRequest_instances2, send_fn2).call(_c, attempt + 1, expires, delay2, _request3, response);
        }
      }
      return response;
    };
    var FetchRequest2 = _FetchRequest2;
    exports.FetchRequest = FetchRequest2;
    var _statusCode2, _statusMessage2, _headers4, _body4, _request2, _error2;
    var _FetchResponse2 = class _FetchResponse2 {
      constructor(statusCode, statusMessage, headers, body, request) {
        __privateAdd(this, _statusCode2);
        __privateAdd(this, _statusMessage2);
        __privateAdd(this, _headers4);
        __privateAdd(this, _body4);
        __privateAdd(this, _request2);
        __privateAdd(this, _error2);
        __privateSet(this, _statusCode2, statusCode);
        __privateSet(this, _statusMessage2, statusMessage);
        __privateSet(this, _headers4, Object.keys(headers).reduce((accum, k) => {
          accum[k.toLowerCase()] = String(headers[k]);
          return accum;
        }, {}));
        __privateSet(this, _body4, body == null ? null : new Uint8Array(body));
        __privateSet(this, _request2, request || null);
        __privateSet(this, _error2, { message: "" });
      }
      toString() {
        return `<FetchResponse status=${this.statusCode} body=${__privateGet(this, _body4) ? (0, data_js_1.hexlify)(__privateGet(this, _body4)) : "null"}>`;
      }
      /**
       *  The response status code.
       */
      get statusCode() {
        return __privateGet(this, _statusCode2);
      }
      /**
       *  The response status message.
       */
      get statusMessage() {
        return __privateGet(this, _statusMessage2);
      }
      /**
       *  The response headers. All keys are lower-case.
       */
      get headers() {
        return Object.assign({}, __privateGet(this, _headers4));
      }
      /**
       *  The response body, or ``null`` if there was no body.
       */
      get body() {
        return __privateGet(this, _body4) == null ? null : new Uint8Array(__privateGet(this, _body4));
      }
      /**
       *  The response body as a UTF-8 encoded string, or the empty
       *  string (i.e. ``""``) if there was no body.
       *
       *  An error is thrown if the body is invalid UTF-8 data.
       */
      get bodyText() {
        try {
          return __privateGet(this, _body4) == null ? "" : (0, utf8_js_1.toUtf8String)(__privateGet(this, _body4));
        } catch (error) {
          (0, errors_js_1.assert)(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
            operation: "bodyText",
            info: { response: this }
          });
        }
      }
      /**
       *  The response body, decoded as JSON.
       *
       *  An error is thrown if the body is invalid JSON-encoded data
       *  or if there was no body.
       */
      get bodyJson() {
        try {
          return JSON.parse(this.bodyText);
        } catch (error) {
          (0, errors_js_1.assert)(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
            operation: "bodyJson",
            info: { response: this }
          });
        }
      }
      [Symbol.iterator]() {
        const headers = this.headers;
        const keys = Object.keys(headers);
        let index = 0;
        return {
          next: () => {
            if (index < keys.length) {
              const key = keys[index++];
              return {
                value: [key, headers[key]],
                done: false
              };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  Return a Response with matching headers and body, but with
       *  an error status code (i.e. 599) and %%message%% with an
       *  optional %%error%%.
       */
      makeServerError(message, error) {
        let statusMessage;
        if (!message) {
          message = `${this.statusCode} ${this.statusMessage}`;
          statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
        } else {
          statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
        }
        const response = new _FetchResponse2(599, statusMessage, this.headers, this.body, __privateGet(this, _request2) || void 0);
        __privateSet(response, _error2, { message, error });
        return response;
      }
      /**
       *  If called within a [request.processFunc](FetchRequest-processFunc)
       *  call, causes the request to retry as if throttled for %%stall%%
       *  milliseconds.
       */
      throwThrottleError(message, stall) {
        if (stall == null) {
          stall = -1;
        } else {
          (0, errors_js_1.assertArgument)(Number.isInteger(stall) && stall >= 0, "invalid stall timeout", "stall", stall);
        }
        const error = new Error(message || "throttling requests");
        (0, properties_js_1.defineProperties)(error, { stall, throttle: true });
        throw error;
      }
      /**
       *  Get the header value for %%key%%, ignoring case.
       */
      getHeader(key) {
        return this.headers[key.toLowerCase()];
      }
      /**
       *  Returns true if the response has a body.
       */
      hasBody() {
        return __privateGet(this, _body4) != null;
      }
      /**
       *  The request made for this response.
       */
      get request() {
        return __privateGet(this, _request2);
      }
      /**
       *  Returns true if this response was a success statusCode.
       */
      ok() {
        return __privateGet(this, _error2).message === "" && this.statusCode >= 200 && this.statusCode < 300;
      }
      /**
       *  Throws a ``SERVER_ERROR`` if this response is not ok.
       */
      assertOk() {
        if (this.ok()) {
          return;
        }
        let { message, error } = __privateGet(this, _error2);
        if (message === "") {
          message = `server response ${this.statusCode} ${this.statusMessage}`;
        }
        let requestUrl = null;
        if (this.request) {
          requestUrl = this.request.url;
        }
        let responseBody = null;
        try {
          if (__privateGet(this, _body4)) {
            responseBody = (0, utf8_js_1.toUtf8String)(__privateGet(this, _body4));
          }
        } catch (e) {
        }
        (0, errors_js_1.assert)(false, message, "SERVER_ERROR", {
          request: this.request || "unknown request",
          response: this,
          error,
          info: {
            requestUrl,
            responseBody,
            responseStatus: `${this.statusCode} ${this.statusMessage}`
          }
        });
      }
    };
    _statusCode2 = new WeakMap();
    _statusMessage2 = new WeakMap();
    _headers4 = new WeakMap();
    _body4 = new WeakMap();
    _request2 = new WeakMap();
    _error2 = new WeakMap();
    var FetchResponse2 = _FetchResponse2;
    exports.FetchResponse = FetchResponse2;
    function getTime2() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    function unpercent2(value) {
      return (0, utf8_js_1.toUtf8Bytes)(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
        return String.fromCharCode(parseInt(code, 16));
      }));
    }
    function wait2(delay) {
      return new Promise((resolve) => setTimeout(resolve, delay));
    }
  }
});

// node_modules/ethers/lib.commonjs/utils/fixednumber.js
var require_fixednumber = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/fixednumber.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixedNumber = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var maths_js_1 = require_maths();
    var properties_js_1 = require_properties();
    var BN_N12 = BigInt(-1);
    var BN_012 = BigInt(0);
    var BN_17 = BigInt(1);
    var BN_52 = BigInt(5);
    var _guard4 = {};
    var Zeros4 = "0000";
    while (Zeros4.length < 80) {
      Zeros4 += Zeros4;
    }
    function getTens(decimals) {
      let result = Zeros4;
      while (result.length < decimals) {
        result += result;
      }
      return BigInt("1" + result.substring(0, decimals));
    }
    function checkValue(val, format, safeOp) {
      const width = BigInt(format.width);
      if (format.signed) {
        const limit = BN_17 << width - BN_17;
        (0, errors_js_1.assert)(safeOp == null || val >= -limit && val < limit, "overflow", "NUMERIC_FAULT", {
          operation: safeOp,
          fault: "overflow",
          value: val
        });
        if (val > BN_012) {
          val = (0, maths_js_1.fromTwos)((0, maths_js_1.mask)(val, width), width);
        } else {
          val = -(0, maths_js_1.fromTwos)((0, maths_js_1.mask)(-val, width), width);
        }
      } else {
        const limit = BN_17 << width;
        (0, errors_js_1.assert)(safeOp == null || val >= 0 && val < limit, "overflow", "NUMERIC_FAULT", {
          operation: safeOp,
          fault: "overflow",
          value: val
        });
        val = (val % limit + limit) % limit & limit - BN_17;
      }
      return val;
    }
    function getFormat(value) {
      if (typeof value === "number") {
        value = `fixed128x${value}`;
      }
      let signed2 = true;
      let width = 128;
      let decimals = 18;
      if (typeof value === "string") {
        if (value === "fixed") {
        } else if (value === "ufixed") {
          signed2 = false;
        } else {
          const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
          (0, errors_js_1.assertArgument)(match, "invalid fixed format", "format", value);
          signed2 = match[1] !== "u";
          width = parseInt(match[2]);
          decimals = parseInt(match[3]);
        }
      } else if (value) {
        const v = value;
        const check = (key, type, defaultValue) => {
          if (v[key] == null) {
            return defaultValue;
          }
          (0, errors_js_1.assertArgument)(typeof v[key] === type, "invalid fixed format (" + key + " not " + type + ")", "format." + key, v[key]);
          return v[key];
        };
        signed2 = check("signed", "boolean", signed2);
        width = check("width", "number", width);
        decimals = check("decimals", "number", decimals);
      }
      (0, errors_js_1.assertArgument)(width % 8 === 0, "invalid FixedNumber width (not byte aligned)", "format.width", width);
      (0, errors_js_1.assertArgument)(decimals <= 80, "invalid FixedNumber decimals (too large)", "format.decimals", decimals);
      const name = (signed2 ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
      return { signed: signed2, width, decimals, name };
    }
    function toString(val, decimals) {
      let negative = "";
      if (val < BN_012) {
        negative = "-";
        val *= BN_N12;
      }
      let str = val.toString();
      if (decimals === 0) {
        return negative + str;
      }
      while (str.length <= decimals) {
        str = Zeros4 + str;
      }
      const index = str.length - decimals;
      str = str.substring(0, index) + "." + str.substring(index);
      while (str[0] === "0" && str[1] !== ".") {
        str = str.substring(1);
      }
      while (str[str.length - 1] === "0" && str[str.length - 2] !== ".") {
        str = str.substring(0, str.length - 1);
      }
      return negative + str;
    }
    var _format, _val, _tens, _FixedNumber_instances, checkFormat_fn, checkValue_fn, add_fn, sub_fn, mul_fn, div_fn;
    var _FixedNumber = class _FixedNumber {
      // Use this when changing this file to get some typing info,
      // but then switch to any to mask the internal type
      //constructor(guard: any, value: bigint, format: _FixedFormat) {
      /**
       *  @private
       */
      constructor(guard, value, format) {
        __privateAdd(this, _FixedNumber_instances);
        /**
         *  The specific fixed-point arithmetic field for this value.
         */
        __publicField(this, "format");
        __privateAdd(this, _format);
        // The actual value (accounting for decimals)
        __privateAdd(this, _val);
        // A base-10 value to multiple values by to maintain the magnitude
        __privateAdd(this, _tens);
        /**
         *  This is a property so console.log shows a human-meaningful value.
         *
         *  @private
         */
        __publicField(this, "_value");
        (0, errors_js_1.assertPrivate)(guard, _guard4, "FixedNumber");
        __privateSet(this, _val, value);
        __privateSet(this, _format, format);
        const _value = toString(value, format.decimals);
        (0, properties_js_1.defineProperties)(this, { format: format.name, _value });
        __privateSet(this, _tens, getTens(format.decimals));
      }
      /**
       *  If true, negative values are permitted, otherwise only
       *  positive values and zero are allowed.
       */
      get signed() {
        return __privateGet(this, _format).signed;
      }
      /**
       *  The number of bits available to store the value.
       */
      get width() {
        return __privateGet(this, _format).width;
      }
      /**
       *  The number of decimal places in the fixed-point arithment field.
       */
      get decimals() {
        return __privateGet(this, _format).decimals;
      }
      /**
       *  The value as an integer, based on the smallest unit the
       *  [[decimals]] allow.
       */
      get value() {
        return __privateGet(this, _val);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% added
       *  to %%other%%, ignoring overflow.
       */
      addUnsafe(other) {
        return __privateMethod(this, _FixedNumber_instances, add_fn).call(this, other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% added
       *  to %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */
      add(other) {
        return __privateMethod(this, _FixedNumber_instances, add_fn).call(this, other, "add");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
       *  from %%this%%, ignoring overflow.
       */
      subUnsafe(other) {
        return __privateMethod(this, _FixedNumber_instances, sub_fn).call(this, other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%other%% subtracted
       *  from %%this%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */
      sub(other) {
        return __privateMethod(this, _FixedNumber_instances, sub_fn).call(this, other, "sub");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%, ignoring overflow and underflow (precision loss).
       */
      mulUnsafe(other) {
        return __privateMethod(this, _FixedNumber_instances, mul_fn).call(this, other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs.
       */
      mul(other) {
        return __privateMethod(this, _FixedNumber_instances, mul_fn).call(this, other, "mul");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% multiplied
       *  by %%other%%. A [[NumericFaultError]] is thrown if overflow
       *  occurs or if underflow (precision loss) occurs.
       */
      mulSignal(other) {
        __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, other);
        const value = __privateGet(this, _val) * __privateGet(other, _val);
        (0, errors_js_1.assert)(value % __privateGet(this, _tens) === BN_012, "precision lost during signalling mul", "NUMERIC_FAULT", {
          operation: "mulSignal",
          fault: "underflow",
          value: this
        });
        return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, value / __privateGet(this, _tens), "mulSignal");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%, ignoring underflow (precision loss). A
       *  [[NumericFaultError]] is thrown if overflow occurs.
       */
      divUnsafe(other) {
        return __privateMethod(this, _FixedNumber_instances, div_fn).call(this, other);
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%, ignoring underflow (precision loss). A
       *  [[NumericFaultError]] is thrown if overflow occurs.
       */
      div(other) {
        return __privateMethod(this, _FixedNumber_instances, div_fn).call(this, other, "div");
      }
      /**
       *  Returns a new [[FixedNumber]] with the result of %%this%% divided
       *  by %%other%%. A [[NumericFaultError]] is thrown if underflow
       *  (precision loss) occurs.
       */
      divSignal(other) {
        (0, errors_js_1.assert)(__privateGet(other, _val) !== BN_012, "division by zero", "NUMERIC_FAULT", {
          operation: "div",
          fault: "divide-by-zero",
          value: this
        });
        __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, other);
        const value = __privateGet(this, _val) * __privateGet(this, _tens);
        (0, errors_js_1.assert)(value % __privateGet(other, _val) === BN_012, "precision lost during signalling div", "NUMERIC_FAULT", {
          operation: "divSignal",
          fault: "underflow",
          value: this
        });
        return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, value / __privateGet(other, _val), "divSignal");
      }
      /**
       *  Returns a comparison result between %%this%% and %%other%%.
       *
       *  This is suitable for use in sorting, where ``-1`` implies %%this%%
       *  is smaller, ``1`` implies %%this%% is larger and ``0`` implies
       *  both are equal.
       */
      cmp(other) {
        let a = this.value, b2 = other.value;
        const delta = this.decimals - other.decimals;
        if (delta > 0) {
          b2 *= getTens(delta);
        } else if (delta < 0) {
          a *= getTens(-delta);
        }
        if (a < b2) {
          return -1;
        }
        if (a > b2) {
          return 1;
        }
        return 0;
      }
      /**
       *  Returns true if %%other%% is equal to %%this%%.
       */
      eq(other) {
        return this.cmp(other) === 0;
      }
      /**
       *  Returns true if %%other%% is less than to %%this%%.
       */
      lt(other) {
        return this.cmp(other) < 0;
      }
      /**
       *  Returns true if %%other%% is less than or equal to %%this%%.
       */
      lte(other) {
        return this.cmp(other) <= 0;
      }
      /**
       *  Returns true if %%other%% is greater than to %%this%%.
       */
      gt(other) {
        return this.cmp(other) > 0;
      }
      /**
       *  Returns true if %%other%% is greater than or equal to %%this%%.
       */
      gte(other) {
        return this.cmp(other) >= 0;
      }
      /**
       *  Returns a new [[FixedNumber]] which is the largest **integer**
       *  that is less than or equal to %%this%%.
       *
       *  The decimal component of the result will always be ``0``.
       */
      floor() {
        let val = __privateGet(this, _val);
        if (__privateGet(this, _val) < BN_012) {
          val -= __privateGet(this, _tens) - BN_17;
        }
        val = __privateGet(this, _val) / __privateGet(this, _tens) * __privateGet(this, _tens);
        return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, val, "floor");
      }
      /**
       *  Returns a new [[FixedNumber]] which is the smallest **integer**
       *  that is greater than or equal to %%this%%.
       *
       *  The decimal component of the result will always be ``0``.
       */
      ceiling() {
        let val = __privateGet(this, _val);
        if (__privateGet(this, _val) > BN_012) {
          val += __privateGet(this, _tens) - BN_17;
        }
        val = __privateGet(this, _val) / __privateGet(this, _tens) * __privateGet(this, _tens);
        return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, val, "ceiling");
      }
      /**
       *  Returns a new [[FixedNumber]] with the decimal component
       *  rounded up on ties at %%decimals%% places.
       */
      round(decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        if (decimals >= this.decimals) {
          return this;
        }
        const delta = this.decimals - decimals;
        const bump = BN_52 * getTens(delta - 1);
        let value = this.value + bump;
        const tens = getTens(delta);
        value = value / tens * tens;
        checkValue(value, __privateGet(this, _format), "round");
        return new _FixedNumber(_guard4, value, __privateGet(this, _format));
      }
      /**
       *  Returns true if %%this%% is equal to ``0``.
       */
      isZero() {
        return __privateGet(this, _val) === BN_012;
      }
      /**
       *  Returns true if %%this%% is less than ``0``.
       */
      isNegative() {
        return __privateGet(this, _val) < BN_012;
      }
      /**
       *  Returns the string representation of %%this%%.
       */
      toString() {
        return this._value;
      }
      /**
       *  Returns a float approximation.
       *
       *  Due to IEEE 754 precission (or lack thereof), this function
       *  can only return an approximation and most values will contain
       *  rounding errors.
       */
      toUnsafeFloat() {
        return parseFloat(this.toString());
      }
      /**
       *  Return a new [[FixedNumber]] with the same value but has had
       *  its field set to %%format%%.
       *
       *  This will throw if the value cannot fit into %%format%%.
       */
      toFormat(format) {
        return _FixedNumber.fromString(this.toString(), format);
      }
      /**
       *  Creates a new [[FixedNumber]] for %%value%% divided by
       *  %%decimal%% places with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% (once adjusted
       *  for %%decimals%%) cannot fit in %%format%%, either due to overflow
       *  or underflow (precision loss).
       */
      static fromValue(_value, _decimals, _format2) {
        const decimals = _decimals == null ? 0 : (0, maths_js_1.getNumber)(_decimals);
        const format = getFormat(_format2);
        let value = (0, maths_js_1.getBigInt)(_value, "value");
        const delta = decimals - format.decimals;
        if (delta > 0) {
          const tens = getTens(delta);
          (0, errors_js_1.assert)(value % tens === BN_012, "value loses precision for format", "NUMERIC_FAULT", {
            operation: "fromValue",
            fault: "underflow",
            value: _value
          });
          value /= tens;
        } else if (delta < 0) {
          value *= getTens(-delta);
        }
        checkValue(value, format, "fromValue");
        return new _FixedNumber(_guard4, value, format);
      }
      /**
       *  Creates a new [[FixedNumber]] for %%value%% with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
       *  in %%format%%, either due to overflow or underflow (precision loss).
       */
      static fromString(_value, _format2) {
        const match = _value.match(/^(-?)([0-9]*)\.?([0-9]*)$/);
        (0, errors_js_1.assertArgument)(match && match[2].length + match[3].length > 0, "invalid FixedNumber string value", "value", _value);
        const format = getFormat(_format2);
        let whole = match[2] || "0", decimal = match[3] || "";
        while (decimal.length < format.decimals) {
          decimal += Zeros4;
        }
        (0, errors_js_1.assert)(decimal.substring(format.decimals).match(/^0*$/), "too many decimals for format", "NUMERIC_FAULT", {
          operation: "fromString",
          fault: "underflow",
          value: _value
        });
        decimal = decimal.substring(0, format.decimals);
        const value = BigInt(match[1] + whole + decimal);
        checkValue(value, format, "fromString");
        return new _FixedNumber(_guard4, value, format);
      }
      /**
       *  Creates a new [[FixedNumber]] with the big-endian representation
       *  %%value%% with %%format%%.
       *
       *  This will throw a [[NumericFaultError]] if %%value%% cannot fit
       *  in %%format%% due to overflow.
       */
      static fromBytes(_value, _format2) {
        let value = (0, maths_js_1.toBigInt)((0, data_js_1.getBytes)(_value, "value"));
        const format = getFormat(_format2);
        if (format.signed) {
          value = (0, maths_js_1.fromTwos)(value, format.width);
        }
        checkValue(value, format, "fromBytes");
        return new _FixedNumber(_guard4, value, format);
      }
    };
    _format = new WeakMap();
    _val = new WeakMap();
    _tens = new WeakMap();
    _FixedNumber_instances = new WeakSet();
    checkFormat_fn = function(other) {
      (0, errors_js_1.assertArgument)(this.format === other.format, "incompatible format; use fixedNumber.toFormat", "other", other);
    };
    checkValue_fn = function(val, safeOp) {
      val = checkValue(val, __privateGet(this, _format), safeOp);
      return new _FixedNumber(_guard4, val, __privateGet(this, _format));
    };
    add_fn = function(o, safeOp) {
      __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
      return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) + __privateGet(o, _val), safeOp);
    };
    sub_fn = function(o, safeOp) {
      __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
      return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) - __privateGet(o, _val), safeOp);
    };
    mul_fn = function(o, safeOp) {
      __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
      return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) * __privateGet(o, _val) / __privateGet(this, _tens), safeOp);
    };
    div_fn = function(o, safeOp) {
      (0, errors_js_1.assert)(__privateGet(o, _val) !== BN_012, "division by zero", "NUMERIC_FAULT", {
        operation: "div",
        fault: "divide-by-zero",
        value: this
      });
      __privateMethod(this, _FixedNumber_instances, checkFormat_fn).call(this, o);
      return __privateMethod(this, _FixedNumber_instances, checkValue_fn).call(this, __privateGet(this, _val) * __privateGet(this, _tens) / __privateGet(o, _val), safeOp);
    };
    var FixedNumber3 = _FixedNumber;
    exports.FixedNumber = FixedNumber3;
  }
});

// node_modules/ethers/lib.commonjs/utils/rlp-decode.js
var require_rlp_decode = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/rlp-decode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeRlp = void 0;
    var data_js_1 = require_data();
    var errors_js_1 = require_errors();
    var data_js_2 = require_data();
    function hexlifyByte(value) {
      let result = value.toString(16);
      while (result.length < 2) {
        result = "0" + result;
      }
      return "0x" + result;
    }
    function unarrayifyInteger(data, offset, length) {
      let result = 0;
      for (let i = 0; i < length; i++) {
        result = result * 256 + data[offset + i];
      }
      return result;
    }
    function _decodeChildren(data, offset, childOffset, length) {
      const result = [];
      while (childOffset < offset + 1 + length) {
        const decoded = _decode(data, childOffset);
        result.push(decoded.result);
        childOffset += decoded.consumed;
        (0, errors_js_1.assert)(childOffset <= offset + 1 + length, "child data too short", "BUFFER_OVERRUN", {
          buffer: data,
          length,
          offset
        });
      }
      return { consumed: 1 + length, result };
    }
    function _decode(data, offset) {
      (0, errors_js_1.assert)(data.length !== 0, "data too short", "BUFFER_OVERRUN", {
        buffer: data,
        length: 0,
        offset: 1
      });
      const checkOffset = (offset2) => {
        (0, errors_js_1.assert)(offset2 <= data.length, "data short segment too short", "BUFFER_OVERRUN", {
          buffer: data,
          length: data.length,
          offset: offset2
        });
      };
      if (data[offset] >= 248) {
        const lengthLength = data[offset] - 247;
        checkOffset(offset + 1 + lengthLength);
        const length = unarrayifyInteger(data, offset + 1, lengthLength);
        checkOffset(offset + 1 + lengthLength + length);
        return _decodeChildren(data, offset, offset + 1 + lengthLength, lengthLength + length);
      } else if (data[offset] >= 192) {
        const length = data[offset] - 192;
        checkOffset(offset + 1 + length);
        return _decodeChildren(data, offset, offset + 1, length);
      } else if (data[offset] >= 184) {
        const lengthLength = data[offset] - 183;
        checkOffset(offset + 1 + lengthLength);
        const length = unarrayifyInteger(data, offset + 1, lengthLength);
        checkOffset(offset + 1 + lengthLength + length);
        const result = (0, data_js_1.hexlify)(data.slice(offset + 1 + lengthLength, offset + 1 + lengthLength + length));
        return { consumed: 1 + lengthLength + length, result };
      } else if (data[offset] >= 128) {
        const length = data[offset] - 128;
        checkOffset(offset + 1 + length);
        const result = (0, data_js_1.hexlify)(data.slice(offset + 1, offset + 1 + length));
        return { consumed: 1 + length, result };
      }
      return { consumed: 1, result: hexlifyByte(data[offset]) };
    }
    function decodeRlp2(_data4) {
      const data = (0, data_js_2.getBytes)(_data4, "data");
      const decoded = _decode(data, 0);
      (0, errors_js_1.assertArgument)(decoded.consumed === data.length, "unexpected junk after rlp payload", "data", _data4);
      return decoded.result;
    }
    exports.decodeRlp = decodeRlp2;
  }
});

// node_modules/ethers/lib.commonjs/utils/rlp-encode.js
var require_rlp_encode = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/rlp-encode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeRlp = void 0;
    var data_js_1 = require_data();
    function arrayifyInteger(value) {
      const result = [];
      while (value) {
        result.unshift(value & 255);
        value >>= 8;
      }
      return result;
    }
    function _encode(object2) {
      if (Array.isArray(object2)) {
        let payload = [];
        object2.forEach(function(child) {
          payload = payload.concat(_encode(child));
        });
        if (payload.length <= 55) {
          payload.unshift(192 + payload.length);
          return payload;
        }
        const length2 = arrayifyInteger(payload.length);
        length2.unshift(247 + length2.length);
        return length2.concat(payload);
      }
      const data = Array.prototype.slice.call((0, data_js_1.getBytes)(object2, "object"));
      if (data.length === 1 && data[0] <= 127) {
        return data;
      } else if (data.length <= 55) {
        data.unshift(128 + data.length);
        return data;
      }
      const length = arrayifyInteger(data.length);
      length.unshift(183 + length.length);
      return length.concat(data);
    }
    var nibbles = "0123456789abcdef";
    function encodeRlp2(object2) {
      let result = "0x";
      for (const v of _encode(object2)) {
        result += nibbles[v >> 4];
        result += nibbles[v & 15];
      }
      return result;
    }
    exports.encodeRlp = encodeRlp2;
  }
});

// node_modules/ethers/lib.commonjs/utils/units.js
var require_units = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/units.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parseEther = exports.formatEther = exports.parseUnits = exports.formatUnits = void 0;
    var errors_js_1 = require_errors();
    var fixednumber_js_1 = require_fixednumber();
    var maths_js_1 = require_maths();
    var names = [
      "wei",
      "kwei",
      "mwei",
      "gwei",
      "szabo",
      "finney",
      "ether"
    ];
    function formatUnits2(value, unit) {
      let decimals = 18;
      if (typeof unit === "string") {
        const index = names.indexOf(unit);
        (0, errors_js_1.assertArgument)(index >= 0, "invalid unit", "unit", unit);
        decimals = 3 * index;
      } else if (unit != null) {
        decimals = (0, maths_js_1.getNumber)(unit, "unit");
      }
      return fixednumber_js_1.FixedNumber.fromValue(value, decimals, { decimals, width: 512 }).toString();
    }
    exports.formatUnits = formatUnits2;
    function parseUnits2(value, unit) {
      (0, errors_js_1.assertArgument)(typeof value === "string", "value must be a string", "value", value);
      let decimals = 18;
      if (typeof unit === "string") {
        const index = names.indexOf(unit);
        (0, errors_js_1.assertArgument)(index >= 0, "invalid unit", "unit", unit);
        decimals = 3 * index;
      } else if (unit != null) {
        decimals = (0, maths_js_1.getNumber)(unit, "unit");
      }
      return fixednumber_js_1.FixedNumber.fromString(value, { decimals, width: 512 }).value;
    }
    exports.parseUnits = parseUnits2;
    function formatEther2(wei) {
      return formatUnits2(wei, 18);
    }
    exports.formatEther = formatEther2;
    function parseEther2(ether) {
      return parseUnits2(ether, 18);
    }
    exports.parseEther = parseEther2;
  }
});

// node_modules/ethers/lib.commonjs/utils/uuid.js
var require_uuid = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/uuid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uuidV4 = void 0;
    var data_js_1 = require_data();
    function uuidV42(randomBytes4) {
      const bytes3 = (0, data_js_1.getBytes)(randomBytes4, "randomBytes");
      bytes3[6] = bytes3[6] & 15 | 64;
      bytes3[8] = bytes3[8] & 63 | 128;
      const value = (0, data_js_1.hexlify)(bytes3);
      return [
        value.substring(2, 10),
        value.substring(10, 14),
        value.substring(14, 18),
        value.substring(18, 22),
        value.substring(22, 34)
      ].join("-");
    }
    exports.uuidV4 = uuidV42;
  }
});

// node_modules/ethers/lib.commonjs/utils/index.js
var require_utils = __commonJS({
  "node_modules/ethers/lib.commonjs/utils/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.encodeRlp = exports.decodeRlp = exports.defineProperties = exports.resolveProperties = exports.toQuantity = exports.toBeArray = exports.toBeHex = exports.toNumber = exports.toBigInt = exports.getUint = exports.getNumber = exports.getBigInt = exports.mask = exports.toTwos = exports.fromTwos = exports.FixedNumber = exports.FetchCancelSignal = exports.FetchResponse = exports.FetchRequest = exports.EventPayload = exports.makeError = exports.assertNormalize = exports.assertPrivate = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.isError = exports.isCallException = exports.zeroPadBytes = exports.zeroPadValue = exports.stripZerosLeft = exports.dataSlice = exports.dataLength = exports.concat = exports.hexlify = exports.isBytesLike = exports.isHexString = exports.getBytesCopy = exports.getBytes = exports.encodeBase64 = exports.decodeBase64 = exports.encodeBase58 = exports.decodeBase58 = void 0;
    exports.uuidV4 = exports.Utf8ErrorFuncs = void 0;
    var base58_js_1 = require_base58();
    Object.defineProperty(exports, "decodeBase58", { enumerable: true, get: function() {
      return base58_js_1.decodeBase58;
    } });
    Object.defineProperty(exports, "encodeBase58", { enumerable: true, get: function() {
      return base58_js_1.encodeBase58;
    } });
    var base64_js_1 = require_base64_browser();
    Object.defineProperty(exports, "decodeBase64", { enumerable: true, get: function() {
      return base64_js_1.decodeBase64;
    } });
    Object.defineProperty(exports, "encodeBase64", { enumerable: true, get: function() {
      return base64_js_1.encodeBase64;
    } });
    var data_js_1 = require_data();
    Object.defineProperty(exports, "getBytes", { enumerable: true, get: function() {
      return data_js_1.getBytes;
    } });
    Object.defineProperty(exports, "getBytesCopy", { enumerable: true, get: function() {
      return data_js_1.getBytesCopy;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return data_js_1.isHexString;
    } });
    Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function() {
      return data_js_1.isBytesLike;
    } });
    Object.defineProperty(exports, "hexlify", { enumerable: true, get: function() {
      return data_js_1.hexlify;
    } });
    Object.defineProperty(exports, "concat", { enumerable: true, get: function() {
      return data_js_1.concat;
    } });
    Object.defineProperty(exports, "dataLength", { enumerable: true, get: function() {
      return data_js_1.dataLength;
    } });
    Object.defineProperty(exports, "dataSlice", { enumerable: true, get: function() {
      return data_js_1.dataSlice;
    } });
    Object.defineProperty(exports, "stripZerosLeft", { enumerable: true, get: function() {
      return data_js_1.stripZerosLeft;
    } });
    Object.defineProperty(exports, "zeroPadValue", { enumerable: true, get: function() {
      return data_js_1.zeroPadValue;
    } });
    Object.defineProperty(exports, "zeroPadBytes", { enumerable: true, get: function() {
      return data_js_1.zeroPadBytes;
    } });
    var errors_js_1 = require_errors();
    Object.defineProperty(exports, "isCallException", { enumerable: true, get: function() {
      return errors_js_1.isCallException;
    } });
    Object.defineProperty(exports, "isError", { enumerable: true, get: function() {
      return errors_js_1.isError;
    } });
    Object.defineProperty(exports, "assert", { enumerable: true, get: function() {
      return errors_js_1.assert;
    } });
    Object.defineProperty(exports, "assertArgument", { enumerable: true, get: function() {
      return errors_js_1.assertArgument;
    } });
    Object.defineProperty(exports, "assertArgumentCount", { enumerable: true, get: function() {
      return errors_js_1.assertArgumentCount;
    } });
    Object.defineProperty(exports, "assertPrivate", { enumerable: true, get: function() {
      return errors_js_1.assertPrivate;
    } });
    Object.defineProperty(exports, "assertNormalize", { enumerable: true, get: function() {
      return errors_js_1.assertNormalize;
    } });
    Object.defineProperty(exports, "makeError", { enumerable: true, get: function() {
      return errors_js_1.makeError;
    } });
    var events_js_1 = require_events();
    Object.defineProperty(exports, "EventPayload", { enumerable: true, get: function() {
      return events_js_1.EventPayload;
    } });
    var fetch_js_1 = require_fetch();
    Object.defineProperty(exports, "FetchRequest", { enumerable: true, get: function() {
      return fetch_js_1.FetchRequest;
    } });
    Object.defineProperty(exports, "FetchResponse", { enumerable: true, get: function() {
      return fetch_js_1.FetchResponse;
    } });
    Object.defineProperty(exports, "FetchCancelSignal", { enumerable: true, get: function() {
      return fetch_js_1.FetchCancelSignal;
    } });
    var fixednumber_js_1 = require_fixednumber();
    Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function() {
      return fixednumber_js_1.FixedNumber;
    } });
    var maths_js_1 = require_maths();
    Object.defineProperty(exports, "fromTwos", { enumerable: true, get: function() {
      return maths_js_1.fromTwos;
    } });
    Object.defineProperty(exports, "toTwos", { enumerable: true, get: function() {
      return maths_js_1.toTwos;
    } });
    Object.defineProperty(exports, "mask", { enumerable: true, get: function() {
      return maths_js_1.mask;
    } });
    Object.defineProperty(exports, "getBigInt", { enumerable: true, get: function() {
      return maths_js_1.getBigInt;
    } });
    Object.defineProperty(exports, "getNumber", { enumerable: true, get: function() {
      return maths_js_1.getNumber;
    } });
    Object.defineProperty(exports, "getUint", { enumerable: true, get: function() {
      return maths_js_1.getUint;
    } });
    Object.defineProperty(exports, "toBigInt", { enumerable: true, get: function() {
      return maths_js_1.toBigInt;
    } });
    Object.defineProperty(exports, "toNumber", { enumerable: true, get: function() {
      return maths_js_1.toNumber;
    } });
    Object.defineProperty(exports, "toBeHex", { enumerable: true, get: function() {
      return maths_js_1.toBeHex;
    } });
    Object.defineProperty(exports, "toBeArray", { enumerable: true, get: function() {
      return maths_js_1.toBeArray;
    } });
    Object.defineProperty(exports, "toQuantity", { enumerable: true, get: function() {
      return maths_js_1.toQuantity;
    } });
    var properties_js_1 = require_properties();
    Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function() {
      return properties_js_1.resolveProperties;
    } });
    Object.defineProperty(exports, "defineProperties", { enumerable: true, get: function() {
      return properties_js_1.defineProperties;
    } });
    var rlp_decode_js_1 = require_rlp_decode();
    Object.defineProperty(exports, "decodeRlp", { enumerable: true, get: function() {
      return rlp_decode_js_1.decodeRlp;
    } });
    var rlp_encode_js_1 = require_rlp_encode();
    Object.defineProperty(exports, "encodeRlp", { enumerable: true, get: function() {
      return rlp_encode_js_1.encodeRlp;
    } });
    var units_js_1 = require_units();
    Object.defineProperty(exports, "formatEther", { enumerable: true, get: function() {
      return units_js_1.formatEther;
    } });
    Object.defineProperty(exports, "parseEther", { enumerable: true, get: function() {
      return units_js_1.parseEther;
    } });
    Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function() {
      return units_js_1.formatUnits;
    } });
    Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function() {
      return units_js_1.parseUnits;
    } });
    var utf8_js_1 = require_utf8();
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8Bytes;
    } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8CodePoints;
    } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function() {
      return utf8_js_1.toUtf8String;
    } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return utf8_js_1.Utf8ErrorFuncs;
    } });
    var uuid_js_1 = require_uuid();
    Object.defineProperty(exports, "uuidV4", { enumerable: true, get: function() {
      return uuid_js_1.uuidV4;
    } });
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js
var require_abstract_coder = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/abstract-coder.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Reader = exports.Writer = exports.Coder = exports.checkResultErrors = exports.Result = exports.WordSize = void 0;
    var index_js_1 = require_utils();
    exports.WordSize = 32;
    var Padding2 = new Uint8Array(exports.WordSize);
    var passProperties3 = ["then"];
    var _guard4 = {};
    var resultNames2 = /* @__PURE__ */ new WeakMap();
    function getNames2(result) {
      return resultNames2.get(result);
    }
    function setNames2(result, names) {
      resultNames2.set(result, names);
    }
    function throwError2(name, error) {
      const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
      wrapped.error = error;
      throw wrapped;
    }
    function toObject2(names, items, deep) {
      if (names.indexOf(null) >= 0) {
        return items.map((item, index) => {
          if (item instanceof Result2) {
            return toObject2(getNames2(item), item, deep);
          }
          return item;
        });
      }
      return names.reduce((accum, name, index) => {
        let item = items.getValue(name);
        if (!(name in accum)) {
          if (deep && item instanceof Result2) {
            item = toObject2(getNames2(item), item, deep);
          }
          accum[name] = item;
        }
        return accum;
      }, {});
    }
    var _names2;
    var _Result2 = class _Result2 extends Array {
      /**
       *  @private
       */
      constructor(...args) {
        const guard = args[0];
        let items = args[1];
        let names = (args[2] || []).slice();
        let wrap = true;
        if (guard !== _guard4) {
          items = args;
          names = [];
          wrap = false;
        }
        super(items.length);
        // No longer used; but cannot be removed as it will remove the
        // #private field from the .d.ts which may break backwards
        // compatibility
        __privateAdd(this, _names2);
        items.forEach((item, index) => {
          this[index] = item;
        });
        const nameCounts = names.reduce((accum, name) => {
          if (typeof name === "string") {
            accum.set(name, (accum.get(name) || 0) + 1);
          }
          return accum;
        }, /* @__PURE__ */ new Map());
        setNames2(this, Object.freeze(items.map((item, index) => {
          const name = names[index];
          if (name != null && nameCounts.get(name) === 1) {
            return name;
          }
          return null;
        })));
        __privateSet(this, _names2, []);
        if (__privateGet(this, _names2) == null) {
          void __privateGet(this, _names2);
        }
        if (!wrap) {
          return;
        }
        Object.freeze(this);
        const proxy = new Proxy(this, {
          get: (target, prop, receiver) => {
            if (typeof prop === "string") {
              if (prop.match(/^[0-9]+$/)) {
                const index = (0, index_js_1.getNumber)(prop, "%index");
                if (index < 0 || index >= this.length) {
                  throw new RangeError("out of result range");
                }
                const item = target[index];
                if (item instanceof Error) {
                  throwError2(`index ${index}`, item);
                }
                return item;
              }
              if (passProperties3.indexOf(prop) >= 0) {
                return Reflect.get(target, prop, receiver);
              }
              const value = target[prop];
              if (value instanceof Function) {
                return function(...args2) {
                  return value.apply(this === receiver ? target : this, args2);
                };
              } else if (!(prop in target)) {
                return target.getValue.apply(this === receiver ? target : this, [prop]);
              }
            }
            return Reflect.get(target, prop, receiver);
          }
        });
        setNames2(proxy, getNames2(this));
        return proxy;
      }
      /**
       *  Returns the Result as a normal Array. If %%deep%%, any children
       *  which are Result objects are also converted to a normal Array.
       *
       *  This will throw if there are any outstanding deferred
       *  errors.
       */
      toArray(deep) {
        const result = [];
        this.forEach((item, index) => {
          if (item instanceof Error) {
            throwError2(`index ${index}`, item);
          }
          if (deep && item instanceof _Result2) {
            item = item.toArray(deep);
          }
          result.push(item);
        });
        return result;
      }
      /**
       *  Returns the Result as an Object with each name-value pair. If
       *  %%deep%%, any children which are Result objects are also
       *  converted to an Object.
       *
       *  This will throw if any value is unnamed, or if there are
       *  any outstanding deferred errors.
       */
      toObject(deep) {
        const names = getNames2(this);
        return names.reduce((accum, name, index) => {
          (0, index_js_1.assert)(name != null, `value at index ${index} unnamed`, "UNSUPPORTED_OPERATION", {
            operation: "toObject()"
          });
          return toObject2(names, this, deep);
        }, {});
      }
      /**
       *  @_ignore
       */
      slice(start, end) {
        if (start == null) {
          start = 0;
        }
        if (start < 0) {
          start += this.length;
          if (start < 0) {
            start = 0;
          }
        }
        if (end == null) {
          end = this.length;
        }
        if (end < 0) {
          end += this.length;
          if (end < 0) {
            end = 0;
          }
        }
        if (end > this.length) {
          end = this.length;
        }
        const _names3 = getNames2(this);
        const result = [], names = [];
        for (let i = start; i < end; i++) {
          result.push(this[i]);
          names.push(_names3[i]);
        }
        return new _Result2(_guard4, result, names);
      }
      /**
       *  @_ignore
       */
      filter(callback, thisArg) {
        const _names3 = getNames2(this);
        const result = [], names = [];
        for (let i = 0; i < this.length; i++) {
          const item = this[i];
          if (item instanceof Error) {
            throwError2(`index ${i}`, item);
          }
          if (callback.call(thisArg, item, i, this)) {
            result.push(item);
            names.push(_names3[i]);
          }
        }
        return new _Result2(_guard4, result, names);
      }
      /**
       *  @_ignore
       */
      map(callback, thisArg) {
        const result = [];
        for (let i = 0; i < this.length; i++) {
          const item = this[i];
          if (item instanceof Error) {
            throwError2(`index ${i}`, item);
          }
          result.push(callback.call(thisArg, item, i, this));
        }
        return result;
      }
      /**
       *  Returns the value for %%name%%.
       *
       *  Since it is possible to have a key whose name conflicts with
       *  a method on a [[Result]] or its superclass Array, or any
       *  JavaScript keyword, this ensures all named values are still
       *  accessible by name.
       */
      getValue(name) {
        const index = getNames2(this).indexOf(name);
        if (index === -1) {
          return void 0;
        }
        const value = this[index];
        if (value instanceof Error) {
          throwError2(`property ${JSON.stringify(name)}`, value.error);
        }
        return value;
      }
      /**
       *  Creates a new [[Result]] for %%items%% with each entry
       *  also accessible by its corresponding name in %%keys%%.
       */
      static fromItems(items, keys) {
        return new _Result2(_guard4, items, keys);
      }
    };
    _names2 = new WeakMap();
    var Result2 = _Result2;
    exports.Result = Result2;
    function checkResultErrors3(result) {
      const errors = [];
      const checkErrors = function(path, object2) {
        if (!Array.isArray(object2)) {
          return;
        }
        for (let key in object2) {
          const childPath = path.slice();
          childPath.push(key);
          try {
            checkErrors(childPath, object2[key]);
          } catch (error) {
            errors.push({ path: childPath, error });
          }
        }
      };
      checkErrors([], result);
      return errors;
    }
    exports.checkResultErrors = checkResultErrors3;
    function getValue2(value) {
      let bytes3 = (0, index_js_1.toBeArray)(value);
      (0, index_js_1.assert)(bytes3.length <= exports.WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes3, length: exports.WordSize, offset: bytes3.length });
      if (bytes3.length !== exports.WordSize) {
        bytes3 = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([Padding2.slice(bytes3.length % exports.WordSize), bytes3]));
      }
      return bytes3;
    }
    var Coder3 = class {
      constructor(name, type, localName, dynamic) {
        // The coder name:
        //   - address, uint256, tuple, array, etc.
        __publicField(this, "name");
        // The fully expanded type, including composite types:
        //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
        __publicField(this, "type");
        // The localName bound in the signature, in this example it is "baz":
        //   - tuple(address foo, uint bar) baz
        __publicField(this, "localName");
        // Whether this type is dynamic:
        //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
        //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
        __publicField(this, "dynamic");
        (0, index_js_1.defineProperties)(this, { name, type, localName, dynamic }, {
          name: "string",
          type: "string",
          localName: "string",
          dynamic: "boolean"
        });
      }
      _throwError(message, value) {
        (0, index_js_1.assertArgument)(false, message, this.localName, value);
      }
    };
    exports.Coder = Coder3;
    var _data4, _dataLength2, _Writer_instances2, writeData_fn2;
    var Writer3 = class {
      constructor() {
        __privateAdd(this, _Writer_instances2);
        // An array of WordSize lengthed objects to concatenation
        __privateAdd(this, _data4);
        __privateAdd(this, _dataLength2);
        __privateSet(this, _data4, []);
        __privateSet(this, _dataLength2, 0);
      }
      get data() {
        return (0, index_js_1.concat)(__privateGet(this, _data4));
      }
      get length() {
        return __privateGet(this, _dataLength2);
      }
      appendWriter(writer) {
        return __privateMethod(this, _Writer_instances2, writeData_fn2).call(this, (0, index_js_1.getBytesCopy)(writer.data));
      }
      // Arrayish item; pad on the right to *nearest* WordSize
      writeBytes(value) {
        let bytes3 = (0, index_js_1.getBytesCopy)(value);
        const paddingOffset = bytes3.length % exports.WordSize;
        if (paddingOffset) {
          bytes3 = (0, index_js_1.getBytesCopy)((0, index_js_1.concat)([bytes3, Padding2.slice(paddingOffset)]));
        }
        return __privateMethod(this, _Writer_instances2, writeData_fn2).call(this, bytes3);
      }
      // Numeric item; pad on the left *to* WordSize
      writeValue(value) {
        return __privateMethod(this, _Writer_instances2, writeData_fn2).call(this, getValue2(value));
      }
      // Inserts a numeric place-holder, returning a callback that can
      // be used to asjust the value later
      writeUpdatableValue() {
        const offset = __privateGet(this, _data4).length;
        __privateGet(this, _data4).push(Padding2);
        __privateSet(this, _dataLength2, __privateGet(this, _dataLength2) + exports.WordSize);
        return (value) => {
          __privateGet(this, _data4)[offset] = getValue2(value);
        };
      }
    };
    _data4 = new WeakMap();
    _dataLength2 = new WeakMap();
    _Writer_instances2 = new WeakSet();
    writeData_fn2 = function(data) {
      __privateGet(this, _data4).push(data);
      __privateSet(this, _dataLength2, __privateGet(this, _dataLength2) + data.length);
      return data.length;
    };
    exports.Writer = Writer3;
    var _data5, _offset3, _bytesRead2, _parent2, _maxInflation2, _Reader_instances2, incrementBytesRead_fn2, peekBytes_fn2;
    var _Reader2 = class _Reader2 {
      constructor(data, allowLoose, maxInflation) {
        __privateAdd(this, _Reader_instances2);
        // Allows incomplete unpadded data to be read; otherwise an error
        // is raised if attempting to overrun the buffer. This is required
        // to deal with an old Solidity bug, in which event data for
        // external (not public thoguh) was tightly packed.
        __publicField(this, "allowLoose");
        __privateAdd(this, _data5);
        __privateAdd(this, _offset3);
        __privateAdd(this, _bytesRead2);
        __privateAdd(this, _parent2);
        __privateAdd(this, _maxInflation2);
        (0, index_js_1.defineProperties)(this, { allowLoose: !!allowLoose });
        __privateSet(this, _data5, (0, index_js_1.getBytesCopy)(data));
        __privateSet(this, _bytesRead2, 0);
        __privateSet(this, _parent2, null);
        __privateSet(this, _maxInflation2, maxInflation != null ? maxInflation : 1024);
        __privateSet(this, _offset3, 0);
      }
      get data() {
        return (0, index_js_1.hexlify)(__privateGet(this, _data5));
      }
      get dataLength() {
        return __privateGet(this, _data5).length;
      }
      get consumed() {
        return __privateGet(this, _offset3);
      }
      get bytes() {
        return new Uint8Array(__privateGet(this, _data5));
      }
      // Create a sub-reader with the same underlying data, but offset
      subReader(offset) {
        const reader = new _Reader2(__privateGet(this, _data5).slice(__privateGet(this, _offset3) + offset), this.allowLoose, __privateGet(this, _maxInflation2));
        __privateSet(reader, _parent2, this);
        return reader;
      }
      // Read bytes
      readBytes(length, loose) {
        let bytes3 = __privateMethod(this, _Reader_instances2, peekBytes_fn2).call(this, 0, length, !!loose);
        __privateMethod(this, _Reader_instances2, incrementBytesRead_fn2).call(this, length);
        __privateSet(this, _offset3, __privateGet(this, _offset3) + bytes3.length);
        return bytes3.slice(0, length);
      }
      // Read a numeric values
      readValue() {
        return (0, index_js_1.toBigInt)(this.readBytes(exports.WordSize));
      }
      readIndex() {
        return (0, index_js_1.toNumber)(this.readBytes(exports.WordSize));
      }
    };
    _data5 = new WeakMap();
    _offset3 = new WeakMap();
    _bytesRead2 = new WeakMap();
    _parent2 = new WeakMap();
    _maxInflation2 = new WeakMap();
    _Reader_instances2 = new WeakSet();
    incrementBytesRead_fn2 = function(count) {
      var _a2;
      if (__privateGet(this, _parent2)) {
        return __privateMethod(_a2 = __privateGet(this, _parent2), _Reader_instances2, incrementBytesRead_fn2).call(_a2, count);
      }
      __privateSet(this, _bytesRead2, __privateGet(this, _bytesRead2) + count);
      (0, index_js_1.assert)(__privateGet(this, _maxInflation2) < 1 || __privateGet(this, _bytesRead2) <= __privateGet(this, _maxInflation2) * this.dataLength, `compressed ABI data exceeds inflation ratio of ${__privateGet(this, _maxInflation2)} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
        buffer: (0, index_js_1.getBytesCopy)(__privateGet(this, _data5)),
        offset: __privateGet(this, _offset3),
        length: count,
        info: {
          bytesRead: __privateGet(this, _bytesRead2),
          dataLength: this.dataLength
        }
      });
    };
    peekBytes_fn2 = function(offset, length, loose) {
      let alignedLength = Math.ceil(length / exports.WordSize) * exports.WordSize;
      if (__privateGet(this, _offset3) + alignedLength > __privateGet(this, _data5).length) {
        if (this.allowLoose && loose && __privateGet(this, _offset3) + length <= __privateGet(this, _data5).length) {
          alignedLength = length;
        } else {
          (0, index_js_1.assert)(false, "data out-of-bounds", "BUFFER_OVERRUN", {
            buffer: (0, index_js_1.getBytesCopy)(__privateGet(this, _data5)),
            length: __privateGet(this, _data5).length,
            offset: __privateGet(this, _offset3) + alignedLength
          });
        }
      }
      return __privateGet(this, _data5).slice(__privateGet(this, _offset3), __privateGet(this, _offset3) + alignedLength);
    };
    var Reader3 = _Reader2;
    exports.Reader = Reader3;
  }
});

// node_modules/@noble/hashes/_assert.js
var require_assert = __commonJS({
  "node_modules/@noble/hashes/_assert.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
    function number2(n2) {
      if (!Number.isSafeInteger(n2) || n2 < 0)
        throw new Error(`Wrong positive integer: ${n2}`);
    }
    exports.number = number2;
    function bool(b2) {
      if (typeof b2 !== "boolean")
        throw new Error(`Expected boolean, not ${b2}`);
    }
    exports.bool = bool;
    function bytes3(b2, ...lengths) {
      if (!(b2 instanceof Uint8Array))
        throw new Error("Expected Uint8Array");
      if (lengths.length > 0 && !lengths.includes(b2.length))
        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b2.length}`);
    }
    exports.bytes = bytes3;
    function hash2(hash3) {
      if (typeof hash3 !== "function" || typeof hash3.create !== "function")
        throw new Error("Hash should be wrapped by utils.wrapConstructor");
      number2(hash3.outputLen);
      number2(hash3.blockLen);
    }
    exports.hash = hash2;
    function exists2(instance, checkFinished = true) {
      if (instance.destroyed)
        throw new Error("Hash instance has been destroyed");
      if (checkFinished && instance.finished)
        throw new Error("Hash#digest() has already been called");
    }
    exports.exists = exists2;
    function output2(out, instance) {
      bytes3(out);
      const min = instance.outputLen;
      if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
      }
    }
    exports.output = output2;
    var assert11 = { number: number2, bool, bytes: bytes3, hash: hash2, exists: exists2, output: output2 };
    exports.default = assert11;
  }
});

// node_modules/@noble/hashes/crypto.js
var require_crypto = __commonJS({
  "node_modules/@noble/hashes/crypto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.crypto = void 0;
    exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
  }
});

// node_modules/@noble/hashes/utils.js
var require_utils2 = __commonJS({
  "node_modules/@noble/hashes/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
    var crypto_1 = require_crypto();
    var u8a3 = (a) => a instanceof Uint8Array;
    var u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.u8 = u8;
    var u322 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
    exports.u32 = u322;
    var createView2 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
    exports.createView = createView2;
    var rotr2 = (word, shift) => word << 32 - shift | word >>> shift;
    exports.rotr = rotr2;
    exports.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
    if (!exports.isLE)
      throw new Error("Non little-endian hardware is not supported");
    var hexes3 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex2(bytes3) {
      if (!u8a3(bytes3))
        throw new Error("Uint8Array expected");
      let hex = "";
      for (let i = 0; i < bytes3.length; i++) {
        hex += hexes3[bytes3[i]];
      }
      return hex;
    }
    exports.bytesToHex = bytesToHex2;
    function hexToBytes2(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const len = hex.length;
      if (len % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + len);
      const array = new Uint8Array(len / 2);
      for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
          throw new Error("Invalid byte sequence");
        array[i] = byte;
      }
      return array;
    }
    exports.hexToBytes = hexToBytes2;
    var nextTick2 = async () => {
    };
    exports.nextTick = nextTick2;
    async function asyncLoop2(iters, tick, cb) {
      let ts = Date.now();
      for (let i = 0; i < iters; i++) {
        cb(i);
        const diff = Date.now() - ts;
        if (diff >= 0 && diff < tick)
          continue;
        await (0, exports.nextTick)();
        ts += diff;
      }
    }
    exports.asyncLoop = asyncLoop2;
    function utf8ToBytes3(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports.utf8ToBytes = utf8ToBytes3;
    function toBytes2(data) {
      if (typeof data === "string")
        data = utf8ToBytes3(data);
      if (!u8a3(data))
        throw new Error(`expected Uint8Array, got ${typeof data}`);
      return data;
    }
    exports.toBytes = toBytes2;
    function concatBytes3(...arrays) {
      const r2 = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
      let pad = 0;
      arrays.forEach((a) => {
        if (!u8a3(a))
          throw new Error("Uint8Array expected");
        r2.set(a, pad);
        pad += a.length;
      });
      return r2;
    }
    exports.concatBytes = concatBytes3;
    var Hash2 = class {
      // Safe version that clones internal state
      clone() {
        return this._cloneInto();
      }
    };
    exports.Hash = Hash2;
    var toStr2 = {}.toString;
    function checkOpts2(defaults, opts) {
      if (opts !== void 0 && toStr2.call(opts) !== "[object Object]")
        throw new Error("Options should be object or undefined");
      const merged = Object.assign(defaults, opts);
      return merged;
    }
    exports.checkOpts = checkOpts2;
    function wrapConstructor2(hashCons) {
      const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
      const tmp = hashCons();
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = () => hashCons();
      return hashC;
    }
    exports.wrapConstructor = wrapConstructor2;
    function wrapConstructorWithOpts(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
    function wrapXOFConstructorWithOpts2(hashCons) {
      const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
      const tmp = hashCons({});
      hashC.outputLen = tmp.outputLen;
      hashC.blockLen = tmp.blockLen;
      hashC.create = (opts) => hashCons(opts);
      return hashC;
    }
    exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts2;
    function randomBytes4(bytesLength = 32) {
      if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
        return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
      }
      throw new Error("crypto.getRandomValues must be defined");
    }
    exports.randomBytes = randomBytes4;
  }
});

// node_modules/@noble/hashes/hmac.js
var require_hmac = __commonJS({
  "node_modules/@noble/hashes/hmac.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hmac = exports.HMAC = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils2();
    var HMAC2 = class extends utils_js_1.Hash {
      constructor(hash2, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.hash)(hash2);
        const key = (0, utils_js_1.toBytes)(_key);
        this.iHash = hash2.create();
        if (typeof this.iHash.update !== "function")
          throw new Error("Expected instance of class which extends utils.Hash");
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash2.create();
        for (let i = 0; i < pad.length; i++)
          pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
      }
      update(buf) {
        (0, _assert_js_1.exists)(this);
        this.iHash.update(buf);
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.bytes)(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
      }
      digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
      }
      _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
      }
      destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
      }
    };
    exports.HMAC = HMAC2;
    var hmac2 = (hash2, key, message) => new HMAC2(hash2, key).update(message).digest();
    exports.hmac = hmac2;
    exports.hmac.create = (hash2, key) => new HMAC2(hash2, key);
  }
});

// node_modules/@noble/hashes/pbkdf2.js
var require_pbkdf2 = __commonJS({
  "node_modules/@noble/hashes/pbkdf2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pbkdf2Async = exports.pbkdf2 = void 0;
    var _assert_js_1 = require_assert();
    var hmac_js_1 = require_hmac();
    var utils_js_1 = require_utils2();
    function pbkdf2Init2(hash2, _password, _salt, _opts) {
      (0, _assert_js_1.hash)(hash2);
      const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
      const { c, dkLen, asyncTick } = opts;
      (0, _assert_js_1.number)(c);
      (0, _assert_js_1.number)(dkLen);
      (0, _assert_js_1.number)(asyncTick);
      if (c < 1)
        throw new Error("PBKDF2: iterations (c) should be >= 1");
      const password = (0, utils_js_1.toBytes)(_password);
      const salt = (0, utils_js_1.toBytes)(_salt);
      const DK = new Uint8Array(dkLen);
      const PRF = hmac_js_1.hmac.create(hash2, password);
      const PRFSalt = PRF._cloneInto().update(salt);
      return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
    }
    function pbkdf2Output2(PRF, PRFSalt, DK, prfW, u) {
      PRF.destroy();
      PRFSalt.destroy();
      if (prfW)
        prfW.destroy();
      u.fill(0);
      return DK;
    }
    function pbkdf23(hash2, password, salt, opts) {
      const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init2(hash2, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for (let ui = 1; ui < c; ui++) {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        }
      }
      return pbkdf2Output2(PRF, PRFSalt, DK, prfW, u);
    }
    exports.pbkdf2 = pbkdf23;
    async function pbkdf2Async(hash2, password, salt, opts) {
      const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init2(hash2, password, salt, opts);
      let prfW;
      const arr = new Uint8Array(4);
      const view = (0, utils_js_1.createView)(arr);
      const u = new Uint8Array(PRF.outputLen);
      for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {
          PRF._cloneInto(prfW).update(u).digestInto(u);
          for (let i = 0; i < Ti.length; i++)
            Ti[i] ^= u[i];
        });
      }
      return pbkdf2Output2(PRF, PRFSalt, DK, prfW, u);
    }
    exports.pbkdf2Async = pbkdf2Async;
  }
});

// node_modules/@noble/hashes/_sha2.js
var require_sha2 = __commonJS({
  "node_modules/@noble/hashes/_sha2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SHA2 = void 0;
    var _assert_js_1 = require_assert();
    var utils_js_1 = require_utils2();
    function setBigUint642(view, byteOffset, value, isLE2) {
      if (typeof view.setBigUint64 === "function")
        return view.setBigUint64(byteOffset, value, isLE2);
      const _32n2 = BigInt(32);
      const _u32_max = BigInt(4294967295);
      const wh = Number(value >> _32n2 & _u32_max);
      const wl = Number(value & _u32_max);
      const h = isLE2 ? 4 : 0;
      const l = isLE2 ? 0 : 4;
      view.setUint32(byteOffset + h, wh, isLE2);
      view.setUint32(byteOffset + l, wl, isLE2);
    }
    var SHA22 = class extends utils_js_1.Hash {
      constructor(blockLen, outputLen, padOffset, isLE2) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE2;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = (0, utils_js_1.createView)(this.buffer);
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { view, buffer, blockLen } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          if (take === blockLen) {
            const dataView = (0, utils_js_1.createView)(data);
            for (; blockLen <= len - pos; pos += blockLen)
              this.process(dataView, pos);
            continue;
          }
          buffer.set(data.subarray(pos, pos + take), this.pos);
          this.pos += take;
          pos += take;
          if (this.pos === blockLen) {
            this.process(view, 0);
            this.pos = 0;
          }
        }
        this.length += data.length;
        this.roundClean();
        return this;
      }
      digestInto(out) {
        (0, _assert_js_1.exists)(this);
        (0, _assert_js_1.output)(out, this);
        this.finished = true;
        const { buffer, view, blockLen, isLE: isLE2 } = this;
        let { pos } = this;
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
          this.process(view, 0);
          pos = 0;
        }
        for (let i = pos; i < blockLen; i++)
          buffer[i] = 0;
        setBigUint642(view, blockLen - 8, BigInt(this.length * 8), isLE2);
        this.process(view, 0);
        const oview = (0, utils_js_1.createView)(out);
        const len = this.outputLen;
        if (len % 4)
          throw new Error("_sha2: outputLen should be aligned to 32bit");
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length)
          throw new Error("_sha2: outputLen bigger than state");
        for (let i = 0; i < outLen; i++)
          oview.setUint32(4 * i, state[i], isLE2);
      }
      digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
      }
      _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen)
          to.buffer.set(buffer);
        return to;
      }
    };
    exports.SHA2 = SHA22;
  }
});

// node_modules/@noble/hashes/sha256.js
var require_sha256 = __commonJS({
  "node_modules/@noble/hashes/sha256.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha224 = exports.sha256 = void 0;
    var _sha2_js_1 = require_sha2();
    var utils_js_1 = require_utils2();
    var Chi2 = (a, b2, c) => a & b2 ^ ~a & c;
    var Maj2 = (a, b2, c) => a & b2 ^ a & c ^ b2 & c;
    var SHA256_K2 = new Uint32Array([
      1116352408,
      1899447441,
      3049323471,
      3921009573,
      961987163,
      1508970993,
      2453635748,
      2870763221,
      3624381080,
      310598401,
      607225278,
      1426881987,
      1925078388,
      2162078206,
      2614888103,
      3248222580,
      3835390401,
      4022224774,
      264347078,
      604807628,
      770255983,
      1249150122,
      1555081692,
      1996064986,
      2554220882,
      2821834349,
      2952996808,
      3210313671,
      3336571891,
      3584528711,
      113926993,
      338241895,
      666307205,
      773529912,
      1294757372,
      1396182291,
      1695183700,
      1986661051,
      2177026350,
      2456956037,
      2730485921,
      2820302411,
      3259730800,
      3345764771,
      3516065817,
      3600352804,
      4094571909,
      275423344,
      430227734,
      506948616,
      659060556,
      883997877,
      958139571,
      1322822218,
      1537002063,
      1747873779,
      1955562222,
      2024104815,
      2227730452,
      2361852424,
      2428436474,
      2756734187,
      3204031479,
      3329325298
    ]);
    var IV2 = new Uint32Array([
      1779033703,
      3144134277,
      1013904242,
      2773480762,
      1359893119,
      2600822924,
      528734635,
      1541459225
    ]);
    var SHA256_W2 = new Uint32Array(64);
    var SHA2562 = class extends _sha2_js_1.SHA2 {
      constructor() {
        super(64, 32, 8, false);
        this.A = IV2[0] | 0;
        this.B = IV2[1] | 0;
        this.C = IV2[2] | 0;
        this.D = IV2[3] | 0;
        this.E = IV2[4] | 0;
        this.F = IV2[5] | 0;
        this.G = IV2[6] | 0;
        this.H = IV2[7] | 0;
      }
      get() {
        const { A, B, C, D, E, F, G, H } = this;
        return [A, B, C, D, E, F, G, H];
      }
      // prettier-ignore
      set(A, B, C, D, E, F, G, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G | 0;
        this.H = H | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          SHA256_W2[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
          const W15 = SHA256_W2[i - 15];
          const W2 = SHA256_W2[i - 2];
          const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
          const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
          SHA256_W2[i] = s1 + SHA256_W2[i - 7] + s0 + SHA256_W2[i - 16] | 0;
        }
        let { A, B, C, D, E, F, G, H } = this;
        for (let i = 0; i < 64; i++) {
          const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
          const T1 = H + sigma1 + Chi2(E, F, G) + SHA256_K2[i] + SHA256_W2[i] | 0;
          const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
          const T2 = sigma0 + Maj2(A, B, C) | 0;
          H = G;
          G = F;
          F = E;
          E = D + T1 | 0;
          D = C;
          C = B;
          B = A;
          A = T1 + T2 | 0;
        }
        A = A + this.A | 0;
        B = B + this.B | 0;
        C = C + this.C | 0;
        D = D + this.D | 0;
        E = E + this.E | 0;
        F = F + this.F | 0;
        G = G + this.G | 0;
        H = H + this.H | 0;
        this.set(A, B, C, D, E, F, G, H);
      }
      roundClean() {
        SHA256_W2.fill(0);
      }
      destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
      }
    };
    var SHA2242 = class extends SHA2562 {
      constructor() {
        super();
        this.A = 3238371032 | 0;
        this.B = 914150663 | 0;
        this.C = 812702999 | 0;
        this.D = 4144912697 | 0;
        this.E = 4290775857 | 0;
        this.F = 1750603025 | 0;
        this.G = 1694076839 | 0;
        this.H = 3204075428 | 0;
        this.outputLen = 28;
      }
    };
    exports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA2562());
    exports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA2242());
  }
});

// node_modules/@noble/hashes/_u64.js
var require_u64 = __commonJS({
  "node_modules/@noble/hashes/_u64.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;
    var U32_MASK642 = BigInt(2 ** 32 - 1);
    var _32n2 = BigInt(32);
    function fromBig2(n2, le = false) {
      if (le)
        return { h: Number(n2 & U32_MASK642), l: Number(n2 >> _32n2 & U32_MASK642) };
      return { h: Number(n2 >> _32n2 & U32_MASK642) | 0, l: Number(n2 & U32_MASK642) | 0 };
    }
    exports.fromBig = fromBig2;
    function split2(lst, le = false) {
      let Ah = new Uint32Array(lst.length);
      let Al = new Uint32Array(lst.length);
      for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig2(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
      }
      return [Ah, Al];
    }
    exports.split = split2;
    var toBig2 = (h, l) => BigInt(h >>> 0) << _32n2 | BigInt(l >>> 0);
    exports.toBig = toBig2;
    var shrSH2 = (h, _l, s) => h >>> s;
    exports.shrSH = shrSH2;
    var shrSL2 = (h, l, s) => h << 32 - s | l >>> s;
    exports.shrSL = shrSL2;
    var rotrSH2 = (h, l, s) => h >>> s | l << 32 - s;
    exports.rotrSH = rotrSH2;
    var rotrSL2 = (h, l, s) => h << 32 - s | l >>> s;
    exports.rotrSL = rotrSL2;
    var rotrBH2 = (h, l, s) => h << 64 - s | l >>> s - 32;
    exports.rotrBH = rotrBH2;
    var rotrBL2 = (h, l, s) => h >>> s - 32 | l << 64 - s;
    exports.rotrBL = rotrBL2;
    var rotr32H2 = (_h, l) => l;
    exports.rotr32H = rotr32H2;
    var rotr32L2 = (h, _l) => h;
    exports.rotr32L = rotr32L2;
    var rotlSH2 = (h, l, s) => h << s | l >>> 32 - s;
    exports.rotlSH = rotlSH2;
    var rotlSL2 = (h, l, s) => l << s | h >>> 32 - s;
    exports.rotlSL = rotlSL2;
    var rotlBH2 = (h, l, s) => l << s - 32 | h >>> 64 - s;
    exports.rotlBH = rotlBH2;
    var rotlBL2 = (h, l, s) => h << s - 32 | l >>> 64 - s;
    exports.rotlBL = rotlBL2;
    function add2(Ah, Al, Bh, Bl) {
      const l = (Al >>> 0) + (Bl >>> 0);
      return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
    }
    exports.add = add2;
    var add3L2 = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
    exports.add3L = add3L2;
    var add3H2 = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
    exports.add3H = add3H2;
    var add4L2 = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
    exports.add4L = add4L2;
    var add4H2 = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
    exports.add4H = add4H2;
    var add5L2 = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
    exports.add5L = add5L2;
    var add5H2 = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
    exports.add5H = add5H2;
    var u642 = {
      fromBig: fromBig2,
      split: split2,
      toBig: toBig2,
      shrSH: shrSH2,
      shrSL: shrSL2,
      rotrSH: rotrSH2,
      rotrSL: rotrSL2,
      rotrBH: rotrBH2,
      rotrBL: rotrBL2,
      rotr32H: rotr32H2,
      rotr32L: rotr32L2,
      rotlSH: rotlSH2,
      rotlSL: rotlSL2,
      rotlBH: rotlBH2,
      rotlBL: rotlBL2,
      add: add2,
      add3L: add3L2,
      add3H: add3H2,
      add4L: add4L2,
      add4H: add4H2,
      add5H: add5H2,
      add5L: add5L2
    };
    exports.default = u642;
  }
});

// node_modules/@noble/hashes/sha512.js
var require_sha512 = __commonJS({
  "node_modules/@noble/hashes/sha512.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;
    var _sha2_js_1 = require_sha2();
    var _u64_js_1 = require_u64();
    var utils_js_1 = require_utils2();
    var [SHA512_Kh2, SHA512_Kl2] = (() => _u64_js_1.default.split([
      "0x428a2f98d728ae22",
      "0x7137449123ef65cd",
      "0xb5c0fbcfec4d3b2f",
      "0xe9b5dba58189dbbc",
      "0x3956c25bf348b538",
      "0x59f111f1b605d019",
      "0x923f82a4af194f9b",
      "0xab1c5ed5da6d8118",
      "0xd807aa98a3030242",
      "0x12835b0145706fbe",
      "0x243185be4ee4b28c",
      "0x550c7dc3d5ffb4e2",
      "0x72be5d74f27b896f",
      "0x80deb1fe3b1696b1",
      "0x9bdc06a725c71235",
      "0xc19bf174cf692694",
      "0xe49b69c19ef14ad2",
      "0xefbe4786384f25e3",
      "0x0fc19dc68b8cd5b5",
      "0x240ca1cc77ac9c65",
      "0x2de92c6f592b0275",
      "0x4a7484aa6ea6e483",
      "0x5cb0a9dcbd41fbd4",
      "0x76f988da831153b5",
      "0x983e5152ee66dfab",
      "0xa831c66d2db43210",
      "0xb00327c898fb213f",
      "0xbf597fc7beef0ee4",
      "0xc6e00bf33da88fc2",
      "0xd5a79147930aa725",
      "0x06ca6351e003826f",
      "0x142929670a0e6e70",
      "0x27b70a8546d22ffc",
      "0x2e1b21385c26c926",
      "0x4d2c6dfc5ac42aed",
      "0x53380d139d95b3df",
      "0x650a73548baf63de",
      "0x766a0abb3c77b2a8",
      "0x81c2c92e47edaee6",
      "0x92722c851482353b",
      "0xa2bfe8a14cf10364",
      "0xa81a664bbc423001",
      "0xc24b8b70d0f89791",
      "0xc76c51a30654be30",
      "0xd192e819d6ef5218",
      "0xd69906245565a910",
      "0xf40e35855771202a",
      "0x106aa07032bbd1b8",
      "0x19a4c116b8d2d0c8",
      "0x1e376c085141ab53",
      "0x2748774cdf8eeb99",
      "0x34b0bcb5e19b48a8",
      "0x391c0cb3c5c95a63",
      "0x4ed8aa4ae3418acb",
      "0x5b9cca4f7763e373",
      "0x682e6ff3d6b2b8a3",
      "0x748f82ee5defb2fc",
      "0x78a5636f43172f60",
      "0x84c87814a1f0ab72",
      "0x8cc702081a6439ec",
      "0x90befffa23631e28",
      "0xa4506cebde82bde9",
      "0xbef9a3f7b2c67915",
      "0xc67178f2e372532b",
      "0xca273eceea26619c",
      "0xd186b8c721c0c207",
      "0xeada7dd6cde0eb1e",
      "0xf57d4f7fee6ed178",
      "0x06f067aa72176fba",
      "0x0a637dc5a2c898a6",
      "0x113f9804bef90dae",
      "0x1b710b35131c471b",
      "0x28db77f523047d84",
      "0x32caab7b40c72493",
      "0x3c9ebe0a15c9bebc",
      "0x431d67c49c100d4c",
      "0x4cc5d4becb3e42b6",
      "0x597f299cfc657e2a",
      "0x5fcb6fab3ad6faec",
      "0x6c44198c4a475817"
    ].map((n2) => BigInt(n2))))();
    var SHA512_W_H2 = new Uint32Array(80);
    var SHA512_W_L2 = new Uint32Array(80);
    var SHA5122 = class extends _sha2_js_1.SHA2 {
      constructor() {
        super(128, 64, 16, false);
        this.Ah = 1779033703 | 0;
        this.Al = 4089235720 | 0;
        this.Bh = 3144134277 | 0;
        this.Bl = 2227873595 | 0;
        this.Ch = 1013904242 | 0;
        this.Cl = 4271175723 | 0;
        this.Dh = 2773480762 | 0;
        this.Dl = 1595750129 | 0;
        this.Eh = 1359893119 | 0;
        this.El = 2917565137 | 0;
        this.Fh = 2600822924 | 0;
        this.Fl = 725511199 | 0;
        this.Gh = 528734635 | 0;
        this.Gl = 4215389547 | 0;
        this.Hh = 1541459225 | 0;
        this.Hl = 327033209 | 0;
      }
      // prettier-ignore
      get() {
        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
      }
      // prettier-ignore
      set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
        this.Ah = Ah | 0;
        this.Al = Al | 0;
        this.Bh = Bh | 0;
        this.Bl = Bl | 0;
        this.Ch = Ch | 0;
        this.Cl = Cl | 0;
        this.Dh = Dh | 0;
        this.Dl = Dl | 0;
        this.Eh = Eh | 0;
        this.El = El | 0;
        this.Fh = Fh | 0;
        this.Fl = Fl | 0;
        this.Gh = Gh | 0;
        this.Gl = Gl | 0;
        this.Hh = Hh | 0;
        this.Hl = Hl | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4) {
          SHA512_W_H2[i] = view.getUint32(offset);
          SHA512_W_L2[i] = view.getUint32(offset += 4);
        }
        for (let i = 16; i < 80; i++) {
          const W15h = SHA512_W_H2[i - 15] | 0;
          const W15l = SHA512_W_L2[i - 15] | 0;
          const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);
          const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);
          const W2h = SHA512_W_H2[i - 2] | 0;
          const W2l = SHA512_W_L2[i - 2] | 0;
          const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);
          const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);
          const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L2[i - 7], SHA512_W_L2[i - 16]);
          const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H2[i - 7], SHA512_W_H2[i - 16]);
          SHA512_W_H2[i] = SUMh | 0;
          SHA512_W_L2[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        for (let i = 0; i < 80; i++) {
          const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);
          const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);
          const CHIh = Eh & Fh ^ ~Eh & Gh;
          const CHIl = El & Fl ^ ~El & Gl;
          const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl2[i], SHA512_W_L2[i]);
          const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh2[i], SHA512_W_H2[i]);
          const T1l = T1ll | 0;
          const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);
          const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);
          const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
          const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
          Hh = Gh | 0;
          Hl = Gl | 0;
          Gh = Fh | 0;
          Gl = Fl | 0;
          Fh = Eh | 0;
          Fl = El | 0;
          ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
          Dh = Ch | 0;
          Dl = Cl | 0;
          Ch = Bh | 0;
          Cl = Bl | 0;
          Bh = Ah | 0;
          Bl = Al | 0;
          const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);
          Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);
          Al = All | 0;
        }
        ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
      }
      roundClean() {
        SHA512_W_H2.fill(0);
        SHA512_W_L2.fill(0);
      }
      destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
      }
    };
    exports.SHA512 = SHA5122;
    var SHA512_2242 = class extends SHA5122 {
      constructor() {
        super();
        this.Ah = 2352822216 | 0;
        this.Al = 424955298 | 0;
        this.Bh = 1944164710 | 0;
        this.Bl = 2312950998 | 0;
        this.Ch = 502970286 | 0;
        this.Cl = 855612546 | 0;
        this.Dh = 1738396948 | 0;
        this.Dl = 1479516111 | 0;
        this.Eh = 258812777 | 0;
        this.El = 2077511080 | 0;
        this.Fh = 2011393907 | 0;
        this.Fl = 79989058 | 0;
        this.Gh = 1067287976 | 0;
        this.Gl = 1780299464 | 0;
        this.Hh = 286451373 | 0;
        this.Hl = 2446758561 | 0;
        this.outputLen = 28;
      }
    };
    var SHA512_2562 = class extends SHA5122 {
      constructor() {
        super();
        this.Ah = 573645204 | 0;
        this.Al = 4230739756 | 0;
        this.Bh = 2673172387 | 0;
        this.Bl = 3360449730 | 0;
        this.Ch = 596883563 | 0;
        this.Cl = 1867755857 | 0;
        this.Dh = 2520282905 | 0;
        this.Dl = 1497426621 | 0;
        this.Eh = 2519219938 | 0;
        this.El = 2827943907 | 0;
        this.Fh = 3193839141 | 0;
        this.Fl = 1401305490 | 0;
        this.Gh = 721525244 | 0;
        this.Gl = 746961066 | 0;
        this.Hh = 246885852 | 0;
        this.Hl = 2177182882 | 0;
        this.outputLen = 32;
      }
    };
    var SHA3842 = class extends SHA5122 {
      constructor() {
        super();
        this.Ah = 3418070365 | 0;
        this.Al = 3238371032 | 0;
        this.Bh = 1654270250 | 0;
        this.Bl = 914150663 | 0;
        this.Ch = 2438529370 | 0;
        this.Cl = 812702999 | 0;
        this.Dh = 355462360 | 0;
        this.Dl = 4144912697 | 0;
        this.Eh = 1731405415 | 0;
        this.El = 4290775857 | 0;
        this.Fh = 2394180231 | 0;
        this.Fl = 1750603025 | 0;
        this.Gh = 3675008525 | 0;
        this.Gl = 1694076839 | 0;
        this.Hh = 1203062813 | 0;
        this.Hl = 3204075428 | 0;
        this.outputLen = 48;
      }
    };
    exports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA5122());
    exports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_2242());
    exports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_2562());
    exports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA3842());
  }
});

// node_modules/ethers/lib.commonjs/crypto/crypto-browser.js
var require_crypto_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/crypto-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = exports.pbkdf2Sync = exports.createHmac = exports.createHash = void 0;
    var hmac_1 = require_hmac();
    var pbkdf2_1 = require_pbkdf2();
    var sha256_1 = require_sha256();
    var sha512_1 = require_sha512();
    var index_js_1 = require_utils();
    function getGlobal3() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    }
    var anyGlobal2 = getGlobal3();
    var crypto3 = anyGlobal2.crypto || anyGlobal2.msCrypto;
    function createHash2(algo) {
      switch (algo) {
        case "sha256":
          return sha256_1.sha256.create();
        case "sha512":
          return sha512_1.sha512.create();
      }
      (0, index_js_1.assertArgument)(false, "invalid hashing algorithm name", "algorithm", algo);
    }
    exports.createHash = createHash2;
    function createHmac2(_algo, key) {
      const algo = { sha256: sha256_1.sha256, sha512: sha512_1.sha512 }[_algo];
      (0, index_js_1.assertArgument)(algo != null, "invalid hmac algorithm", "algorithm", _algo);
      return hmac_1.hmac.create(algo, key);
    }
    exports.createHmac = createHmac2;
    function pbkdf2Sync2(password, salt, iterations, keylen, _algo) {
      const algo = { sha256: sha256_1.sha256, sha512: sha512_1.sha512 }[_algo];
      (0, index_js_1.assertArgument)(algo != null, "invalid pbkdf2 algorithm", "algorithm", _algo);
      return (0, pbkdf2_1.pbkdf2)(algo, password, salt, { c: iterations, dkLen: keylen });
    }
    exports.pbkdf2Sync = pbkdf2Sync2;
    function randomBytes4(length) {
      (0, index_js_1.assert)(crypto3 != null, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
        operation: "randomBytes"
      });
      (0, index_js_1.assertArgument)(Number.isInteger(length) && length > 0 && length <= 1024, "invalid length", "length", length);
      const result = new Uint8Array(length);
      crypto3.getRandomValues(result);
      return result;
    }
    exports.randomBytes = randomBytes4;
  }
});

// node_modules/ethers/lib.commonjs/crypto/hmac.js
var require_hmac2 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/hmac.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.computeHmac = void 0;
    var crypto_js_1 = require_crypto_browser();
    var index_js_1 = require_utils();
    var locked7 = false;
    var _computeHmac2 = function(algorithm, key, data) {
      return (0, crypto_js_1.createHmac)(algorithm, key).update(data).digest();
    };
    var __computeHmac2 = _computeHmac2;
    function computeHmac2(algorithm, _key, _data4) {
      const key = (0, index_js_1.getBytes)(_key, "key");
      const data = (0, index_js_1.getBytes)(_data4, "data");
      return (0, index_js_1.hexlify)(__computeHmac2(algorithm, key, data));
    }
    exports.computeHmac = computeHmac2;
    computeHmac2._ = _computeHmac2;
    computeHmac2.lock = function() {
      locked7 = true;
    };
    computeHmac2.register = function(func) {
      if (locked7) {
        throw new Error("computeHmac is locked");
      }
      __computeHmac2 = func;
    };
    Object.freeze(computeHmac2);
  }
});

// node_modules/@noble/hashes/sha3.js
var require_sha3 = __commonJS({
  "node_modules/@noble/hashes/sha3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.shake256 = exports.shake128 = exports.keccak_512 = exports.keccak_384 = exports.keccak_256 = exports.keccak_224 = exports.sha3_512 = exports.sha3_384 = exports.sha3_256 = exports.sha3_224 = exports.Keccak = exports.keccakP = void 0;
    var _assert_js_1 = require_assert();
    var _u64_js_1 = require_u64();
    var utils_js_1 = require_utils2();
    var [SHA3_PI2, SHA3_ROTL2, _SHA3_IOTA2] = [[], [], []];
    var _0n7 = BigInt(0);
    var _1n7 = BigInt(1);
    var _2n6 = BigInt(2);
    var _7n2 = BigInt(7);
    var _256n2 = BigInt(256);
    var _0x71n2 = BigInt(113);
    for (let round = 0, R = _1n7, x = 1, y = 0; round < 24; round++) {
      [x, y] = [y, (2 * x + 3 * y) % 5];
      SHA3_PI2.push(2 * (5 * y + x));
      SHA3_ROTL2.push((round + 1) * (round + 2) / 2 % 64);
      let t = _0n7;
      for (let j = 0; j < 7; j++) {
        R = (R << _1n7 ^ (R >> _7n2) * _0x71n2) % _256n2;
        if (R & _2n6)
          t ^= _1n7 << (_1n7 << BigInt(j)) - _1n7;
      }
      _SHA3_IOTA2.push(t);
    }
    var [SHA3_IOTA_H2, SHA3_IOTA_L2] = (0, _u64_js_1.split)(_SHA3_IOTA2, true);
    var rotlH2 = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBH)(h, l, s) : (0, _u64_js_1.rotlSH)(h, l, s);
    var rotlL2 = (h, l, s) => s > 32 ? (0, _u64_js_1.rotlBL)(h, l, s) : (0, _u64_js_1.rotlSL)(h, l, s);
    function keccakP2(s, rounds = 24) {
      const B = new Uint32Array(5 * 2);
      for (let round = 24 - rounds; round < 24; round++) {
        for (let x = 0; x < 10; x++)
          B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
        for (let x = 0; x < 10; x += 2) {
          const idx1 = (x + 8) % 10;
          const idx0 = (x + 2) % 10;
          const B0 = B[idx0];
          const B1 = B[idx0 + 1];
          const Th = rotlH2(B0, B1, 1) ^ B[idx1];
          const Tl = rotlL2(B0, B1, 1) ^ B[idx1 + 1];
          for (let y = 0; y < 50; y += 10) {
            s[x + y] ^= Th;
            s[x + y + 1] ^= Tl;
          }
        }
        let curH = s[2];
        let curL = s[3];
        for (let t = 0; t < 24; t++) {
          const shift = SHA3_ROTL2[t];
          const Th = rotlH2(curH, curL, shift);
          const Tl = rotlL2(curH, curL, shift);
          const PI = SHA3_PI2[t];
          curH = s[PI];
          curL = s[PI + 1];
          s[PI] = Th;
          s[PI + 1] = Tl;
        }
        for (let y = 0; y < 50; y += 10) {
          for (let x = 0; x < 10; x++)
            B[x] = s[y + x];
          for (let x = 0; x < 10; x++)
            s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
        }
        s[0] ^= SHA3_IOTA_H2[round];
        s[1] ^= SHA3_IOTA_L2[round];
      }
      B.fill(0);
    }
    exports.keccakP = keccakP2;
    var Keccak2 = class _Keccak extends utils_js_1.Hash {
      // NOTE: we accept arguments in bytes instead of bits here.
      constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
        super();
        this.blockLen = blockLen;
        this.suffix = suffix;
        this.outputLen = outputLen;
        this.enableXOF = enableXOF;
        this.rounds = rounds;
        this.pos = 0;
        this.posOut = 0;
        this.finished = false;
        this.destroyed = false;
        (0, _assert_js_1.number)(outputLen);
        if (0 >= this.blockLen || this.blockLen >= 200)
          throw new Error("Sha3 supports only keccak-f1600 function");
        this.state = new Uint8Array(200);
        this.state32 = (0, utils_js_1.u32)(this.state);
      }
      keccak() {
        keccakP2(this.state32, this.rounds);
        this.posOut = 0;
        this.pos = 0;
      }
      update(data) {
        (0, _assert_js_1.exists)(this);
        const { blockLen, state } = this;
        data = (0, utils_js_1.toBytes)(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
          const take = Math.min(blockLen - this.pos, len - pos);
          for (let i = 0; i < take; i++)
            state[this.pos++] ^= data[pos++];
          if (this.pos === blockLen)
            this.keccak();
        }
        return this;
      }
      finish() {
        if (this.finished)
          return;
        this.finished = true;
        const { state, suffix, pos, blockLen } = this;
        state[pos] ^= suffix;
        if ((suffix & 128) !== 0 && pos === blockLen - 1)
          this.keccak();
        state[blockLen - 1] ^= 128;
        this.keccak();
      }
      writeInto(out) {
        (0, _assert_js_1.exists)(this, false);
        (0, _assert_js_1.bytes)(out);
        this.finish();
        const bufferOut = this.state;
        const { blockLen } = this;
        for (let pos = 0, len = out.length; pos < len; ) {
          if (this.posOut >= blockLen)
            this.keccak();
          const take = Math.min(blockLen - this.posOut, len - pos);
          out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
          this.posOut += take;
          pos += take;
        }
        return out;
      }
      xofInto(out) {
        if (!this.enableXOF)
          throw new Error("XOF is not possible for this instance");
        return this.writeInto(out);
      }
      xof(bytes3) {
        (0, _assert_js_1.number)(bytes3);
        return this.xofInto(new Uint8Array(bytes3));
      }
      digestInto(out) {
        (0, _assert_js_1.output)(out, this);
        if (this.finished)
          throw new Error("digest() was already called");
        this.writeInto(out);
        this.destroy();
        return out;
      }
      digest() {
        return this.digestInto(new Uint8Array(this.outputLen));
      }
      destroy() {
        this.destroyed = true;
        this.state.fill(0);
      }
      _cloneInto(to) {
        const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
        to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
        to.state32.set(this.state32);
        to.pos = this.pos;
        to.posOut = this.posOut;
        to.finished = this.finished;
        to.rounds = rounds;
        to.suffix = suffix;
        to.outputLen = outputLen;
        to.enableXOF = enableXOF;
        to.destroyed = this.destroyed;
        return to;
      }
    };
    exports.Keccak = Keccak2;
    var gen2 = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapConstructor)(() => new Keccak2(blockLen, suffix, outputLen));
    exports.sha3_224 = gen2(6, 144, 224 / 8);
    exports.sha3_256 = gen2(6, 136, 256 / 8);
    exports.sha3_384 = gen2(6, 104, 384 / 8);
    exports.sha3_512 = gen2(6, 72, 512 / 8);
    exports.keccak_224 = gen2(1, 144, 224 / 8);
    exports.keccak_256 = gen2(1, 136, 256 / 8);
    exports.keccak_384 = gen2(1, 104, 384 / 8);
    exports.keccak_512 = gen2(1, 72, 512 / 8);
    var genShake2 = (suffix, blockLen, outputLen) => (0, utils_js_1.wrapXOFConstructorWithOpts)((opts = {}) => new Keccak2(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
    exports.shake128 = genShake2(31, 168, 128 / 8);
    exports.shake256 = genShake2(31, 136, 256 / 8);
  }
});

// node_modules/ethers/lib.commonjs/crypto/keccak.js
var require_keccak = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/keccak.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.keccak256 = void 0;
    var sha3_1 = require_sha3();
    var index_js_1 = require_utils();
    var locked7 = false;
    var _keccak2562 = function(data) {
      return (0, sha3_1.keccak_256)(data);
    };
    var __keccak2562 = _keccak2562;
    function keccak2563(_data4) {
      const data = (0, index_js_1.getBytes)(_data4, "data");
      return (0, index_js_1.hexlify)(__keccak2562(data));
    }
    exports.keccak256 = keccak2563;
    keccak2563._ = _keccak2562;
    keccak2563.lock = function() {
      locked7 = true;
    };
    keccak2563.register = function(func) {
      if (locked7) {
        throw new TypeError("keccak256 is locked");
      }
      __keccak2562 = func;
    };
    Object.freeze(keccak2563);
  }
});

// node_modules/@noble/hashes/ripemd160.js
var require_ripemd160 = __commonJS({
  "node_modules/@noble/hashes/ripemd160.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ripemd160 = exports.RIPEMD160 = void 0;
    var _sha2_js_1 = require_sha2();
    var utils_js_1 = require_utils2();
    var Rho2 = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
    var Id2 = Uint8Array.from({ length: 16 }, (_, i) => i);
    var Pi2 = Id2.map((i) => (9 * i + 5) % 16);
    var idxL2 = [Id2];
    var idxR2 = [Pi2];
    for (let i = 0; i < 4; i++)
      for (let j of [idxL2, idxR2])
        j.push(j[i].map((k) => Rho2[k]));
    var shifts2 = [
      [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
      [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
      [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
      [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
      [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
    ].map((i) => new Uint8Array(i));
    var shiftsL2 = idxL2.map((idx, i) => idx.map((j) => shifts2[i][j]));
    var shiftsR2 = idxR2.map((idx, i) => idx.map((j) => shifts2[i][j]));
    var Kl2 = new Uint32Array([
      0,
      1518500249,
      1859775393,
      2400959708,
      2840853838
    ]);
    var Kr2 = new Uint32Array([
      1352829926,
      1548603684,
      1836072691,
      2053994217,
      0
    ]);
    var rotl3 = (word, shift) => word << shift | word >>> 32 - shift;
    function f2(group, x, y, z) {
      if (group === 0)
        return x ^ y ^ z;
      else if (group === 1)
        return x & y | ~x & z;
      else if (group === 2)
        return (x | ~y) ^ z;
      else if (group === 3)
        return x & z | y & ~z;
      else
        return x ^ (y | ~z);
    }
    var BUF2 = new Uint32Array(16);
    var RIPEMD1602 = class extends _sha2_js_1.SHA2 {
      constructor() {
        super(64, 20, 8, true);
        this.h0 = 1732584193 | 0;
        this.h1 = 4023233417 | 0;
        this.h2 = 2562383102 | 0;
        this.h3 = 271733878 | 0;
        this.h4 = 3285377520 | 0;
      }
      get() {
        const { h0, h1, h2, h3, h4 } = this;
        return [h0, h1, h2, h3, h4];
      }
      set(h0, h1, h2, h3, h4) {
        this.h0 = h0 | 0;
        this.h1 = h1 | 0;
        this.h2 = h2 | 0;
        this.h3 = h3 | 0;
        this.h4 = h4 | 0;
      }
      process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4)
          BUF2[i] = view.getUint32(offset, true);
        let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
        for (let group = 0; group < 5; group++) {
          const rGroup = 4 - group;
          const hbl = Kl2[group], hbr = Kr2[group];
          const rl = idxL2[group], rr = idxR2[group];
          const sl = shiftsL2[group], sr = shiftsR2[group];
          for (let i = 0; i < 16; i++) {
            const tl = rotl3(al + f2(group, bl, cl, dl) + BUF2[rl[i]] + hbl, sl[i]) + el | 0;
            al = el, el = dl, dl = rotl3(cl, 10) | 0, cl = bl, bl = tl;
          }
          for (let i = 0; i < 16; i++) {
            const tr = rotl3(ar + f2(rGroup, br, cr, dr) + BUF2[rr[i]] + hbr, sr[i]) + er | 0;
            ar = er, er = dr, dr = rotl3(cr, 10) | 0, cr = br, br = tr;
          }
        }
        this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
      }
      roundClean() {
        BUF2.fill(0);
      }
      destroy() {
        this.destroyed = true;
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0);
      }
    };
    exports.RIPEMD160 = RIPEMD1602;
    exports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD1602());
  }
});

// node_modules/ethers/lib.commonjs/crypto/ripemd160.js
var require_ripemd1602 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/ripemd160.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ripemd160 = void 0;
    var ripemd160_1 = require_ripemd160();
    var index_js_1 = require_utils();
    var locked7 = false;
    var _ripemd1602 = function(data) {
      return (0, ripemd160_1.ripemd160)(data);
    };
    var __ripemd1602 = _ripemd1602;
    function ripemd1603(_data4) {
      const data = (0, index_js_1.getBytes)(_data4, "data");
      return (0, index_js_1.hexlify)(__ripemd1602(data));
    }
    exports.ripemd160 = ripemd1603;
    ripemd1603._ = _ripemd1602;
    ripemd1603.lock = function() {
      locked7 = true;
    };
    ripemd1603.register = function(func) {
      if (locked7) {
        throw new TypeError("ripemd160 is locked");
      }
      __ripemd1602 = func;
    };
    Object.freeze(ripemd1603);
  }
});

// node_modules/ethers/lib.commonjs/crypto/pbkdf2.js
var require_pbkdf22 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/pbkdf2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pbkdf2 = void 0;
    var crypto_js_1 = require_crypto_browser();
    var index_js_1 = require_utils();
    var locked7 = false;
    var _pbkdf22 = function(password, salt, iterations, keylen, algo) {
      return (0, crypto_js_1.pbkdf2Sync)(password, salt, iterations, keylen, algo);
    };
    var __pbkdf22 = _pbkdf22;
    function pbkdf23(_password, _salt, iterations, keylen, algo) {
      const password = (0, index_js_1.getBytes)(_password, "password");
      const salt = (0, index_js_1.getBytes)(_salt, "salt");
      return (0, index_js_1.hexlify)(__pbkdf22(password, salt, iterations, keylen, algo));
    }
    exports.pbkdf2 = pbkdf23;
    pbkdf23._ = _pbkdf22;
    pbkdf23.lock = function() {
      locked7 = true;
    };
    pbkdf23.register = function(func) {
      if (locked7) {
        throw new Error("pbkdf2 is locked");
      }
      __pbkdf22 = func;
    };
    Object.freeze(pbkdf23);
  }
});

// node_modules/ethers/lib.commonjs/crypto/random.js
var require_random = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/random.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randomBytes = void 0;
    var crypto_js_1 = require_crypto_browser();
    var locked7 = false;
    var _randomBytes2 = function(length) {
      return new Uint8Array((0, crypto_js_1.randomBytes)(length));
    };
    var __randomBytes2 = _randomBytes2;
    function randomBytes4(length) {
      return __randomBytes2(length);
    }
    exports.randomBytes = randomBytes4;
    randomBytes4._ = _randomBytes2;
    randomBytes4.lock = function() {
      locked7 = true;
    };
    randomBytes4.register = function(func) {
      if (locked7) {
        throw new Error("randomBytes is locked");
      }
      __randomBytes2 = func;
    };
    Object.freeze(randomBytes4);
  }
});

// node_modules/@noble/hashes/scrypt.js
var require_scrypt = __commonJS({
  "node_modules/@noble/hashes/scrypt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scryptAsync = exports.scrypt = void 0;
    var _assert_js_1 = require_assert();
    var sha256_js_1 = require_sha256();
    var pbkdf2_js_1 = require_pbkdf2();
    var utils_js_1 = require_utils2();
    var rotl3 = (a, b2) => a << b2 | a >>> 32 - b2;
    function XorAndSalsa2(prev, pi, input, ii, out, oi) {
      let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
      let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
      let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
      let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
      let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
      let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
      let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
      let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
      let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
      for (let i = 0; i < 8; i += 2) {
        x04 ^= rotl3(x00 + x12 | 0, 7);
        x08 ^= rotl3(x04 + x00 | 0, 9);
        x12 ^= rotl3(x08 + x04 | 0, 13);
        x00 ^= rotl3(x12 + x08 | 0, 18);
        x09 ^= rotl3(x05 + x01 | 0, 7);
        x13 ^= rotl3(x09 + x05 | 0, 9);
        x01 ^= rotl3(x13 + x09 | 0, 13);
        x05 ^= rotl3(x01 + x13 | 0, 18);
        x14 ^= rotl3(x10 + x06 | 0, 7);
        x02 ^= rotl3(x14 + x10 | 0, 9);
        x06 ^= rotl3(x02 + x14 | 0, 13);
        x10 ^= rotl3(x06 + x02 | 0, 18);
        x03 ^= rotl3(x15 + x11 | 0, 7);
        x07 ^= rotl3(x03 + x15 | 0, 9);
        x11 ^= rotl3(x07 + x03 | 0, 13);
        x15 ^= rotl3(x11 + x07 | 0, 18);
        x01 ^= rotl3(x00 + x03 | 0, 7);
        x02 ^= rotl3(x01 + x00 | 0, 9);
        x03 ^= rotl3(x02 + x01 | 0, 13);
        x00 ^= rotl3(x03 + x02 | 0, 18);
        x06 ^= rotl3(x05 + x04 | 0, 7);
        x07 ^= rotl3(x06 + x05 | 0, 9);
        x04 ^= rotl3(x07 + x06 | 0, 13);
        x05 ^= rotl3(x04 + x07 | 0, 18);
        x11 ^= rotl3(x10 + x09 | 0, 7);
        x08 ^= rotl3(x11 + x10 | 0, 9);
        x09 ^= rotl3(x08 + x11 | 0, 13);
        x10 ^= rotl3(x09 + x08 | 0, 18);
        x12 ^= rotl3(x15 + x14 | 0, 7);
        x13 ^= rotl3(x12 + x15 | 0, 9);
        x14 ^= rotl3(x13 + x12 | 0, 13);
        x15 ^= rotl3(x14 + x13 | 0, 18);
      }
      out[oi++] = y00 + x00 | 0;
      out[oi++] = y01 + x01 | 0;
      out[oi++] = y02 + x02 | 0;
      out[oi++] = y03 + x03 | 0;
      out[oi++] = y04 + x04 | 0;
      out[oi++] = y05 + x05 | 0;
      out[oi++] = y06 + x06 | 0;
      out[oi++] = y07 + x07 | 0;
      out[oi++] = y08 + x08 | 0;
      out[oi++] = y09 + x09 | 0;
      out[oi++] = y10 + x10 | 0;
      out[oi++] = y11 + x11 | 0;
      out[oi++] = y12 + x12 | 0;
      out[oi++] = y13 + x13 | 0;
      out[oi++] = y14 + x14 | 0;
      out[oi++] = y15 + x15 | 0;
    }
    function BlockMix2(input, ii, out, oi, r2) {
      let head = oi + 0;
      let tail = oi + 16 * r2;
      for (let i = 0; i < 16; i++)
        out[tail + i] = input[ii + (2 * r2 - 1) * 16 + i];
      for (let i = 0; i < r2; i++, head += 16, ii += 16) {
        XorAndSalsa2(out, tail, input, ii, out, head);
        if (i > 0)
          tail += 16;
        XorAndSalsa2(out, head, input, ii += 16, out, tail);
      }
    }
    function scryptInit2(password, salt, _opts) {
      const opts = (0, utils_js_1.checkOpts)({
        dkLen: 32,
        asyncTick: 10,
        maxmem: 1024 ** 3 + 1024
      }, _opts);
      const { N: N3, r: r2, p, dkLen, asyncTick, maxmem, onProgress } = opts;
      (0, _assert_js_1.number)(N3);
      (0, _assert_js_1.number)(r2);
      (0, _assert_js_1.number)(p);
      (0, _assert_js_1.number)(dkLen);
      (0, _assert_js_1.number)(asyncTick);
      (0, _assert_js_1.number)(maxmem);
      if (onProgress !== void 0 && typeof onProgress !== "function")
        throw new Error("progressCb should be function");
      const blockSize = 128 * r2;
      const blockSize32 = blockSize / 4;
      if (N3 <= 1 || (N3 & N3 - 1) !== 0 || N3 >= 2 ** (blockSize / 8) || N3 > 2 ** 32) {
        throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
      }
      if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
        throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
      }
      if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
        throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
      }
      const memUsed = blockSize * (N3 + p);
      if (memUsed > maxmem) {
        throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
      }
      const B = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, salt, { c: 1, dkLen: blockSize * p });
      const B32 = (0, utils_js_1.u32)(B);
      const V = (0, utils_js_1.u32)(new Uint8Array(blockSize * N3));
      const tmp = (0, utils_js_1.u32)(new Uint8Array(blockSize));
      let blockMixCb = () => {
      };
      if (onProgress) {
        const totalBlockMix = 2 * N3 * p;
        const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
        let blockMixCnt = 0;
        blockMixCb = () => {
          blockMixCnt++;
          if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
            onProgress(blockMixCnt / totalBlockMix);
        };
      }
      return { N: N3, r: r2, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
    }
    function scryptOutput2(password, dkLen, B, V, tmp) {
      const res = (0, pbkdf2_js_1.pbkdf2)(sha256_js_1.sha256, password, B, { c: 1, dkLen });
      B.fill(0);
      V.fill(0);
      tmp.fill(0);
      return res;
    }
    function scrypt3(password, salt, opts) {
      const { N: N3, r: r2, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit2(password, salt, opts);
      for (let pi = 0; pi < p; pi++) {
        const Pi2 = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
          V[i] = B32[Pi2 + i];
        for (let i = 0, pos = 0; i < N3 - 1; i++) {
          BlockMix2(V, pos, V, pos += blockSize32, r2);
          blockMixCb();
        }
        BlockMix2(V, (N3 - 1) * blockSize32, B32, Pi2, r2);
        blockMixCb();
        for (let i = 0; i < N3; i++) {
          const j = B32[Pi2 + blockSize32 - 16] % N3;
          for (let k = 0; k < blockSize32; k++)
            tmp[k] = B32[Pi2 + k] ^ V[j * blockSize32 + k];
          BlockMix2(tmp, 0, B32, Pi2, r2);
          blockMixCb();
        }
      }
      return scryptOutput2(password, dkLen, B, V, tmp);
    }
    exports.scrypt = scrypt3;
    async function scryptAsync2(password, salt, opts) {
      const { N: N3, r: r2, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit2(password, salt, opts);
      for (let pi = 0; pi < p; pi++) {
        const Pi2 = blockSize32 * pi;
        for (let i = 0; i < blockSize32; i++)
          V[i] = B32[Pi2 + i];
        let pos = 0;
        await (0, utils_js_1.asyncLoop)(N3 - 1, asyncTick, () => {
          BlockMix2(V, pos, V, pos += blockSize32, r2);
          blockMixCb();
        });
        BlockMix2(V, (N3 - 1) * blockSize32, B32, Pi2, r2);
        blockMixCb();
        await (0, utils_js_1.asyncLoop)(N3, asyncTick, () => {
          const j = B32[Pi2 + blockSize32 - 16] % N3;
          for (let k = 0; k < blockSize32; k++)
            tmp[k] = B32[Pi2 + k] ^ V[j * blockSize32 + k];
          BlockMix2(tmp, 0, B32, Pi2, r2);
          blockMixCb();
        });
      }
      return scryptOutput2(password, dkLen, B, V, tmp);
    }
    exports.scryptAsync = scryptAsync2;
  }
});

// node_modules/ethers/lib.commonjs/crypto/scrypt.js
var require_scrypt2 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/scrypt.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.scryptSync = exports.scrypt = void 0;
    var scrypt_1 = require_scrypt();
    var index_js_1 = require_utils();
    var lockedSync2 = false;
    var lockedAsync2 = false;
    var _scryptAsync2 = async function(passwd, salt, N3, r2, p, dkLen, onProgress) {
      return await (0, scrypt_1.scryptAsync)(passwd, salt, { N: N3, r: r2, p, dkLen, onProgress });
    };
    var _scryptSync2 = function(passwd, salt, N3, r2, p, dkLen) {
      return (0, scrypt_1.scrypt)(passwd, salt, { N: N3, r: r2, p, dkLen });
    };
    var __scryptAsync2 = _scryptAsync2;
    var __scryptSync2 = _scryptSync2;
    async function scrypt3(_passwd, _salt, N3, r2, p, dkLen, progress) {
      const passwd = (0, index_js_1.getBytes)(_passwd, "passwd");
      const salt = (0, index_js_1.getBytes)(_salt, "salt");
      return (0, index_js_1.hexlify)(await __scryptAsync2(passwd, salt, N3, r2, p, dkLen, progress));
    }
    exports.scrypt = scrypt3;
    scrypt3._ = _scryptAsync2;
    scrypt3.lock = function() {
      lockedAsync2 = true;
    };
    scrypt3.register = function(func) {
      if (lockedAsync2) {
        throw new Error("scrypt is locked");
      }
      __scryptAsync2 = func;
    };
    Object.freeze(scrypt3);
    function scryptSync2(_passwd, _salt, N3, r2, p, dkLen) {
      const passwd = (0, index_js_1.getBytes)(_passwd, "passwd");
      const salt = (0, index_js_1.getBytes)(_salt, "salt");
      return (0, index_js_1.hexlify)(__scryptSync2(passwd, salt, N3, r2, p, dkLen));
    }
    exports.scryptSync = scryptSync2;
    scryptSync2._ = _scryptSync2;
    scryptSync2.lock = function() {
      lockedSync2 = true;
    };
    scryptSync2.register = function(func) {
      if (lockedSync2) {
        throw new Error("scryptSync is locked");
      }
      __scryptSync2 = func;
    };
    Object.freeze(scryptSync2);
  }
});

// node_modules/ethers/lib.commonjs/crypto/sha2.js
var require_sha22 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/sha2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sha512 = exports.sha256 = void 0;
    var crypto_js_1 = require_crypto_browser();
    var index_js_1 = require_utils();
    var _sha2562 = function(data) {
      return (0, crypto_js_1.createHash)("sha256").update(data).digest();
    };
    var _sha5122 = function(data) {
      return (0, crypto_js_1.createHash)("sha512").update(data).digest();
    };
    var __sha2562 = _sha2562;
    var __sha5122 = _sha5122;
    var locked2562 = false;
    var locked5122 = false;
    function sha2563(_data4) {
      const data = (0, index_js_1.getBytes)(_data4, "data");
      return (0, index_js_1.hexlify)(__sha2562(data));
    }
    exports.sha256 = sha2563;
    sha2563._ = _sha2562;
    sha2563.lock = function() {
      locked2562 = true;
    };
    sha2563.register = function(func) {
      if (locked2562) {
        throw new Error("sha256 is locked");
      }
      __sha2562 = func;
    };
    Object.freeze(sha2563);
    function sha5123(_data4) {
      const data = (0, index_js_1.getBytes)(_data4, "data");
      return (0, index_js_1.hexlify)(__sha5122(data));
    }
    exports.sha512 = sha5123;
    sha5123._ = _sha5122;
    sha5123.lock = function() {
      locked5122 = true;
    };
    sha5123.register = function(func) {
      if (locked5122) {
        throw new Error("sha512 is locked");
      }
      __sha5122 = func;
    };
    Object.freeze(sha2563);
  }
});

// node_modules/@noble/curves/abstract/utils.js
var require_utils3 = __commonJS({
  "node_modules/@noble/curves/abstract/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateObject = exports.createHmacDrbg = exports.bitMask = exports.bitSet = exports.bitGet = exports.bitLen = exports.utf8ToBytes = exports.equalBytes = exports.concatBytes = exports.ensureBytes = exports.numberToVarBytesBE = exports.numberToBytesLE = exports.numberToBytesBE = exports.bytesToNumberLE = exports.bytesToNumberBE = exports.hexToBytes = exports.hexToNumber = exports.numberToHexUnpadded = exports.bytesToHex = void 0;
    var _0n7 = BigInt(0);
    var _1n7 = BigInt(1);
    var _2n6 = BigInt(2);
    var u8a3 = (a) => a instanceof Uint8Array;
    var hexes3 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
    function bytesToHex2(bytes3) {
      if (!u8a3(bytes3))
        throw new Error("Uint8Array expected");
      let hex = "";
      for (let i = 0; i < bytes3.length; i++) {
        hex += hexes3[bytes3[i]];
      }
      return hex;
    }
    exports.bytesToHex = bytesToHex2;
    function numberToHexUnpadded2(num) {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
    }
    exports.numberToHexUnpadded = numberToHexUnpadded2;
    function hexToNumber2(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      return BigInt(hex === "" ? "0" : `0x${hex}`);
    }
    exports.hexToNumber = hexToNumber2;
    function hexToBytes2(hex) {
      if (typeof hex !== "string")
        throw new Error("hex string expected, got " + typeof hex);
      const len = hex.length;
      if (len % 2)
        throw new Error("padded hex string expected, got unpadded hex of length " + len);
      const array = new Uint8Array(len / 2);
      for (let i = 0; i < array.length; i++) {
        const j = i * 2;
        const hexByte = hex.slice(j, j + 2);
        const byte = Number.parseInt(hexByte, 16);
        if (Number.isNaN(byte) || byte < 0)
          throw new Error("Invalid byte sequence");
        array[i] = byte;
      }
      return array;
    }
    exports.hexToBytes = hexToBytes2;
    function bytesToNumberBE2(bytes3) {
      return hexToNumber2(bytesToHex2(bytes3));
    }
    exports.bytesToNumberBE = bytesToNumberBE2;
    function bytesToNumberLE2(bytes3) {
      if (!u8a3(bytes3))
        throw new Error("Uint8Array expected");
      return hexToNumber2(bytesToHex2(Uint8Array.from(bytes3).reverse()));
    }
    exports.bytesToNumberLE = bytesToNumberLE2;
    function numberToBytesBE2(n2, len) {
      return hexToBytes2(n2.toString(16).padStart(len * 2, "0"));
    }
    exports.numberToBytesBE = numberToBytesBE2;
    function numberToBytesLE2(n2, len) {
      return numberToBytesBE2(n2, len).reverse();
    }
    exports.numberToBytesLE = numberToBytesLE2;
    function numberToVarBytesBE2(n2) {
      return hexToBytes2(numberToHexUnpadded2(n2));
    }
    exports.numberToVarBytesBE = numberToVarBytesBE2;
    function ensureBytes2(title, hex, expectedLength) {
      let res;
      if (typeof hex === "string") {
        try {
          res = hexToBytes2(hex);
        } catch (e) {
          throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
        }
      } else if (u8a3(hex)) {
        res = Uint8Array.from(hex);
      } else {
        throw new Error(`${title} must be hex string or Uint8Array`);
      }
      const len = res.length;
      if (typeof expectedLength === "number" && len !== expectedLength)
        throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
      return res;
    }
    exports.ensureBytes = ensureBytes2;
    function concatBytes3(...arrays) {
      const r2 = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
      let pad = 0;
      arrays.forEach((a) => {
        if (!u8a3(a))
          throw new Error("Uint8Array expected");
        r2.set(a, pad);
        pad += a.length;
      });
      return r2;
    }
    exports.concatBytes = concatBytes3;
    function equalBytes2(b1, b2) {
      if (b1.length !== b2.length)
        return false;
      for (let i = 0; i < b1.length; i++)
        if (b1[i] !== b2[i])
          return false;
      return true;
    }
    exports.equalBytes = equalBytes2;
    function utf8ToBytes3(str) {
      if (typeof str !== "string")
        throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
      return new Uint8Array(new TextEncoder().encode(str));
    }
    exports.utf8ToBytes = utf8ToBytes3;
    function bitLen2(n2) {
      let len;
      for (len = 0; n2 > _0n7; n2 >>= _1n7, len += 1)
        ;
      return len;
    }
    exports.bitLen = bitLen2;
    function bitGet2(n2, pos) {
      return n2 >> BigInt(pos) & _1n7;
    }
    exports.bitGet = bitGet2;
    var bitSet2 = (n2, pos, value) => {
      return n2 | (value ? _1n7 : _0n7) << BigInt(pos);
    };
    exports.bitSet = bitSet2;
    var bitMask2 = (n2) => (_2n6 << BigInt(n2 - 1)) - _1n7;
    exports.bitMask = bitMask2;
    var u8n2 = (data) => new Uint8Array(data);
    var u8fr2 = (arr) => Uint8Array.from(arr);
    function createHmacDrbg2(hashLen, qByteLen, hmacFn) {
      if (typeof hashLen !== "number" || hashLen < 2)
        throw new Error("hashLen must be a number");
      if (typeof qByteLen !== "number" || qByteLen < 2)
        throw new Error("qByteLen must be a number");
      if (typeof hmacFn !== "function")
        throw new Error("hmacFn must be a function");
      let v = u8n2(hashLen);
      let k = u8n2(hashLen);
      let i = 0;
      const reset = () => {
        v.fill(1);
        k.fill(0);
        i = 0;
      };
      const h = (...b2) => hmacFn(k, v, ...b2);
      const reseed = (seed = u8n2()) => {
        k = h(u8fr2([0]), seed);
        v = h();
        if (seed.length === 0)
          return;
        k = h(u8fr2([1]), seed);
        v = h();
      };
      const gen2 = () => {
        if (i++ >= 1e3)
          throw new Error("drbg: tried 1000 values");
        let len = 0;
        const out = [];
        while (len < qByteLen) {
          v = h();
          const sl = v.slice();
          out.push(sl);
          len += v.length;
        }
        return concatBytes3(...out);
      };
      const genUntil = (seed, pred) => {
        reset();
        reseed(seed);
        let res = void 0;
        while (!(res = pred(gen2())))
          reseed();
        reset();
        return res;
      };
      return genUntil;
    }
    exports.createHmacDrbg = createHmacDrbg2;
    var validatorFns2 = {
      bigint: (val) => typeof val === "bigint",
      function: (val) => typeof val === "function",
      boolean: (val) => typeof val === "boolean",
      string: (val) => typeof val === "string",
      stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
      isSafeInteger: (val) => Number.isSafeInteger(val),
      array: (val) => Array.isArray(val),
      field: (val, object2) => object2.Fp.isValid(val),
      hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
    };
    function validateObject2(object2, validators, optValidators = {}) {
      const checkField = (fieldName, type, isOptional) => {
        const checkVal = validatorFns2[type];
        if (typeof checkVal !== "function")
          throw new Error(`Invalid validator "${type}", expected function`);
        const val = object2[fieldName];
        if (isOptional && val === void 0)
          return;
        if (!checkVal(val, object2)) {
          throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
        }
      };
      for (const [fieldName, type] of Object.entries(validators))
        checkField(fieldName, type, false);
      for (const [fieldName, type] of Object.entries(optValidators))
        checkField(fieldName, type, true);
      return object2;
    }
    exports.validateObject = validateObject2;
  }
});

// node_modules/@noble/curves/abstract/modular.js
var require_modular = __commonJS({
  "node_modules/@noble/curves/abstract/modular.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapHashToField = exports.getMinHashLength = exports.getFieldBytesLength = exports.hashToPrivateScalar = exports.FpSqrtEven = exports.FpSqrtOdd = exports.Field = exports.nLength = exports.FpIsSquare = exports.FpDiv = exports.FpInvertBatch = exports.FpPow = exports.validateField = exports.isNegativeLE = exports.FpSqrt = exports.tonelliShanks = exports.invert = exports.pow2 = exports.pow = exports.mod = void 0;
    var utils_js_1 = require_utils3();
    var _0n7 = BigInt(0);
    var _1n7 = BigInt(1);
    var _2n6 = BigInt(2);
    var _3n3 = BigInt(3);
    var _4n3 = BigInt(4);
    var _5n2 = BigInt(5);
    var _8n2 = BigInt(8);
    var _9n2 = BigInt(9);
    var _16n2 = BigInt(16);
    function mod2(a, b2) {
      const result = a % b2;
      return result >= _0n7 ? result : b2 + result;
    }
    exports.mod = mod2;
    function pow3(num, power, modulo) {
      if (modulo <= _0n7 || power < _0n7)
        throw new Error("Expected power/modulo > 0");
      if (modulo === _1n7)
        return _0n7;
      let res = _1n7;
      while (power > _0n7) {
        if (power & _1n7)
          res = res * num % modulo;
        num = num * num % modulo;
        power >>= _1n7;
      }
      return res;
    }
    exports.pow = pow3;
    function pow22(x, power, modulo) {
      let res = x;
      while (power-- > _0n7) {
        res *= res;
        res %= modulo;
      }
      return res;
    }
    exports.pow2 = pow22;
    function invert2(number2, modulo) {
      if (number2 === _0n7 || modulo <= _0n7) {
        throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
      }
      let a = mod2(number2, modulo);
      let b2 = modulo;
      let x = _0n7, y = _1n7, u = _1n7, v = _0n7;
      while (a !== _0n7) {
        const q = b2 / a;
        const r2 = b2 % a;
        const m = x - u * q;
        const n2 = y - v * q;
        b2 = a, a = r2, x = u, y = v, u = m, v = n2;
      }
      const gcd = b2;
      if (gcd !== _1n7)
        throw new Error("invert: does not exist");
      return mod2(x, modulo);
    }
    exports.invert = invert2;
    function tonelliShanks2(P) {
      const legendreC = (P - _1n7) / _2n6;
      let Q, S, Z;
      for (Q = P - _1n7, S = 0; Q % _2n6 === _0n7; Q /= _2n6, S++)
        ;
      for (Z = _2n6; Z < P && pow3(Z, legendreC, P) !== P - _1n7; Z++)
        ;
      if (S === 1) {
        const p1div4 = (P + _1n7) / _4n3;
        return function tonelliFast(Fp2, n2) {
          const root = Fp2.pow(n2, p1div4);
          if (!Fp2.eql(Fp2.sqr(root), n2))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      const Q1div2 = (Q + _1n7) / _2n6;
      return function tonelliSlow(Fp2, n2) {
        if (Fp2.pow(n2, legendreC) === Fp2.neg(Fp2.ONE))
          throw new Error("Cannot find square root");
        let r2 = S;
        let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z), Q);
        let x = Fp2.pow(n2, Q1div2);
        let b2 = Fp2.pow(n2, Q);
        while (!Fp2.eql(b2, Fp2.ONE)) {
          if (Fp2.eql(b2, Fp2.ZERO))
            return Fp2.ZERO;
          let m = 1;
          for (let t2 = Fp2.sqr(b2); m < r2; m++) {
            if (Fp2.eql(t2, Fp2.ONE))
              break;
            t2 = Fp2.sqr(t2);
          }
          const ge2 = Fp2.pow(g, _1n7 << BigInt(r2 - m - 1));
          g = Fp2.sqr(ge2);
          x = Fp2.mul(x, ge2);
          b2 = Fp2.mul(b2, g);
          r2 = m;
        }
        return x;
      };
    }
    exports.tonelliShanks = tonelliShanks2;
    function FpSqrt2(P) {
      if (P % _4n3 === _3n3) {
        const p1div4 = (P + _1n7) / _4n3;
        return function sqrt3mod4(Fp2, n2) {
          const root = Fp2.pow(n2, p1div4);
          if (!Fp2.eql(Fp2.sqr(root), n2))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _8n2 === _5n2) {
        const c1 = (P - _5n2) / _8n2;
        return function sqrt5mod8(Fp2, n2) {
          const n22 = Fp2.mul(n2, _2n6);
          const v = Fp2.pow(n22, c1);
          const nv = Fp2.mul(n2, v);
          const i = Fp2.mul(Fp2.mul(nv, _2n6), v);
          const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));
          if (!Fp2.eql(Fp2.sqr(root), n2))
            throw new Error("Cannot find square root");
          return root;
        };
      }
      if (P % _16n2 === _9n2) {
      }
      return tonelliShanks2(P);
    }
    exports.FpSqrt = FpSqrt2;
    var isNegativeLE = (num, modulo) => (mod2(num, modulo) & _1n7) === _1n7;
    exports.isNegativeLE = isNegativeLE;
    var FIELD_FIELDS2 = [
      "create",
      "isValid",
      "is0",
      "neg",
      "inv",
      "sqrt",
      "sqr",
      "eql",
      "add",
      "sub",
      "mul",
      "pow",
      "div",
      "addN",
      "subN",
      "mulN",
      "sqrN"
    ];
    function validateField2(field) {
      const initial = {
        ORDER: "bigint",
        MASK: "bigint",
        BYTES: "isSafeInteger",
        BITS: "isSafeInteger"
      };
      const opts = FIELD_FIELDS2.reduce((map, val) => {
        map[val] = "function";
        return map;
      }, initial);
      return (0, utils_js_1.validateObject)(field, opts);
    }
    exports.validateField = validateField2;
    function FpPow2(f2, num, power) {
      if (power < _0n7)
        throw new Error("Expected power > 0");
      if (power === _0n7)
        return f2.ONE;
      if (power === _1n7)
        return num;
      let p = f2.ONE;
      let d = num;
      while (power > _0n7) {
        if (power & _1n7)
          p = f2.mul(p, d);
        d = f2.sqr(d);
        power >>= _1n7;
      }
      return p;
    }
    exports.FpPow = FpPow2;
    function FpInvertBatch2(f2, nums) {
      const tmp = new Array(nums.length);
      const lastMultiplied = nums.reduce((acc, num, i) => {
        if (f2.is0(num))
          return acc;
        tmp[i] = acc;
        return f2.mul(acc, num);
      }, f2.ONE);
      const inverted = f2.inv(lastMultiplied);
      nums.reduceRight((acc, num, i) => {
        if (f2.is0(num))
          return acc;
        tmp[i] = f2.mul(acc, tmp[i]);
        return f2.mul(acc, num);
      }, inverted);
      return tmp;
    }
    exports.FpInvertBatch = FpInvertBatch2;
    function FpDiv(f2, lhs, rhs) {
      return f2.mul(lhs, typeof rhs === "bigint" ? invert2(rhs, f2.ORDER) : f2.inv(rhs));
    }
    exports.FpDiv = FpDiv;
    function FpIsSquare(f2) {
      const legendreConst = (f2.ORDER - _1n7) / _2n6;
      return (x) => {
        const p = f2.pow(x, legendreConst);
        return f2.eql(p, f2.ZERO) || f2.eql(p, f2.ONE);
      };
    }
    exports.FpIsSquare = FpIsSquare;
    function nLength2(n2, nBitLength) {
      const _nBitLength = nBitLength !== void 0 ? nBitLength : n2.toString(2).length;
      const nByteLength = Math.ceil(_nBitLength / 8);
      return { nBitLength: _nBitLength, nByteLength };
    }
    exports.nLength = nLength2;
    function Field2(ORDER, bitLen2, isLE2 = false, redef = {}) {
      if (ORDER <= _0n7)
        throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
      const { nBitLength: BITS, nByteLength: BYTES } = nLength2(ORDER, bitLen2);
      if (BYTES > 2048)
        throw new Error("Field lengths over 2048 bytes are not supported");
      const sqrtP = FpSqrt2(ORDER);
      const f2 = Object.freeze({
        ORDER,
        BITS,
        BYTES,
        MASK: (0, utils_js_1.bitMask)(BITS),
        ZERO: _0n7,
        ONE: _1n7,
        create: (num) => mod2(num, ORDER),
        isValid: (num) => {
          if (typeof num !== "bigint")
            throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
          return _0n7 <= num && num < ORDER;
        },
        is0: (num) => num === _0n7,
        isOdd: (num) => (num & _1n7) === _1n7,
        neg: (num) => mod2(-num, ORDER),
        eql: (lhs, rhs) => lhs === rhs,
        sqr: (num) => mod2(num * num, ORDER),
        add: (lhs, rhs) => mod2(lhs + rhs, ORDER),
        sub: (lhs, rhs) => mod2(lhs - rhs, ORDER),
        mul: (lhs, rhs) => mod2(lhs * rhs, ORDER),
        pow: (num, power) => FpPow2(f2, num, power),
        div: (lhs, rhs) => mod2(lhs * invert2(rhs, ORDER), ORDER),
        // Same as above, but doesn't normalize
        sqrN: (num) => num * num,
        addN: (lhs, rhs) => lhs + rhs,
        subN: (lhs, rhs) => lhs - rhs,
        mulN: (lhs, rhs) => lhs * rhs,
        inv: (num) => invert2(num, ORDER),
        sqrt: redef.sqrt || ((n2) => sqrtP(f2, n2)),
        invertBatch: (lst) => FpInvertBatch2(f2, lst),
        // TODO: do we really need constant cmov?
        // We don't have const-time bigints anyway, so probably will be not very useful
        cmov: (a, b2, c) => c ? b2 : a,
        toBytes: (num) => isLE2 ? (0, utils_js_1.numberToBytesLE)(num, BYTES) : (0, utils_js_1.numberToBytesBE)(num, BYTES),
        fromBytes: (bytes3) => {
          if (bytes3.length !== BYTES)
            throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes3.length}`);
          return isLE2 ? (0, utils_js_1.bytesToNumberLE)(bytes3) : (0, utils_js_1.bytesToNumberBE)(bytes3);
        }
      });
      return Object.freeze(f2);
    }
    exports.Field = Field2;
    function FpSqrtOdd(Fp2, elm) {
      if (!Fp2.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp2.sqrt(elm);
      return Fp2.isOdd(root) ? root : Fp2.neg(root);
    }
    exports.FpSqrtOdd = FpSqrtOdd;
    function FpSqrtEven(Fp2, elm) {
      if (!Fp2.isOdd)
        throw new Error(`Field doesn't have isOdd`);
      const root = Fp2.sqrt(elm);
      return Fp2.isOdd(root) ? Fp2.neg(root) : root;
    }
    exports.FpSqrtEven = FpSqrtEven;
    function hashToPrivateScalar(hash2, groupOrder, isLE2 = false) {
      hash2 = (0, utils_js_1.ensureBytes)("privateHash", hash2);
      const hashLen = hash2.length;
      const minLen = nLength2(groupOrder).nByteLength + 8;
      if (minLen < 24 || hashLen < minLen || hashLen > 1024)
        throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);
      const num = isLE2 ? (0, utils_js_1.bytesToNumberLE)(hash2) : (0, utils_js_1.bytesToNumberBE)(hash2);
      return mod2(num, groupOrder - _1n7) + _1n7;
    }
    exports.hashToPrivateScalar = hashToPrivateScalar;
    function getFieldBytesLength2(fieldOrder) {
      if (typeof fieldOrder !== "bigint")
        throw new Error("field order must be bigint");
      const bitLength = fieldOrder.toString(2).length;
      return Math.ceil(bitLength / 8);
    }
    exports.getFieldBytesLength = getFieldBytesLength2;
    function getMinHashLength2(fieldOrder) {
      const length = getFieldBytesLength2(fieldOrder);
      return length + Math.ceil(length / 2);
    }
    exports.getMinHashLength = getMinHashLength2;
    function mapHashToField2(key, fieldOrder, isLE2 = false) {
      const len = key.length;
      const fieldLen = getFieldBytesLength2(fieldOrder);
      const minLen = getMinHashLength2(fieldOrder);
      if (len < 16 || len < minLen || len > 1024)
        throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
      const num = isLE2 ? (0, utils_js_1.bytesToNumberBE)(key) : (0, utils_js_1.bytesToNumberLE)(key);
      const reduced = mod2(num, fieldOrder - _1n7) + _1n7;
      return isLE2 ? (0, utils_js_1.numberToBytesLE)(reduced, fieldLen) : (0, utils_js_1.numberToBytesBE)(reduced, fieldLen);
    }
    exports.mapHashToField = mapHashToField2;
  }
});

// node_modules/@noble/curves/abstract/curve.js
var require_curve = __commonJS({
  "node_modules/@noble/curves/abstract/curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validateBasic = exports.wNAF = void 0;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils3();
    var _0n7 = BigInt(0);
    var _1n7 = BigInt(1);
    function wNAF2(c, bits) {
      const constTimeNegate = (condition, item) => {
        const neg = item.negate();
        return condition ? neg : item;
      };
      const opts = (W) => {
        const windows = Math.ceil(bits / W) + 1;
        const windowSize = 2 ** (W - 1);
        return { windows, windowSize };
      };
      return {
        constTimeNegate,
        // non-const time multiplication ladder
        unsafeLadder(elm, n2) {
          let p = c.ZERO;
          let d = elm;
          while (n2 > _0n7) {
            if (n2 & _1n7)
              p = p.add(d);
            d = d.double();
            n2 >>= _1n7;
          }
          return p;
        },
        /**
         * Creates a wNAF precomputation window. Used for caching.
         * Default window size is set by `utils.precompute()` and is equal to 8.
         * Number of precomputed points depends on the curve size:
         * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
         * - 𝑊 is the window size
         * - 𝑛 is the bitlength of the curve order.
         * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
         * @returns precomputed point tables flattened to a single array
         */
        precomputeWindow(elm, W) {
          const { windows, windowSize } = opts(W);
          const points = [];
          let p = elm;
          let base = p;
          for (let window2 = 0; window2 < windows; window2++) {
            base = p;
            points.push(base);
            for (let i = 1; i < windowSize; i++) {
              base = base.add(p);
              points.push(base);
            }
            p = base.double();
          }
          return points;
        },
        /**
         * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
         * @param W window size
         * @param precomputes precomputed tables
         * @param n scalar (we don't check here, but should be less than curve order)
         * @returns real and fake (for const-time) points
         */
        wNAF(W, precomputes, n2) {
          const { windows, windowSize } = opts(W);
          let p = c.ZERO;
          let f2 = c.BASE;
          const mask2 = BigInt(2 ** W - 1);
          const maxNumber = 2 ** W;
          const shiftBy = BigInt(W);
          for (let window2 = 0; window2 < windows; window2++) {
            const offset = window2 * windowSize;
            let wbits = Number(n2 & mask2);
            n2 >>= shiftBy;
            if (wbits > windowSize) {
              wbits -= maxNumber;
              n2 += _1n7;
            }
            const offset1 = offset;
            const offset2 = offset + Math.abs(wbits) - 1;
            const cond1 = window2 % 2 !== 0;
            const cond2 = wbits < 0;
            if (wbits === 0) {
              f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
            } else {
              p = p.add(constTimeNegate(cond2, precomputes[offset2]));
            }
          }
          return { p, f: f2 };
        },
        wNAFCached(P, precomputesMap, n2, transform) {
          const W = P._WINDOW_SIZE || 1;
          let comp = precomputesMap.get(P);
          if (!comp) {
            comp = this.precomputeWindow(P, W);
            if (W !== 1) {
              precomputesMap.set(P, transform(comp));
            }
          }
          return this.wNAF(W, comp, n2);
        }
      };
    }
    exports.wNAF = wNAF2;
    function validateBasic2(curve) {
      (0, modular_js_1.validateField)(curve.Fp);
      (0, utils_js_1.validateObject)(curve, {
        n: "bigint",
        h: "bigint",
        Gx: "field",
        Gy: "field"
      }, {
        nBitLength: "isSafeInteger",
        nByteLength: "isSafeInteger"
      });
      return Object.freeze({
        ...(0, modular_js_1.nLength)(curve.n, curve.nBitLength),
        ...curve,
        ...{ p: curve.Fp.ORDER }
      });
    }
    exports.validateBasic = validateBasic2;
  }
});

// node_modules/@noble/curves/abstract/weierstrass.js
var require_weierstrass = __commonJS({
  "node_modules/@noble/curves/abstract/weierstrass.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mapToCurveSimpleSWU = exports.SWUFpSqrtRatio = exports.weierstrass = exports.weierstrassPoints = exports.DER = void 0;
    var mod2 = require_modular();
    var ut = require_utils3();
    var utils_js_1 = require_utils3();
    var curve_js_1 = require_curve();
    function validatePointOpts2(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        a: "field",
        b: "field"
      }, {
        allowedPrivateKeyLengths: "array",
        wrapPrivateKey: "boolean",
        isTorsionFree: "function",
        clearCofactor: "function",
        allowInfinityPoint: "boolean",
        fromBytes: "function",
        toBytes: "function"
      });
      const { endo, Fp: Fp2, a } = opts;
      if (endo) {
        if (!Fp2.eql(a, Fp2.ZERO)) {
          throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
        }
        if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
          throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
        }
      }
      return Object.freeze({ ...opts });
    }
    var { bytesToNumberBE: b2n2, hexToBytes: h2b2 } = ut;
    exports.DER = {
      // asn.1 DER encoding utils
      Err: class DERErr extends Error {
        constructor(m = "") {
          super(m);
        }
      },
      _parseInt(data) {
        const { Err: E } = exports.DER;
        if (data.length < 2 || data[0] !== 2)
          throw new E("Invalid signature integer tag");
        const len = data[1];
        const res = data.subarray(2, len + 2);
        if (!len || res.length !== len)
          throw new E("Invalid signature integer: wrong length");
        if (res[0] & 128)
          throw new E("Invalid signature integer: negative");
        if (res[0] === 0 && !(res[1] & 128))
          throw new E("Invalid signature integer: unnecessary leading zero");
        return { d: b2n2(res), l: data.subarray(len + 2) };
      },
      toSig(hex) {
        const { Err: E } = exports.DER;
        const data = typeof hex === "string" ? h2b2(hex) : hex;
        if (!(data instanceof Uint8Array))
          throw new Error("ui8a expected");
        let l = data.length;
        if (l < 2 || data[0] != 48)
          throw new E("Invalid signature tag");
        if (data[1] !== l - 2)
          throw new E("Invalid signature: incorrect length");
        const { d: r2, l: sBytes } = exports.DER._parseInt(data.subarray(2));
        const { d: s, l: rBytesLeft } = exports.DER._parseInt(sBytes);
        if (rBytesLeft.length)
          throw new E("Invalid signature: left bytes after parsing");
        return { r: r2, s };
      },
      hexFromSig(sig) {
        const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
        const h = (num) => {
          const hex = num.toString(16);
          return hex.length & 1 ? `0${hex}` : hex;
        };
        const s = slice(h(sig.s));
        const r2 = slice(h(sig.r));
        const shl = s.length / 2;
        const rhl = r2.length / 2;
        const sl = h(shl);
        const rl = h(rhl);
        return `30${h(rhl + shl + 4)}02${rl}${r2}02${sl}${s}`;
      }
    };
    var _0n7 = BigInt(0);
    var _1n7 = BigInt(1);
    var _2n6 = BigInt(2);
    var _3n3 = BigInt(3);
    var _4n3 = BigInt(4);
    function weierstrassPoints2(opts) {
      const CURVE = validatePointOpts2(opts);
      const { Fp: Fp2 } = CURVE;
      const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
        const a = point.toAffine();
        return ut.concatBytes(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));
      });
      const fromBytes = CURVE.fromBytes || ((bytes3) => {
        const tail = bytes3.subarray(1);
        const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
        const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
        return { x, y };
      });
      function weierstrassEquation(x) {
        const { a, b: b2 } = CURVE;
        const x2 = Fp2.sqr(x);
        const x3 = Fp2.mul(x2, x);
        return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b2);
      }
      if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
        throw new Error("bad generator point: equation left != right");
      function isWithinCurveOrder(num) {
        return typeof num === "bigint" && _0n7 < num && num < CURVE.n;
      }
      function assertGE(num) {
        if (!isWithinCurveOrder(num))
          throw new Error("Expected valid bigint: 0 < bigint < curve.n");
      }
      function normPrivateKeyToScalar(key) {
        const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: n2 } = CURVE;
        if (lengths && typeof key !== "bigint") {
          if (key instanceof Uint8Array)
            key = ut.bytesToHex(key);
          if (typeof key !== "string" || !lengths.includes(key.length))
            throw new Error("Invalid key");
          key = key.padStart(nByteLength * 2, "0");
        }
        let num;
        try {
          num = typeof key === "bigint" ? key : ut.bytesToNumberBE((0, utils_js_1.ensureBytes)("private key", key, nByteLength));
        } catch (error) {
          throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
        }
        if (wrapPrivateKey)
          num = mod2.mod(num, n2);
        assertGE(num);
        return num;
      }
      const pointPrecomputes = /* @__PURE__ */ new Map();
      function assertPrjPoint(other) {
        if (!(other instanceof Point2))
          throw new Error("ProjectivePoint expected");
      }
      class Point2 {
        constructor(px, py, pz) {
          this.px = px;
          this.py = py;
          this.pz = pz;
          if (px == null || !Fp2.isValid(px))
            throw new Error("x required");
          if (py == null || !Fp2.isValid(py))
            throw new Error("y required");
          if (pz == null || !Fp2.isValid(pz))
            throw new Error("z required");
        }
        // Does not validate if the point is on-curve.
        // Use fromHex instead, or call assertValidity() later.
        static fromAffine(p) {
          const { x, y } = p || {};
          if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))
            throw new Error("invalid affine point");
          if (p instanceof Point2)
            throw new Error("projective point not allowed");
          const is0 = (i) => Fp2.eql(i, Fp2.ZERO);
          if (is0(x) && is0(y))
            return Point2.ZERO;
          return new Point2(x, y, Fp2.ONE);
        }
        get x() {
          return this.toAffine().x;
        }
        get y() {
          return this.toAffine().y;
        }
        /**
         * Takes a bunch of Projective Points but executes only one
         * inversion on all of them. Inversion is very slow operation,
         * so this improves performance massively.
         * Optimization: converts a list of projective points to a list of identical points with Z=1.
         */
        static normalizeZ(points) {
          const toInv = Fp2.invertBatch(points.map((p) => p.pz));
          return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
        }
        /**
         * Converts hash string or Uint8Array to Point.
         * @param hex short/long ECDSA hex
         */
        static fromHex(hex) {
          const P = Point2.fromAffine(fromBytes((0, utils_js_1.ensureBytes)("pointHex", hex)));
          P.assertValidity();
          return P;
        }
        // Multiplies generator point by privateKey.
        static fromPrivateKey(privateKey) {
          return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
        }
        // "Private method", don't use it directly
        _setWindowSize(windowSize) {
          this._WINDOW_SIZE = windowSize;
          pointPrecomputes.delete(this);
        }
        // A point on curve is valid if it conforms to equation.
        assertValidity() {
          if (this.is0()) {
            if (CURVE.allowInfinityPoint && !Fp2.is0(this.py))
              return;
            throw new Error("bad point: ZERO");
          }
          const { x, y } = this.toAffine();
          if (!Fp2.isValid(x) || !Fp2.isValid(y))
            throw new Error("bad point: x or y not FE");
          const left = Fp2.sqr(y);
          const right = weierstrassEquation(x);
          if (!Fp2.eql(left, right))
            throw new Error("bad point: equation left != right");
          if (!this.isTorsionFree())
            throw new Error("bad point: not in prime-order subgroup");
        }
        hasEvenY() {
          const { y } = this.toAffine();
          if (Fp2.isOdd)
            return !Fp2.isOdd(y);
          throw new Error("Field doesn't support isOdd");
        }
        /**
         * Compare one point to another.
         */
        equals(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          const U1 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
          const U2 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
          return U1 && U2;
        }
        /**
         * Flips point to one corresponding to (x, -y) in Affine coordinates.
         */
        negate() {
          return new Point2(this.px, Fp2.neg(this.py), this.pz);
        }
        // Renes-Costello-Batina exception-free doubling formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 3
        // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
        double() {
          const { a, b: b2 } = CURVE;
          const b3 = Fp2.mul(b2, _3n3);
          const { px: X1, py: Y1, pz: Z1 } = this;
          let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
          let t0 = Fp2.mul(X1, X1);
          let t1 = Fp2.mul(Y1, Y1);
          let t2 = Fp2.mul(Z1, Z1);
          let t3 = Fp2.mul(X1, Y1);
          t3 = Fp2.add(t3, t3);
          Z3 = Fp2.mul(X1, Z1);
          Z3 = Fp2.add(Z3, Z3);
          X3 = Fp2.mul(a, Z3);
          Y3 = Fp2.mul(b3, t2);
          Y3 = Fp2.add(X3, Y3);
          X3 = Fp2.sub(t1, Y3);
          Y3 = Fp2.add(t1, Y3);
          Y3 = Fp2.mul(X3, Y3);
          X3 = Fp2.mul(t3, X3);
          Z3 = Fp2.mul(b3, Z3);
          t2 = Fp2.mul(a, t2);
          t3 = Fp2.sub(t0, t2);
          t3 = Fp2.mul(a, t3);
          t3 = Fp2.add(t3, Z3);
          Z3 = Fp2.add(t0, t0);
          t0 = Fp2.add(Z3, t0);
          t0 = Fp2.add(t0, t2);
          t0 = Fp2.mul(t0, t3);
          Y3 = Fp2.add(Y3, t0);
          t2 = Fp2.mul(Y1, Z1);
          t2 = Fp2.add(t2, t2);
          t0 = Fp2.mul(t2, t3);
          X3 = Fp2.sub(X3, t0);
          Z3 = Fp2.mul(t2, t1);
          Z3 = Fp2.add(Z3, Z3);
          Z3 = Fp2.add(Z3, Z3);
          return new Point2(X3, Y3, Z3);
        }
        // Renes-Costello-Batina exception-free addition formula.
        // There is 30% faster Jacobian formula, but it is not complete.
        // https://eprint.iacr.org/2015/1060, algorithm 1
        // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
        add(other) {
          assertPrjPoint(other);
          const { px: X1, py: Y1, pz: Z1 } = this;
          const { px: X2, py: Y2, pz: Z2 } = other;
          let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
          const a = CURVE.a;
          const b3 = Fp2.mul(CURVE.b, _3n3);
          let t0 = Fp2.mul(X1, X2);
          let t1 = Fp2.mul(Y1, Y2);
          let t2 = Fp2.mul(Z1, Z2);
          let t3 = Fp2.add(X1, Y1);
          let t4 = Fp2.add(X2, Y2);
          t3 = Fp2.mul(t3, t4);
          t4 = Fp2.add(t0, t1);
          t3 = Fp2.sub(t3, t4);
          t4 = Fp2.add(X1, Z1);
          let t5 = Fp2.add(X2, Z2);
          t4 = Fp2.mul(t4, t5);
          t5 = Fp2.add(t0, t2);
          t4 = Fp2.sub(t4, t5);
          t5 = Fp2.add(Y1, Z1);
          X3 = Fp2.add(Y2, Z2);
          t5 = Fp2.mul(t5, X3);
          X3 = Fp2.add(t1, t2);
          t5 = Fp2.sub(t5, X3);
          Z3 = Fp2.mul(a, t4);
          X3 = Fp2.mul(b3, t2);
          Z3 = Fp2.add(X3, Z3);
          X3 = Fp2.sub(t1, Z3);
          Z3 = Fp2.add(t1, Z3);
          Y3 = Fp2.mul(X3, Z3);
          t1 = Fp2.add(t0, t0);
          t1 = Fp2.add(t1, t0);
          t2 = Fp2.mul(a, t2);
          t4 = Fp2.mul(b3, t4);
          t1 = Fp2.add(t1, t2);
          t2 = Fp2.sub(t0, t2);
          t2 = Fp2.mul(a, t2);
          t4 = Fp2.add(t4, t2);
          t0 = Fp2.mul(t1, t4);
          Y3 = Fp2.add(Y3, t0);
          t0 = Fp2.mul(t5, t4);
          X3 = Fp2.mul(t3, X3);
          X3 = Fp2.sub(X3, t0);
          t0 = Fp2.mul(t3, t1);
          Z3 = Fp2.mul(t5, Z3);
          Z3 = Fp2.add(Z3, t0);
          return new Point2(X3, Y3, Z3);
        }
        subtract(other) {
          return this.add(other.negate());
        }
        is0() {
          return this.equals(Point2.ZERO);
        }
        wNAF(n2) {
          return wnaf.wNAFCached(this, pointPrecomputes, n2, (comp) => {
            const toInv = Fp2.invertBatch(comp.map((p) => p.pz));
            return comp.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
          });
        }
        /**
         * Non-constant-time multiplication. Uses double-and-add algorithm.
         * It's faster, but should only be used when you don't care about
         * an exposed private key e.g. sig verification, which works over *public* keys.
         */
        multiplyUnsafe(n2) {
          const I = Point2.ZERO;
          if (n2 === _0n7)
            return I;
          assertGE(n2);
          if (n2 === _1n7)
            return this;
          const { endo } = CURVE;
          if (!endo)
            return wnaf.unsafeLadder(this, n2);
          let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
          let k1p = I;
          let k2p = I;
          let d = this;
          while (k1 > _0n7 || k2 > _0n7) {
            if (k1 & _1n7)
              k1p = k1p.add(d);
            if (k2 & _1n7)
              k2p = k2p.add(d);
            d = d.double();
            k1 >>= _1n7;
            k2 >>= _1n7;
          }
          if (k1neg)
            k1p = k1p.negate();
          if (k2neg)
            k2p = k2p.negate();
          k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
          return k1p.add(k2p);
        }
        /**
         * Constant time multiplication.
         * Uses wNAF method. Windowed method may be 10% faster,
         * but takes 2x longer to generate and consumes 2x memory.
         * Uses precomputes when available.
         * Uses endomorphism for Koblitz curves.
         * @param scalar by which the point would be multiplied
         * @returns New point
         */
        multiply(scalar) {
          assertGE(scalar);
          let n2 = scalar;
          let point, fake;
          const { endo } = CURVE;
          if (endo) {
            const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
            let { p: k1p, f: f1p } = this.wNAF(k1);
            let { p: k2p, f: f2p } = this.wNAF(k2);
            k1p = wnaf.constTimeNegate(k1neg, k1p);
            k2p = wnaf.constTimeNegate(k2neg, k2p);
            k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
            point = k1p.add(k2p);
            fake = f1p.add(f2p);
          } else {
            const { p, f: f2 } = this.wNAF(n2);
            point = p;
            fake = f2;
          }
          return Point2.normalizeZ([point, fake])[0];
        }
        /**
         * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
         * Not using Strauss-Shamir trick: precomputation tables are faster.
         * The trick could be useful if both P and Q are not G (not in our case).
         * @returns non-zero affine point
         */
        multiplyAndAddUnsafe(Q, a, b2) {
          const G = Point2.BASE;
          const mul = (P, a2) => a2 === _0n7 || a2 === _1n7 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
          const sum = mul(this, a).add(mul(Q, b2));
          return sum.is0() ? void 0 : sum;
        }
        // Converts Projective point to affine (x, y) coordinates.
        // Can accept precomputed Z^-1 - for example, from invertBatch.
        // (x, y, z) ∋ (x=x/z, y=y/z)
        toAffine(iz) {
          const { px: x, py: y, pz: z } = this;
          const is0 = this.is0();
          if (iz == null)
            iz = is0 ? Fp2.ONE : Fp2.inv(z);
          const ax = Fp2.mul(x, iz);
          const ay = Fp2.mul(y, iz);
          const zz = Fp2.mul(z, iz);
          if (is0)
            return { x: Fp2.ZERO, y: Fp2.ZERO };
          if (!Fp2.eql(zz, Fp2.ONE))
            throw new Error("invZ was invalid");
          return { x: ax, y: ay };
        }
        isTorsionFree() {
          const { h: cofactor, isTorsionFree } = CURVE;
          if (cofactor === _1n7)
            return true;
          if (isTorsionFree)
            return isTorsionFree(Point2, this);
          throw new Error("isTorsionFree() has not been declared for the elliptic curve");
        }
        clearCofactor() {
          const { h: cofactor, clearCofactor } = CURVE;
          if (cofactor === _1n7)
            return this;
          if (clearCofactor)
            return clearCofactor(Point2, this);
          return this.multiplyUnsafe(CURVE.h);
        }
        toRawBytes(isCompressed = true) {
          this.assertValidity();
          return toBytes2(Point2, this, isCompressed);
        }
        toHex(isCompressed = true) {
          return ut.bytesToHex(this.toRawBytes(isCompressed));
        }
      }
      Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp2.ONE);
      Point2.ZERO = new Point2(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
      const _bits = CURVE.nBitLength;
      const wnaf = (0, curve_js_1.wNAF)(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
      return {
        CURVE,
        ProjectivePoint: Point2,
        normPrivateKeyToScalar,
        weierstrassEquation,
        isWithinCurveOrder
      };
    }
    exports.weierstrassPoints = weierstrassPoints2;
    function validateOpts2(curve) {
      const opts = (0, curve_js_1.validateBasic)(curve);
      ut.validateObject(opts, {
        hash: "hash",
        hmac: "function",
        randomBytes: "function"
      }, {
        bits2int: "function",
        bits2int_modN: "function",
        lowS: "boolean"
      });
      return Object.freeze({ lowS: true, ...opts });
    }
    function weierstrass2(curveDef) {
      const CURVE = validateOpts2(curveDef);
      const { Fp: Fp2, n: CURVE_ORDER } = CURVE;
      const compressedLen = Fp2.BYTES + 1;
      const uncompressedLen = 2 * Fp2.BYTES + 1;
      function isValidFieldElement(num) {
        return _0n7 < num && num < Fp2.ORDER;
      }
      function modN2(a) {
        return mod2.mod(a, CURVE_ORDER);
      }
      function invN(a) {
        return mod2.invert(a, CURVE_ORDER);
      }
      const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints2({
        ...CURVE,
        toBytes(_c, point, isCompressed) {
          const a = point.toAffine();
          const x = Fp2.toBytes(a.x);
          const cat = ut.concatBytes;
          if (isCompressed) {
            return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
          } else {
            return cat(Uint8Array.from([4]), x, Fp2.toBytes(a.y));
          }
        },
        fromBytes(bytes3) {
          const len = bytes3.length;
          const head = bytes3[0];
          const tail = bytes3.subarray(1);
          if (len === compressedLen && (head === 2 || head === 3)) {
            const x = ut.bytesToNumberBE(tail);
            if (!isValidFieldElement(x))
              throw new Error("Point is not on curve");
            const y2 = weierstrassEquation(x);
            let y = Fp2.sqrt(y2);
            const isYOdd = (y & _1n7) === _1n7;
            const isHeadOdd = (head & 1) === 1;
            if (isHeadOdd !== isYOdd)
              y = Fp2.neg(y);
            return { x, y };
          } else if (len === uncompressedLen && head === 4) {
            const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
            const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
            return { x, y };
          } else {
            throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
          }
        }
      });
      const numToNByteStr = (num) => ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));
      function isBiggerThanHalfOrder(number2) {
        const HALF = CURVE_ORDER >> _1n7;
        return number2 > HALF;
      }
      function normalizeS(s) {
        return isBiggerThanHalfOrder(s) ? modN2(-s) : s;
      }
      const slcNum = (b2, from, to) => ut.bytesToNumberBE(b2.slice(from, to));
      class Signature2 {
        constructor(r2, s, recovery) {
          this.r = r2;
          this.s = s;
          this.recovery = recovery;
          this.assertValidity();
        }
        // pair (bytes of r, bytes of s)
        static fromCompact(hex) {
          const l = CURVE.nByteLength;
          hex = (0, utils_js_1.ensureBytes)("compactSignature", hex, l * 2);
          return new Signature2(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
        }
        // DER encoded ECDSA signature
        // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
        static fromDER(hex) {
          const { r: r2, s } = exports.DER.toSig((0, utils_js_1.ensureBytes)("DER", hex));
          return new Signature2(r2, s);
        }
        assertValidity() {
          if (!isWithinCurveOrder(this.r))
            throw new Error("r must be 0 < r < CURVE.n");
          if (!isWithinCurveOrder(this.s))
            throw new Error("s must be 0 < s < CURVE.n");
        }
        addRecoveryBit(recovery) {
          return new Signature2(this.r, this.s, recovery);
        }
        recoverPublicKey(msgHash) {
          const { r: r2, s, recovery: rec } = this;
          const h = bits2int_modN((0, utils_js_1.ensureBytes)("msgHash", msgHash));
          if (rec == null || ![0, 1, 2, 3].includes(rec))
            throw new Error("recovery id invalid");
          const radj = rec === 2 || rec === 3 ? r2 + CURVE.n : r2;
          if (radj >= Fp2.ORDER)
            throw new Error("recovery id 2 or 3 invalid");
          const prefix = (rec & 1) === 0 ? "02" : "03";
          const R = Point2.fromHex(prefix + numToNByteStr(radj));
          const ir = invN(radj);
          const u1 = modN2(-h * ir);
          const u2 = modN2(s * ir);
          const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
          if (!Q)
            throw new Error("point at infinify");
          Q.assertValidity();
          return Q;
        }
        // Signatures should be low-s, to prevent malleability.
        hasHighS() {
          return isBiggerThanHalfOrder(this.s);
        }
        normalizeS() {
          return this.hasHighS() ? new Signature2(this.r, modN2(-this.s), this.recovery) : this;
        }
        // DER-encoded
        toDERRawBytes() {
          return ut.hexToBytes(this.toDERHex());
        }
        toDERHex() {
          return exports.DER.hexFromSig({ r: this.r, s: this.s });
        }
        // padded bytes of r, then padded bytes of s
        toCompactRawBytes() {
          return ut.hexToBytes(this.toCompactHex());
        }
        toCompactHex() {
          return numToNByteStr(this.r) + numToNByteStr(this.s);
        }
      }
      const utils = {
        isValidPrivateKey(privateKey) {
          try {
            normPrivateKeyToScalar(privateKey);
            return true;
          } catch (error) {
            return false;
          }
        },
        normPrivateKeyToScalar,
        /**
         * Produces cryptographically secure private key from random of size
         * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
         */
        randomPrivateKey: () => {
          const length = mod2.getMinHashLength(CURVE.n);
          return mod2.mapHashToField(CURVE.randomBytes(length), CURVE.n);
        },
        /**
         * Creates precompute table for an arbitrary EC point. Makes point "cached".
         * Allows to massively speed-up `point.multiply(scalar)`.
         * @returns cached point
         * @example
         * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
         * fast.multiply(privKey); // much faster ECDH now
         */
        precompute(windowSize = 8, point = Point2.BASE) {
          point._setWindowSize(windowSize);
          point.multiply(BigInt(3));
          return point;
        }
      };
      function getPublicKey(privateKey, isCompressed = true) {
        return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
      }
      function isProbPub(item) {
        const arr = item instanceof Uint8Array;
        const str = typeof item === "string";
        const len = (arr || str) && item.length;
        if (arr)
          return len === compressedLen || len === uncompressedLen;
        if (str)
          return len === 2 * compressedLen || len === 2 * uncompressedLen;
        if (item instanceof Point2)
          return true;
        return false;
      }
      function getSharedSecret(privateA, publicB, isCompressed = true) {
        if (isProbPub(privateA))
          throw new Error("first arg must be private key");
        if (!isProbPub(publicB))
          throw new Error("second arg must be public key");
        const b2 = Point2.fromHex(publicB);
        return b2.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
      }
      const bits2int = CURVE.bits2int || function(bytes3) {
        const num = ut.bytesToNumberBE(bytes3);
        const delta = bytes3.length * 8 - CURVE.nBitLength;
        return delta > 0 ? num >> BigInt(delta) : num;
      };
      const bits2int_modN = CURVE.bits2int_modN || function(bytes3) {
        return modN2(bits2int(bytes3));
      };
      const ORDER_MASK = ut.bitMask(CURVE.nBitLength);
      function int2octets(num) {
        if (typeof num !== "bigint")
          throw new Error("bigint expected");
        if (!(_0n7 <= num && num < ORDER_MASK))
          throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
        return ut.numberToBytesBE(num, CURVE.nByteLength);
      }
      function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
        if (["recovered", "canonical"].some((k) => k in opts))
          throw new Error("sign() legacy options not supported");
        const { hash: hash2, randomBytes: randomBytes4 } = CURVE;
        let { lowS, prehash, extraEntropy: ent } = opts;
        if (lowS == null)
          lowS = true;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        if (prehash)
          msgHash = (0, utils_js_1.ensureBytes)("prehashed msgHash", hash2(msgHash));
        const h1int = bits2int_modN(msgHash);
        const d = normPrivateKeyToScalar(privateKey);
        const seedArgs = [int2octets(d), int2octets(h1int)];
        if (ent != null) {
          const e = ent === true ? randomBytes4(Fp2.BYTES) : ent;
          seedArgs.push((0, utils_js_1.ensureBytes)("extraEntropy", e));
        }
        const seed = ut.concatBytes(...seedArgs);
        const m = h1int;
        function k2sig(kBytes) {
          const k = bits2int(kBytes);
          if (!isWithinCurveOrder(k))
            return;
          const ik = invN(k);
          const q = Point2.BASE.multiply(k).toAffine();
          const r2 = modN2(q.x);
          if (r2 === _0n7)
            return;
          const s = modN2(ik * modN2(m + r2 * d));
          if (s === _0n7)
            return;
          let recovery = (q.x === r2 ? 0 : 2) | Number(q.y & _1n7);
          let normS = s;
          if (lowS && isBiggerThanHalfOrder(s)) {
            normS = normalizeS(s);
            recovery ^= 1;
          }
          return new Signature2(r2, normS, recovery);
        }
        return { seed, k2sig };
      }
      const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
      const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
      function sign(msgHash, privKey, opts = defaultSigOpts) {
        const { seed, k2sig } = prepSig(msgHash, privKey, opts);
        const C = CURVE;
        const drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
        return drbg(seed, k2sig);
      }
      Point2.BASE._setWindowSize(8);
      function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
        var _a2;
        const sg = signature;
        msgHash = (0, utils_js_1.ensureBytes)("msgHash", msgHash);
        publicKey = (0, utils_js_1.ensureBytes)("publicKey", publicKey);
        if ("strict" in opts)
          throw new Error("options.strict was renamed to lowS");
        const { lowS, prehash } = opts;
        let _sig = void 0;
        let P;
        try {
          if (typeof sg === "string" || sg instanceof Uint8Array) {
            try {
              _sig = Signature2.fromDER(sg);
            } catch (derError) {
              if (!(derError instanceof exports.DER.Err))
                throw derError;
              _sig = Signature2.fromCompact(sg);
            }
          } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
            const { r: r3, s: s2 } = sg;
            _sig = new Signature2(r3, s2);
          } else {
            throw new Error("PARSE");
          }
          P = Point2.fromHex(publicKey);
        } catch (error) {
          if (error.message === "PARSE")
            throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
          return false;
        }
        if (lowS && _sig.hasHighS())
          return false;
        if (prehash)
          msgHash = CURVE.hash(msgHash);
        const { r: r2, s } = _sig;
        const h = bits2int_modN(msgHash);
        const is = invN(s);
        const u1 = modN2(h * is);
        const u2 = modN2(r2 * is);
        const R = (_a2 = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a2.toAffine();
        if (!R)
          return false;
        const v = modN2(R.x);
        return v === r2;
      }
      return {
        CURVE,
        getPublicKey,
        getSharedSecret,
        sign,
        verify,
        ProjectivePoint: Point2,
        Signature: Signature2,
        utils
      };
    }
    exports.weierstrass = weierstrass2;
    function SWUFpSqrtRatio2(Fp2, Z) {
      const q = Fp2.ORDER;
      let l = _0n7;
      for (let o = q - _1n7; o % _2n6 === _0n7; o /= _2n6)
        l += _1n7;
      const c1 = l;
      const _2n_pow_c1_1 = _2n6 << c1 - _1n7 - _1n7;
      const _2n_pow_c1 = _2n_pow_c1_1 * _2n6;
      const c2 = (q - _1n7) / _2n_pow_c1;
      const c3 = (c2 - _1n7) / _2n6;
      const c4 = _2n_pow_c1 - _1n7;
      const c5 = _2n_pow_c1_1;
      const c6 = Fp2.pow(Z, c2);
      const c7 = Fp2.pow(Z, (c2 + _1n7) / _2n6);
      let sqrtRatio = (u, v) => {
        let tv1 = c6;
        let tv2 = Fp2.pow(v, c4);
        let tv3 = Fp2.sqr(tv2);
        tv3 = Fp2.mul(tv3, v);
        let tv5 = Fp2.mul(u, tv3);
        tv5 = Fp2.pow(tv5, c3);
        tv5 = Fp2.mul(tv5, tv2);
        tv2 = Fp2.mul(tv5, v);
        tv3 = Fp2.mul(tv5, u);
        let tv4 = Fp2.mul(tv3, tv2);
        tv5 = Fp2.pow(tv4, c5);
        let isQR = Fp2.eql(tv5, Fp2.ONE);
        tv2 = Fp2.mul(tv3, c7);
        tv5 = Fp2.mul(tv4, tv1);
        tv3 = Fp2.cmov(tv2, tv3, isQR);
        tv4 = Fp2.cmov(tv5, tv4, isQR);
        for (let i = c1; i > _1n7; i--) {
          let tv52 = i - _2n6;
          tv52 = _2n6 << tv52 - _1n7;
          let tvv5 = Fp2.pow(tv4, tv52);
          const e1 = Fp2.eql(tvv5, Fp2.ONE);
          tv2 = Fp2.mul(tv3, tv1);
          tv1 = Fp2.mul(tv1, tv1);
          tvv5 = Fp2.mul(tv4, tv1);
          tv3 = Fp2.cmov(tv2, tv3, e1);
          tv4 = Fp2.cmov(tvv5, tv4, e1);
        }
        return { isValid: isQR, value: tv3 };
      };
      if (Fp2.ORDER % _4n3 === _3n3) {
        const c12 = (Fp2.ORDER - _3n3) / _4n3;
        const c22 = Fp2.sqrt(Fp2.neg(Z));
        sqrtRatio = (u, v) => {
          let tv1 = Fp2.sqr(v);
          const tv2 = Fp2.mul(u, v);
          tv1 = Fp2.mul(tv1, tv2);
          let y1 = Fp2.pow(tv1, c12);
          y1 = Fp2.mul(y1, tv2);
          const y2 = Fp2.mul(y1, c22);
          const tv3 = Fp2.mul(Fp2.sqr(y1), v);
          const isQR = Fp2.eql(tv3, u);
          let y = Fp2.cmov(y2, y1, isQR);
          return { isValid: isQR, value: y };
        };
      }
      return sqrtRatio;
    }
    exports.SWUFpSqrtRatio = SWUFpSqrtRatio2;
    function mapToCurveSimpleSWU2(Fp2, opts) {
      mod2.validateField(Fp2);
      if (!Fp2.isValid(opts.A) || !Fp2.isValid(opts.B) || !Fp2.isValid(opts.Z))
        throw new Error("mapToCurveSimpleSWU: invalid opts");
      const sqrtRatio = SWUFpSqrtRatio2(Fp2, opts.Z);
      if (!Fp2.isOdd)
        throw new Error("Fp.isOdd is not implemented!");
      return (u) => {
        let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
        tv1 = Fp2.sqr(u);
        tv1 = Fp2.mul(tv1, opts.Z);
        tv2 = Fp2.sqr(tv1);
        tv2 = Fp2.add(tv2, tv1);
        tv3 = Fp2.add(tv2, Fp2.ONE);
        tv3 = Fp2.mul(tv3, opts.B);
        tv4 = Fp2.cmov(opts.Z, Fp2.neg(tv2), !Fp2.eql(tv2, Fp2.ZERO));
        tv4 = Fp2.mul(tv4, opts.A);
        tv2 = Fp2.sqr(tv3);
        tv6 = Fp2.sqr(tv4);
        tv5 = Fp2.mul(tv6, opts.A);
        tv2 = Fp2.add(tv2, tv5);
        tv2 = Fp2.mul(tv2, tv3);
        tv6 = Fp2.mul(tv6, tv4);
        tv5 = Fp2.mul(tv6, opts.B);
        tv2 = Fp2.add(tv2, tv5);
        x = Fp2.mul(tv1, tv3);
        const { isValid, value } = sqrtRatio(tv2, tv6);
        y = Fp2.mul(tv1, u);
        y = Fp2.mul(y, value);
        x = Fp2.cmov(x, tv3, isValid);
        y = Fp2.cmov(y, value, isValid);
        const e1 = Fp2.isOdd(u) === Fp2.isOdd(y);
        y = Fp2.cmov(Fp2.neg(y), y, e1);
        x = Fp2.div(x, tv4);
        return { x, y };
      };
    }
    exports.mapToCurveSimpleSWU = mapToCurveSimpleSWU2;
  }
});

// node_modules/@noble/curves/abstract/hash-to-curve.js
var require_hash_to_curve = __commonJS({
  "node_modules/@noble/curves/abstract/hash-to-curve.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createHasher = exports.isogenyMap = exports.hash_to_field = exports.expand_message_xof = exports.expand_message_xmd = void 0;
    var modular_js_1 = require_modular();
    var utils_js_1 = require_utils3();
    function validateDST2(dst) {
      if (dst instanceof Uint8Array)
        return dst;
      if (typeof dst === "string")
        return (0, utils_js_1.utf8ToBytes)(dst);
      throw new Error("DST must be Uint8Array or string");
    }
    var os2ip2 = utils_js_1.bytesToNumberBE;
    function i2osp2(value, length) {
      if (value < 0 || value >= 1 << 8 * length) {
        throw new Error(`bad I2OSP call: value=${value} length=${length}`);
      }
      const res = Array.from({ length }).fill(0);
      for (let i = length - 1; i >= 0; i--) {
        res[i] = value & 255;
        value >>>= 8;
      }
      return new Uint8Array(res);
    }
    function strxor2(a, b2) {
      const arr = new Uint8Array(a.length);
      for (let i = 0; i < a.length; i++) {
        arr[i] = a[i] ^ b2[i];
      }
      return arr;
    }
    function isBytes3(item) {
      if (!(item instanceof Uint8Array))
        throw new Error("Uint8Array expected");
    }
    function isNum2(item) {
      if (!Number.isSafeInteger(item))
        throw new Error("number expected");
    }
    function expand_message_xmd2(msg, DST, lenInBytes, H) {
      isBytes3(msg);
      isBytes3(DST);
      isNum2(lenInBytes);
      if (DST.length > 255)
        DST = H((0, utils_js_1.concatBytes)((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-"), DST));
      const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
      const ell = Math.ceil(lenInBytes / b_in_bytes);
      if (ell > 255)
        throw new Error("Invalid xmd length");
      const DST_prime = (0, utils_js_1.concatBytes)(DST, i2osp2(DST.length, 1));
      const Z_pad = i2osp2(0, r_in_bytes);
      const l_i_b_str = i2osp2(lenInBytes, 2);
      const b2 = new Array(ell);
      const b_0 = H((0, utils_js_1.concatBytes)(Z_pad, msg, l_i_b_str, i2osp2(0, 1), DST_prime));
      b2[0] = H((0, utils_js_1.concatBytes)(b_0, i2osp2(1, 1), DST_prime));
      for (let i = 1; i <= ell; i++) {
        const args = [strxor2(b_0, b2[i - 1]), i2osp2(i + 1, 1), DST_prime];
        b2[i] = H((0, utils_js_1.concatBytes)(...args));
      }
      const pseudo_random_bytes = (0, utils_js_1.concatBytes)(...b2);
      return pseudo_random_bytes.slice(0, lenInBytes);
    }
    exports.expand_message_xmd = expand_message_xmd2;
    function expand_message_xof2(msg, DST, lenInBytes, k, H) {
      isBytes3(msg);
      isBytes3(DST);
      isNum2(lenInBytes);
      if (DST.length > 255) {
        const dkLen = Math.ceil(2 * k / 8);
        DST = H.create({ dkLen }).update((0, utils_js_1.utf8ToBytes)("H2C-OVERSIZE-DST-")).update(DST).digest();
      }
      if (lenInBytes > 65535 || DST.length > 255)
        throw new Error("expand_message_xof: invalid lenInBytes");
      return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp2(lenInBytes, 2)).update(DST).update(i2osp2(DST.length, 1)).digest();
    }
    exports.expand_message_xof = expand_message_xof2;
    function hash_to_field2(msg, count, options) {
      (0, utils_js_1.validateObject)(options, {
        DST: "stringOrUint8Array",
        p: "bigint",
        m: "isSafeInteger",
        k: "isSafeInteger",
        hash: "hash"
      });
      const { p, k, m, hash: hash2, expand, DST: _DST } = options;
      isBytes3(msg);
      isNum2(count);
      const DST = validateDST2(_DST);
      const log2p = p.toString(2).length;
      const L = Math.ceil((log2p + k) / 8);
      const len_in_bytes = count * m * L;
      let prb;
      if (expand === "xmd") {
        prb = expand_message_xmd2(msg, DST, len_in_bytes, hash2);
      } else if (expand === "xof") {
        prb = expand_message_xof2(msg, DST, len_in_bytes, k, hash2);
      } else if (expand === "_internal_pass") {
        prb = msg;
      } else {
        throw new Error('expand must be "xmd" or "xof"');
      }
      const u = new Array(count);
      for (let i = 0; i < count; i++) {
        const e = new Array(m);
        for (let j = 0; j < m; j++) {
          const elm_offset = L * (j + i * m);
          const tv = prb.subarray(elm_offset, elm_offset + L);
          e[j] = (0, modular_js_1.mod)(os2ip2(tv), p);
        }
        u[i] = e;
      }
      return u;
    }
    exports.hash_to_field = hash_to_field2;
    function isogenyMap2(field, map) {
      const COEFF = map.map((i) => Array.from(i).reverse());
      return (x, y) => {
        const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
        x = field.div(xNum, xDen);
        y = field.mul(y, field.div(yNum, yDen));
        return { x, y };
      };
    }
    exports.isogenyMap = isogenyMap2;
    function createHasher2(Point2, mapToCurve, def) {
      if (typeof mapToCurve !== "function")
        throw new Error("mapToCurve() must be defined");
      return {
        // Encodes byte string to elliptic curve.
        // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        hashToCurve(msg, options) {
          const u = hash_to_field2(msg, 2, { ...def, DST: def.DST, ...options });
          const u0 = Point2.fromAffine(mapToCurve(u[0]));
          const u1 = Point2.fromAffine(mapToCurve(u[1]));
          const P = u0.add(u1).clearCofactor();
          P.assertValidity();
          return P;
        },
        // Encodes byte string to elliptic curve.
        // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
        encodeToCurve(msg, options) {
          const u = hash_to_field2(msg, 1, { ...def, DST: def.encodeDST, ...options });
          const P = Point2.fromAffine(mapToCurve(u[0])).clearCofactor();
          P.assertValidity();
          return P;
        }
      };
    }
    exports.createHasher = createHasher2;
  }
});

// node_modules/@noble/curves/_shortw_utils.js
var require_shortw_utils = __commonJS({
  "node_modules/@noble/curves/_shortw_utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCurve = exports.getHash = void 0;
    var hmac_1 = require_hmac();
    var utils_1 = require_utils2();
    var weierstrass_js_1 = require_weierstrass();
    function getHash2(hash2) {
      return {
        hash: hash2,
        hmac: (key, ...msgs) => (0, hmac_1.hmac)(hash2, key, (0, utils_1.concatBytes)(...msgs)),
        randomBytes: utils_1.randomBytes
      };
    }
    exports.getHash = getHash2;
    function createCurve2(curveDef, defHash) {
      const create = (hash2) => (0, weierstrass_js_1.weierstrass)({ ...curveDef, ...getHash2(hash2) });
      return Object.freeze({ ...create(defHash), create });
    }
    exports.createCurve = createCurve2;
  }
});

// node_modules/@noble/curves/secp256k1.js
var require_secp256k1 = __commonJS({
  "node_modules/@noble/curves/secp256k1.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeToCurve = exports.hashToCurve = exports.schnorr = exports.secp256k1 = void 0;
    var sha256_1 = require_sha256();
    var utils_1 = require_utils2();
    var modular_js_1 = require_modular();
    var weierstrass_js_1 = require_weierstrass();
    var utils_js_1 = require_utils3();
    var hash_to_curve_js_1 = require_hash_to_curve();
    var _shortw_utils_js_1 = require_shortw_utils();
    var secp256k1P2 = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
    var secp256k1N2 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var _1n7 = BigInt(1);
    var _2n6 = BigInt(2);
    var divNearest2 = (a, b2) => (a + b2 / _2n6) / b2;
    function sqrtMod2(y) {
      const P = secp256k1P2;
      const _3n3 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
      const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
      const b2 = y * y * y % P;
      const b3 = b2 * b2 * y % P;
      const b6 = (0, modular_js_1.pow2)(b3, _3n3, P) * b3 % P;
      const b9 = (0, modular_js_1.pow2)(b6, _3n3, P) * b3 % P;
      const b11 = (0, modular_js_1.pow2)(b9, _2n6, P) * b2 % P;
      const b22 = (0, modular_js_1.pow2)(b11, _11n, P) * b11 % P;
      const b44 = (0, modular_js_1.pow2)(b22, _22n, P) * b22 % P;
      const b88 = (0, modular_js_1.pow2)(b44, _44n, P) * b44 % P;
      const b176 = (0, modular_js_1.pow2)(b88, _88n, P) * b88 % P;
      const b220 = (0, modular_js_1.pow2)(b176, _44n, P) * b44 % P;
      const b223 = (0, modular_js_1.pow2)(b220, _3n3, P) * b3 % P;
      const t1 = (0, modular_js_1.pow2)(b223, _23n, P) * b22 % P;
      const t2 = (0, modular_js_1.pow2)(t1, _6n, P) * b2 % P;
      const root = (0, modular_js_1.pow2)(t2, _2n6, P);
      if (!Fp2.eql(Fp2.sqr(root), y))
        throw new Error("Cannot find square root");
      return root;
    }
    var Fp2 = (0, modular_js_1.Field)(secp256k1P2, void 0, void 0, { sqrt: sqrtMod2 });
    exports.secp256k1 = (0, _shortw_utils_js_1.createCurve)({
      a: BigInt(0),
      b: BigInt(7),
      Fp: Fp2,
      n: secp256k1N2,
      // Base point (x, y) aka generator point
      Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
      Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
      h: BigInt(1),
      lowS: true,
      /**
       * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
       * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
       * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
       * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
       */
      endo: {
        beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
        splitScalar: (k) => {
          const n2 = secp256k1N2;
          const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
          const b1 = -_1n7 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
          const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
          const b2 = a1;
          const POW_2_128 = BigInt("0x100000000000000000000000000000000");
          const c1 = divNearest2(b2 * k, n2);
          const c2 = divNearest2(-b1 * k, n2);
          let k1 = (0, modular_js_1.mod)(k - c1 * a1 - c2 * a2, n2);
          let k2 = (0, modular_js_1.mod)(-c1 * b1 - c2 * b2, n2);
          const k1neg = k1 > POW_2_128;
          const k2neg = k2 > POW_2_128;
          if (k1neg)
            k1 = n2 - k1;
          if (k2neg)
            k2 = n2 - k2;
          if (k1 > POW_2_128 || k2 > POW_2_128) {
            throw new Error("splitScalar: Endomorphism failed, k=" + k);
          }
          return { k1neg, k1, k2neg, k2 };
        }
      }
    }, sha256_1.sha256);
    var _0n7 = BigInt(0);
    var fe2 = (x) => typeof x === "bigint" && _0n7 < x && x < secp256k1P2;
    var ge2 = (x) => typeof x === "bigint" && _0n7 < x && x < secp256k1N2;
    var TAGGED_HASH_PREFIXES2 = {};
    function taggedHash2(tag, ...messages) {
      let tagP = TAGGED_HASH_PREFIXES2[tag];
      if (tagP === void 0) {
        const tagH = (0, sha256_1.sha256)(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
        tagP = (0, utils_js_1.concatBytes)(tagH, tagH);
        TAGGED_HASH_PREFIXES2[tag] = tagP;
      }
      return (0, sha256_1.sha256)((0, utils_js_1.concatBytes)(tagP, ...messages));
    }
    var pointToBytes2 = (point) => point.toRawBytes(true).slice(1);
    var numTo32b2 = (n2) => (0, utils_js_1.numberToBytesBE)(n2, 32);
    var modP2 = (x) => (0, modular_js_1.mod)(x, secp256k1P2);
    var modN2 = (x) => (0, modular_js_1.mod)(x, secp256k1N2);
    var Point2 = exports.secp256k1.ProjectivePoint;
    var GmulAdd2 = (Q, a, b2) => Point2.BASE.multiplyAndAddUnsafe(Q, a, b2);
    function schnorrGetExtPubKey2(priv) {
      let d_ = exports.secp256k1.utils.normPrivateKeyToScalar(priv);
      let p = Point2.fromPrivateKey(d_);
      const scalar = p.hasEvenY() ? d_ : modN2(-d_);
      return { scalar, bytes: pointToBytes2(p) };
    }
    function lift_x2(x) {
      if (!fe2(x))
        throw new Error("bad x: need 0 < x < p");
      const xx = modP2(x * x);
      const c = modP2(xx * x + BigInt(7));
      let y = sqrtMod2(c);
      if (y % _2n6 !== _0n7)
        y = modP2(-y);
      const p = new Point2(x, y, _1n7);
      p.assertValidity();
      return p;
    }
    function challenge2(...args) {
      return modN2((0, utils_js_1.bytesToNumberBE)(taggedHash2("BIP0340/challenge", ...args)));
    }
    function schnorrGetPublicKey2(privateKey) {
      return schnorrGetExtPubKey2(privateKey).bytes;
    }
    function schnorrSign2(message, privateKey, auxRand = (0, utils_1.randomBytes)(32)) {
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const { bytes: px, scalar: d } = schnorrGetExtPubKey2(privateKey);
      const a = (0, utils_js_1.ensureBytes)("auxRand", auxRand, 32);
      const t = numTo32b2(d ^ (0, utils_js_1.bytesToNumberBE)(taggedHash2("BIP0340/aux", a)));
      const rand = taggedHash2("BIP0340/nonce", t, px, m);
      const k_ = modN2((0, utils_js_1.bytesToNumberBE)(rand));
      if (k_ === _0n7)
        throw new Error("sign failed: k is zero");
      const { bytes: rx, scalar: k } = schnorrGetExtPubKey2(k_);
      const e = challenge2(rx, px, m);
      const sig = new Uint8Array(64);
      sig.set(rx, 0);
      sig.set(numTo32b2(modN2(k + e * d)), 32);
      if (!schnorrVerify2(sig, m, px))
        throw new Error("sign: Invalid signature produced");
      return sig;
    }
    function schnorrVerify2(signature, message, publicKey) {
      const sig = (0, utils_js_1.ensureBytes)("signature", signature, 64);
      const m = (0, utils_js_1.ensureBytes)("message", message);
      const pub = (0, utils_js_1.ensureBytes)("publicKey", publicKey, 32);
      try {
        const P = lift_x2((0, utils_js_1.bytesToNumberBE)(pub));
        const r2 = (0, utils_js_1.bytesToNumberBE)(sig.subarray(0, 32));
        if (!fe2(r2))
          return false;
        const s = (0, utils_js_1.bytesToNumberBE)(sig.subarray(32, 64));
        if (!ge2(s))
          return false;
        const e = challenge2(numTo32b2(r2), pointToBytes2(P), m);
        const R = GmulAdd2(P, s, modN2(-e));
        if (!R || !R.hasEvenY() || R.toAffine().x !== r2)
          return false;
        return true;
      } catch (error) {
        return false;
      }
    }
    exports.schnorr = (() => ({
      getPublicKey: schnorrGetPublicKey2,
      sign: schnorrSign2,
      verify: schnorrVerify2,
      utils: {
        randomPrivateKey: exports.secp256k1.utils.randomPrivateKey,
        lift_x: lift_x2,
        pointToBytes: pointToBytes2,
        numberToBytesBE: utils_js_1.numberToBytesBE,
        bytesToNumberBE: utils_js_1.bytesToNumberBE,
        taggedHash: taggedHash2,
        mod: modular_js_1.mod
      }
    }))();
    var isoMap2 = (() => (0, hash_to_curve_js_1.isogenyMap)(Fp2, [
      // xNum
      [
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
        "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
        "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
        "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
      ],
      // xDen
      [
        "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
        "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ],
      // yNum
      [
        "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
        "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
        "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
        "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
      ],
      // yDen
      [
        "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
        "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
        "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
        "0x0000000000000000000000000000000000000000000000000000000000000001"
        // LAST 1
      ]
    ].map((i) => i.map((j) => BigInt(j)))))();
    var mapSWU2 = (() => (0, weierstrass_js_1.mapToCurveSimpleSWU)(Fp2, {
      A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
      B: BigInt("1771"),
      Z: Fp2.create(BigInt("-11"))
    }))();
    var htf2 = (() => (0, hash_to_curve_js_1.createHasher)(exports.secp256k1.ProjectivePoint, (scalars) => {
      const { x, y } = mapSWU2(Fp2.create(scalars[0]));
      return isoMap2(x, y);
    }, {
      DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
      encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
      p: Fp2.ORDER,
      m: 1,
      k: 128,
      expand: "xmd",
      hash: sha256_1.sha256
    }))();
    exports.hashToCurve = (() => htf2.hashToCurve)();
    exports.encodeToCurve = (() => htf2.encodeToCurve)();
  }
});

// node_modules/ethers/lib.commonjs/constants/addresses.js
var require_addresses = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/addresses.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ZeroAddress = void 0;
    exports.ZeroAddress = "0x0000000000000000000000000000000000000000";
  }
});

// node_modules/ethers/lib.commonjs/constants/hashes.js
var require_hashes = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/hashes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ZeroHash = void 0;
    exports.ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";
  }
});

// node_modules/ethers/lib.commonjs/constants/numbers.js
var require_numbers = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/numbers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.N = void 0;
    exports.N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    exports.WeiPerEther = BigInt("1000000000000000000");
    exports.MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    exports.MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
    exports.MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  }
});

// node_modules/ethers/lib.commonjs/constants/strings.js
var require_strings = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/strings.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MessagePrefix = exports.EtherSymbol = void 0;
    exports.EtherSymbol = "Ξ";
    exports.MessagePrefix = "Ethereum Signed Message:\n";
  }
});

// node_modules/ethers/lib.commonjs/constants/index.js
var require_constants = __commonJS({
  "node_modules/ethers/lib.commonjs/constants/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MessagePrefix = exports.EtherSymbol = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.N = exports.ZeroHash = exports.ZeroAddress = void 0;
    var addresses_js_1 = require_addresses();
    Object.defineProperty(exports, "ZeroAddress", { enumerable: true, get: function() {
      return addresses_js_1.ZeroAddress;
    } });
    var hashes_js_1 = require_hashes();
    Object.defineProperty(exports, "ZeroHash", { enumerable: true, get: function() {
      return hashes_js_1.ZeroHash;
    } });
    var numbers_js_1 = require_numbers();
    Object.defineProperty(exports, "N", { enumerable: true, get: function() {
      return numbers_js_1.N;
    } });
    Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function() {
      return numbers_js_1.WeiPerEther;
    } });
    Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function() {
      return numbers_js_1.MaxUint256;
    } });
    Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function() {
      return numbers_js_1.MinInt256;
    } });
    Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function() {
      return numbers_js_1.MaxInt256;
    } });
    var strings_js_1 = require_strings();
    Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function() {
      return strings_js_1.EtherSymbol;
    } });
    Object.defineProperty(exports, "MessagePrefix", { enumerable: true, get: function() {
      return strings_js_1.MessagePrefix;
    } });
  }
});

// node_modules/ethers/lib.commonjs/crypto/signature.js
var require_signature = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/signature.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Signature = void 0;
    var index_js_1 = require_constants();
    var index_js_2 = require_utils();
    var BN_012 = BigInt(0);
    var BN_17 = BigInt(1);
    var BN_25 = BigInt(2);
    var BN_273 = BigInt(27);
    var BN_283 = BigInt(28);
    var BN_353 = BigInt(35);
    var _guard4 = {};
    function toUint2562(value) {
      return (0, index_js_2.zeroPadValue)((0, index_js_2.toBeArray)(value), 32);
    }
    var _r2, _s2, _v2, _networkV2;
    var _Signature2 = class _Signature2 {
      /**
       *  @private
       */
      constructor(guard, r2, s, v) {
        __privateAdd(this, _r2);
        __privateAdd(this, _s2);
        __privateAdd(this, _v2);
        __privateAdd(this, _networkV2);
        (0, index_js_2.assertPrivate)(guard, _guard4, "Signature");
        __privateSet(this, _r2, r2);
        __privateSet(this, _s2, s);
        __privateSet(this, _v2, v);
        __privateSet(this, _networkV2, null);
      }
      /**
       *  The ``r`` value for a signautre.
       *
       *  This represents the ``x`` coordinate of a "reference" or
       *  challenge point, from which the ``y`` can be computed.
       */
      get r() {
        return __privateGet(this, _r2);
      }
      set r(value) {
        (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(value) === 32, "invalid r", "value", value);
        __privateSet(this, _r2, (0, index_js_2.hexlify)(value));
      }
      /**
       *  The ``s`` value for a signature.
       */
      get s() {
        return __privateGet(this, _s2);
      }
      set s(_value) {
        (0, index_js_2.assertArgument)((0, index_js_2.dataLength)(_value) === 32, "invalid s", "value", _value);
        const value = (0, index_js_2.hexlify)(_value);
        (0, index_js_2.assertArgument)(parseInt(value.substring(0, 3)) < 8, "non-canonical s", "value", value);
        __privateSet(this, _s2, value);
      }
      /**
       *  The ``v`` value for a signature.
       *
       *  Since a given ``x`` value for ``r`` has two possible values for
       *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
       *  values to use.
       *
       *  It is normalized to the values ``27`` or ``28`` for legacy
       *  purposes.
       */
      get v() {
        return __privateGet(this, _v2);
      }
      set v(value) {
        const v = (0, index_js_2.getNumber)(value, "value");
        (0, index_js_2.assertArgument)(v === 27 || v === 28, "invalid v", "v", value);
        __privateSet(this, _v2, v);
      }
      /**
       *  The EIP-155 ``v`` for legacy transactions. For non-legacy
       *  transactions, this value is ``null``.
       */
      get networkV() {
        return __privateGet(this, _networkV2);
      }
      /**
       *  The chain ID for EIP-155 legacy transactions. For non-legacy
       *  transactions, this value is ``null``.
       */
      get legacyChainId() {
        const v = this.networkV;
        if (v == null) {
          return null;
        }
        return _Signature2.getChainId(v);
      }
      /**
       *  The ``yParity`` for the signature.
       *
       *  See ``v`` for more details on how this value is used.
       */
      get yParity() {
        return this.v === 27 ? 0 : 1;
      }
      /**
       *  The [[link-eip-2098]] compact representation of the ``yParity``
       *  and ``s`` compacted into a single ``bytes32``.
       */
      get yParityAndS() {
        const yParityAndS = (0, index_js_2.getBytes)(this.s);
        if (this.yParity) {
          yParityAndS[0] |= 128;
        }
        return (0, index_js_2.hexlify)(yParityAndS);
      }
      /**
       *  The [[link-eip-2098]] compact representation.
       */
      get compactSerialized() {
        return (0, index_js_2.concat)([this.r, this.yParityAndS]);
      }
      /**
       *  The serialized representation.
       */
      get serialized() {
        return (0, index_js_2.concat)([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
      }
      [Symbol.for("nodejs.util.inspect.custom")]() {
        return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
      }
      /**
       *  Returns a new identical [[Signature]].
       */
      clone() {
        const clone = new _Signature2(_guard4, this.r, this.s, this.v);
        if (this.networkV) {
          __privateSet(clone, _networkV2, this.networkV);
        }
        return clone;
      }
      /**
       *  Returns a representation that is compatible with ``JSON.stringify``.
       */
      toJSON() {
        const networkV = this.networkV;
        return {
          _type: "signature",
          networkV: networkV != null ? networkV.toString() : null,
          r: this.r,
          s: this.s,
          v: this.v
        };
      }
      /**
       *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
       *
       *  @example:
       *    Signature.getChainId(45)
       *    //_result:
       *
       *    Signature.getChainId(46)
       *    //_result:
       */
      static getChainId(v) {
        const bv = (0, index_js_2.getBigInt)(v, "v");
        if (bv == BN_273 || bv == BN_283) {
          return BN_012;
        }
        (0, index_js_2.assertArgument)(bv >= BN_353, "invalid EIP-155 v", "v", v);
        return (bv - BN_353) / BN_25;
      }
      /**
       *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
       *
       *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
       *  property to include the chain ID.
       *
       *  @example:
       *    Signature.getChainIdV(5, 27)
       *    //_result:
       *
       *    Signature.getChainIdV(5, 28)
       *    //_result:
       *
       */
      static getChainIdV(chainId, v) {
        return (0, index_js_2.getBigInt)(chainId) * BN_25 + BigInt(35 + v - 27);
      }
      /**
       *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
       *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
       *
       *  @example:
       *    // The values 0 and 1 imply v is actually yParity
       *    Signature.getNormalizedV(0)
       *    //_result:
       *
       *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
       *    Signature.getNormalizedV(27)
       *    //_result:
       *
       *    // Legacy EIP-155 transaction (i.e. >= 35)
       *    Signature.getNormalizedV(46)
       *    //_result:
       *
       *    // Invalid values throw
       *    Signature.getNormalizedV(5)
       *    //_error:
       */
      static getNormalizedV(v) {
        const bv = (0, index_js_2.getBigInt)(v);
        if (bv === BN_012 || bv === BN_273) {
          return 27;
        }
        if (bv === BN_17 || bv === BN_283) {
          return 28;
        }
        (0, index_js_2.assertArgument)(bv >= BN_353, "invalid v", "v", v);
        return bv & BN_17 ? 27 : 28;
      }
      /**
       *  Creates a new [[Signature]].
       *
       *  If no %%sig%% is provided, a new [[Signature]] is created
       *  with default values.
       *
       *  If %%sig%% is a string, it is parsed.
       */
      static from(sig) {
        function assertError(check, message) {
          (0, index_js_2.assertArgument)(check, message, "signature", sig);
        }
        ;
        if (sig == null) {
          return new _Signature2(_guard4, index_js_1.ZeroHash, index_js_1.ZeroHash, 27);
        }
        if (typeof sig === "string") {
          const bytes3 = (0, index_js_2.getBytes)(sig, "signature");
          if (bytes3.length === 64) {
            const r3 = (0, index_js_2.hexlify)(bytes3.slice(0, 32));
            const s2 = bytes3.slice(32, 64);
            const v2 = s2[0] & 128 ? 28 : 27;
            s2[0] &= 127;
            return new _Signature2(_guard4, r3, (0, index_js_2.hexlify)(s2), v2);
          }
          if (bytes3.length === 65) {
            const r3 = (0, index_js_2.hexlify)(bytes3.slice(0, 32));
            const s2 = bytes3.slice(32, 64);
            assertError((s2[0] & 128) === 0, "non-canonical s");
            const v2 = _Signature2.getNormalizedV(bytes3[64]);
            return new _Signature2(_guard4, r3, (0, index_js_2.hexlify)(s2), v2);
          }
          assertError(false, "invalid raw signature length");
        }
        if (sig instanceof _Signature2) {
          return sig.clone();
        }
        const _r3 = sig.r;
        assertError(_r3 != null, "missing r");
        const r2 = toUint2562(_r3);
        const s = function(s2, yParityAndS) {
          if (s2 != null) {
            return toUint2562(s2);
          }
          if (yParityAndS != null) {
            assertError((0, index_js_2.isHexString)(yParityAndS, 32), "invalid yParityAndS");
            const bytes3 = (0, index_js_2.getBytes)(yParityAndS);
            bytes3[0] &= 127;
            return (0, index_js_2.hexlify)(bytes3);
          }
          assertError(false, "missing s");
        }(sig.s, sig.yParityAndS);
        assertError(((0, index_js_2.getBytes)(s)[0] & 128) == 0, "non-canonical s");
        const { networkV, v } = function(_v3, yParityAndS, yParity) {
          if (_v3 != null) {
            const v2 = (0, index_js_2.getBigInt)(_v3);
            return {
              networkV: v2 >= BN_353 ? v2 : void 0,
              v: _Signature2.getNormalizedV(v2)
            };
          }
          if (yParityAndS != null) {
            assertError((0, index_js_2.isHexString)(yParityAndS, 32), "invalid yParityAndS");
            return { v: (0, index_js_2.getBytes)(yParityAndS)[0] & 128 ? 28 : 27 };
          }
          if (yParity != null) {
            switch ((0, index_js_2.getNumber)(yParity, "sig.yParity")) {
              case 0:
                return { v: 27 };
              case 1:
                return { v: 28 };
            }
            assertError(false, "invalid yParity");
          }
          assertError(false, "missing v");
        }(sig.v, sig.yParityAndS, sig.yParity);
        const result = new _Signature2(_guard4, r2, s, v);
        if (networkV) {
          __privateSet(result, _networkV2, networkV);
        }
        assertError(sig.yParity == null || (0, index_js_2.getNumber)(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
        assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
        return result;
      }
    };
    _r2 = new WeakMap();
    _s2 = new WeakMap();
    _v2 = new WeakMap();
    _networkV2 = new WeakMap();
    var Signature2 = _Signature2;
    exports.Signature = Signature2;
  }
});

// node_modules/ethers/lib.commonjs/crypto/signing-key.js
var require_signing_key = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/signing-key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SigningKey = void 0;
    var secp256k1_1 = require_secp256k1();
    var index_js_1 = require_utils();
    var signature_js_1 = require_signature();
    var _privateKey;
    var _SigningKey = class _SigningKey {
      /**
       *  Creates a new **SigningKey** for %%privateKey%%.
       */
      constructor(privateKey) {
        __privateAdd(this, _privateKey);
        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(privateKey) === 32, "invalid private key", "privateKey", "[REDACTED]");
        __privateSet(this, _privateKey, (0, index_js_1.hexlify)(privateKey));
      }
      /**
       *  The private key.
       */
      get privateKey() {
        return __privateGet(this, _privateKey);
      }
      /**
       *  The uncompressed public key.
       *
       * This will always begin with the prefix ``0x04`` and be 132
       * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
       */
      get publicKey() {
        return _SigningKey.computePublicKey(__privateGet(this, _privateKey));
      }
      /**
       *  The compressed public key.
       *
       *  This will always begin with either the prefix ``0x02`` or ``0x03``
       *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
       *  nibbles)
       */
      get compressedPublicKey() {
        return _SigningKey.computePublicKey(__privateGet(this, _privateKey), true);
      }
      /**
       *  Return the signature of the signed %%digest%%.
       */
      sign(digest) {
        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
        const sig = secp256k1_1.secp256k1.sign((0, index_js_1.getBytesCopy)(digest), (0, index_js_1.getBytesCopy)(__privateGet(this, _privateKey)), {
          lowS: true
        });
        return signature_js_1.Signature.from({
          r: (0, index_js_1.toBeHex)(sig.r, 32),
          s: (0, index_js_1.toBeHex)(sig.s, 32),
          v: sig.recovery ? 28 : 27
        });
      }
      /**
       *  Returns the [[link-wiki-ecdh]] shared secret between this
       *  private key and the %%other%% key.
       *
       *  The %%other%% key may be any type of key, a raw public key,
       *  a compressed/uncompressed pubic key or aprivate key.
       *
       *  Best practice is usually to use a cryptographic hash on the
       *  returned value before using it as a symetric secret.
       *
       *  @example:
       *    sign1 = new SigningKey(id("some-secret-1"))
       *    sign2 = new SigningKey(id("some-secret-2"))
       *
       *    // Notice that privA.computeSharedSecret(pubB)...
       *    sign1.computeSharedSecret(sign2.publicKey)
       *    //_result:
       *
       *    // ...is equal to privB.computeSharedSecret(pubA).
       *    sign2.computeSharedSecret(sign1.publicKey)
       *    //_result:
       */
      computeSharedSecret(other) {
        const pubKey = _SigningKey.computePublicKey(other);
        return (0, index_js_1.hexlify)(secp256k1_1.secp256k1.getSharedSecret((0, index_js_1.getBytesCopy)(__privateGet(this, _privateKey)), (0, index_js_1.getBytes)(pubKey), false));
      }
      /**
       *  Compute the public key for %%key%%, optionally %%compressed%%.
       *
       *  The %%key%% may be any type of key, a raw public key, a
       *  compressed/uncompressed public key or private key.
       *
       *  @example:
       *    sign = new SigningKey(id("some-secret"));
       *
       *    // Compute the uncompressed public key for a private key
       *    SigningKey.computePublicKey(sign.privateKey)
       *    //_result:
       *
       *    // Compute the compressed public key for a private key
       *    SigningKey.computePublicKey(sign.privateKey, true)
       *    //_result:
       *
       *    // Compute the uncompressed public key
       *    SigningKey.computePublicKey(sign.publicKey, false);
       *    //_result:
       *
       *    // Compute the Compressed a public key
       *    SigningKey.computePublicKey(sign.publicKey, true);
       *    //_result:
       */
      static computePublicKey(key, compressed) {
        let bytes3 = (0, index_js_1.getBytes)(key, "key");
        if (bytes3.length === 32) {
          const pubKey = secp256k1_1.secp256k1.getPublicKey(bytes3, !!compressed);
          return (0, index_js_1.hexlify)(pubKey);
        }
        if (bytes3.length === 64) {
          const pub = new Uint8Array(65);
          pub[0] = 4;
          pub.set(bytes3, 1);
          bytes3 = pub;
        }
        const point = secp256k1_1.secp256k1.ProjectivePoint.fromHex(bytes3);
        return (0, index_js_1.hexlify)(point.toRawBytes(compressed));
      }
      /**
       *  Returns the public key for the private key which produced the
       *  %%signature%% for the given %%digest%%.
       *
       *  @example:
       *    key = new SigningKey(id("some-secret"))
       *    digest = id("hello world")
       *    sig = key.sign(digest)
       *
       *    // Notice the signer public key...
       *    key.publicKey
       *    //_result:
       *
       *    // ...is equal to the recovered public key
       *    SigningKey.recoverPublicKey(digest, sig)
       *    //_result:
       *
       */
      static recoverPublicKey(digest, signature) {
        (0, index_js_1.assertArgument)((0, index_js_1.dataLength)(digest) === 32, "invalid digest length", "digest", digest);
        const sig = signature_js_1.Signature.from(signature);
        let secpSig = secp256k1_1.secp256k1.Signature.fromCompact((0, index_js_1.getBytesCopy)((0, index_js_1.concat)([sig.r, sig.s])));
        secpSig = secpSig.addRecoveryBit(sig.yParity);
        const pubKey = secpSig.recoverPublicKey((0, index_js_1.getBytesCopy)(digest));
        (0, index_js_1.assertArgument)(pubKey != null, "invalid signautre for digest", "signature", signature);
        return "0x" + pubKey.toHex(false);
      }
      /**
       *  Returns the point resulting from adding the ellipic curve points
       *  %%p0%% and %%p1%%.
       *
       *  This is not a common function most developers should require, but
       *  can be useful for certain privacy-specific techniques.
       *
       *  For example, it is used by [[HDNodeWallet]] to compute child
       *  addresses from parent public keys and chain codes.
       */
      static addPoints(p0, p1, compressed) {
        const pub0 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p0).substring(2));
        const pub1 = secp256k1_1.secp256k1.ProjectivePoint.fromHex(_SigningKey.computePublicKey(p1).substring(2));
        return "0x" + pub0.add(pub1).toHex(!!compressed);
      }
    };
    _privateKey = new WeakMap();
    var SigningKey2 = _SigningKey;
    exports.SigningKey = SigningKey2;
  }
});

// node_modules/ethers/lib.commonjs/crypto/index.js
var require_crypto2 = __commonJS({
  "node_modules/ethers/lib.commonjs/crypto/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.lock = exports.Signature = exports.SigningKey = exports.scryptSync = exports.scrypt = exports.pbkdf2 = exports.sha512 = exports.sha256 = exports.ripemd160 = exports.keccak256 = exports.randomBytes = exports.computeHmac = void 0;
    var hmac_js_1 = require_hmac2();
    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function() {
      return hmac_js_1.computeHmac;
    } });
    var keccak_js_1 = require_keccak();
    Object.defineProperty(exports, "keccak256", { enumerable: true, get: function() {
      return keccak_js_1.keccak256;
    } });
    var ripemd160_js_1 = require_ripemd1602();
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function() {
      return ripemd160_js_1.ripemd160;
    } });
    var pbkdf2_js_1 = require_pbkdf22();
    Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function() {
      return pbkdf2_js_1.pbkdf2;
    } });
    var random_js_1 = require_random();
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function() {
      return random_js_1.randomBytes;
    } });
    var scrypt_js_1 = require_scrypt2();
    Object.defineProperty(exports, "scrypt", { enumerable: true, get: function() {
      return scrypt_js_1.scrypt;
    } });
    Object.defineProperty(exports, "scryptSync", { enumerable: true, get: function() {
      return scrypt_js_1.scryptSync;
    } });
    var sha2_js_1 = require_sha22();
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function() {
      return sha2_js_1.sha256;
    } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function() {
      return sha2_js_1.sha512;
    } });
    var signing_key_js_1 = require_signing_key();
    Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function() {
      return signing_key_js_1.SigningKey;
    } });
    var signature_js_1 = require_signature();
    Object.defineProperty(exports, "Signature", { enumerable: true, get: function() {
      return signature_js_1.Signature;
    } });
    function lock2() {
      hmac_js_1.computeHmac.lock();
      keccak_js_1.keccak256.lock();
      pbkdf2_js_1.pbkdf2.lock();
      random_js_1.randomBytes.lock();
      ripemd160_js_1.ripemd160.lock();
      scrypt_js_1.scrypt.lock();
      scrypt_js_1.scryptSync.lock();
      sha2_js_1.sha256.lock();
      sha2_js_1.sha512.lock();
      random_js_1.randomBytes.lock();
    }
    exports.lock = lock2;
  }
});

// node_modules/ethers/lib.commonjs/address/address.js
var require_address = __commonJS({
  "node_modules/ethers/lib.commonjs/address/address.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIcapAddress = exports.getAddress = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils();
    var BN_012 = BigInt(0);
    var BN_362 = BigInt(36);
    function getChecksumAddress3(address) {
      address = address.toLowerCase();
      const chars = address.substring(2).split("");
      const expanded = new Uint8Array(40);
      for (let i = 0; i < 40; i++) {
        expanded[i] = chars[i].charCodeAt(0);
      }
      const hashed = (0, index_js_2.getBytes)((0, index_js_1.keccak256)(expanded));
      for (let i = 0; i < 40; i += 2) {
        if (hashed[i >> 1] >> 4 >= 8) {
          chars[i] = chars[i].toUpperCase();
        }
        if ((hashed[i >> 1] & 15) >= 8) {
          chars[i + 1] = chars[i + 1].toUpperCase();
        }
      }
      return "0x" + chars.join("");
    }
    var ibanLookup3 = {};
    for (let i = 0; i < 10; i++) {
      ibanLookup3[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
      ibanLookup3[String.fromCharCode(65 + i)] = String(10 + i);
    }
    var safeDigits3 = 15;
    function ibanChecksum3(address) {
      address = address.toUpperCase();
      address = address.substring(4) + address.substring(0, 2) + "00";
      let expanded = address.split("").map((c) => {
        return ibanLookup3[c];
      }).join("");
      while (expanded.length >= safeDigits3) {
        let block = expanded.substring(0, safeDigits3);
        expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
      }
      let checksum2 = String(98 - parseInt(expanded, 10) % 97);
      while (checksum2.length < 2) {
        checksum2 = "0" + checksum2;
      }
      return checksum2;
    }
    var Base362 = function() {
      ;
      const result = {};
      for (let i = 0; i < 36; i++) {
        const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
        result[key] = BigInt(i);
      }
      return result;
    }();
    function fromBase362(value) {
      value = value.toLowerCase();
      let result = BN_012;
      for (let i = 0; i < value.length; i++) {
        result = result * BN_362 + Base362[value[i]];
      }
      return result;
    }
    function getAddress3(address) {
      (0, index_js_2.assertArgument)(typeof address === "string", "invalid address", "address", address);
      if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
        if (!address.startsWith("0x")) {
          address = "0x" + address;
        }
        const result = getChecksumAddress3(address);
        (0, index_js_2.assertArgument)(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
        return result;
      }
      if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
        (0, index_js_2.assertArgument)(address.substring(2, 4) === ibanChecksum3(address), "bad icap checksum", "address", address);
        let result = fromBase362(address.substring(4)).toString(16);
        while (result.length < 40) {
          result = "0" + result;
        }
        return getChecksumAddress3("0x" + result);
      }
      (0, index_js_2.assertArgument)(false, "invalid address", "address", address);
    }
    exports.getAddress = getAddress3;
    function getIcapAddress2(address) {
      let base36 = BigInt(getAddress3(address)).toString(36).toUpperCase();
      while (base36.length < 30) {
        base36 = "0" + base36;
      }
      return "XE" + ibanChecksum3("XE00" + base36) + base36;
    }
    exports.getIcapAddress = getIcapAddress2;
  }
});

// node_modules/ethers/lib.commonjs/address/contract-address.js
var require_contract_address = __commonJS({
  "node_modules/ethers/lib.commonjs/address/contract-address.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getCreate2Address = exports.getCreateAddress = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils();
    var address_js_1 = require_address();
    function getCreateAddress2(tx) {
      const from = (0, address_js_1.getAddress)(tx.from);
      const nonce = (0, index_js_2.getBigInt)(tx.nonce, "tx.nonce");
      let nonceHex = nonce.toString(16);
      if (nonceHex === "0") {
        nonceHex = "0x";
      } else if (nonceHex.length % 2) {
        nonceHex = "0x0" + nonceHex;
      } else {
        nonceHex = "0x" + nonceHex;
      }
      return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.encodeRlp)([from, nonceHex])), 12));
    }
    exports.getCreateAddress = getCreateAddress2;
    function getCreate2Address2(_from, _salt, _initCodeHash) {
      const from = (0, address_js_1.getAddress)(_from);
      const salt = (0, index_js_2.getBytes)(_salt, "salt");
      const initCodeHash = (0, index_js_2.getBytes)(_initCodeHash, "initCodeHash");
      (0, index_js_2.assertArgument)(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
      (0, index_js_2.assertArgument)(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
      return (0, address_js_1.getAddress)((0, index_js_2.dataSlice)((0, index_js_1.keccak256)((0, index_js_2.concat)(["0xff", from, salt, initCodeHash])), 12));
    }
    exports.getCreate2Address = getCreate2Address2;
  }
});

// node_modules/ethers/lib.commonjs/address/checks.js
var require_checks = __commonJS({
  "node_modules/ethers/lib.commonjs/address/checks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAddress = exports.isAddress = exports.isAddressable = void 0;
    var index_js_1 = require_utils();
    var address_js_1 = require_address();
    function isAddressable2(value) {
      return value && typeof value.getAddress === "function";
    }
    exports.isAddressable = isAddressable2;
    function isAddress2(value) {
      try {
        (0, address_js_1.getAddress)(value);
        return true;
      } catch (error) {
      }
      return false;
    }
    exports.isAddress = isAddress2;
    async function checkAddress2(target, promise) {
      const result = await promise;
      if (result == null || result === "0x0000000000000000000000000000000000000000") {
        (0, index_js_1.assert)(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
        (0, index_js_1.assertArgument)(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
      }
      return (0, address_js_1.getAddress)(result);
    }
    function resolveAddress2(target, resolver) {
      if (typeof target === "string") {
        if (target.match(/^0x[0-9a-f]{40}$/i)) {
          return (0, address_js_1.getAddress)(target);
        }
        (0, index_js_1.assert)(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
        return checkAddress2(target, resolver.resolveName(target));
      } else if (isAddressable2(target)) {
        return checkAddress2(target, target.getAddress());
      } else if (target && typeof target.then === "function") {
        return checkAddress2(target, target);
      }
      (0, index_js_1.assertArgument)(false, "unsupported addressable value", "target", target);
    }
    exports.resolveAddress = resolveAddress2;
  }
});

// node_modules/ethers/lib.commonjs/address/index.js
var require_address2 = __commonJS({
  "node_modules/ethers/lib.commonjs/address/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveAddress = exports.isAddress = exports.isAddressable = exports.getCreate2Address = exports.getCreateAddress = exports.getIcapAddress = exports.getAddress = void 0;
    var address_js_1 = require_address();
    Object.defineProperty(exports, "getAddress", { enumerable: true, get: function() {
      return address_js_1.getAddress;
    } });
    Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function() {
      return address_js_1.getIcapAddress;
    } });
    var contract_address_js_1 = require_contract_address();
    Object.defineProperty(exports, "getCreateAddress", { enumerable: true, get: function() {
      return contract_address_js_1.getCreateAddress;
    } });
    Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function() {
      return contract_address_js_1.getCreate2Address;
    } });
    var checks_js_1 = require_checks();
    Object.defineProperty(exports, "isAddressable", { enumerable: true, get: function() {
      return checks_js_1.isAddressable;
    } });
    Object.defineProperty(exports, "isAddress", { enumerable: true, get: function() {
      return checks_js_1.isAddress;
    } });
    Object.defineProperty(exports, "resolveAddress", { enumerable: true, get: function() {
      return checks_js_1.resolveAddress;
    } });
  }
});

// node_modules/ethers/lib.commonjs/abi/typed.js
var require_typed = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/typed.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Typed = void 0;
    var index_js_1 = require_utils();
    var _gaurd2 = {};
    function n2(value, width) {
      let signed2 = false;
      if (width < 0) {
        signed2 = true;
        width *= -1;
      }
      return new Typed2(_gaurd2, `${signed2 ? "" : "u"}int${width}`, value, { signed: signed2, width });
    }
    function b2(value, size) {
      return new Typed2(_gaurd2, `bytes${size ? size : ""}`, value, { size });
    }
    var _typedSymbol2 = Symbol.for("_ethers_typed");
    var _options2;
    var _Typed2 = class _Typed2 {
      /**
       *  @_ignore:
       */
      constructor(gaurd, type, value, options) {
        /**
         *  The type, as a Solidity-compatible type.
         */
        __publicField(this, "type");
        /**
         *  The actual value.
         */
        __publicField(this, "value");
        __privateAdd(this, _options2);
        /**
         *  @_ignore:
         */
        __publicField(this, "_typedSymbol");
        if (options == null) {
          options = null;
        }
        (0, index_js_1.assertPrivate)(_gaurd2, gaurd, "Typed");
        (0, index_js_1.defineProperties)(this, { _typedSymbol: _typedSymbol2, type, value });
        __privateSet(this, _options2, options);
        this.format();
      }
      /**
       *  Format the type as a Human-Readable type.
       */
      format() {
        if (this.type === "array") {
          throw new Error("");
        } else if (this.type === "dynamicArray") {
          throw new Error("");
        } else if (this.type === "tuple") {
          return `tuple(${this.value.map((v) => v.format()).join(",")})`;
        }
        return this.type;
      }
      /**
       *  The default value returned by this type.
       */
      defaultValue() {
        return 0;
      }
      /**
       *  The minimum value for numeric types.
       */
      minValue() {
        return 0;
      }
      /**
       *  The maximum value for numeric types.
       */
      maxValue() {
        return 0;
      }
      /**
       *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
       */
      isBigInt() {
        return !!this.type.match(/^u?int[0-9]+$/);
      }
      /**
       *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
       */
      isData() {
        return this.type.startsWith("bytes");
      }
      /**
       *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
       */
      isString() {
        return this.type === "string";
      }
      /**
       *  Returns the tuple name, if this is a tuple. Throws otherwise.
       */
      get tupleName() {
        if (this.type !== "tuple") {
          throw TypeError("not a tuple");
        }
        return __privateGet(this, _options2);
      }
      // Returns the length of this type as an array
      // - `null` indicates the length is unforced, it could be dynamic
      // - `-1` indicates the length is dynamic
      // - any other value indicates it is a static array and is its length
      /**
       *  Returns the length of the array type or ``-1`` if it is dynamic.
       *
       *  Throws if the type is not an array.
       */
      get arrayLength() {
        if (this.type !== "array") {
          throw TypeError("not an array");
        }
        if (__privateGet(this, _options2) === true) {
          return -1;
        }
        if (__privateGet(this, _options2) === false) {
          return this.value.length;
        }
        return null;
      }
      /**
       *  Returns a new **Typed** of %%type%% with the %%value%%.
       */
      static from(type, value) {
        return new _Typed2(_gaurd2, type, value);
      }
      /**
       *  Return a new ``uint8`` type for %%v%%.
       */
      static uint8(v) {
        return n2(v, 8);
      }
      /**
       *  Return a new ``uint16`` type for %%v%%.
       */
      static uint16(v) {
        return n2(v, 16);
      }
      /**
       *  Return a new ``uint24`` type for %%v%%.
       */
      static uint24(v) {
        return n2(v, 24);
      }
      /**
       *  Return a new ``uint32`` type for %%v%%.
       */
      static uint32(v) {
        return n2(v, 32);
      }
      /**
       *  Return a new ``uint40`` type for %%v%%.
       */
      static uint40(v) {
        return n2(v, 40);
      }
      /**
       *  Return a new ``uint48`` type for %%v%%.
       */
      static uint48(v) {
        return n2(v, 48);
      }
      /**
       *  Return a new ``uint56`` type for %%v%%.
       */
      static uint56(v) {
        return n2(v, 56);
      }
      /**
       *  Return a new ``uint64`` type for %%v%%.
       */
      static uint64(v) {
        return n2(v, 64);
      }
      /**
       *  Return a new ``uint72`` type for %%v%%.
       */
      static uint72(v) {
        return n2(v, 72);
      }
      /**
       *  Return a new ``uint80`` type for %%v%%.
       */
      static uint80(v) {
        return n2(v, 80);
      }
      /**
       *  Return a new ``uint88`` type for %%v%%.
       */
      static uint88(v) {
        return n2(v, 88);
      }
      /**
       *  Return a new ``uint96`` type for %%v%%.
       */
      static uint96(v) {
        return n2(v, 96);
      }
      /**
       *  Return a new ``uint104`` type for %%v%%.
       */
      static uint104(v) {
        return n2(v, 104);
      }
      /**
       *  Return a new ``uint112`` type for %%v%%.
       */
      static uint112(v) {
        return n2(v, 112);
      }
      /**
       *  Return a new ``uint120`` type for %%v%%.
       */
      static uint120(v) {
        return n2(v, 120);
      }
      /**
       *  Return a new ``uint128`` type for %%v%%.
       */
      static uint128(v) {
        return n2(v, 128);
      }
      /**
       *  Return a new ``uint136`` type for %%v%%.
       */
      static uint136(v) {
        return n2(v, 136);
      }
      /**
       *  Return a new ``uint144`` type for %%v%%.
       */
      static uint144(v) {
        return n2(v, 144);
      }
      /**
       *  Return a new ``uint152`` type for %%v%%.
       */
      static uint152(v) {
        return n2(v, 152);
      }
      /**
       *  Return a new ``uint160`` type for %%v%%.
       */
      static uint160(v) {
        return n2(v, 160);
      }
      /**
       *  Return a new ``uint168`` type for %%v%%.
       */
      static uint168(v) {
        return n2(v, 168);
      }
      /**
       *  Return a new ``uint176`` type for %%v%%.
       */
      static uint176(v) {
        return n2(v, 176);
      }
      /**
       *  Return a new ``uint184`` type for %%v%%.
       */
      static uint184(v) {
        return n2(v, 184);
      }
      /**
       *  Return a new ``uint192`` type for %%v%%.
       */
      static uint192(v) {
        return n2(v, 192);
      }
      /**
       *  Return a new ``uint200`` type for %%v%%.
       */
      static uint200(v) {
        return n2(v, 200);
      }
      /**
       *  Return a new ``uint208`` type for %%v%%.
       */
      static uint208(v) {
        return n2(v, 208);
      }
      /**
       *  Return a new ``uint216`` type for %%v%%.
       */
      static uint216(v) {
        return n2(v, 216);
      }
      /**
       *  Return a new ``uint224`` type for %%v%%.
       */
      static uint224(v) {
        return n2(v, 224);
      }
      /**
       *  Return a new ``uint232`` type for %%v%%.
       */
      static uint232(v) {
        return n2(v, 232);
      }
      /**
       *  Return a new ``uint240`` type for %%v%%.
       */
      static uint240(v) {
        return n2(v, 240);
      }
      /**
       *  Return a new ``uint248`` type for %%v%%.
       */
      static uint248(v) {
        return n2(v, 248);
      }
      /**
       *  Return a new ``uint256`` type for %%v%%.
       */
      static uint256(v) {
        return n2(v, 256);
      }
      /**
       *  Return a new ``uint256`` type for %%v%%.
       */
      static uint(v) {
        return n2(v, 256);
      }
      /**
       *  Return a new ``int8`` type for %%v%%.
       */
      static int8(v) {
        return n2(v, -8);
      }
      /**
       *  Return a new ``int16`` type for %%v%%.
       */
      static int16(v) {
        return n2(v, -16);
      }
      /**
       *  Return a new ``int24`` type for %%v%%.
       */
      static int24(v) {
        return n2(v, -24);
      }
      /**
       *  Return a new ``int32`` type for %%v%%.
       */
      static int32(v) {
        return n2(v, -32);
      }
      /**
       *  Return a new ``int40`` type for %%v%%.
       */
      static int40(v) {
        return n2(v, -40);
      }
      /**
       *  Return a new ``int48`` type for %%v%%.
       */
      static int48(v) {
        return n2(v, -48);
      }
      /**
       *  Return a new ``int56`` type for %%v%%.
       */
      static int56(v) {
        return n2(v, -56);
      }
      /**
       *  Return a new ``int64`` type for %%v%%.
       */
      static int64(v) {
        return n2(v, -64);
      }
      /**
       *  Return a new ``int72`` type for %%v%%.
       */
      static int72(v) {
        return n2(v, -72);
      }
      /**
       *  Return a new ``int80`` type for %%v%%.
       */
      static int80(v) {
        return n2(v, -80);
      }
      /**
       *  Return a new ``int88`` type for %%v%%.
       */
      static int88(v) {
        return n2(v, -88);
      }
      /**
       *  Return a new ``int96`` type for %%v%%.
       */
      static int96(v) {
        return n2(v, -96);
      }
      /**
       *  Return a new ``int104`` type for %%v%%.
       */
      static int104(v) {
        return n2(v, -104);
      }
      /**
       *  Return a new ``int112`` type for %%v%%.
       */
      static int112(v) {
        return n2(v, -112);
      }
      /**
       *  Return a new ``int120`` type for %%v%%.
       */
      static int120(v) {
        return n2(v, -120);
      }
      /**
       *  Return a new ``int128`` type for %%v%%.
       */
      static int128(v) {
        return n2(v, -128);
      }
      /**
       *  Return a new ``int136`` type for %%v%%.
       */
      static int136(v) {
        return n2(v, -136);
      }
      /**
       *  Return a new ``int144`` type for %%v%%.
       */
      static int144(v) {
        return n2(v, -144);
      }
      /**
       *  Return a new ``int52`` type for %%v%%.
       */
      static int152(v) {
        return n2(v, -152);
      }
      /**
       *  Return a new ``int160`` type for %%v%%.
       */
      static int160(v) {
        return n2(v, -160);
      }
      /**
       *  Return a new ``int168`` type for %%v%%.
       */
      static int168(v) {
        return n2(v, -168);
      }
      /**
       *  Return a new ``int176`` type for %%v%%.
       */
      static int176(v) {
        return n2(v, -176);
      }
      /**
       *  Return a new ``int184`` type for %%v%%.
       */
      static int184(v) {
        return n2(v, -184);
      }
      /**
       *  Return a new ``int92`` type for %%v%%.
       */
      static int192(v) {
        return n2(v, -192);
      }
      /**
       *  Return a new ``int200`` type for %%v%%.
       */
      static int200(v) {
        return n2(v, -200);
      }
      /**
       *  Return a new ``int208`` type for %%v%%.
       */
      static int208(v) {
        return n2(v, -208);
      }
      /**
       *  Return a new ``int216`` type for %%v%%.
       */
      static int216(v) {
        return n2(v, -216);
      }
      /**
       *  Return a new ``int224`` type for %%v%%.
       */
      static int224(v) {
        return n2(v, -224);
      }
      /**
       *  Return a new ``int232`` type for %%v%%.
       */
      static int232(v) {
        return n2(v, -232);
      }
      /**
       *  Return a new ``int240`` type for %%v%%.
       */
      static int240(v) {
        return n2(v, -240);
      }
      /**
       *  Return a new ``int248`` type for %%v%%.
       */
      static int248(v) {
        return n2(v, -248);
      }
      /**
       *  Return a new ``int256`` type for %%v%%.
       */
      static int256(v) {
        return n2(v, -256);
      }
      /**
       *  Return a new ``int256`` type for %%v%%.
       */
      static int(v) {
        return n2(v, -256);
      }
      /**
       *  Return a new ``bytes1`` type for %%v%%.
       */
      static bytes1(v) {
        return b2(v, 1);
      }
      /**
       *  Return a new ``bytes2`` type for %%v%%.
       */
      static bytes2(v) {
        return b2(v, 2);
      }
      /**
       *  Return a new ``bytes3`` type for %%v%%.
       */
      static bytes3(v) {
        return b2(v, 3);
      }
      /**
       *  Return a new ``bytes4`` type for %%v%%.
       */
      static bytes4(v) {
        return b2(v, 4);
      }
      /**
       *  Return a new ``bytes5`` type for %%v%%.
       */
      static bytes5(v) {
        return b2(v, 5);
      }
      /**
       *  Return a new ``bytes6`` type for %%v%%.
       */
      static bytes6(v) {
        return b2(v, 6);
      }
      /**
       *  Return a new ``bytes7`` type for %%v%%.
       */
      static bytes7(v) {
        return b2(v, 7);
      }
      /**
       *  Return a new ``bytes8`` type for %%v%%.
       */
      static bytes8(v) {
        return b2(v, 8);
      }
      /**
       *  Return a new ``bytes9`` type for %%v%%.
       */
      static bytes9(v) {
        return b2(v, 9);
      }
      /**
       *  Return a new ``bytes10`` type for %%v%%.
       */
      static bytes10(v) {
        return b2(v, 10);
      }
      /**
       *  Return a new ``bytes11`` type for %%v%%.
       */
      static bytes11(v) {
        return b2(v, 11);
      }
      /**
       *  Return a new ``bytes12`` type for %%v%%.
       */
      static bytes12(v) {
        return b2(v, 12);
      }
      /**
       *  Return a new ``bytes13`` type for %%v%%.
       */
      static bytes13(v) {
        return b2(v, 13);
      }
      /**
       *  Return a new ``bytes14`` type for %%v%%.
       */
      static bytes14(v) {
        return b2(v, 14);
      }
      /**
       *  Return a new ``bytes15`` type for %%v%%.
       */
      static bytes15(v) {
        return b2(v, 15);
      }
      /**
       *  Return a new ``bytes16`` type for %%v%%.
       */
      static bytes16(v) {
        return b2(v, 16);
      }
      /**
       *  Return a new ``bytes17`` type for %%v%%.
       */
      static bytes17(v) {
        return b2(v, 17);
      }
      /**
       *  Return a new ``bytes18`` type for %%v%%.
       */
      static bytes18(v) {
        return b2(v, 18);
      }
      /**
       *  Return a new ``bytes19`` type for %%v%%.
       */
      static bytes19(v) {
        return b2(v, 19);
      }
      /**
       *  Return a new ``bytes20`` type for %%v%%.
       */
      static bytes20(v) {
        return b2(v, 20);
      }
      /**
       *  Return a new ``bytes21`` type for %%v%%.
       */
      static bytes21(v) {
        return b2(v, 21);
      }
      /**
       *  Return a new ``bytes22`` type for %%v%%.
       */
      static bytes22(v) {
        return b2(v, 22);
      }
      /**
       *  Return a new ``bytes23`` type for %%v%%.
       */
      static bytes23(v) {
        return b2(v, 23);
      }
      /**
       *  Return a new ``bytes24`` type for %%v%%.
       */
      static bytes24(v) {
        return b2(v, 24);
      }
      /**
       *  Return a new ``bytes25`` type for %%v%%.
       */
      static bytes25(v) {
        return b2(v, 25);
      }
      /**
       *  Return a new ``bytes26`` type for %%v%%.
       */
      static bytes26(v) {
        return b2(v, 26);
      }
      /**
       *  Return a new ``bytes27`` type for %%v%%.
       */
      static bytes27(v) {
        return b2(v, 27);
      }
      /**
       *  Return a new ``bytes28`` type for %%v%%.
       */
      static bytes28(v) {
        return b2(v, 28);
      }
      /**
       *  Return a new ``bytes29`` type for %%v%%.
       */
      static bytes29(v) {
        return b2(v, 29);
      }
      /**
       *  Return a new ``bytes30`` type for %%v%%.
       */
      static bytes30(v) {
        return b2(v, 30);
      }
      /**
       *  Return a new ``bytes31`` type for %%v%%.
       */
      static bytes31(v) {
        return b2(v, 31);
      }
      /**
       *  Return a new ``bytes32`` type for %%v%%.
       */
      static bytes32(v) {
        return b2(v, 32);
      }
      /**
       *  Return a new ``address`` type for %%v%%.
       */
      static address(v) {
        return new _Typed2(_gaurd2, "address", v);
      }
      /**
       *  Return a new ``bool`` type for %%v%%.
       */
      static bool(v) {
        return new _Typed2(_gaurd2, "bool", !!v);
      }
      /**
       *  Return a new ``bytes`` type for %%v%%.
       */
      static bytes(v) {
        return new _Typed2(_gaurd2, "bytes", v);
      }
      /**
       *  Return a new ``string`` type for %%v%%.
       */
      static string(v) {
        return new _Typed2(_gaurd2, "string", v);
      }
      /**
       *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
       */
      static array(v, dynamic) {
        throw new Error("not implemented yet");
        return new _Typed2(_gaurd2, "array", v, dynamic);
      }
      /**
       *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
       */
      static tuple(v, name) {
        throw new Error("not implemented yet");
        return new _Typed2(_gaurd2, "tuple", v, name);
      }
      /**
       *  Return a new ``uint8`` type for %%v%%.
       */
      static overrides(v) {
        return new _Typed2(_gaurd2, "overrides", Object.assign({}, v));
      }
      /**
       *  Returns true only if %%value%% is a [[Typed]] instance.
       */
      static isTyped(value) {
        return value && typeof value === "object" && "_typedSymbol" in value && value._typedSymbol === _typedSymbol2;
      }
      /**
       *  If the value is a [[Typed]] instance, validates the underlying value
       *  and returns it, otherwise returns value directly.
       *
       *  This is useful for functions that with to accept either a [[Typed]]
       *  object or values.
       */
      static dereference(value, type) {
        if (_Typed2.isTyped(value)) {
          if (value.type !== type) {
            throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
          }
          return value.value;
        }
        return value;
      }
    };
    _options2 = new WeakMap();
    var Typed2 = _Typed2;
    exports.Typed = Typed2;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/address.js
var require_address3 = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/address.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AddressCoder = void 0;
    var index_js_1 = require_address2();
    var maths_js_1 = require_maths();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var AddressCoder3 = class extends abstract_coder_js_1.Coder {
      constructor(localName) {
        super("address", "address", localName, false);
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, _value) {
        let value = typed_js_1.Typed.dereference(_value, "string");
        try {
          value = (0, index_js_1.getAddress)(value);
        } catch (error) {
          return this._throwError(error.message, _value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        return (0, index_js_1.getAddress)((0, maths_js_1.toBeHex)(reader.readValue(), 20));
      }
    };
    exports.AddressCoder = AddressCoder3;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/anonymous.js
var require_anonymous = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/anonymous.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnonymousCoder = void 0;
    var abstract_coder_js_1 = require_abstract_coder();
    var AnonymousCoder3 = class extends abstract_coder_js_1.Coder {
      constructor(coder) {
        super(coder.name, coder.type, "_", coder.dynamic);
        __publicField(this, "coder");
        this.coder = coder;
      }
      defaultValue() {
        return this.coder.defaultValue();
      }
      encode(writer, value) {
        return this.coder.encode(writer, value);
      }
      decode(reader) {
        return this.coder.decode(reader);
      }
    };
    exports.AnonymousCoder = AnonymousCoder3;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/array.js
var require_array = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/array.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ArrayCoder = exports.unpack = exports.pack = void 0;
    var index_js_1 = require_utils();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var anonymous_js_1 = require_anonymous();
    function pack3(writer, coders, values) {
      let arrayValues = [];
      if (Array.isArray(values)) {
        arrayValues = values;
      } else if (values && typeof values === "object") {
        let unique = {};
        arrayValues = coders.map((coder) => {
          const name = coder.localName;
          (0, index_js_1.assert)(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
          (0, index_js_1.assert)(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
          unique[name] = true;
          return values[name];
        });
      } else {
        (0, index_js_1.assertArgument)(false, "invalid tuple value", "tuple", values);
      }
      (0, index_js_1.assertArgument)(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
      let staticWriter = new abstract_coder_js_1.Writer();
      let dynamicWriter = new abstract_coder_js_1.Writer();
      let updateFuncs = [];
      coders.forEach((coder, index) => {
        let value = arrayValues[index];
        if (coder.dynamic) {
          let dynamicOffset = dynamicWriter.length;
          coder.encode(dynamicWriter, value);
          let updateFunc = staticWriter.writeUpdatableValue();
          updateFuncs.push((baseOffset) => {
            updateFunc(baseOffset + dynamicOffset);
          });
        } else {
          coder.encode(staticWriter, value);
        }
      });
      updateFuncs.forEach((func) => {
        func(staticWriter.length);
      });
      let length = writer.appendWriter(staticWriter);
      length += writer.appendWriter(dynamicWriter);
      return length;
    }
    exports.pack = pack3;
    function unpack3(reader, coders) {
      let values = [];
      let keys = [];
      let baseReader = reader.subReader(0);
      coders.forEach((coder) => {
        let value = null;
        if (coder.dynamic) {
          let offset = reader.readIndex();
          let offsetReader = baseReader.subReader(offset);
          try {
            value = coder.decode(offsetReader);
          } catch (error) {
            if ((0, index_js_1.isError)(error, "BUFFER_OVERRUN")) {
              throw error;
            }
            value = error;
            value.baseType = coder.name;
            value.name = coder.localName;
            value.type = coder.type;
          }
        } else {
          try {
            value = coder.decode(reader);
          } catch (error) {
            if ((0, index_js_1.isError)(error, "BUFFER_OVERRUN")) {
              throw error;
            }
            value = error;
            value.baseType = coder.name;
            value.name = coder.localName;
            value.type = coder.type;
          }
        }
        if (value == void 0) {
          throw new Error("investigate");
        }
        values.push(value);
        keys.push(coder.localName || null);
      });
      return abstract_coder_js_1.Result.fromItems(values, keys);
    }
    exports.unpack = unpack3;
    var ArrayCoder3 = class extends abstract_coder_js_1.Coder {
      constructor(coder, length, localName) {
        const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        __publicField(this, "coder");
        __publicField(this, "length");
        (0, index_js_1.defineProperties)(this, { coder, length });
      }
      defaultValue() {
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for (let i = 0; i < this.length; i++) {
          result.push(defaultChild);
        }
        return result;
      }
      encode(writer, _value) {
        const value = typed_js_1.Typed.dereference(_value, "array");
        if (!Array.isArray(value)) {
          this._throwError("expected array value", value);
        }
        let count = this.length;
        if (count === -1) {
          count = value.length;
          writer.writeValue(value.length);
        }
        (0, index_js_1.assertArgumentCount)(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for (let i = 0; i < value.length; i++) {
          coders.push(this.coder);
        }
        return pack3(writer, coders, value);
      }
      decode(reader) {
        let count = this.length;
        if (count === -1) {
          count = reader.readIndex();
          (0, index_js_1.assert)(count * abstract_coder_js_1.WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * abstract_coder_js_1.WordSize, length: reader.dataLength });
        }
        let coders = [];
        for (let i = 0; i < count; i++) {
          coders.push(new anonymous_js_1.AnonymousCoder(this.coder));
        }
        return unpack3(reader, coders);
      }
    };
    exports.ArrayCoder = ArrayCoder3;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/boolean.js
var require_boolean = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/boolean.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BooleanCoder = void 0;
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var BooleanCoder3 = class extends abstract_coder_js_1.Coder {
      constructor(localName) {
        super("bool", "bool", localName, false);
      }
      defaultValue() {
        return false;
      }
      encode(writer, _value) {
        const value = typed_js_1.Typed.dereference(_value, "bool");
        return writer.writeValue(value ? 1 : 0);
      }
      decode(reader) {
        return !!reader.readValue();
      }
    };
    exports.BooleanCoder = BooleanCoder3;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/bytes.js
var require_bytes = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/bytes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesCoder = exports.DynamicBytesCoder = void 0;
    var index_js_1 = require_utils();
    var abstract_coder_js_1 = require_abstract_coder();
    var DynamicBytesCoder3 = class extends abstract_coder_js_1.Coder {
      constructor(type, localName) {
        super(type, type, localName, true);
      }
      defaultValue() {
        return "0x";
      }
      encode(writer, value) {
        value = (0, index_js_1.getBytesCopy)(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
      }
      decode(reader) {
        return reader.readBytes(reader.readIndex(), true);
      }
    };
    exports.DynamicBytesCoder = DynamicBytesCoder3;
    var BytesCoder3 = class extends DynamicBytesCoder3 {
      constructor(localName) {
        super("bytes", localName);
      }
      decode(reader) {
        return (0, index_js_1.hexlify)(super.decode(reader));
      }
    };
    exports.BytesCoder = BytesCoder3;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/fixed-bytes.js
var require_fixed_bytes = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/fixed-bytes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FixedBytesCoder = void 0;
    var index_js_1 = require_utils();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var FixedBytesCoder3 = class extends abstract_coder_js_1.Coder {
      constructor(size, localName) {
        let name = "bytes" + String(size);
        super(name, name, localName, false);
        __publicField(this, "size");
        (0, index_js_1.defineProperties)(this, { size }, { size: "number" });
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
      }
      encode(writer, _value) {
        let data = (0, index_js_1.getBytesCopy)(typed_js_1.Typed.dereference(_value, this.type));
        if (data.length !== this.size) {
          this._throwError("incorrect data length", _value);
        }
        return writer.writeBytes(data);
      }
      decode(reader) {
        return (0, index_js_1.hexlify)(reader.readBytes(this.size));
      }
    };
    exports.FixedBytesCoder = FixedBytesCoder3;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/null.js
var require_null = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/null.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NullCoder = void 0;
    var abstract_coder_js_1 = require_abstract_coder();
    var Empty2 = new Uint8Array([]);
    var NullCoder3 = class extends abstract_coder_js_1.Coder {
      constructor(localName) {
        super("null", "", localName, false);
      }
      defaultValue() {
        return null;
      }
      encode(writer, value) {
        if (value != null) {
          this._throwError("not null", value);
        }
        return writer.writeBytes(Empty2);
      }
      decode(reader) {
        reader.readBytes(0);
        return null;
      }
    };
    exports.NullCoder = NullCoder3;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/number.js
var require_number = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/number.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NumberCoder = void 0;
    var index_js_1 = require_utils();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var BN_012 = BigInt(0);
    var BN_17 = BigInt(1);
    var BN_MAX_UINT2563 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    var NumberCoder3 = class extends abstract_coder_js_1.Coder {
      constructor(size, signed2, localName) {
        const name = (signed2 ? "int" : "uint") + size * 8;
        super(name, name, localName, false);
        __publicField(this, "size");
        __publicField(this, "signed");
        (0, index_js_1.defineProperties)(this, { size, signed: signed2 }, { size: "number", signed: "boolean" });
      }
      defaultValue() {
        return 0;
      }
      encode(writer, _value) {
        let value = (0, index_js_1.getBigInt)(typed_js_1.Typed.dereference(_value, this.type));
        let maxUintValue = (0, index_js_1.mask)(BN_MAX_UINT2563, abstract_coder_js_1.WordSize * 8);
        if (this.signed) {
          let bounds = (0, index_js_1.mask)(maxUintValue, this.size * 8 - 1);
          if (value > bounds || value < -(bounds + BN_17)) {
            this._throwError("value out-of-bounds", _value);
          }
          value = (0, index_js_1.toTwos)(value, 8 * abstract_coder_js_1.WordSize);
        } else if (value < BN_012 || value > (0, index_js_1.mask)(maxUintValue, this.size * 8)) {
          this._throwError("value out-of-bounds", _value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        let value = (0, index_js_1.mask)(reader.readValue(), this.size * 8);
        if (this.signed) {
          value = (0, index_js_1.fromTwos)(value, this.size * 8);
        }
        return value;
      }
    };
    exports.NumberCoder = NumberCoder3;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/string.js
var require_string = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/string.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StringCoder = void 0;
    var utf8_js_1 = require_utf8();
    var typed_js_1 = require_typed();
    var bytes_js_1 = require_bytes();
    var StringCoder3 = class extends bytes_js_1.DynamicBytesCoder {
      constructor(localName) {
        super("string", localName);
      }
      defaultValue() {
        return "";
      }
      encode(writer, _value) {
        return super.encode(writer, (0, utf8_js_1.toUtf8Bytes)(typed_js_1.Typed.dereference(_value, "string")));
      }
      decode(reader) {
        return (0, utf8_js_1.toUtf8String)(super.decode(reader));
      }
    };
    exports.StringCoder = StringCoder3;
  }
});

// node_modules/ethers/lib.commonjs/abi/coders/tuple.js
var require_tuple = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/coders/tuple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TupleCoder = void 0;
    var properties_js_1 = require_properties();
    var typed_js_1 = require_typed();
    var abstract_coder_js_1 = require_abstract_coder();
    var array_js_1 = require_array();
    var TupleCoder3 = class extends abstract_coder_js_1.Coder {
      constructor(coders, localName) {
        let dynamic = false;
        const types = [];
        coders.forEach((coder) => {
          if (coder.dynamic) {
            dynamic = true;
          }
          types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        __publicField(this, "coders");
        (0, properties_js_1.defineProperties)(this, { coders: Object.freeze(coders.slice()) });
      }
      defaultValue() {
        const values = [];
        this.coders.forEach((coder) => {
          values.push(coder.defaultValue());
        });
        const uniqueNames = this.coders.reduce((accum, coder) => {
          const name = coder.localName;
          if (name) {
            if (!accum[name]) {
              accum[name] = 0;
            }
            accum[name]++;
          }
          return accum;
        }, {});
        this.coders.forEach((coder, index) => {
          let name = coder.localName;
          if (!name || uniqueNames[name] !== 1) {
            return;
          }
          if (name === "length") {
            name = "_length";
          }
          if (values[name] != null) {
            return;
          }
          values[name] = values[index];
        });
        return Object.freeze(values);
      }
      encode(writer, _value) {
        const value = typed_js_1.Typed.dereference(_value, "tuple");
        return (0, array_js_1.pack)(writer, this.coders, value);
      }
      decode(reader) {
        return (0, array_js_1.unpack)(reader, this.coders);
      }
    };
    exports.TupleCoder = TupleCoder3;
  }
});

// node_modules/ethers/lib.commonjs/hash/id.js
var require_id = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/id.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.id = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils();
    function id3(value) {
      return (0, index_js_1.keccak256)((0, index_js_2.toUtf8Bytes)(value));
    }
    exports.id = id3;
  }
});

// node_modules/@adraffy/ens-normalize/dist/index.cjs
var require_dist = __commonJS({
  "node_modules/@adraffy/ens-normalize/dist/index.cjs"(exports) {
    "use strict";
    var COMPRESSED$1 = "";
    var FENCED = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]);
    var NSM_MAX = 4;
    function decode_arithmetic2(bytes3) {
      let pos = 0;
      function u16() {
        return bytes3[pos++] << 8 | bytes3[pos++];
      }
      let symbol_count = u16();
      let total = 1;
      let acc = [0, 1];
      for (let i = 1; i < symbol_count; i++) {
        acc.push(total += u16());
      }
      let skip = u16();
      let pos_payload = pos;
      pos += skip;
      let read_width = 0;
      let read_buffer = 0;
      function read_bit() {
        if (read_width == 0) {
          read_buffer = read_buffer << 8 | bytes3[pos++];
          read_width = 8;
        }
        return read_buffer >> --read_width & 1;
      }
      const N3 = 31;
      const FULL = 2 ** N3;
      const HALF = FULL >>> 1;
      const QRTR = HALF >> 1;
      const MASK = FULL - 1;
      let register = 0;
      for (let i = 0; i < N3; i++) register = register << 1 | read_bit();
      let symbols = [];
      let low = 0;
      let range = FULL;
      while (true) {
        let value = Math.floor(((register - low + 1) * total - 1) / range);
        let start = 0;
        let end = symbol_count;
        while (end - start > 1) {
          let mid = start + end >>> 1;
          if (value < acc[mid]) {
            end = mid;
          } else {
            start = mid;
          }
        }
        if (start == 0) break;
        symbols.push(start);
        let a = low + Math.floor(range * acc[start] / total);
        let b2 = low + Math.floor(range * acc[start + 1] / total) - 1;
        while (((a ^ b2) & HALF) == 0) {
          register = register << 1 & MASK | read_bit();
          a = a << 1 & MASK;
          b2 = b2 << 1 & MASK | 1;
        }
        while (a & ~b2 & QRTR) {
          register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
          a = a << 1 ^ HALF;
          b2 = (b2 ^ HALF) << 1 | HALF | 1;
        }
        low = a;
        range = 1 + b2 - a;
      }
      let offset = symbol_count - 4;
      return symbols.map((x) => {
        switch (x - offset) {
          case 3:
            return offset + 65792 + (bytes3[pos_payload++] << 16 | bytes3[pos_payload++] << 8 | bytes3[pos_payload++]);
          case 2:
            return offset + 256 + (bytes3[pos_payload++] << 8 | bytes3[pos_payload++]);
          case 1:
            return offset + bytes3[pos_payload++];
          default:
            return x - 1;
        }
      });
    }
    function read_payload2(v) {
      let pos = 0;
      return () => v[pos++];
    }
    function read_compressed_payload2(s) {
      return read_payload2(decode_arithmetic2(unsafe_atob(s)));
    }
    function unsafe_atob(s) {
      let lookup = [];
      [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((c, i) => lookup[c.charCodeAt(0)] = i);
      let n2 = s.length;
      let ret = new Uint8Array(6 * n2 >> 3);
      for (let i = 0, pos = 0, width = 0, carry = 0; i < n2; i++) {
        carry = carry << 6 | lookup[s.charCodeAt(i)];
        width += 6;
        if (width >= 8) {
          ret[pos++] = carry >> (width -= 8);
        }
      }
      return ret;
    }
    function signed2(i) {
      return i & 1 ? ~i >> 1 : i >> 1;
    }
    function read_deltas2(n2, next) {
      let v = Array(n2);
      for (let i = 0, x = 0; i < n2; i++) v[i] = x += signed2(next());
      return v;
    }
    function read_sorted(next, prev = 0) {
      let ret = [];
      while (true) {
        let x = next();
        let n2 = next();
        if (!n2) break;
        prev += x;
        for (let i = 0; i < n2; i++) {
          ret.push(prev + i);
        }
        prev += n2 + 1;
      }
      return ret;
    }
    function read_sorted_arrays(next) {
      return read_array_while(() => {
        let v = read_sorted(next);
        if (v.length) return v;
      });
    }
    function read_mapped(next) {
      let ret = [];
      while (true) {
        let w = next();
        if (w == 0) break;
        ret.push(read_linear_table2(w, next));
      }
      while (true) {
        let w = next() - 1;
        if (w < 0) break;
        ret.push(read_replacement_table2(w, next));
      }
      return ret.flat();
    }
    function read_array_while(next) {
      let v = [];
      while (true) {
        let x = next(v.length);
        if (!x) break;
        v.push(x);
      }
      return v;
    }
    function read_transposed2(n2, w, next) {
      let m = Array(n2).fill().map(() => []);
      for (let i = 0; i < w; i++) {
        read_deltas2(n2, next).forEach((x, j) => m[j].push(x));
      }
      return m;
    }
    function read_linear_table2(w, next) {
      let dx = 1 + next();
      let dy = next();
      let vN = read_array_while(next);
      let m = read_transposed2(vN.length, 1 + w, next);
      return m.flatMap((v, i) => {
        let [x, ...ys] = v;
        return Array(vN[i]).fill().map((_, j) => {
          let j_dy = j * dy;
          return [x + j * dx, ys.map((y) => y + j_dy)];
        });
      });
    }
    function read_replacement_table2(w, next) {
      let n2 = 1 + next();
      let m = read_transposed2(n2, 1 + w, next);
      return m.map((v) => [v[0], v.slice(1)]);
    }
    function read_trie(next) {
      let ret = [];
      let sorted = read_sorted(next);
      expand(decode3([]), []);
      return ret;
      function decode3(Q) {
        let S = next();
        let B = read_array_while(() => {
          let cps = read_sorted(next).map((i) => sorted[i]);
          if (cps.length) return decode3(cps);
        });
        return { S, B, Q };
      }
      function expand({ S, B }, cps, saved) {
        if (S & 4 && saved === cps[cps.length - 1]) return;
        if (S & 2) saved = cps[cps.length - 1];
        if (S & 1) ret.push(cps);
        for (let br of B) {
          for (let cp of br.Q) {
            expand(br, [...cps, cp], saved);
          }
        }
      }
    }
    function hex_cp(cp) {
      return cp.toString(16).toUpperCase().padStart(2, "0");
    }
    function quote_cp(cp) {
      return `{${hex_cp(cp)}}`;
    }
    function explode_cp(s) {
      let cps = [];
      for (let pos = 0, len = s.length; pos < len; ) {
        let cp = s.codePointAt(pos);
        pos += cp < 65536 ? 1 : 2;
        cps.push(cp);
      }
      return cps;
    }
    function str_from_cps(cps) {
      const chunk = 4096;
      let len = cps.length;
      if (len < chunk) return String.fromCodePoint(...cps);
      let buf = [];
      for (let i = 0; i < len; ) {
        buf.push(String.fromCodePoint(...cps.slice(i, i += chunk)));
      }
      return buf.join("");
    }
    function compare_arrays(a, b2) {
      let n2 = a.length;
      let c = n2 - b2.length;
      for (let i = 0; c == 0 && i < n2; i++) c = a[i] - b2[i];
      return c;
    }
    var COMPRESSED = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";
    var S0 = 44032;
    var L0 = 4352;
    var V0 = 4449;
    var T0 = 4519;
    var L_COUNT = 19;
    var V_COUNT = 21;
    var T_COUNT = 28;
    var N_COUNT = V_COUNT * T_COUNT;
    var S_COUNT = L_COUNT * N_COUNT;
    var S1 = S0 + S_COUNT;
    var L1 = L0 + L_COUNT;
    var V1 = V0 + V_COUNT;
    var T1 = T0 + T_COUNT;
    function unpack_cc(packed) {
      return packed >> 24 & 255;
    }
    function unpack_cp(packed) {
      return packed & 16777215;
    }
    var SHIFTED_RANK;
    var EXCLUSIONS;
    var DECOMP;
    var RECOMP;
    function init$1() {
      let r2 = read_compressed_payload2(COMPRESSED);
      SHIFTED_RANK = new Map(read_sorted_arrays(r2).flatMap((v, i) => v.map((x) => [x, i + 1 << 24])));
      EXCLUSIONS = new Set(read_sorted(r2));
      DECOMP = /* @__PURE__ */ new Map();
      RECOMP = /* @__PURE__ */ new Map();
      for (let [cp, cps] of read_mapped(r2)) {
        if (!EXCLUSIONS.has(cp) && cps.length == 2) {
          let [a, b2] = cps;
          let bucket = RECOMP.get(a);
          if (!bucket) {
            bucket = /* @__PURE__ */ new Map();
            RECOMP.set(a, bucket);
          }
          bucket.set(b2, cp);
        }
        DECOMP.set(cp, cps.reverse());
      }
    }
    function is_hangul(cp) {
      return cp >= S0 && cp < S1;
    }
    function compose_pair(a, b2) {
      if (a >= L0 && a < L1 && b2 >= V0 && b2 < V1) {
        return S0 + (a - L0) * N_COUNT + (b2 - V0) * T_COUNT;
      } else if (is_hangul(a) && b2 > T0 && b2 < T1 && (a - S0) % T_COUNT == 0) {
        return a + (b2 - T0);
      } else {
        let recomp = RECOMP.get(a);
        if (recomp) {
          recomp = recomp.get(b2);
          if (recomp) {
            return recomp;
          }
        }
        return -1;
      }
    }
    function decomposed(cps) {
      if (!SHIFTED_RANK) init$1();
      let ret = [];
      let buf = [];
      let check_order = false;
      function add2(cp) {
        let cc = SHIFTED_RANK.get(cp);
        if (cc) {
          check_order = true;
          cp |= cc;
        }
        ret.push(cp);
      }
      for (let cp of cps) {
        while (true) {
          if (cp < 128) {
            ret.push(cp);
          } else if (is_hangul(cp)) {
            let s_index = cp - S0;
            let l_index = s_index / N_COUNT | 0;
            let v_index = s_index % N_COUNT / T_COUNT | 0;
            let t_index = s_index % T_COUNT;
            add2(L0 + l_index);
            add2(V0 + v_index);
            if (t_index > 0) add2(T0 + t_index);
          } else {
            let mapped = DECOMP.get(cp);
            if (mapped) {
              buf.push(...mapped);
            } else {
              add2(cp);
            }
          }
          if (!buf.length) break;
          cp = buf.pop();
        }
      }
      if (check_order && ret.length > 1) {
        let prev_cc = unpack_cc(ret[0]);
        for (let i = 1; i < ret.length; i++) {
          let cc = unpack_cc(ret[i]);
          if (cc == 0 || prev_cc <= cc) {
            prev_cc = cc;
            continue;
          }
          let j = i - 1;
          while (true) {
            let tmp = ret[j + 1];
            ret[j + 1] = ret[j];
            ret[j] = tmp;
            if (!j) break;
            prev_cc = unpack_cc(ret[--j]);
            if (prev_cc <= cc) break;
          }
          prev_cc = unpack_cc(ret[i]);
        }
      }
      return ret;
    }
    function composed_from_decomposed(v) {
      let ret = [];
      let stack = [];
      let prev_cp = -1;
      let prev_cc = 0;
      for (let packed of v) {
        let cc = unpack_cc(packed);
        let cp = unpack_cp(packed);
        if (prev_cp == -1) {
          if (cc == 0) {
            prev_cp = cp;
          } else {
            ret.push(cp);
          }
        } else if (prev_cc > 0 && prev_cc >= cc) {
          if (cc == 0) {
            ret.push(prev_cp, ...stack);
            stack.length = 0;
            prev_cp = cp;
          } else {
            stack.push(cp);
          }
          prev_cc = cc;
        } else {
          let composed = compose_pair(prev_cp, cp);
          if (composed >= 0) {
            prev_cp = composed;
          } else if (prev_cc == 0 && cc == 0) {
            ret.push(prev_cp);
            prev_cp = cp;
          } else {
            stack.push(cp);
            prev_cc = cc;
          }
        }
      }
      if (prev_cp >= 0) {
        ret.push(prev_cp, ...stack);
      }
      return ret;
    }
    function nfd(cps) {
      return decomposed(cps).map(unpack_cp);
    }
    function nfc(cps) {
      return composed_from_decomposed(decomposed(cps));
    }
    var HYPHEN = 45;
    var STOP = 46;
    var STOP_CH = ".";
    var FE0F = 65039;
    var UNIQUE_PH = 1;
    var Array_from = (x) => Array.from(x);
    function group_has_cp(g, cp) {
      return g.P.has(cp) || g.Q.has(cp);
    }
    var Emoji = class extends Array {
      get is_emoji() {
        return true;
      }
      // free tagging system
    };
    var MAPPED2;
    var IGNORED2;
    var CM;
    var NSM;
    var ESCAPE;
    var NFC_CHECK;
    var GROUPS;
    var WHOLE_VALID;
    var WHOLE_MAP;
    var VALID2;
    var EMOJI_LIST;
    var EMOJI_ROOT2;
    function init() {
      if (MAPPED2) return;
      let r2 = read_compressed_payload2(COMPRESSED$1);
      const read_sorted_array = () => read_sorted(r2);
      const read_sorted_set = () => new Set(read_sorted_array());
      const set_add_many = (set, v) => v.forEach((x) => set.add(x));
      MAPPED2 = new Map(read_mapped(r2));
      IGNORED2 = read_sorted_set();
      CM = read_sorted_array();
      NSM = new Set(read_sorted_array().map((i) => CM[i]));
      CM = new Set(CM);
      ESCAPE = read_sorted_set();
      NFC_CHECK = read_sorted_set();
      let chunks = read_sorted_arrays(r2);
      let unrestricted = r2();
      const read_chunked = () => {
        let set = /* @__PURE__ */ new Set();
        read_sorted_array().forEach((i) => set_add_many(set, chunks[i]));
        set_add_many(set, read_sorted_array());
        return set;
      };
      GROUPS = read_array_while((i) => {
        let N3 = read_array_while(r2).map((x) => x + 96);
        if (N3.length) {
          let R = i >= unrestricted;
          N3[0] -= 32;
          N3 = str_from_cps(N3);
          if (R) N3 = `Restricted[${N3}]`;
          let P = read_chunked();
          let Q = read_chunked();
          let M = !r2();
          return { N: N3, P, Q, M, R };
        }
      });
      WHOLE_VALID = read_sorted_set();
      WHOLE_MAP = /* @__PURE__ */ new Map();
      let wholes = read_sorted_array().concat(Array_from(WHOLE_VALID)).sort((a, b2) => a - b2);
      wholes.forEach((cp, i) => {
        let d = r2();
        let w = wholes[i] = d ? wholes[i - d] : { V: [], M: /* @__PURE__ */ new Map() };
        w.V.push(cp);
        if (!WHOLE_VALID.has(cp)) {
          WHOLE_MAP.set(cp, w);
        }
      });
      for (let { V, M } of new Set(WHOLE_MAP.values())) {
        let recs = [];
        for (let cp of V) {
          let gs = GROUPS.filter((g) => group_has_cp(g, cp));
          let rec = recs.find(({ G }) => gs.some((g) => G.has(g)));
          if (!rec) {
            rec = { G: /* @__PURE__ */ new Set(), V: [] };
            recs.push(rec);
          }
          rec.V.push(cp);
          set_add_many(rec.G, gs);
        }
        let union = recs.flatMap((x) => Array_from(x.G));
        for (let { G, V: V2 } of recs) {
          let complement = new Set(union.filter((g) => !G.has(g)));
          for (let cp of V2) {
            M.set(cp, complement);
          }
        }
      }
      VALID2 = /* @__PURE__ */ new Set();
      let multi = /* @__PURE__ */ new Set();
      const add_to_union = (cp) => VALID2.has(cp) ? multi.add(cp) : VALID2.add(cp);
      for (let g of GROUPS) {
        for (let cp of g.P) add_to_union(cp);
        for (let cp of g.Q) add_to_union(cp);
      }
      for (let cp of VALID2) {
        if (!WHOLE_MAP.has(cp) && !multi.has(cp)) {
          WHOLE_MAP.set(cp, UNIQUE_PH);
        }
      }
      set_add_many(VALID2, nfd(VALID2));
      EMOJI_LIST = read_trie(r2).map((v) => Emoji.from(v)).sort(compare_arrays);
      EMOJI_ROOT2 = /* @__PURE__ */ new Map();
      for (let cps of EMOJI_LIST) {
        let prev = [EMOJI_ROOT2];
        for (let cp of cps) {
          let next = prev.map((node) => {
            let child = node.get(cp);
            if (!child) {
              child = /* @__PURE__ */ new Map();
              node.set(cp, child);
            }
            return child;
          });
          if (cp === FE0F) {
            prev.push(...next);
          } else {
            prev = next;
          }
        }
        for (let x of prev) {
          x.V = cps;
        }
      }
    }
    function quoted_cp(cp) {
      return (should_escape(cp) ? "" : `${bidi_qq(safe_str_from_cps([cp]))} `) + quote_cp(cp);
    }
    function bidi_qq(s) {
      return `"${s}"‎`;
    }
    function check_label_extension(cps) {
      if (cps.length >= 4 && cps[2] == HYPHEN && cps[3] == HYPHEN) {
        throw new Error(`invalid label extension: "${str_from_cps(cps.slice(0, 4))}"`);
      }
    }
    function check_leading_underscore(cps) {
      const UNDERSCORE = 95;
      for (let i = cps.lastIndexOf(UNDERSCORE); i > 0; ) {
        if (cps[--i] !== UNDERSCORE) {
          throw new Error("underscore allowed only at start");
        }
      }
    }
    function check_fenced(cps) {
      let cp = cps[0];
      let prev = FENCED.get(cp);
      if (prev) throw error_placement(`leading ${prev}`);
      let n2 = cps.length;
      let last = -1;
      for (let i = 1; i < n2; i++) {
        cp = cps[i];
        let match = FENCED.get(cp);
        if (match) {
          if (last == i) throw error_placement(`${prev} + ${match}`);
          last = i + 1;
          prev = match;
        }
      }
      if (last == n2) throw error_placement(`trailing ${prev}`);
    }
    function safe_str_from_cps(cps, max = Infinity, quoter = quote_cp) {
      let buf = [];
      if (is_combining_mark(cps[0])) buf.push("◌");
      if (cps.length > max) {
        max >>= 1;
        cps = [...cps.slice(0, max), 8230, ...cps.slice(-max)];
      }
      let prev = 0;
      let n2 = cps.length;
      for (let i = 0; i < n2; i++) {
        let cp = cps[i];
        if (should_escape(cp)) {
          buf.push(str_from_cps(cps.slice(prev, i)));
          buf.push(quoter(cp));
          prev = i + 1;
        }
      }
      buf.push(str_from_cps(cps.slice(prev, n2)));
      return buf.join("");
    }
    function is_combining_mark(cp) {
      init();
      return CM.has(cp);
    }
    function should_escape(cp) {
      init();
      return ESCAPE.has(cp);
    }
    function ens_emoji() {
      init();
      return EMOJI_LIST.map((x) => x.slice());
    }
    function ens_normalize_fragment(frag, decompose) {
      init();
      let nf = decompose ? nfd : nfc;
      return frag.split(STOP_CH).map((label) => str_from_cps(tokens_from_str(explode_cp(label), nf, filter_fe0f).flat())).join(STOP_CH);
    }
    function ens_normalize3(name) {
      return flatten(split2(name, nfc, filter_fe0f));
    }
    function ens_beautify(name) {
      let labels = split2(name, nfc, (x) => x);
      for (let { type, output: output2, error } of labels) {
        if (error) break;
        if (type !== "Greek") array_replace(output2, 958, 926);
      }
      return flatten(labels);
    }
    function array_replace(v, a, b2) {
      let prev = 0;
      while (true) {
        let next = v.indexOf(a, prev);
        if (next < 0) break;
        v[next] = b2;
        prev = next + 1;
      }
    }
    function ens_split(name, preserve_emoji) {
      return split2(name, nfc, preserve_emoji ? (x) => x.slice() : filter_fe0f);
    }
    function split2(name, nf, ef) {
      if (!name) return [];
      init();
      let offset = 0;
      return name.split(STOP_CH).map((label) => {
        let input = explode_cp(label);
        let info = {
          input,
          offset
          // codepoint, not substring!
        };
        offset += input.length + 1;
        try {
          let tokens = info.tokens = tokens_from_str(input, nf, ef);
          let token_count = tokens.length;
          let type;
          if (!token_count) {
            throw new Error(`empty label`);
          }
          let norm = info.output = tokens.flat();
          check_leading_underscore(norm);
          let emoji = info.emoji = token_count > 1 || tokens[0].is_emoji;
          if (!emoji && norm.every((cp) => cp < 128)) {
            check_label_extension(norm);
            type = "ASCII";
          } else {
            let chars = tokens.flatMap((x) => x.is_emoji ? [] : x);
            if (!chars.length) {
              type = "Emoji";
            } else {
              if (CM.has(norm[0])) throw error_placement("leading combining mark");
              for (let i = 1; i < token_count; i++) {
                let cps = tokens[i];
                if (!cps.is_emoji && CM.has(cps[0])) {
                  throw error_placement(`emoji + combining mark: "${str_from_cps(tokens[i - 1])} + ${safe_str_from_cps([cps[0]])}"`);
                }
              }
              check_fenced(norm);
              let unique = Array_from(new Set(chars));
              let [g] = determine_group(unique);
              check_group(g, chars);
              check_whole(g, unique);
              type = g.N;
            }
          }
          info.type = type;
        } catch (err) {
          info.error = err;
        }
        return info;
      });
    }
    function check_whole(group, unique) {
      let maker;
      let shared = [];
      for (let cp of unique) {
        let whole = WHOLE_MAP.get(cp);
        if (whole === UNIQUE_PH) return;
        if (whole) {
          let set = whole.M.get(cp);
          maker = maker ? maker.filter((g) => set.has(g)) : Array_from(set);
          if (!maker.length) return;
        } else {
          shared.push(cp);
        }
      }
      if (maker) {
        for (let g of maker) {
          if (shared.every((cp) => group_has_cp(g, cp))) {
            throw new Error(`whole-script confusable: ${group.N}/${g.N}`);
          }
        }
      }
    }
    function determine_group(unique) {
      let groups = GROUPS;
      for (let cp of unique) {
        let gs = groups.filter((g) => group_has_cp(g, cp));
        if (!gs.length) {
          if (!GROUPS.some((g) => group_has_cp(g, cp))) {
            throw error_disallowed(cp);
          } else {
            throw error_group_member(groups[0], cp);
          }
        }
        groups = gs;
        if (gs.length == 1) break;
      }
      return groups;
    }
    function flatten(split3) {
      return split3.map(({ input, error, output: output2 }) => {
        if (error) {
          let msg = error.message;
          throw new Error(split3.length == 1 ? msg : `Invalid label ${bidi_qq(safe_str_from_cps(input, 63))}: ${msg}`);
        }
        return str_from_cps(output2);
      }).join(STOP_CH);
    }
    function error_disallowed(cp) {
      return new Error(`disallowed character: ${quoted_cp(cp)}`);
    }
    function error_group_member(g, cp) {
      let quoted = quoted_cp(cp);
      let gg = GROUPS.find((g2) => g2.P.has(cp));
      if (gg) {
        quoted = `${gg.N} ${quoted}`;
      }
      return new Error(`illegal mixture: ${g.N} + ${quoted}`);
    }
    function error_placement(where) {
      return new Error(`illegal placement: ${where}`);
    }
    function check_group(g, cps) {
      for (let cp of cps) {
        if (!group_has_cp(g, cp)) {
          throw error_group_member(g, cp);
        }
      }
      if (g.M) {
        let decomposed2 = nfd(cps);
        for (let i = 1, e = decomposed2.length; i < e; i++) {
          if (NSM.has(decomposed2[i])) {
            let j = i + 1;
            for (let cp; j < e && NSM.has(cp = decomposed2[j]); j++) {
              for (let k = i; k < j; k++) {
                if (decomposed2[k] == cp) {
                  throw new Error(`duplicate non-spacing marks: ${quoted_cp(cp)}`);
                }
              }
            }
            if (j - i > NSM_MAX) {
              throw new Error(`excessive non-spacing marks: ${bidi_qq(safe_str_from_cps(decomposed2.slice(i - 1, j)))} (${j - i}/${NSM_MAX})`);
            }
            i = j;
          }
        }
      }
    }
    function tokens_from_str(input, nf, ef) {
      let ret = [];
      let chars = [];
      input = input.slice().reverse();
      while (input.length) {
        let emoji = consume_emoji_reversed(input);
        if (emoji) {
          if (chars.length) {
            ret.push(nf(chars));
            chars = [];
          }
          ret.push(ef(emoji));
        } else {
          let cp = input.pop();
          if (VALID2.has(cp)) {
            chars.push(cp);
          } else {
            let cps = MAPPED2.get(cp);
            if (cps) {
              chars.push(...cps);
            } else if (!IGNORED2.has(cp)) {
              throw error_disallowed(cp);
            }
          }
        }
      }
      if (chars.length) {
        ret.push(nf(chars));
      }
      return ret;
    }
    function filter_fe0f(cps) {
      return cps.filter((cp) => cp != FE0F);
    }
    function consume_emoji_reversed(cps, eaten) {
      let node = EMOJI_ROOT2;
      let emoji;
      let pos = cps.length;
      while (pos) {
        node = node.get(cps[--pos]);
        if (!node) break;
        let { V } = node;
        if (V) {
          emoji = V;
          if (eaten) eaten.push(...cps.slice(pos).reverse());
          cps.length = pos;
        }
      }
      return emoji;
    }
    var TY_VALID = "valid";
    var TY_MAPPED = "mapped";
    var TY_IGNORED = "ignored";
    var TY_DISALLOWED = "disallowed";
    var TY_EMOJI = "emoji";
    var TY_NFC = "nfc";
    var TY_STOP = "stop";
    function ens_tokenize(name, {
      nf = true
      // collapse unnormalized runs into a single token
    } = {}) {
      init();
      let input = explode_cp(name).reverse();
      let eaten = [];
      let tokens = [];
      while (input.length) {
        let emoji = consume_emoji_reversed(input, eaten);
        if (emoji) {
          tokens.push({
            type: TY_EMOJI,
            emoji: emoji.slice(),
            // copy emoji
            input: eaten,
            cps: filter_fe0f(emoji)
          });
          eaten = [];
        } else {
          let cp = input.pop();
          if (cp == STOP) {
            tokens.push({ type: TY_STOP, cp });
          } else if (VALID2.has(cp)) {
            tokens.push({ type: TY_VALID, cps: [cp] });
          } else if (IGNORED2.has(cp)) {
            tokens.push({ type: TY_IGNORED, cp });
          } else {
            let cps = MAPPED2.get(cp);
            if (cps) {
              tokens.push({ type: TY_MAPPED, cp, cps: cps.slice() });
            } else {
              tokens.push({ type: TY_DISALLOWED, cp });
            }
          }
        }
      }
      if (nf) {
        for (let i = 0, start = -1; i < tokens.length; i++) {
          let token = tokens[i];
          if (is_valid_or_mapped(token.type)) {
            if (requires_check(token.cps)) {
              let end = i + 1;
              for (let pos = end; pos < tokens.length; pos++) {
                let { type, cps: cps2 } = tokens[pos];
                if (is_valid_or_mapped(type)) {
                  if (!requires_check(cps2)) break;
                  end = pos + 1;
                } else if (type !== TY_IGNORED) {
                  break;
                }
              }
              if (start < 0) start = i;
              let slice = tokens.slice(start, end);
              let cps0 = slice.flatMap((x) => is_valid_or_mapped(x.type) ? x.cps : []);
              let cps = nfc(cps0);
              if (compare_arrays(cps, cps0)) {
                tokens.splice(start, end - start, {
                  type: TY_NFC,
                  input: cps0,
                  // there are 3 states: tokens0 ==(process)=> input ==(nfc)=> tokens/cps
                  cps,
                  tokens0: collapse_valid_tokens(slice),
                  tokens: ens_tokenize(str_from_cps(cps), { nf: false })
                });
                i = start;
              } else {
                i = end - 1;
              }
              start = -1;
            } else {
              start = i;
            }
          } else if (token.type !== TY_IGNORED) {
            start = -1;
          }
        }
      }
      return collapse_valid_tokens(tokens);
    }
    function is_valid_or_mapped(type) {
      return type == TY_VALID || type == TY_MAPPED;
    }
    function requires_check(cps) {
      return cps.some((cp) => NFC_CHECK.has(cp));
    }
    function collapse_valid_tokens(tokens) {
      for (let i = 0; i < tokens.length; i++) {
        if (tokens[i].type == TY_VALID) {
          let j = i + 1;
          while (j < tokens.length && tokens[j].type == TY_VALID) j++;
          tokens.splice(i, j - i, { type: TY_VALID, cps: tokens.slice(i, j).flatMap((x) => x.cps) });
        }
      }
      return tokens;
    }
    exports.ens_beautify = ens_beautify;
    exports.ens_emoji = ens_emoji;
    exports.ens_normalize = ens_normalize3;
    exports.ens_normalize_fragment = ens_normalize_fragment;
    exports.ens_split = ens_split;
    exports.ens_tokenize = ens_tokenize;
    exports.is_combining_mark = is_combining_mark;
    exports.nfc = nfc;
    exports.nfd = nfd;
    exports.safe_str_from_cps = safe_str_from_cps;
    exports.should_escape = should_escape;
  }
});

// node_modules/ethers/lib.commonjs/hash/namehash.js
var require_namehash = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/namehash.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils();
    var ens_normalize_1 = require_dist();
    var Zeros4 = new Uint8Array(32);
    Zeros4.fill(0);
    function checkComponent(comp) {
      (0, index_js_2.assertArgument)(comp.length !== 0, "invalid ENS name; empty component", "comp", comp);
      return comp;
    }
    function ensNameSplit(name) {
      const bytes3 = (0, index_js_2.toUtf8Bytes)(ensNormalize3(name));
      const comps = [];
      if (name.length === 0) {
        return comps;
      }
      let last = 0;
      for (let i = 0; i < bytes3.length; i++) {
        const d = bytes3[i];
        if (d === 46) {
          comps.push(checkComponent(bytes3.slice(last, i)));
          last = i + 1;
        }
      }
      (0, index_js_2.assertArgument)(last < bytes3.length, "invalid ENS name; empty component", "name", name);
      comps.push(checkComponent(bytes3.slice(last)));
      return comps;
    }
    function ensNormalize3(name) {
      try {
        if (name.length === 0) {
          throw new Error("empty label");
        }
        return (0, ens_normalize_1.ens_normalize)(name);
      } catch (error) {
        (0, index_js_2.assertArgument)(false, `invalid ENS name (${error.message})`, "name", name);
      }
    }
    exports.ensNormalize = ensNormalize3;
    function isValidName3(name) {
      try {
        return ensNameSplit(name).length !== 0;
      } catch (error) {
      }
      return false;
    }
    exports.isValidName = isValidName3;
    function namehash3(name) {
      (0, index_js_2.assertArgument)(typeof name === "string", "invalid ENS name; not a string", "name", name);
      (0, index_js_2.assertArgument)(name.length, `invalid ENS name (empty label)`, "name", name);
      let result = Zeros4;
      const comps = ensNameSplit(name);
      while (comps.length) {
        result = (0, index_js_1.keccak256)((0, index_js_2.concat)([result, (0, index_js_1.keccak256)(comps.pop())]));
      }
      return (0, index_js_2.hexlify)(result);
    }
    exports.namehash = namehash3;
    function dnsEncode3(name, _maxLength) {
      const length = _maxLength != null ? _maxLength : 63;
      (0, index_js_2.assertArgument)(length <= 255, "DNS encoded label cannot exceed 255", "length", length);
      return (0, index_js_2.hexlify)((0, index_js_2.concat)(ensNameSplit(name).map((comp) => {
        (0, index_js_2.assertArgument)(comp.length <= length, `label ${JSON.stringify(name)} exceeds ${length} bytes`, "name", name);
        const bytes3 = new Uint8Array(comp.length + 1);
        bytes3.set(comp, 1);
        bytes3[0] = bytes3.length - 1;
        return bytes3;
      }))) + "00";
    }
    exports.dnsEncode = dnsEncode3;
  }
});

// node_modules/ethers/lib.commonjs/transaction/accesslist.js
var require_accesslist = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/accesslist.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.accessListify = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_utils();
    function accessSetify2(addr, storageKeys) {
      return {
        address: (0, index_js_1.getAddress)(addr),
        storageKeys: storageKeys.map((storageKey, index) => {
          (0, index_js_2.assertArgument)((0, index_js_2.isHexString)(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
          return storageKey.toLowerCase();
        })
      };
    }
    function accessListify2(value) {
      if (Array.isArray(value)) {
        return value.map((set, index) => {
          if (Array.isArray(set)) {
            (0, index_js_2.assertArgument)(set.length === 2, "invalid slot set", `value[${index}]`, set);
            return accessSetify2(set[0], set[1]);
          }
          (0, index_js_2.assertArgument)(set != null && typeof set === "object", "invalid address-slot set", "value", value);
          return accessSetify2(set.address, set.storageKeys);
        });
      }
      (0, index_js_2.assertArgument)(value != null && typeof value === "object", "invalid access list", "value", value);
      const result = Object.keys(value).map((addr) => {
        const storageKeys = value[addr].reduce((accum, storageKey) => {
          accum[storageKey] = true;
          return accum;
        }, {});
        return accessSetify2(addr, Object.keys(storageKeys).sort());
      });
      result.sort((a, b2) => a.address.localeCompare(b2.address));
      return result;
    }
    exports.accessListify = accessListify2;
  }
});

// node_modules/ethers/lib.commonjs/transaction/address.js
var require_address4 = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/address.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.recoverAddress = exports.computeAddress = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    function computeAddress2(key) {
      let pubkey;
      if (typeof key === "string") {
        pubkey = index_js_2.SigningKey.computePublicKey(key, false);
      } else {
        pubkey = key.publicKey;
      }
      return (0, index_js_1.getAddress)((0, index_js_2.keccak256)("0x" + pubkey.substring(4)).substring(26));
    }
    exports.computeAddress = computeAddress2;
    function recoverAddress2(digest, signature) {
      return computeAddress2(index_js_2.SigningKey.recoverPublicKey(digest, signature));
    }
    exports.recoverAddress = recoverAddress2;
  }
});

// node_modules/ethers/lib.commonjs/transaction/transaction.js
var require_transaction = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Transaction = void 0;
    var index_js_1 = require_address2();
    var addresses_js_1 = require_addresses();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_utils();
    var accesslist_js_1 = require_accesslist();
    var address_js_1 = require_address4();
    var BN_012 = BigInt(0);
    var BN_25 = BigInt(2);
    var BN_273 = BigInt(27);
    var BN_283 = BigInt(28);
    var BN_353 = BigInt(35);
    var BN_MAX_UINT2 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    var BLOB_SIZE2 = 4096 * 32;
    function getVersionedHash(version11, hash2) {
      let versioned = version11.toString(16);
      while (versioned.length < 2) {
        versioned = "0" + versioned;
      }
      versioned += (0, index_js_2.sha256)(hash2).substring(4);
      return "0x" + versioned;
    }
    function handleAddress(value) {
      if (value === "0x") {
        return null;
      }
      return (0, index_js_1.getAddress)(value);
    }
    function handleAccessList(value, param) {
      try {
        return (0, accesslist_js_1.accessListify)(value);
      } catch (error) {
        (0, index_js_3.assertArgument)(false, error.message, param, value);
      }
    }
    function handleNumber(_value2, param) {
      if (_value2 === "0x") {
        return 0;
      }
      return (0, index_js_3.getNumber)(_value2, param);
    }
    function handleUint(_value2, param) {
      if (_value2 === "0x") {
        return BN_012;
      }
      const value = (0, index_js_3.getBigInt)(_value2, param);
      (0, index_js_3.assertArgument)(value <= BN_MAX_UINT2, "value exceeds uint size", param, value);
      return value;
    }
    function formatNumber(_value2, name) {
      const value = (0, index_js_3.getBigInt)(_value2, "value");
      const result = (0, index_js_3.toBeArray)(value);
      (0, index_js_3.assertArgument)(result.length <= 32, `value too large`, `tx.${name}`, value);
      return result;
    }
    function formatAccessList(value) {
      return (0, accesslist_js_1.accessListify)(value).map((set) => [set.address, set.storageKeys]);
    }
    function formatHashes(value, param) {
      (0, index_js_3.assertArgument)(Array.isArray(value), `invalid ${param}`, "value", value);
      for (let i = 0; i < value.length; i++) {
        (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(value[i], 32), "invalid ${ param } hash", `value[${i}]`, value[i]);
      }
      return value;
    }
    function _parseLegacy(data) {
      const fields = (0, index_js_3.decodeRlp)(data);
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 6), "invalid field count for legacy transaction", "data", data);
      const tx = {
        type: 0,
        nonce: handleNumber(fields[0], "nonce"),
        gasPrice: handleUint(fields[1], "gasPrice"),
        gasLimit: handleUint(fields[2], "gasLimit"),
        to: handleAddress(fields[3]),
        value: handleUint(fields[4], "value"),
        data: (0, index_js_3.hexlify)(fields[5]),
        chainId: BN_012
      };
      if (fields.length === 6) {
        return tx;
      }
      const v = handleUint(fields[6], "v");
      const r2 = handleUint(fields[7], "r");
      const s = handleUint(fields[8], "s");
      if (r2 === BN_012 && s === BN_012) {
        tx.chainId = v;
      } else {
        let chainId = (v - BN_353) / BN_25;
        if (chainId < BN_012) {
          chainId = BN_012;
        }
        tx.chainId = chainId;
        (0, index_js_3.assertArgument)(chainId !== BN_012 || (v === BN_273 || v === BN_283), "non-canonical legacy v", "v", fields[6]);
        tx.signature = index_js_2.Signature.from({
          r: (0, index_js_3.zeroPadValue)(fields[7], 32),
          s: (0, index_js_3.zeroPadValue)(fields[8], 32),
          v
        });
      }
      return tx;
    }
    function _serializeLegacy(tx, sig) {
      const fields = [
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.gasPrice || 0, "gasPrice"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || "0x",
        formatNumber(tx.value, "value"),
        tx.data
      ];
      let chainId = BN_012;
      if (tx.chainId != BN_012) {
        chainId = (0, index_js_3.getBigInt)(tx.chainId, "tx.chainId");
        (0, index_js_3.assertArgument)(!sig || sig.networkV == null || sig.legacyChainId === chainId, "tx.chainId/sig.v mismatch", "sig", sig);
      } else if (tx.signature) {
        const legacy = tx.signature.legacyChainId;
        if (legacy != null) {
          chainId = legacy;
        }
      }
      if (!sig) {
        if (chainId !== BN_012) {
          fields.push((0, index_js_3.toBeArray)(chainId));
          fields.push("0x");
          fields.push("0x");
        }
        return (0, index_js_3.encodeRlp)(fields);
      }
      let v = BigInt(27 + sig.yParity);
      if (chainId !== BN_012) {
        v = index_js_2.Signature.getChainIdV(chainId, sig.v);
      } else if (BigInt(sig.v) !== v) {
        (0, index_js_3.assertArgument)(false, "tx.chainId/sig.v mismatch", "sig", sig);
      }
      fields.push((0, index_js_3.toBeArray)(v));
      fields.push((0, index_js_3.toBeArray)(sig.r));
      fields.push((0, index_js_3.toBeArray)(sig.s));
      return (0, index_js_3.encodeRlp)(fields);
    }
    function _parseEipSignature(tx, fields) {
      let yParity;
      try {
        yParity = handleNumber(fields[0], "yParity");
        if (yParity !== 0 && yParity !== 1) {
          throw new Error("bad yParity");
        }
      } catch (error) {
        (0, index_js_3.assertArgument)(false, "invalid yParity", "yParity", fields[0]);
      }
      const r2 = (0, index_js_3.zeroPadValue)(fields[1], 32);
      const s = (0, index_js_3.zeroPadValue)(fields[2], 32);
      const signature = index_js_2.Signature.from({ r: r2, s, yParity });
      tx.signature = signature;
    }
    function _parseEip1559(data) {
      const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 9 || fields.length === 12), "invalid field count for transaction type: 2", "data", (0, index_js_3.hexlify)(data));
      const tx = {
        type: 2,
        chainId: handleUint(fields[0], "chainId"),
        nonce: handleNumber(fields[1], "nonce"),
        maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
        maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
        gasPrice: null,
        gasLimit: handleUint(fields[4], "gasLimit"),
        to: handleAddress(fields[5]),
        value: handleUint(fields[6], "value"),
        data: (0, index_js_3.hexlify)(fields[7]),
        accessList: handleAccessList(fields[8], "accessList")
      };
      if (fields.length === 9) {
        return tx;
      }
      _parseEipSignature(tx, fields.slice(9));
      return tx;
    }
    function _serializeEip1559(tx, sig) {
      const fields = [
        formatNumber(tx.chainId, "chainId"),
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
        formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || "0x",
        formatNumber(tx.value, "value"),
        tx.data,
        formatAccessList(tx.accessList || [])
      ];
      if (sig) {
        fields.push(formatNumber(sig.yParity, "yParity"));
        fields.push((0, index_js_3.toBeArray)(sig.r));
        fields.push((0, index_js_3.toBeArray)(sig.s));
      }
      return (0, index_js_3.concat)(["0x02", (0, index_js_3.encodeRlp)(fields)]);
    }
    function _parseEip2930(data) {
      const fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 8 || fields.length === 11), "invalid field count for transaction type: 1", "data", (0, index_js_3.hexlify)(data));
      const tx = {
        type: 1,
        chainId: handleUint(fields[0], "chainId"),
        nonce: handleNumber(fields[1], "nonce"),
        gasPrice: handleUint(fields[2], "gasPrice"),
        gasLimit: handleUint(fields[3], "gasLimit"),
        to: handleAddress(fields[4]),
        value: handleUint(fields[5], "value"),
        data: (0, index_js_3.hexlify)(fields[6]),
        accessList: handleAccessList(fields[7], "accessList")
      };
      if (fields.length === 8) {
        return tx;
      }
      _parseEipSignature(tx, fields.slice(8));
      return tx;
    }
    function _serializeEip2930(tx, sig) {
      const fields = [
        formatNumber(tx.chainId, "chainId"),
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.gasPrice || 0, "gasPrice"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || "0x",
        formatNumber(tx.value, "value"),
        tx.data,
        formatAccessList(tx.accessList || [])
      ];
      if (sig) {
        fields.push(formatNumber(sig.yParity, "recoveryParam"));
        fields.push((0, index_js_3.toBeArray)(sig.r));
        fields.push((0, index_js_3.toBeArray)(sig.s));
      }
      return (0, index_js_3.concat)(["0x01", (0, index_js_3.encodeRlp)(fields)]);
    }
    function _parseEip4844(data) {
      let fields = (0, index_js_3.decodeRlp)((0, index_js_3.getBytes)(data).slice(1));
      let typeName = "3";
      let blobs = null;
      if (fields.length === 4 && Array.isArray(fields[0])) {
        typeName = "3 (network format)";
        const fBlobs = fields[1], fCommits = fields[2], fProofs = fields[3];
        (0, index_js_3.assertArgument)(Array.isArray(fBlobs), "invalid network format: blobs not an array", "fields[1]", fBlobs);
        (0, index_js_3.assertArgument)(Array.isArray(fCommits), "invalid network format: commitments not an array", "fields[2]", fCommits);
        (0, index_js_3.assertArgument)(Array.isArray(fProofs), "invalid network format: proofs not an array", "fields[3]", fProofs);
        (0, index_js_3.assertArgument)(fBlobs.length === fCommits.length, "invalid network format: blobs/commitments length mismatch", "fields", fields);
        (0, index_js_3.assertArgument)(fBlobs.length === fProofs.length, "invalid network format: blobs/proofs length mismatch", "fields", fields);
        blobs = [];
        for (let i = 0; i < fields[1].length; i++) {
          blobs.push({
            data: fBlobs[i],
            commitment: fCommits[i],
            proof: fProofs[i]
          });
        }
        fields = fields[0];
      }
      (0, index_js_3.assertArgument)(Array.isArray(fields) && (fields.length === 11 || fields.length === 14), `invalid field count for transaction type: ${typeName}`, "data", (0, index_js_3.hexlify)(data));
      const tx = {
        type: 3,
        chainId: handleUint(fields[0], "chainId"),
        nonce: handleNumber(fields[1], "nonce"),
        maxPriorityFeePerGas: handleUint(fields[2], "maxPriorityFeePerGas"),
        maxFeePerGas: handleUint(fields[3], "maxFeePerGas"),
        gasPrice: null,
        gasLimit: handleUint(fields[4], "gasLimit"),
        to: handleAddress(fields[5]),
        value: handleUint(fields[6], "value"),
        data: (0, index_js_3.hexlify)(fields[7]),
        accessList: handleAccessList(fields[8], "accessList"),
        maxFeePerBlobGas: handleUint(fields[9], "maxFeePerBlobGas"),
        blobVersionedHashes: fields[10]
      };
      if (blobs) {
        tx.blobs = blobs;
      }
      (0, index_js_3.assertArgument)(tx.to != null, `invalid address for transaction type: ${typeName}`, "data", data);
      (0, index_js_3.assertArgument)(Array.isArray(tx.blobVersionedHashes), "invalid blobVersionedHashes: must be an array", "data", data);
      for (let i = 0; i < tx.blobVersionedHashes.length; i++) {
        (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(tx.blobVersionedHashes[i], 32), `invalid blobVersionedHash at index ${i}: must be length 32`, "data", data);
      }
      if (fields.length === 11) {
        return tx;
      }
      _parseEipSignature(tx, fields.slice(11));
      return tx;
    }
    function _serializeEip4844(tx, sig, blobs) {
      const fields = [
        formatNumber(tx.chainId, "chainId"),
        formatNumber(tx.nonce, "nonce"),
        formatNumber(tx.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
        formatNumber(tx.maxFeePerGas || 0, "maxFeePerGas"),
        formatNumber(tx.gasLimit, "gasLimit"),
        tx.to || addresses_js_1.ZeroAddress,
        formatNumber(tx.value, "value"),
        tx.data,
        formatAccessList(tx.accessList || []),
        formatNumber(tx.maxFeePerBlobGas || 0, "maxFeePerBlobGas"),
        formatHashes(tx.blobVersionedHashes || [], "blobVersionedHashes")
      ];
      if (sig) {
        fields.push(formatNumber(sig.yParity, "yParity"));
        fields.push((0, index_js_3.toBeArray)(sig.r));
        fields.push((0, index_js_3.toBeArray)(sig.s));
        if (blobs) {
          return (0, index_js_3.concat)([
            "0x03",
            (0, index_js_3.encodeRlp)([
              fields,
              blobs.map((b2) => b2.data),
              blobs.map((b2) => b2.commitment),
              blobs.map((b2) => b2.proof)
            ])
          ]);
        }
      }
      return (0, index_js_3.concat)(["0x03", (0, index_js_3.encodeRlp)(fields)]);
    }
    var _type, _to, _data4, _nonce, _gasLimit, _gasPrice, _maxPriorityFeePerGas, _maxFeePerGas, _value, _chainId, _sig, _accessList, _maxFeePerBlobGas, _blobVersionedHashes, _kzg, _blobs, _Transaction_instances, getSerialized_fn;
    var _Transaction = class _Transaction {
      /**
       *  Creates a new Transaction with default values.
       */
      constructor() {
        __privateAdd(this, _Transaction_instances);
        __privateAdd(this, _type);
        __privateAdd(this, _to);
        __privateAdd(this, _data4);
        __privateAdd(this, _nonce);
        __privateAdd(this, _gasLimit);
        __privateAdd(this, _gasPrice);
        __privateAdd(this, _maxPriorityFeePerGas);
        __privateAdd(this, _maxFeePerGas);
        __privateAdd(this, _value);
        __privateAdd(this, _chainId);
        __privateAdd(this, _sig);
        __privateAdd(this, _accessList);
        __privateAdd(this, _maxFeePerBlobGas);
        __privateAdd(this, _blobVersionedHashes);
        __privateAdd(this, _kzg);
        __privateAdd(this, _blobs);
        __privateSet(this, _type, null);
        __privateSet(this, _to, null);
        __privateSet(this, _nonce, 0);
        __privateSet(this, _gasLimit, BN_012);
        __privateSet(this, _gasPrice, null);
        __privateSet(this, _maxPriorityFeePerGas, null);
        __privateSet(this, _maxFeePerGas, null);
        __privateSet(this, _data4, "0x");
        __privateSet(this, _value, BN_012);
        __privateSet(this, _chainId, BN_012);
        __privateSet(this, _sig, null);
        __privateSet(this, _accessList, null);
        __privateSet(this, _maxFeePerBlobGas, null);
        __privateSet(this, _blobVersionedHashes, null);
        __privateSet(this, _blobs, null);
        __privateSet(this, _kzg, null);
      }
      /**
       *  The transaction type.
       *
       *  If null, the type will be automatically inferred based on
       *  explicit properties.
       */
      get type() {
        return __privateGet(this, _type);
      }
      set type(value) {
        switch (value) {
          case null:
            __privateSet(this, _type, null);
            break;
          case 0:
          case "legacy":
            __privateSet(this, _type, 0);
            break;
          case 1:
          case "berlin":
          case "eip-2930":
            __privateSet(this, _type, 1);
            break;
          case 2:
          case "london":
          case "eip-1559":
            __privateSet(this, _type, 2);
            break;
          case 3:
          case "cancun":
          case "eip-4844":
            __privateSet(this, _type, 3);
            break;
          default:
            (0, index_js_3.assertArgument)(false, "unsupported transaction type", "type", value);
        }
      }
      /**
       *  The name of the transaction type.
       */
      get typeName() {
        switch (this.type) {
          case 0:
            return "legacy";
          case 1:
            return "eip-2930";
          case 2:
            return "eip-1559";
          case 3:
            return "eip-4844";
        }
        return null;
      }
      /**
       *  The ``to`` address for the transaction or ``null`` if the
       *  transaction is an ``init`` transaction.
       */
      get to() {
        const value = __privateGet(this, _to);
        if (value == null && this.type === 3) {
          return addresses_js_1.ZeroAddress;
        }
        return value;
      }
      set to(value) {
        __privateSet(this, _to, value == null ? null : (0, index_js_1.getAddress)(value));
      }
      /**
       *  The transaction nonce.
       */
      get nonce() {
        return __privateGet(this, _nonce);
      }
      set nonce(value) {
        __privateSet(this, _nonce, (0, index_js_3.getNumber)(value, "value"));
      }
      /**
       *  The gas limit.
       */
      get gasLimit() {
        return __privateGet(this, _gasLimit);
      }
      set gasLimit(value) {
        __privateSet(this, _gasLimit, (0, index_js_3.getBigInt)(value));
      }
      /**
       *  The gas price.
       *
       *  On legacy networks this defines the fee that will be paid. On
       *  EIP-1559 networks, this should be ``null``.
       */
      get gasPrice() {
        const value = __privateGet(this, _gasPrice);
        if (value == null && (this.type === 0 || this.type === 1)) {
          return BN_012;
        }
        return value;
      }
      set gasPrice(value) {
        __privateSet(this, _gasPrice, value == null ? null : (0, index_js_3.getBigInt)(value, "gasPrice"));
      }
      /**
       *  The maximum priority fee per unit of gas to pay. On legacy
       *  networks this should be ``null``.
       */
      get maxPriorityFeePerGas() {
        const value = __privateGet(this, _maxPriorityFeePerGas);
        if (value == null) {
          if (this.type === 2 || this.type === 3) {
            return BN_012;
          }
          return null;
        }
        return value;
      }
      set maxPriorityFeePerGas(value) {
        __privateSet(this, _maxPriorityFeePerGas, value == null ? null : (0, index_js_3.getBigInt)(value, "maxPriorityFeePerGas"));
      }
      /**
       *  The maximum total fee per unit of gas to pay. On legacy
       *  networks this should be ``null``.
       */
      get maxFeePerGas() {
        const value = __privateGet(this, _maxFeePerGas);
        if (value == null) {
          if (this.type === 2 || this.type === 3) {
            return BN_012;
          }
          return null;
        }
        return value;
      }
      set maxFeePerGas(value) {
        __privateSet(this, _maxFeePerGas, value == null ? null : (0, index_js_3.getBigInt)(value, "maxFeePerGas"));
      }
      /**
       *  The transaction data. For ``init`` transactions this is the
       *  deployment code.
       */
      get data() {
        return __privateGet(this, _data4);
      }
      set data(value) {
        __privateSet(this, _data4, (0, index_js_3.hexlify)(value));
      }
      /**
       *  The amount of ether (in wei) to send in this transactions.
       */
      get value() {
        return __privateGet(this, _value);
      }
      set value(value) {
        __privateSet(this, _value, (0, index_js_3.getBigInt)(value, "value"));
      }
      /**
       *  The chain ID this transaction is valid on.
       */
      get chainId() {
        return __privateGet(this, _chainId);
      }
      set chainId(value) {
        __privateSet(this, _chainId, (0, index_js_3.getBigInt)(value));
      }
      /**
       *  If signed, the signature for this transaction.
       */
      get signature() {
        return __privateGet(this, _sig) || null;
      }
      set signature(value) {
        __privateSet(this, _sig, value == null ? null : index_js_2.Signature.from(value));
      }
      /**
       *  The access list.
       *
       *  An access list permits discounted (but pre-paid) access to
       *  bytecode and state variable access within contract execution.
       */
      get accessList() {
        const value = __privateGet(this, _accessList) || null;
        if (value == null) {
          if (this.type === 1 || this.type === 2 || this.type === 3) {
            return [];
          }
          return null;
        }
        return value;
      }
      set accessList(value) {
        __privateSet(this, _accessList, value == null ? null : (0, accesslist_js_1.accessListify)(value));
      }
      /**
       *  The max fee per blob gas for Cancun transactions.
       */
      get maxFeePerBlobGas() {
        const value = __privateGet(this, _maxFeePerBlobGas);
        if (value == null && this.type === 3) {
          return BN_012;
        }
        return value;
      }
      set maxFeePerBlobGas(value) {
        __privateSet(this, _maxFeePerBlobGas, value == null ? null : (0, index_js_3.getBigInt)(value, "maxFeePerBlobGas"));
      }
      /**
       *  The BLOb versioned hashes for Cancun transactions.
       */
      get blobVersionedHashes() {
        let value = __privateGet(this, _blobVersionedHashes);
        if (value == null && this.type === 3) {
          return [];
        }
        return value;
      }
      set blobVersionedHashes(value) {
        if (value != null) {
          (0, index_js_3.assertArgument)(Array.isArray(value), "blobVersionedHashes must be an Array", "value", value);
          value = value.slice();
          for (let i = 0; i < value.length; i++) {
            (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(value[i], 32), "invalid blobVersionedHash", `value[${i}]`, value[i]);
          }
        }
        __privateSet(this, _blobVersionedHashes, value);
      }
      /**
       *  The BLObs for the Transaction, if any.
       *
       *  If ``blobs`` is non-``null``, then the [[seriailized]]
       *  will return the network formatted sidecar, otherwise it
       *  will return the standard [[link-eip-2718]] payload. The
       *  [[unsignedSerialized]] is unaffected regardless.
       *
       *  When setting ``blobs``, either fully valid [[Blob]] objects
       *  may be specified (i.e. correctly padded, with correct
       *  committments and proofs) or a raw [[BytesLike]] may
       *  be provided.
       *
       *  If raw [[BytesLike]] are provided, the [[kzg]] property **must**
       *  be already set. The blob will be correctly padded and the
       *  [[KzgLibrary]] will be used to compute the committment and
       *  proof for the blob.
       *
       *  A BLOb is a sequence of field elements, each of which must
       *  be within the BLS field modulo, so some additional processing
       *  may be required to encode arbitrary data to ensure each 32 byte
       *  field is within the valid range.
       *
       *  Setting this automatically populates [[blobVersionedHashes]],
       *  overwriting any existing values. Setting this to ``null``
       *  does **not** remove the [[blobVersionedHashes]], leaving them
       *  present.
       */
      get blobs() {
        if (__privateGet(this, _blobs) == null) {
          return null;
        }
        return __privateGet(this, _blobs).map((b2) => Object.assign({}, b2));
      }
      set blobs(_blobs2) {
        if (_blobs2 == null) {
          __privateSet(this, _blobs, null);
          return;
        }
        const blobs = [];
        const versionedHashes = [];
        for (let i = 0; i < _blobs2.length; i++) {
          const blob = _blobs2[i];
          if ((0, index_js_3.isBytesLike)(blob)) {
            (0, index_js_3.assert)(__privateGet(this, _kzg), "adding a raw blob requires a KZG library", "UNSUPPORTED_OPERATION", {
              operation: "set blobs()"
            });
            let data = (0, index_js_3.getBytes)(blob);
            (0, index_js_3.assertArgument)(data.length <= BLOB_SIZE2, "blob is too large", `blobs[${i}]`, blob);
            if (data.length !== BLOB_SIZE2) {
              const padded = new Uint8Array(BLOB_SIZE2);
              padded.set(data);
              data = padded;
            }
            const commit = __privateGet(this, _kzg).blobToKzgCommitment(data);
            const proof = (0, index_js_3.hexlify)(__privateGet(this, _kzg).computeBlobKzgProof(data, commit));
            blobs.push({
              data: (0, index_js_3.hexlify)(data),
              commitment: (0, index_js_3.hexlify)(commit),
              proof
            });
            versionedHashes.push(getVersionedHash(1, commit));
          } else {
            const commit = (0, index_js_3.hexlify)(blob.commitment);
            blobs.push({
              data: (0, index_js_3.hexlify)(blob.data),
              commitment: commit,
              proof: (0, index_js_3.hexlify)(blob.proof)
            });
            versionedHashes.push(getVersionedHash(1, commit));
          }
        }
        __privateSet(this, _blobs, blobs);
        __privateSet(this, _blobVersionedHashes, versionedHashes);
      }
      get kzg() {
        return __privateGet(this, _kzg);
      }
      set kzg(kzg) {
        __privateSet(this, _kzg, kzg);
      }
      /**
       *  The transaction hash, if signed. Otherwise, ``null``.
       */
      get hash() {
        if (this.signature == null) {
          return null;
        }
        return (0, index_js_2.keccak256)(__privateMethod(this, _Transaction_instances, getSerialized_fn).call(this, true, false));
      }
      /**
       *  The pre-image hash of this transaction.
       *
       *  This is the digest that a [[Signer]] must sign to authorize
       *  this transaction.
       */
      get unsignedHash() {
        return (0, index_js_2.keccak256)(this.unsignedSerialized);
      }
      /**
       *  The sending address, if signed. Otherwise, ``null``.
       */
      get from() {
        if (this.signature == null) {
          return null;
        }
        return (0, address_js_1.recoverAddress)(this.unsignedHash, this.signature);
      }
      /**
       *  The public key of the sender, if signed. Otherwise, ``null``.
       */
      get fromPublicKey() {
        if (this.signature == null) {
          return null;
        }
        return index_js_2.SigningKey.recoverPublicKey(this.unsignedHash, this.signature);
      }
      /**
       *  Returns true if signed.
       *
       *  This provides a Type Guard that properties requiring a signed
       *  transaction are non-null.
       */
      isSigned() {
        return this.signature != null;
      }
      /**
       *  The serialized transaction.
       *
       *  This throws if the transaction is unsigned. For the pre-image,
       *  use [[unsignedSerialized]].
       */
      get serialized() {
        return __privateMethod(this, _Transaction_instances, getSerialized_fn).call(this, true, true);
      }
      /**
       *  The transaction pre-image.
       *
       *  The hash of this is the digest which needs to be signed to
       *  authorize this transaction.
       */
      get unsignedSerialized() {
        return __privateMethod(this, _Transaction_instances, getSerialized_fn).call(this, false, false);
      }
      /**
       *  Return the most "likely" type; currently the highest
       *  supported transaction type.
       */
      inferType() {
        const types = this.inferTypes();
        if (types.indexOf(2) >= 0) {
          return 2;
        }
        return types.pop();
      }
      /**
       *  Validates the explicit properties and returns a list of compatible
       *  transaction types.
       */
      inferTypes() {
        const hasGasPrice = this.gasPrice != null;
        const hasFee = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null;
        const hasAccessList = this.accessList != null;
        const hasBlob = __privateGet(this, _maxFeePerBlobGas) != null || __privateGet(this, _blobVersionedHashes);
        if (this.maxFeePerGas != null && this.maxPriorityFeePerGas != null) {
          (0, index_js_3.assert)(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this });
        }
        (0, index_js_3.assert)(!hasFee || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this });
        (0, index_js_3.assert)(this.type !== 0 || !hasAccessList, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
        const types = [];
        if (this.type != null) {
          types.push(this.type);
        } else {
          if (hasFee) {
            types.push(2);
          } else if (hasGasPrice) {
            types.push(1);
            if (!hasAccessList) {
              types.push(0);
            }
          } else if (hasAccessList) {
            types.push(1);
            types.push(2);
          } else if (hasBlob && this.to) {
            types.push(3);
          } else {
            types.push(0);
            types.push(1);
            types.push(2);
            types.push(3);
          }
        }
        types.sort();
        return types;
      }
      /**
       *  Returns true if this transaction is a legacy transaction (i.e.
       *  ``type === 0``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isLegacy() {
        return this.type === 0;
      }
      /**
       *  Returns true if this transaction is berlin hardform transaction (i.e.
       *  ``type === 1``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isBerlin() {
        return this.type === 1;
      }
      /**
       *  Returns true if this transaction is london hardform transaction (i.e.
       *  ``type === 2``).
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isLondon() {
        return this.type === 2;
      }
      /**
       *  Returns true if this transaction is an [[link-eip-4844]] BLOB
       *  transaction.
       *
       *  This provides a Type Guard that the related properties are
       *  non-null.
       */
      isCancun() {
        return this.type === 3;
      }
      /**
       *  Create a copy of this transaciton.
       */
      clone() {
        return _Transaction.from(this);
      }
      /**
       *  Return a JSON-friendly object.
       */
      toJSON() {
        const s = (v) => {
          if (v == null) {
            return null;
          }
          return v.toString();
        };
        return {
          type: this.type,
          to: this.to,
          //            from: this.from,
          data: this.data,
          nonce: this.nonce,
          gasLimit: s(this.gasLimit),
          gasPrice: s(this.gasPrice),
          maxPriorityFeePerGas: s(this.maxPriorityFeePerGas),
          maxFeePerGas: s(this.maxFeePerGas),
          value: s(this.value),
          chainId: s(this.chainId),
          sig: this.signature ? this.signature.toJSON() : null,
          accessList: this.accessList
        };
      }
      /**
       *  Create a **Transaction** from a serialized transaction or a
       *  Transaction-like object.
       */
      static from(tx) {
        if (tx == null) {
          return new _Transaction();
        }
        if (typeof tx === "string") {
          const payload = (0, index_js_3.getBytes)(tx);
          if (payload[0] >= 127) {
            return _Transaction.from(_parseLegacy(payload));
          }
          switch (payload[0]) {
            case 1:
              return _Transaction.from(_parseEip2930(payload));
            case 2:
              return _Transaction.from(_parseEip1559(payload));
            case 3:
              return _Transaction.from(_parseEip4844(payload));
          }
          (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
        }
        const result = new _Transaction();
        if (tx.type != null) {
          result.type = tx.type;
        }
        if (tx.to != null) {
          result.to = tx.to;
        }
        if (tx.nonce != null) {
          result.nonce = tx.nonce;
        }
        if (tx.gasLimit != null) {
          result.gasLimit = tx.gasLimit;
        }
        if (tx.gasPrice != null) {
          result.gasPrice = tx.gasPrice;
        }
        if (tx.maxPriorityFeePerGas != null) {
          result.maxPriorityFeePerGas = tx.maxPriorityFeePerGas;
        }
        if (tx.maxFeePerGas != null) {
          result.maxFeePerGas = tx.maxFeePerGas;
        }
        if (tx.maxFeePerBlobGas != null) {
          result.maxFeePerBlobGas = tx.maxFeePerBlobGas;
        }
        if (tx.data != null) {
          result.data = tx.data;
        }
        if (tx.value != null) {
          result.value = tx.value;
        }
        if (tx.chainId != null) {
          result.chainId = tx.chainId;
        }
        if (tx.signature != null) {
          result.signature = index_js_2.Signature.from(tx.signature);
        }
        if (tx.accessList != null) {
          result.accessList = tx.accessList;
        }
        if (tx.blobVersionedHashes != null) {
          result.blobVersionedHashes = tx.blobVersionedHashes;
        }
        if (tx.kzg != null) {
          result.kzg = tx.kzg;
        }
        if (tx.blobs != null) {
          result.blobs = tx.blobs;
        }
        if (tx.hash != null) {
          (0, index_js_3.assertArgument)(result.isSigned(), "unsigned transaction cannot define '.hash'", "tx", tx);
          (0, index_js_3.assertArgument)(result.hash === tx.hash, "hash mismatch", "tx", tx);
        }
        if (tx.from != null) {
          (0, index_js_3.assertArgument)(result.isSigned(), "unsigned transaction cannot define '.from'", "tx", tx);
          (0, index_js_3.assertArgument)(result.from.toLowerCase() === (tx.from || "").toLowerCase(), "from mismatch", "tx", tx);
        }
        return result;
      }
    };
    _type = new WeakMap();
    _to = new WeakMap();
    _data4 = new WeakMap();
    _nonce = new WeakMap();
    _gasLimit = new WeakMap();
    _gasPrice = new WeakMap();
    _maxPriorityFeePerGas = new WeakMap();
    _maxFeePerGas = new WeakMap();
    _value = new WeakMap();
    _chainId = new WeakMap();
    _sig = new WeakMap();
    _accessList = new WeakMap();
    _maxFeePerBlobGas = new WeakMap();
    _blobVersionedHashes = new WeakMap();
    _kzg = new WeakMap();
    _blobs = new WeakMap();
    _Transaction_instances = new WeakSet();
    getSerialized_fn = function(signed2, sidecar) {
      (0, index_js_3.assert)(!signed2 || this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
      const sig = signed2 ? this.signature : null;
      switch (this.inferType()) {
        case 0:
          return _serializeLegacy(this, sig);
        case 1:
          return _serializeEip2930(this, sig);
        case 2:
          return _serializeEip1559(this, sig);
        case 3:
          return _serializeEip4844(this, sig, sidecar ? this.blobs : null);
      }
      (0, index_js_3.assert)(false, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
    };
    var Transaction2 = _Transaction;
    exports.Transaction = Transaction2;
  }
});

// node_modules/ethers/lib.commonjs/transaction/index.js
var require_transaction2 = __commonJS({
  "node_modules/ethers/lib.commonjs/transaction/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Transaction = exports.recoverAddress = exports.computeAddress = exports.accessListify = void 0;
    var accesslist_js_1 = require_accesslist();
    Object.defineProperty(exports, "accessListify", { enumerable: true, get: function() {
      return accesslist_js_1.accessListify;
    } });
    var address_js_1 = require_address4();
    Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function() {
      return address_js_1.computeAddress;
    } });
    Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function() {
      return address_js_1.recoverAddress;
    } });
    var transaction_js_1 = require_transaction();
    Object.defineProperty(exports, "Transaction", { enumerable: true, get: function() {
      return transaction_js_1.Transaction;
    } });
  }
});

// node_modules/ethers/lib.commonjs/hash/message.js
var require_message = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/message.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.verifyMessage = exports.hashMessage = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_constants();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils();
    function hashMessage3(message) {
      if (typeof message === "string") {
        message = (0, index_js_4.toUtf8Bytes)(message);
      }
      return (0, index_js_1.keccak256)((0, index_js_4.concat)([
        (0, index_js_4.toUtf8Bytes)(index_js_2.MessagePrefix),
        (0, index_js_4.toUtf8Bytes)(String(message.length)),
        message
      ]));
    }
    exports.hashMessage = hashMessage3;
    function verifyMessage2(message, sig) {
      const digest = hashMessage3(message);
      return (0, index_js_3.recoverAddress)(digest, sig);
    }
    exports.verifyMessage = verifyMessage2;
  }
});

// node_modules/ethers/lib.commonjs/hash/solidity.js
var require_solidity = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/solidity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_utils();
    var regexBytes2 = new RegExp("^bytes([0-9]+)$");
    var regexNumber2 = new RegExp("^(u?int)([0-9]*)$");
    var regexArray2 = new RegExp("^(.*)\\[([0-9]*)\\]$");
    function _pack2(type, value, isArray) {
      switch (type) {
        case "address":
          if (isArray) {
            return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));
          }
          return (0, index_js_3.getBytes)((0, index_js_1.getAddress)(value));
        case "string":
          return (0, index_js_3.toUtf8Bytes)(value);
        case "bytes":
          return (0, index_js_3.getBytes)(value);
        case "bool":
          value = !!value ? "0x01" : "0x00";
          if (isArray) {
            return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)(value, 32));
          }
          return (0, index_js_3.getBytes)(value);
      }
      let match = type.match(regexNumber2);
      if (match) {
        let signed2 = match[1] === "int";
        let size = parseInt(match[2] || "256");
        (0, index_js_3.assertArgument)((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, "invalid number type", "type", type);
        if (isArray) {
          size = 256;
        }
        if (signed2) {
          value = (0, index_js_3.toTwos)(value, size);
        }
        return (0, index_js_3.getBytes)((0, index_js_3.zeroPadValue)((0, index_js_3.toBeArray)(value), size / 8));
      }
      match = type.match(regexBytes2);
      if (match) {
        const size = parseInt(match[1]);
        (0, index_js_3.assertArgument)(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type);
        (0, index_js_3.assertArgument)((0, index_js_3.dataLength)(value) === size, `invalid value for ${type}`, "value", value);
        if (isArray) {
          return (0, index_js_3.getBytes)((0, index_js_3.zeroPadBytes)(value, 32));
        }
        return value;
      }
      match = type.match(regexArray2);
      if (match && Array.isArray(value)) {
        const baseType = match[1];
        const count = parseInt(match[2] || String(value.length));
        (0, index_js_3.assertArgument)(count === value.length, `invalid array length for ${type}`, "value", value);
        const result = [];
        value.forEach(function(value2) {
          result.push(_pack2(baseType, value2, true));
        });
        return (0, index_js_3.getBytes)((0, index_js_3.concat)(result));
      }
      (0, index_js_3.assertArgument)(false, "invalid type", "type", type);
    }
    function solidityPacked2(types, values) {
      (0, index_js_3.assertArgument)(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
      const tight = [];
      types.forEach(function(type, index) {
        tight.push(_pack2(type, values[index]));
      });
      return (0, index_js_3.hexlify)((0, index_js_3.concat)(tight));
    }
    exports.solidityPacked = solidityPacked2;
    function solidityPackedKeccak2562(types, values) {
      return (0, index_js_2.keccak256)(solidityPacked2(types, values));
    }
    exports.solidityPackedKeccak256 = solidityPackedKeccak2562;
    function solidityPackedSha2562(types, values) {
      return (0, index_js_2.sha256)(solidityPacked2(types, values));
    }
    exports.solidityPackedSha256 = solidityPackedSha2562;
  }
});

// node_modules/ethers/lib.commonjs/hash/typed-data.js
var require_typed_data = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/typed-data.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.verifyTypedData = exports.TypedDataEncoder = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils();
    var id_js_1 = require_id();
    var padding3 = new Uint8Array(32);
    padding3.fill(0);
    var BN__12 = BigInt(-1);
    var BN_012 = BigInt(0);
    var BN_17 = BigInt(1);
    var BN_MAX_UINT2563 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    function hexPadRight(value) {
      const bytes3 = (0, index_js_4.getBytes)(value);
      const padOffset = bytes3.length % 32;
      if (padOffset) {
        return (0, index_js_4.concat)([bytes3, padding3.slice(padOffset)]);
      }
      return (0, index_js_4.hexlify)(bytes3);
    }
    var hexTrue3 = (0, index_js_4.toBeHex)(BN_17, 32);
    var hexFalse3 = (0, index_js_4.toBeHex)(BN_012, 32);
    var domainFieldTypes = {
      name: "string",
      version: "string",
      chainId: "uint256",
      verifyingContract: "address",
      salt: "bytes32"
    };
    var domainFieldNames = [
      "name",
      "version",
      "chainId",
      "verifyingContract",
      "salt"
    ];
    function checkString3(key) {
      return function(value) {
        (0, index_js_4.assertArgument)(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
        return value;
      };
    }
    var domainChecks3 = {
      name: checkString3("name"),
      version: checkString3("version"),
      chainId: function(_value) {
        const value = (0, index_js_4.getBigInt)(_value, "domain.chainId");
        (0, index_js_4.assertArgument)(value >= 0, "invalid chain ID", "domain.chainId", _value);
        if (Number.isSafeInteger(value)) {
          return Number(value);
        }
        return (0, index_js_4.toQuantity)(value);
      },
      verifyingContract: function(value) {
        try {
          return (0, index_js_1.getAddress)(value).toLowerCase();
        } catch (error) {
        }
        (0, index_js_4.assertArgument)(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
      },
      salt: function(value) {
        const bytes3 = (0, index_js_4.getBytes)(value, "domain.salt");
        (0, index_js_4.assertArgument)(bytes3.length === 32, `invalid domain value "salt"`, "domain.salt", value);
        return (0, index_js_4.hexlify)(bytes3);
      }
    };
    function getBaseEncoder(type) {
      {
        const match = type.match(/^(u?)int(\d+)$/);
        if (match) {
          const signed2 = match[1] === "";
          const width = parseInt(match[2]);
          (0, index_js_4.assertArgument)(width % 8 === 0 && width !== 0 && width <= 256 && match[2] === String(width), "invalid numeric width", "type", type);
          const boundsUpper = (0, index_js_4.mask)(BN_MAX_UINT2563, signed2 ? width - 1 : width);
          const boundsLower = signed2 ? (boundsUpper + BN_17) * BN__12 : BN_012;
          return function(_value) {
            const value = (0, index_js_4.getBigInt)(_value, "value");
            (0, index_js_4.assertArgument)(value >= boundsLower && value <= boundsUpper, `value out-of-bounds for ${type}`, "value", value);
            return (0, index_js_4.toBeHex)(signed2 ? (0, index_js_4.toTwos)(value, 256) : value, 32);
          };
        }
      }
      {
        const match = type.match(/^bytes(\d+)$/);
        if (match) {
          const width = parseInt(match[1]);
          (0, index_js_4.assertArgument)(width !== 0 && width <= 32 && match[1] === String(width), "invalid bytes width", "type", type);
          return function(value) {
            const bytes3 = (0, index_js_4.getBytes)(value);
            (0, index_js_4.assertArgument)(bytes3.length === width, `invalid length for ${type}`, "value", value);
            return hexPadRight(value);
          };
        }
      }
      switch (type) {
        case "address":
          return function(value) {
            return (0, index_js_4.zeroPadValue)((0, index_js_1.getAddress)(value), 32);
          };
        case "bool":
          return function(value) {
            return !value ? hexFalse3 : hexTrue3;
          };
        case "bytes":
          return function(value) {
            return (0, index_js_2.keccak256)(value);
          };
        case "string":
          return function(value) {
            return (0, id_js_1.id)(value);
          };
      }
      return null;
    }
    function encodeType(name, fields) {
      return `${name}(${fields.map(({ name: name2, type }) => type + " " + name2).join(",")})`;
    }
    function splitArray(type) {
      const match = type.match(/^([^\x5b]*)((\x5b\d*\x5d)*)(\x5b(\d*)\x5d)$/);
      if (match) {
        return {
          base: match[1],
          index: match[2] + match[4],
          array: {
            base: match[1],
            prefix: match[1] + match[2],
            count: match[5] ? parseInt(match[5]) : -1
          }
        };
      }
      return { base: type };
    }
    var _types, _fullTypes, _encoderCache, _TypedDataEncoder_instances, getEncoder_fn;
    var _TypedDataEncoder = class _TypedDataEncoder {
      /**
       *  Create a new **TypedDataEncoder** for %%types%%.
       *
       *  This performs all necessary checking that types are valid and
       *  do not violate the [[link-eip-712]] structural constraints as
       *  well as computes the [[primaryType]].
       */
      constructor(_types2) {
        __privateAdd(this, _TypedDataEncoder_instances);
        /**
         *  The primary type for the structured [[types]].
         *
         *  This is derived automatically from the [[types]], since no
         *  recursion is possible, once the DAG for the types is consturcted
         *  internally, the primary type must be the only remaining type with
         *  no parent nodes.
         */
        __publicField(this, "primaryType");
        __privateAdd(this, _types);
        __privateAdd(this, _fullTypes);
        __privateAdd(this, _encoderCache);
        __privateSet(this, _fullTypes, /* @__PURE__ */ new Map());
        __privateSet(this, _encoderCache, /* @__PURE__ */ new Map());
        const links = /* @__PURE__ */ new Map();
        const parents = /* @__PURE__ */ new Map();
        const subtypes = /* @__PURE__ */ new Map();
        const types = {};
        Object.keys(_types2).forEach((type) => {
          types[type] = _types2[type].map(({ name, type: type2 }) => {
            let { base, index } = splitArray(type2);
            if (base === "int" && !_types2["int"]) {
              base = "int256";
            }
            if (base === "uint" && !_types2["uint"]) {
              base = "uint256";
            }
            return { name, type: base + (index || "") };
          });
          links.set(type, /* @__PURE__ */ new Set());
          parents.set(type, []);
          subtypes.set(type, /* @__PURE__ */ new Set());
        });
        __privateSet(this, _types, JSON.stringify(types));
        for (const name in types) {
          const uniqueNames = /* @__PURE__ */ new Set();
          for (const field of types[name]) {
            (0, index_js_4.assertArgument)(!uniqueNames.has(field.name), `duplicate variable name ${JSON.stringify(field.name)} in ${JSON.stringify(name)}`, "types", _types2);
            uniqueNames.add(field.name);
            const baseType = splitArray(field.type).base;
            (0, index_js_4.assertArgument)(baseType !== name, `circular type reference to ${JSON.stringify(baseType)}`, "types", _types2);
            const encoder = getBaseEncoder(baseType);
            if (encoder) {
              continue;
            }
            (0, index_js_4.assertArgument)(parents.has(baseType), `unknown type ${JSON.stringify(baseType)}`, "types", _types2);
            parents.get(baseType).push(name);
            links.get(name).add(baseType);
          }
        }
        const primaryTypes = Array.from(parents.keys()).filter((n2) => parents.get(n2).length === 0);
        (0, index_js_4.assertArgument)(primaryTypes.length !== 0, "missing primary type", "types", _types2);
        (0, index_js_4.assertArgument)(primaryTypes.length === 1, `ambiguous primary types or unused types: ${primaryTypes.map((t) => JSON.stringify(t)).join(", ")}`, "types", _types2);
        (0, index_js_4.defineProperties)(this, { primaryType: primaryTypes[0] });
        function checkCircular(type, found) {
          (0, index_js_4.assertArgument)(!found.has(type), `circular type reference to ${JSON.stringify(type)}`, "types", _types2);
          found.add(type);
          for (const child of links.get(type)) {
            if (!parents.has(child)) {
              continue;
            }
            checkCircular(child, found);
            for (const subtype of found) {
              subtypes.get(subtype).add(child);
            }
          }
          found.delete(type);
        }
        checkCircular(this.primaryType, /* @__PURE__ */ new Set());
        for (const [name, set] of subtypes) {
          const st = Array.from(set);
          st.sort();
          __privateGet(this, _fullTypes).set(name, encodeType(name, types[name]) + st.map((t) => encodeType(t, types[t])).join(""));
        }
      }
      /**
       *  The types.
       */
      get types() {
        return JSON.parse(__privateGet(this, _types));
      }
      /**
       *  Returnthe encoder for the specific %%type%%.
       */
      getEncoder(type) {
        let encoder = __privateGet(this, _encoderCache).get(type);
        if (!encoder) {
          encoder = __privateMethod(this, _TypedDataEncoder_instances, getEncoder_fn).call(this, type);
          __privateGet(this, _encoderCache).set(type, encoder);
        }
        return encoder;
      }
      /**
       *  Return the full type for %%name%%.
       */
      encodeType(name) {
        const result = __privateGet(this, _fullTypes).get(name);
        (0, index_js_4.assertArgument)(result, `unknown type: ${JSON.stringify(name)}`, "name", name);
        return result;
      }
      /**
       *  Return the encoded %%value%% for the %%type%%.
       */
      encodeData(type, value) {
        return this.getEncoder(type)(value);
      }
      /**
       *  Returns the hash of %%value%% for the type of %%name%%.
       */
      hashStruct(name, value) {
        return (0, index_js_2.keccak256)(this.encodeData(name, value));
      }
      /**
       *  Return the fulled encoded %%value%% for the [[types]].
       */
      encode(value) {
        return this.encodeData(this.primaryType, value);
      }
      /**
       *  Return the hash of the fully encoded %%value%% for the [[types]].
       */
      hash(value) {
        return this.hashStruct(this.primaryType, value);
      }
      /**
       *  @_ignore:
       */
      _visit(type, value, callback) {
        {
          const encoder = getBaseEncoder(type);
          if (encoder) {
            return callback(type, value);
          }
        }
        const array = splitArray(type).array;
        if (array) {
          (0, index_js_4.assertArgument)(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
          return value.map((v) => this._visit(array.prefix, v, callback));
        }
        const fields = this.types[type];
        if (fields) {
          return fields.reduce((accum, { name, type: type2 }) => {
            accum[name] = this._visit(type2, value[name], callback);
            return accum;
          }, {});
        }
        (0, index_js_4.assertArgument)(false, `unknown type: ${type}`, "type", type);
      }
      /**
       *  Call %%calback%% for each value in %%value%%, passing the type and
       *  component within %%value%%.
       *
       *  This is useful for replacing addresses or other transformation that
       *  may be desired on each component, based on its type.
       */
      visit(value, callback) {
        return this._visit(this.primaryType, value, callback);
      }
      /**
       *  Create a new **TypedDataEncoder** for %%types%%.
       */
      static from(types) {
        return new _TypedDataEncoder(types);
      }
      /**
       *  Return the primary type for %%types%%.
       */
      static getPrimaryType(types) {
        return _TypedDataEncoder.from(types).primaryType;
      }
      /**
       *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
       */
      static hashStruct(name, types, value) {
        return _TypedDataEncoder.from(types).hashStruct(name, value);
      }
      /**
       *  Return the domain hash for %%domain%%.
       */
      static hashDomain(domain) {
        const domainFields = [];
        for (const name in domain) {
          if (domain[name] == null) {
            continue;
          }
          const type = domainFieldTypes[name];
          (0, index_js_4.assertArgument)(type, `invalid typed-data domain key: ${JSON.stringify(name)}`, "domain", domain);
          domainFields.push({ name, type });
        }
        domainFields.sort((a, b2) => {
          return domainFieldNames.indexOf(a.name) - domainFieldNames.indexOf(b2.name);
        });
        return _TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domainFields }, domain);
      }
      /**
       *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
       */
      static encode(domain, types, value) {
        return (0, index_js_4.concat)([
          "0x1901",
          _TypedDataEncoder.hashDomain(domain),
          _TypedDataEncoder.from(types).hash(value)
        ]);
      }
      /**
       *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
       */
      static hash(domain, types, value) {
        return (0, index_js_2.keccak256)(_TypedDataEncoder.encode(domain, types, value));
      }
      // Replaces all address types with ENS names with their looked up address
      /**
       * Resolves to the value from resolving all addresses in %%value%% for
       * %%types%% and the %%domain%%.
       */
      static async resolveNames(domain, types, value, resolveName) {
        domain = Object.assign({}, domain);
        for (const key in domain) {
          if (domain[key] == null) {
            delete domain[key];
          }
        }
        const ensCache = {};
        if (domain.verifyingContract && !(0, index_js_4.isHexString)(domain.verifyingContract, 20)) {
          ensCache[domain.verifyingContract] = "0x";
        }
        const encoder = _TypedDataEncoder.from(types);
        encoder.visit(value, (type, value2) => {
          if (type === "address" && !(0, index_js_4.isHexString)(value2, 20)) {
            ensCache[value2] = "0x";
          }
          return value2;
        });
        for (const name in ensCache) {
          ensCache[name] = await resolveName(name);
        }
        if (domain.verifyingContract && ensCache[domain.verifyingContract]) {
          domain.verifyingContract = ensCache[domain.verifyingContract];
        }
        value = encoder.visit(value, (type, value2) => {
          if (type === "address" && ensCache[value2]) {
            return ensCache[value2];
          }
          return value2;
        });
        return { domain, value };
      }
      /**
       *  Returns the JSON-encoded payload expected by nodes which implement
       *  the JSON-RPC [[link-eip-712]] method.
       */
      static getPayload(domain, types, value) {
        _TypedDataEncoder.hashDomain(domain);
        const domainValues = {};
        const domainTypes = [];
        domainFieldNames.forEach((name) => {
          const value2 = domain[name];
          if (value2 == null) {
            return;
          }
          domainValues[name] = domainChecks3[name](value2);
          domainTypes.push({ name, type: domainFieldTypes[name] });
        });
        const encoder = _TypedDataEncoder.from(types);
        types = encoder.types;
        const typesWithDomain = Object.assign({}, types);
        (0, index_js_4.assertArgument)(typesWithDomain.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", types);
        typesWithDomain.EIP712Domain = domainTypes;
        encoder.encode(value);
        return {
          types: typesWithDomain,
          domain: domainValues,
          primaryType: encoder.primaryType,
          message: encoder.visit(value, (type, value2) => {
            if (type.match(/^bytes(\d*)/)) {
              return (0, index_js_4.hexlify)((0, index_js_4.getBytes)(value2));
            }
            if (type.match(/^u?int/)) {
              return (0, index_js_4.getBigInt)(value2).toString();
            }
            switch (type) {
              case "address":
                return value2.toLowerCase();
              case "bool":
                return !!value2;
              case "string":
                (0, index_js_4.assertArgument)(typeof value2 === "string", "invalid string", "value", value2);
                return value2;
            }
            (0, index_js_4.assertArgument)(false, "unsupported type", "type", type);
          })
        };
      }
    };
    _types = new WeakMap();
    _fullTypes = new WeakMap();
    _encoderCache = new WeakMap();
    _TypedDataEncoder_instances = new WeakSet();
    getEncoder_fn = function(type) {
      {
        const encoder = getBaseEncoder(type);
        if (encoder) {
          return encoder;
        }
      }
      const array = splitArray(type).array;
      if (array) {
        const subtype = array.prefix;
        const subEncoder = this.getEncoder(subtype);
        return (value) => {
          (0, index_js_4.assertArgument)(array.count === -1 || array.count === value.length, `array length mismatch; expected length ${array.count}`, "value", value);
          let result = value.map(subEncoder);
          if (__privateGet(this, _fullTypes).has(subtype)) {
            result = result.map(index_js_2.keccak256);
          }
          return (0, index_js_2.keccak256)((0, index_js_4.concat)(result));
        };
      }
      const fields = this.types[type];
      if (fields) {
        const encodedType = (0, id_js_1.id)(__privateGet(this, _fullTypes).get(type));
        return (value) => {
          const values = fields.map(({ name, type: type2 }) => {
            const result = this.getEncoder(type2)(value[name]);
            if (__privateGet(this, _fullTypes).has(type2)) {
              return (0, index_js_2.keccak256)(result);
            }
            return result;
          });
          values.unshift(encodedType);
          return (0, index_js_4.concat)(values);
        };
      }
      (0, index_js_4.assertArgument)(false, `unknown type: ${type}`, "type", type);
    };
    var TypedDataEncoder3 = _TypedDataEncoder;
    exports.TypedDataEncoder = TypedDataEncoder3;
    function verifyTypedData2(domain, types, value, signature) {
      return (0, index_js_3.recoverAddress)(TypedDataEncoder3.hash(domain, types, value), signature);
    }
    exports.verifyTypedData = verifyTypedData2;
  }
});

// node_modules/ethers/lib.commonjs/hash/index.js
var require_hash = __commonJS({
  "node_modules/ethers/lib.commonjs/hash/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.verifyTypedData = exports.TypedDataEncoder = exports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = exports.verifyMessage = exports.hashMessage = exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = exports.id = void 0;
    var id_js_1 = require_id();
    Object.defineProperty(exports, "id", { enumerable: true, get: function() {
      return id_js_1.id;
    } });
    var namehash_js_1 = require_namehash();
    Object.defineProperty(exports, "ensNormalize", { enumerable: true, get: function() {
      return namehash_js_1.ensNormalize;
    } });
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function() {
      return namehash_js_1.isValidName;
    } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function() {
      return namehash_js_1.namehash;
    } });
    Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function() {
      return namehash_js_1.dnsEncode;
    } });
    var message_js_1 = require_message();
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function() {
      return message_js_1.hashMessage;
    } });
    Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function() {
      return message_js_1.verifyMessage;
    } });
    var solidity_js_1 = require_solidity();
    Object.defineProperty(exports, "solidityPacked", { enumerable: true, get: function() {
      return solidity_js_1.solidityPacked;
    } });
    Object.defineProperty(exports, "solidityPackedKeccak256", { enumerable: true, get: function() {
      return solidity_js_1.solidityPackedKeccak256;
    } });
    Object.defineProperty(exports, "solidityPackedSha256", { enumerable: true, get: function() {
      return solidity_js_1.solidityPackedSha256;
    } });
    var typed_data_js_1 = require_typed_data();
    Object.defineProperty(exports, "TypedDataEncoder", { enumerable: true, get: function() {
      return typed_data_js_1.TypedDataEncoder;
    } });
    Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function() {
      return typed_data_js_1.verifyTypedData;
    } });
  }
});

// node_modules/ethers/lib.commonjs/abi/fragments.js
var require_fragments = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/fragments.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StructFragment = exports.FunctionFragment = exports.FallbackFragment = exports.ConstructorFragment = exports.EventFragment = exports.ErrorFragment = exports.NamedFragment = exports.Fragment = exports.ParamType = void 0;
    var index_js_1 = require_utils();
    var index_js_2 = require_hash();
    function setify2(items) {
      const result = /* @__PURE__ */ new Set();
      items.forEach((k) => result.add(k));
      return Object.freeze(result);
    }
    var _kwVisibDeploy2 = "external public payable override";
    var KwVisibDeploy2 = setify2(_kwVisibDeploy2.split(" "));
    var _kwVisib2 = "constant external internal payable private public pure view override";
    var KwVisib2 = setify2(_kwVisib2.split(" "));
    var _kwTypes2 = "constructor error event fallback function receive struct";
    var KwTypes2 = setify2(_kwTypes2.split(" "));
    var _kwModifiers2 = "calldata memory storage payable indexed";
    var KwModifiers2 = setify2(_kwModifiers2.split(" "));
    var _kwOther2 = "tuple returns";
    var _keywords2 = [_kwTypes2, _kwModifiers2, _kwOther2, _kwVisib2].join(" ");
    var Keywords2 = setify2(_keywords2.split(" "));
    var SimpleTokens2 = {
      "(": "OPEN_PAREN",
      ")": "CLOSE_PAREN",
      "[": "OPEN_BRACKET",
      "]": "CLOSE_BRACKET",
      ",": "COMMA",
      "@": "AT"
    };
    var regexWhitespacePrefix2 = new RegExp("^(\\s*)");
    var regexNumberPrefix2 = new RegExp("^([0-9]+)");
    var regexIdPrefix2 = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
    var regexId2 = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
    var regexType2 = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
    var _offset3, _tokens2, _TokenString_instances2, subTokenString_fn2;
    var _TokenString2 = class _TokenString2 {
      constructor(tokens) {
        __privateAdd(this, _TokenString_instances2);
        __privateAdd(this, _offset3);
        __privateAdd(this, _tokens2);
        __privateSet(this, _offset3, 0);
        __privateSet(this, _tokens2, tokens.slice());
      }
      get offset() {
        return __privateGet(this, _offset3);
      }
      get length() {
        return __privateGet(this, _tokens2).length - __privateGet(this, _offset3);
      }
      clone() {
        return new _TokenString2(__privateGet(this, _tokens2));
      }
      reset() {
        __privateSet(this, _offset3, 0);
      }
      // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
      popKeyword(allowed) {
        const top = this.peek();
        if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
          throw new Error(`expected keyword ${top.text}`);
        }
        return this.pop().text;
      }
      // Pops and returns the value of the next token if it is `type`; throws if out of tokens
      popType(type) {
        if (this.peek().type !== type) {
          const top = this.peek();
          throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);
        }
        return this.pop().text;
      }
      // Pops and returns a "(" TOKENS ")"
      popParen() {
        const top = this.peek();
        if (top.type !== "OPEN_PAREN") {
          throw new Error("bad start");
        }
        const result = __privateMethod(this, _TokenString_instances2, subTokenString_fn2).call(this, __privateGet(this, _offset3) + 1, top.match + 1);
        __privateSet(this, _offset3, top.match + 1);
        return result;
      }
      // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
      popParams() {
        const top = this.peek();
        if (top.type !== "OPEN_PAREN") {
          throw new Error("bad start");
        }
        const result = [];
        while (__privateGet(this, _offset3) < top.match - 1) {
          const link = this.peek().linkNext;
          result.push(__privateMethod(this, _TokenString_instances2, subTokenString_fn2).call(this, __privateGet(this, _offset3) + 1, link));
          __privateSet(this, _offset3, link);
        }
        __privateSet(this, _offset3, top.match + 1);
        return result;
      }
      // Returns the top Token, throwing if out of tokens
      peek() {
        if (__privateGet(this, _offset3) >= __privateGet(this, _tokens2).length) {
          throw new Error("out-of-bounds");
        }
        return __privateGet(this, _tokens2)[__privateGet(this, _offset3)];
      }
      // Returns the next value, if it is a keyword in `allowed`
      peekKeyword(allowed) {
        const top = this.peekType("KEYWORD");
        return top != null && allowed.has(top) ? top : null;
      }
      // Returns the value of the next token if it is `type`
      peekType(type) {
        if (this.length === 0) {
          return null;
        }
        const top = this.peek();
        return top.type === type ? top.text : null;
      }
      // Returns the next token; throws if out of tokens
      pop() {
        const result = this.peek();
        __privateWrapper(this, _offset3)._++;
        return result;
      }
      toString() {
        const tokens = [];
        for (let i = __privateGet(this, _offset3); i < __privateGet(this, _tokens2).length; i++) {
          const token = __privateGet(this, _tokens2)[i];
          tokens.push(`${token.type}:${token.text}`);
        }
        return `<TokenString ${tokens.join(" ")}>`;
      }
    };
    _offset3 = new WeakMap();
    _tokens2 = new WeakMap();
    _TokenString_instances2 = new WeakSet();
    subTokenString_fn2 = function(from = 0, to = 0) {
      return new _TokenString2(__privateGet(this, _tokens2).slice(from, to).map((t) => {
        return Object.freeze(Object.assign({}, t, {
          match: t.match - from,
          linkBack: t.linkBack - from,
          linkNext: t.linkNext - from
        }));
      }));
    };
    var TokenString2 = _TokenString2;
    function lex2(text) {
      const tokens = [];
      const throwError2 = (message) => {
        const token = offset < text.length ? JSON.stringify(text[offset]) : "$EOI";
        throw new Error(`invalid token ${token} at ${offset}: ${message}`);
      };
      let brackets = [];
      let commas = [];
      let offset = 0;
      while (offset < text.length) {
        let cur = text.substring(offset);
        let match = cur.match(regexWhitespacePrefix2);
        if (match) {
          offset += match[1].length;
          cur = text.substring(offset);
        }
        const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset, value: -1 };
        tokens.push(token);
        let type = SimpleTokens2[cur[0]] || "";
        if (type) {
          token.type = type;
          token.text = cur[0];
          offset++;
          if (type === "OPEN_PAREN") {
            brackets.push(tokens.length - 1);
            commas.push(tokens.length - 1);
          } else if (type == "CLOSE_PAREN") {
            if (brackets.length === 0) {
              throwError2("no matching open bracket");
            }
            token.match = brackets.pop();
            tokens[token.match].match = tokens.length - 1;
            token.depth--;
            token.linkBack = commas.pop();
            tokens[token.linkBack].linkNext = tokens.length - 1;
          } else if (type === "COMMA") {
            token.linkBack = commas.pop();
            tokens[token.linkBack].linkNext = tokens.length - 1;
            commas.push(tokens.length - 1);
          } else if (type === "OPEN_BRACKET") {
            token.type = "BRACKET";
          } else if (type === "CLOSE_BRACKET") {
            let suffix = tokens.pop().text;
            if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
              const value = tokens.pop().text;
              suffix = value + suffix;
              tokens[tokens.length - 1].value = (0, index_js_1.getNumber)(value);
            }
            if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
              throw new Error("missing opening bracket");
            }
            tokens[tokens.length - 1].text += suffix;
          }
          continue;
        }
        match = cur.match(regexIdPrefix2);
        if (match) {
          token.text = match[1];
          offset += token.text.length;
          if (Keywords2.has(token.text)) {
            token.type = "KEYWORD";
            continue;
          }
          if (token.text.match(regexType2)) {
            token.type = "TYPE";
            continue;
          }
          token.type = "ID";
          continue;
        }
        match = cur.match(regexNumberPrefix2);
        if (match) {
          token.text = match[1];
          token.type = "NUMBER";
          offset += token.text.length;
          continue;
        }
        throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
      }
      return new TokenString2(tokens.map((t) => Object.freeze(t)));
    }
    function allowSingle2(set, allowed) {
      let included = [];
      for (const key in allowed.keys()) {
        if (set.has(key)) {
          included.push(key);
        }
      }
      if (included.length > 1) {
        throw new Error(`conflicting types: ${included.join(", ")}`);
      }
    }
    function consumeName2(type, tokens) {
      if (tokens.peekKeyword(KwTypes2)) {
        const keyword = tokens.pop().text;
        if (keyword !== type) {
          throw new Error(`expected ${type}, got ${keyword}`);
        }
      }
      return tokens.popType("ID");
    }
    function consumeKeywords2(tokens, allowed) {
      const keywords = /* @__PURE__ */ new Set();
      while (true) {
        const keyword = tokens.peekType("KEYWORD");
        if (keyword == null || allowed && !allowed.has(keyword)) {
          break;
        }
        tokens.pop();
        if (keywords.has(keyword)) {
          throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
        }
        keywords.add(keyword);
      }
      return Object.freeze(keywords);
    }
    function consumeMutability2(tokens) {
      let modifiers = consumeKeywords2(tokens, KwVisib2);
      allowSingle2(modifiers, setify2("constant payable nonpayable".split(" ")));
      allowSingle2(modifiers, setify2("pure view payable nonpayable".split(" ")));
      if (modifiers.has("view")) {
        return "view";
      }
      if (modifiers.has("pure")) {
        return "pure";
      }
      if (modifiers.has("payable")) {
        return "payable";
      }
      if (modifiers.has("nonpayable")) {
        return "nonpayable";
      }
      if (modifiers.has("constant")) {
        return "view";
      }
      return "nonpayable";
    }
    function consumeParams2(tokens, allowIndexed) {
      return tokens.popParams().map((t) => ParamType3.from(t, allowIndexed));
    }
    function consumeGas2(tokens) {
      if (tokens.peekType("AT")) {
        tokens.pop();
        if (tokens.peekType("NUMBER")) {
          return (0, index_js_1.getBigInt)(tokens.pop().text);
        }
        throw new Error("invalid gas");
      }
      return null;
    }
    function consumeEoi2(tokens) {
      if (tokens.length) {
        throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
      }
    }
    var regexArrayType2 = new RegExp(/^(.*)\[([0-9]*)\]$/);
    function verifyBasicType2(type) {
      const match = type.match(regexType2);
      (0, index_js_1.assertArgument)(match, "invalid type", "type", type);
      if (type === "uint") {
        return "uint256";
      }
      if (type === "int") {
        return "int256";
      }
      if (match[2]) {
        const length = parseInt(match[2]);
        (0, index_js_1.assertArgument)(length !== 0 && length <= 32, "invalid bytes length", "type", type);
      } else if (match[3]) {
        const size = parseInt(match[3]);
        (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type);
      }
      return type;
    }
    var _guard4 = {};
    var internal3 = Symbol.for("_ethers_internal");
    var ParamTypeInternal2 = "_ParamTypeInternal";
    var ErrorFragmentInternal2 = "_ErrorInternal";
    var EventFragmentInternal2 = "_EventInternal";
    var ConstructorFragmentInternal2 = "_ConstructorInternal";
    var FallbackFragmentInternal2 = "_FallbackInternal";
    var FunctionFragmentInternal2 = "_FunctionInternal";
    var StructFragmentInternal2 = "_StructInternal";
    var _ParamType_instances2, walkAsync_fn2;
    var _ParamType2 = class _ParamType2 {
      /**
       *  @private
       */
      constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {
        __privateAdd(this, _ParamType_instances2);
        /**
         *  The local name of the parameter (or ``""`` if unbound)
         */
        __publicField(this, "name");
        /**
         *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
         *  ``"uint256[3][]"``)
         */
        __publicField(this, "type");
        /**
         *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
         */
        __publicField(this, "baseType");
        /**
         *  True if the parameters is indexed.
         *
         *  For non-indexable types this is ``null``.
         */
        __publicField(this, "indexed");
        /**
         *  The components for the tuple.
         *
         *  For non-tuple types this is ``null``.
         */
        __publicField(this, "components");
        /**
         *  The array length, or ``-1`` for dynamic-lengthed arrays.
         *
         *  For non-array types this is ``null``.
         */
        __publicField(this, "arrayLength");
        /**
         *  The type of each child in the array.
         *
         *  For non-array types this is ``null``.
         */
        __publicField(this, "arrayChildren");
        (0, index_js_1.assertPrivate)(guard, _guard4, "ParamType");
        Object.defineProperty(this, internal3, { value: ParamTypeInternal2 });
        if (components) {
          components = Object.freeze(components.slice());
        }
        if (baseType === "array") {
          if (arrayLength == null || arrayChildren == null) {
            throw new Error("");
          }
        } else if (arrayLength != null || arrayChildren != null) {
          throw new Error("");
        }
        if (baseType === "tuple") {
          if (components == null) {
            throw new Error("");
          }
        } else if (components != null) {
          throw new Error("");
        }
        (0, index_js_1.defineProperties)(this, {
          name,
          type,
          baseType,
          indexed,
          components,
          arrayLength,
          arrayChildren
        });
      }
      /**
       *  Return a string representation of this type.
       *
       *  For example,
       *
       *  ``sighash" => "(uint256,address)"``
       *
       *  ``"minimal" => "tuple(uint256,address) indexed"``
       *
       *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          const name = this.name || "";
          if (this.isArray()) {
            const result3 = JSON.parse(this.arrayChildren.format("json"));
            result3.name = name;
            result3.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
            return JSON.stringify(result3);
          }
          const result2 = {
            type: this.baseType === "tuple" ? "tuple" : this.type,
            name
          };
          if (typeof this.indexed === "boolean") {
            result2.indexed = this.indexed;
          }
          if (this.isTuple()) {
            result2.components = this.components.map((c) => JSON.parse(c.format(format)));
          }
          return JSON.stringify(result2);
        }
        let result = "";
        if (this.isArray()) {
          result += this.arrayChildren.format(format);
          result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
        } else {
          if (this.isTuple()) {
            result += "(" + this.components.map((comp) => comp.format(format)).join(format === "full" ? ", " : ",") + ")";
          } else {
            result += this.type;
          }
        }
        if (format !== "sighash") {
          if (this.indexed === true) {
            result += " indexed";
          }
          if (format === "full" && this.name) {
            result += " " + this.name;
          }
        }
        return result;
      }
      /**
       *  Returns true if %%this%% is an Array type.
       *
       *  This provides a type gaurd ensuring that [[arrayChildren]]
       *  and [[arrayLength]] are non-null.
       */
      isArray() {
        return this.baseType === "array";
      }
      /**
       *  Returns true if %%this%% is a Tuple type.
       *
       *  This provides a type gaurd ensuring that [[components]]
       *  is non-null.
       */
      isTuple() {
        return this.baseType === "tuple";
      }
      /**
       *  Returns true if %%this%% is an Indexable type.
       *
       *  This provides a type gaurd ensuring that [[indexed]]
       *  is non-null.
       */
      isIndexable() {
        return this.indexed != null;
      }
      /**
       *  Walks the **ParamType** with %%value%%, calling %%process%%
       *  on each type, destructing the %%value%% recursively.
       */
      walk(value, process2) {
        if (this.isArray()) {
          if (!Array.isArray(value)) {
            throw new Error("invalid array value");
          }
          if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
            throw new Error("array is wrong length");
          }
          const _this = this;
          return value.map((v) => _this.arrayChildren.walk(v, process2));
        }
        if (this.isTuple()) {
          if (!Array.isArray(value)) {
            throw new Error("invalid tuple value");
          }
          if (value.length !== this.components.length) {
            throw new Error("array is wrong length");
          }
          const _this = this;
          return value.map((v, i) => _this.components[i].walk(v, process2));
        }
        return process2(this.type, value);
      }
      /**
       *  Walks the **ParamType** with %%value%%, asynchronously calling
       *  %%process%% on each type, destructing the %%value%% recursively.
       *
       *  This can be used to resolve ENS names by walking and resolving each
       *  ``"address"`` type.
       */
      async walkAsync(value, process2) {
        const promises = [];
        const result = [value];
        __privateMethod(this, _ParamType_instances2, walkAsync_fn2).call(this, promises, value, process2, (value2) => {
          result[0] = value2;
        });
        if (promises.length) {
          await Promise.all(promises);
        }
        return result[0];
      }
      /**
       *  Creates a new **ParamType** for %%obj%%.
       *
       *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
       *  otherwise the ``indexed`` keyword will throw an error.
       */
      static from(obj, allowIndexed) {
        if (_ParamType2.isParamType(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _ParamType2.from(lex2(obj), allowIndexed);
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid param type", "obj", obj);
          }
        } else if (obj instanceof TokenString2) {
          let type2 = "", baseType = "";
          let comps = null;
          if (consumeKeywords2(obj, setify2(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
            baseType = "tuple";
            comps = obj.popParams().map((t) => _ParamType2.from(t));
            type2 = `tuple(${comps.map((c) => c.format()).join(",")})`;
          } else {
            type2 = verifyBasicType2(obj.popType("TYPE"));
            baseType = type2;
          }
          let arrayChildren = null;
          let arrayLength = null;
          while (obj.length && obj.peekType("BRACKET")) {
            const bracket = obj.pop();
            arrayChildren = new _ParamType2(_guard4, "", type2, baseType, null, comps, arrayLength, arrayChildren);
            arrayLength = bracket.value;
            type2 += bracket.text;
            baseType = "array";
            comps = null;
          }
          let indexed2 = null;
          const keywords = consumeKeywords2(obj, KwModifiers2);
          if (keywords.has("indexed")) {
            if (!allowIndexed) {
              throw new Error("");
            }
            indexed2 = true;
          }
          const name2 = obj.peekType("ID") ? obj.pop().text : "";
          if (obj.length) {
            throw new Error("leftover tokens");
          }
          return new _ParamType2(_guard4, name2, type2, baseType, indexed2, comps, arrayLength, arrayChildren);
        }
        const name = obj.name;
        (0, index_js_1.assertArgument)(!name || typeof name === "string" && name.match(regexId2), "invalid name", "obj.name", name);
        let indexed = obj.indexed;
        if (indexed != null) {
          (0, index_js_1.assertArgument)(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
          indexed = !!indexed;
        }
        let type = obj.type;
        let arrayMatch = type.match(regexArrayType2);
        if (arrayMatch) {
          const arrayLength = parseInt(arrayMatch[2] || "-1");
          const arrayChildren = _ParamType2.from({
            type: arrayMatch[1],
            components: obj.components
          });
          return new _ParamType2(_guard4, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
        }
        if (type === "tuple" || type.startsWith(
          "tuple("
          /* fix: ) */
        ) || type.startsWith(
          "("
          /* fix: ) */
        )) {
          const comps = obj.components != null ? obj.components.map((c) => _ParamType2.from(c)) : null;
          const tuple = new _ParamType2(_guard4, name || "", type, "tuple", indexed, comps, null, null);
          return tuple;
        }
        type = verifyBasicType2(obj.type);
        return new _ParamType2(_guard4, name || "", type, type, indexed, null, null, null);
      }
      /**
       *  Returns true if %%value%% is a **ParamType**.
       */
      static isParamType(value) {
        return value && value[internal3] === ParamTypeInternal2;
      }
    };
    _ParamType_instances2 = new WeakSet();
    walkAsync_fn2 = function(promises, value, process2, setValue) {
      if (this.isArray()) {
        if (!Array.isArray(value)) {
          throw new Error("invalid array value");
        }
        if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
          throw new Error("array is wrong length");
        }
        const childType = this.arrayChildren;
        const result2 = value.slice();
        result2.forEach((value2, index) => {
          var _a2;
          __privateMethod(_a2 = childType, _ParamType_instances2, walkAsync_fn2).call(_a2, promises, value2, process2, (value3) => {
            result2[index] = value3;
          });
        });
        setValue(result2);
        return;
      }
      if (this.isTuple()) {
        const components = this.components;
        let result2;
        if (Array.isArray(value)) {
          result2 = value.slice();
        } else {
          if (value == null || typeof value !== "object") {
            throw new Error("invalid tuple value");
          }
          result2 = components.map((param) => {
            if (!param.name) {
              throw new Error("cannot use object value with unnamed components");
            }
            if (!(param.name in value)) {
              throw new Error(`missing value for component ${param.name}`);
            }
            return value[param.name];
          });
        }
        if (result2.length !== this.components.length) {
          throw new Error("array is wrong length");
        }
        result2.forEach((value2, index) => {
          var _a2;
          __privateMethod(_a2 = components[index], _ParamType_instances2, walkAsync_fn2).call(_a2, promises, value2, process2, (value3) => {
            result2[index] = value3;
          });
        });
        setValue(result2);
        return;
      }
      const result = process2(this.type, value);
      if (result.then) {
        promises.push(async function() {
          setValue(await result);
        }());
      } else {
        setValue(result);
      }
    };
    var ParamType3 = _ParamType2;
    exports.ParamType = ParamType3;
    var Fragment3 = class _Fragment {
      /**
       *  @private
       */
      constructor(guard, type, inputs) {
        /**
         *  The type of the fragment.
         */
        __publicField(this, "type");
        /**
         *  The inputs for the fragment.
         */
        __publicField(this, "inputs");
        (0, index_js_1.assertPrivate)(guard, _guard4, "Fragment");
        inputs = Object.freeze(inputs.slice());
        (0, index_js_1.defineProperties)(this, { type, inputs });
      }
      /**
       *  Creates a new **Fragment** for %%obj%%, wich can be any supported
       *  ABI frgament type.
       */
      static from(obj) {
        if (typeof obj === "string") {
          try {
            _Fragment.from(JSON.parse(obj));
          } catch (e) {
          }
          return _Fragment.from(lex2(obj));
        }
        if (obj instanceof TokenString2) {
          const type = obj.peekKeyword(KwTypes2);
          switch (type) {
            case "constructor":
              return ConstructorFragment3.from(obj);
            case "error":
              return ErrorFragment3.from(obj);
            case "event":
              return EventFragment3.from(obj);
            case "fallback":
            case "receive":
              return FallbackFragment2.from(obj);
            case "function":
              return FunctionFragment3.from(obj);
            case "struct":
              return StructFragment2.from(obj);
          }
        } else if (typeof obj === "object") {
          switch (obj.type) {
            case "constructor":
              return ConstructorFragment3.from(obj);
            case "error":
              return ErrorFragment3.from(obj);
            case "event":
              return EventFragment3.from(obj);
            case "fallback":
            case "receive":
              return FallbackFragment2.from(obj);
            case "function":
              return FunctionFragment3.from(obj);
            case "struct":
              return StructFragment2.from(obj);
          }
          (0, index_js_1.assert)(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
            operation: "Fragment.from"
          });
        }
        (0, index_js_1.assertArgument)(false, "unsupported frgament object", "obj", obj);
      }
      /**
       *  Returns true if %%value%% is a [[ConstructorFragment]].
       */
      static isConstructor(value) {
        return ConstructorFragment3.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is an [[ErrorFragment]].
       */
      static isError(value) {
        return ErrorFragment3.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is an [[EventFragment]].
       */
      static isEvent(value) {
        return EventFragment3.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is a [[FunctionFragment]].
       */
      static isFunction(value) {
        return FunctionFragment3.isFragment(value);
      }
      /**
       *  Returns true if %%value%% is a [[StructFragment]].
       */
      static isStruct(value) {
        return StructFragment2.isFragment(value);
      }
    };
    exports.Fragment = Fragment3;
    var NamedFragment2 = class extends Fragment3 {
      /**
       *  @private
       */
      constructor(guard, type, name, inputs) {
        super(guard, type, inputs);
        /**
         *  The name of the fragment.
         */
        __publicField(this, "name");
        (0, index_js_1.assertArgument)(typeof name === "string" && name.match(regexId2), "invalid identifier", "name", name);
        inputs = Object.freeze(inputs.slice());
        (0, index_js_1.defineProperties)(this, { name });
      }
    };
    exports.NamedFragment = NamedFragment2;
    function joinParams2(format, params) {
      return "(" + params.map((p) => p.format(format)).join(format === "full" ? ", " : ",") + ")";
    }
    var ErrorFragment3 = class _ErrorFragment extends NamedFragment2 {
      /**
       *  @private
       */
      constructor(guard, name, inputs) {
        super(guard, "error", name, inputs);
        Object.defineProperty(this, internal3, { value: ErrorFragmentInternal2 });
      }
      /**
       *  The Custom Error selector.
       */
      get selector() {
        return (0, index_js_2.id)(this.format("sighash")).substring(0, 10);
      }
      /**
       *  Returns a string representation of this fragment as %%format%%.
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        const result = [];
        if (format !== "sighash") {
          result.push("error");
        }
        result.push(this.name + joinParams2(format, this.inputs));
        return result.join(" ");
      }
      /**
       *  Returns a new **ErrorFragment** for %%obj%%.
       */
      static from(obj) {
        if (_ErrorFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          return _ErrorFragment.from(lex2(obj));
        } else if (obj instanceof TokenString2) {
          const name = consumeName2("error", obj);
          const inputs = consumeParams2(obj);
          consumeEoi2(obj);
          return new _ErrorFragment(_guard4, name, inputs);
        }
        return new _ErrorFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map(ParamType3.from) : []);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is an
       *  **ErrorFragment**.
       */
      static isFragment(value) {
        return value && value[internal3] === ErrorFragmentInternal2;
      }
    };
    exports.ErrorFragment = ErrorFragment3;
    var EventFragment3 = class _EventFragment extends NamedFragment2 {
      /**
       *  @private
       */
      constructor(guard, name, inputs, anonymous) {
        super(guard, "event", name, inputs);
        /**
         *  Whether this event is anonymous.
         */
        __publicField(this, "anonymous");
        Object.defineProperty(this, internal3, { value: EventFragmentInternal2 });
        (0, index_js_1.defineProperties)(this, { anonymous });
      }
      /**
       *  The Event topic hash.
       */
      get topicHash() {
        return (0, index_js_2.id)(this.format("sighash"));
      }
      /**
       *  Returns a string representation of this event as %%format%%.
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
          });
        }
        const result = [];
        if (format !== "sighash") {
          result.push("event");
        }
        result.push(this.name + joinParams2(format, this.inputs));
        if (format !== "sighash" && this.anonymous) {
          result.push("anonymous");
        }
        return result.join(" ");
      }
      /**
       *  Return the topic hash for an event with %%name%% and %%params%%.
       */
      static getTopicHash(name, params) {
        params = (params || []).map((p) => ParamType3.from(p));
        const fragment = new _EventFragment(_guard4, name, params, false);
        return fragment.topicHash;
      }
      /**
       *  Returns a new **EventFragment** for %%obj%%.
       */
      static from(obj) {
        if (_EventFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _EventFragment.from(lex2(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid event fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString2) {
          const name = consumeName2("event", obj);
          const inputs = consumeParams2(obj, true);
          const anonymous = !!consumeKeywords2(obj, setify2(["anonymous"])).has("anonymous");
          consumeEoi2(obj);
          return new _EventFragment(_guard4, name, inputs, anonymous);
        }
        return new _EventFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType3.from(p, true)) : [], !!obj.anonymous);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is an
       *  **EventFragment**.
       */
      static isFragment(value) {
        return value && value[internal3] === EventFragmentInternal2;
      }
    };
    exports.EventFragment = EventFragment3;
    var ConstructorFragment3 = class _ConstructorFragment extends Fragment3 {
      /**
       *  @private
       */
      constructor(guard, type, inputs, payable, gas) {
        super(guard, type, inputs);
        /**
         *  Whether the constructor can receive an endowment.
         */
        __publicField(this, "payable");
        /**
         *  The recommended gas limit for deployment or ``null``.
         */
        __publicField(this, "gas");
        Object.defineProperty(this, internal3, { value: ConstructorFragmentInternal2 });
        (0, index_js_1.defineProperties)(this, { payable, gas });
      }
      /**
       *  Returns a string representation of this constructor as %%format%%.
       */
      format(format) {
        (0, index_js_1.assert)(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
        if (format === "json") {
          return JSON.stringify({
            type: "constructor",
            stateMutability: this.payable ? "payable" : "undefined",
            payable: this.payable,
            gas: this.gas != null ? this.gas : void 0,
            inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
          });
        }
        const result = [`constructor${joinParams2(format, this.inputs)}`];
        if (this.payable) {
          result.push("payable");
        }
        if (this.gas != null) {
          result.push(`@${this.gas.toString()}`);
        }
        return result.join(" ");
      }
      /**
       *  Returns a new **ConstructorFragment** for %%obj%%.
       */
      static from(obj) {
        if (_ConstructorFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _ConstructorFragment.from(lex2(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid constuctor fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString2) {
          consumeKeywords2(obj, setify2(["constructor"]));
          const inputs = consumeParams2(obj);
          const payable = !!consumeKeywords2(obj, KwVisibDeploy2).has("payable");
          const gas = consumeGas2(obj);
          consumeEoi2(obj);
          return new _ConstructorFragment(_guard4, "constructor", inputs, payable, gas);
        }
        return new _ConstructorFragment(_guard4, "constructor", obj.inputs ? obj.inputs.map(ParamType3.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **ConstructorFragment**.
       */
      static isFragment(value) {
        return value && value[internal3] === ConstructorFragmentInternal2;
      }
    };
    exports.ConstructorFragment = ConstructorFragment3;
    var FallbackFragment2 = class _FallbackFragment extends Fragment3 {
      constructor(guard, inputs, payable) {
        super(guard, "fallback", inputs);
        /**
         *  If the function can be sent value during invocation.
         */
        __publicField(this, "payable");
        Object.defineProperty(this, internal3, { value: FallbackFragmentInternal2 });
        (0, index_js_1.defineProperties)(this, { payable });
      }
      /**
       *  Returns a string representation of this fallback as %%format%%.
       */
      format(format) {
        const type = this.inputs.length === 0 ? "receive" : "fallback";
        if (format === "json") {
          const stateMutability = this.payable ? "payable" : "nonpayable";
          return JSON.stringify({ type, stateMutability });
        }
        return `${type}()${this.payable ? " payable" : ""}`;
      }
      /**
       *  Returns a new **FallbackFragment** for %%obj%%.
       */
      static from(obj) {
        if (_FallbackFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _FallbackFragment.from(lex2(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid fallback fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString2) {
          const errorObj = obj.toString();
          const topIsValid = obj.peekKeyword(setify2(["fallback", "receive"]));
          (0, index_js_1.assertArgument)(topIsValid, "type must be fallback or receive", "obj", errorObj);
          const type = obj.popKeyword(setify2(["fallback", "receive"]));
          if (type === "receive") {
            const inputs2 = consumeParams2(obj);
            (0, index_js_1.assertArgument)(inputs2.length === 0, `receive cannot have arguments`, "obj.inputs", inputs2);
            consumeKeywords2(obj, setify2(["payable"]));
            consumeEoi2(obj);
            return new _FallbackFragment(_guard4, [], true);
          }
          let inputs = consumeParams2(obj);
          if (inputs.length) {
            (0, index_js_1.assertArgument)(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
          } else {
            inputs = [ParamType3.from("bytes")];
          }
          const mutability = consumeMutability2(obj);
          (0, index_js_1.assertArgument)(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
          if (consumeKeywords2(obj, setify2(["returns"])).has("returns")) {
            const outputs = consumeParams2(obj);
            (0, index_js_1.assertArgument)(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
          }
          consumeEoi2(obj);
          return new _FallbackFragment(_guard4, inputs, mutability === "payable");
        }
        if (obj.type === "receive") {
          return new _FallbackFragment(_guard4, [], true);
        }
        if (obj.type === "fallback") {
          const inputs = [ParamType3.from("bytes")];
          const payable = obj.stateMutability === "payable";
          return new _FallbackFragment(_guard4, inputs, payable);
        }
        (0, index_js_1.assertArgument)(false, "invalid fallback description", "obj", obj);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **FallbackFragment**.
       */
      static isFragment(value) {
        return value && value[internal3] === FallbackFragmentInternal2;
      }
    };
    exports.FallbackFragment = FallbackFragment2;
    var FunctionFragment3 = class _FunctionFragment extends NamedFragment2 {
      /**
       *  @private
       */
      constructor(guard, name, stateMutability, inputs, outputs, gas) {
        super(guard, "function", name, inputs);
        /**
         *  If the function is constant (e.g. ``pure`` or ``view`` functions).
         */
        __publicField(this, "constant");
        /**
         *  The returned types for the result of calling this function.
         */
        __publicField(this, "outputs");
        /**
         *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
         *  or ``pure``)
         */
        __publicField(this, "stateMutability");
        /**
         *  If the function can be sent value during invocation.
         */
        __publicField(this, "payable");
        /**
         *  The recommended gas limit to send when calling this function.
         */
        __publicField(this, "gas");
        Object.defineProperty(this, internal3, { value: FunctionFragmentInternal2 });
        outputs = Object.freeze(outputs.slice());
        const constant = stateMutability === "view" || stateMutability === "pure";
        const payable = stateMutability === "payable";
        (0, index_js_1.defineProperties)(this, { constant, gas, outputs, payable, stateMutability });
      }
      /**
       *  The Function selector.
       */
      get selector() {
        return (0, index_js_2.id)(this.format("sighash")).substring(0, 10);
      }
      /**
       *  Returns a string representation of this function as %%format%%.
       */
      format(format) {
        if (format == null) {
          format = "sighash";
        }
        if (format === "json") {
          return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas != null ? this.gas : void 0,
            inputs: this.inputs.map((i) => JSON.parse(i.format(format))),
            outputs: this.outputs.map((o) => JSON.parse(o.format(format)))
          });
        }
        const result = [];
        if (format !== "sighash") {
          result.push("function");
        }
        result.push(this.name + joinParams2(format, this.inputs));
        if (format !== "sighash") {
          if (this.stateMutability !== "nonpayable") {
            result.push(this.stateMutability);
          }
          if (this.outputs && this.outputs.length) {
            result.push("returns");
            result.push(joinParams2(format, this.outputs));
          }
          if (this.gas != null) {
            result.push(`@${this.gas.toString()}`);
          }
        }
        return result.join(" ");
      }
      /**
       *  Return the selector for a function with %%name%% and %%params%%.
       */
      static getSelector(name, params) {
        params = (params || []).map((p) => ParamType3.from(p));
        const fragment = new _FunctionFragment(_guard4, name, "view", params, [], null);
        return fragment.selector;
      }
      /**
       *  Returns a new **FunctionFragment** for %%obj%%.
       */
      static from(obj) {
        if (_FunctionFragment.isFragment(obj)) {
          return obj;
        }
        if (typeof obj === "string") {
          try {
            return _FunctionFragment.from(lex2(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid function fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString2) {
          const name = consumeName2("function", obj);
          const inputs = consumeParams2(obj);
          const mutability = consumeMutability2(obj);
          let outputs = [];
          if (consumeKeywords2(obj, setify2(["returns"])).has("returns")) {
            outputs = consumeParams2(obj);
          }
          const gas = consumeGas2(obj);
          consumeEoi2(obj);
          return new _FunctionFragment(_guard4, name, mutability, inputs, outputs, gas);
        }
        let stateMutability = obj.stateMutability;
        if (stateMutability == null) {
          stateMutability = "payable";
          if (typeof obj.constant === "boolean") {
            stateMutability = "view";
            if (!obj.constant) {
              stateMutability = "payable";
              if (typeof obj.payable === "boolean" && !obj.payable) {
                stateMutability = "nonpayable";
              }
            }
          } else if (typeof obj.payable === "boolean" && !obj.payable) {
            stateMutability = "nonpayable";
          }
        }
        return new _FunctionFragment(_guard4, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType3.from) : [], obj.outputs ? obj.outputs.map(ParamType3.from) : [], obj.gas != null ? obj.gas : null);
      }
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **FunctionFragment**.
       */
      static isFragment(value) {
        return value && value[internal3] === FunctionFragmentInternal2;
      }
    };
    exports.FunctionFragment = FunctionFragment3;
    var StructFragment2 = class _StructFragment extends NamedFragment2 {
      /**
       *  @private
       */
      constructor(guard, name, inputs) {
        super(guard, "struct", name, inputs);
        Object.defineProperty(this, internal3, { value: StructFragmentInternal2 });
      }
      /**
       *  Returns a string representation of this struct as %%format%%.
       */
      format() {
        throw new Error("@TODO");
      }
      /**
       *  Returns a new **StructFragment** for %%obj%%.
       */
      static from(obj) {
        if (typeof obj === "string") {
          try {
            return _StructFragment.from(lex2(obj));
          } catch (error) {
            (0, index_js_1.assertArgument)(false, "invalid struct fragment", "obj", obj);
          }
        } else if (obj instanceof TokenString2) {
          const name = consumeName2("struct", obj);
          const inputs = consumeParams2(obj);
          consumeEoi2(obj);
          return new _StructFragment(_guard4, name, inputs);
        }
        return new _StructFragment(_guard4, obj.name, obj.inputs ? obj.inputs.map(ParamType3.from) : []);
      }
      // @TODO: fix this return type
      /**
       *  Returns ``true`` and provides a type guard if %%value%% is a
       *  **StructFragment**.
       */
      static isFragment(value) {
        return value && value[internal3] === StructFragmentInternal2;
      }
    };
    exports.StructFragment = StructFragment2;
  }
});

// node_modules/ethers/lib.commonjs/abi/abi-coder.js
var require_abi_coder = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/abi-coder.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbiCoder = void 0;
    var index_js_1 = require_utils();
    var abstract_coder_js_1 = require_abstract_coder();
    var address_js_1 = require_address3();
    var array_js_1 = require_array();
    var boolean_js_1 = require_boolean();
    var bytes_js_1 = require_bytes();
    var fixed_bytes_js_1 = require_fixed_bytes();
    var null_js_1 = require_null();
    var number_js_1 = require_number();
    var string_js_1 = require_string();
    var tuple_js_1 = require_tuple();
    var fragments_js_1 = require_fragments();
    var index_js_2 = require_address2();
    var index_js_3 = require_utils();
    var PanicReasons3 = /* @__PURE__ */ new Map();
    PanicReasons3.set(0, "GENERIC_PANIC");
    PanicReasons3.set(1, "ASSERT_FALSE");
    PanicReasons3.set(17, "OVERFLOW");
    PanicReasons3.set(18, "DIVIDE_BY_ZERO");
    PanicReasons3.set(33, "ENUM_RANGE_ERROR");
    PanicReasons3.set(34, "BAD_STORAGE_DATA");
    PanicReasons3.set(49, "STACK_UNDERFLOW");
    PanicReasons3.set(50, "ARRAY_RANGE_ERROR");
    PanicReasons3.set(65, "OUT_OF_MEMORY");
    PanicReasons3.set(81, "UNINITIALIZED_FUNCTION_CALL");
    var paramTypeBytes3 = new RegExp(/^bytes([0-9]*)$/);
    var paramTypeNumber3 = new RegExp(/^(u?int)([0-9]*)$/);
    var defaultCoder2 = null;
    var defaultMaxInflation2 = 1024;
    function getBuiltinCallException2(action, tx, data, abiCoder) {
      let message = "missing revert data";
      let reason = null;
      const invocation = null;
      let revert = null;
      if (data) {
        message = "execution reverted";
        const bytes3 = (0, index_js_3.getBytes)(data);
        data = (0, index_js_3.hexlify)(data);
        if (bytes3.length === 0) {
          message += " (no data present; likely require(false) occurred";
          reason = "require(false)";
        } else if (bytes3.length % 32 !== 4) {
          message += " (could not decode reason; invalid data length)";
        } else if ((0, index_js_3.hexlify)(bytes3.slice(0, 4)) === "0x08c379a0") {
          try {
            reason = abiCoder.decode(["string"], bytes3.slice(4))[0];
            revert = {
              signature: "Error(string)",
              name: "Error",
              args: [reason]
            };
            message += `: ${JSON.stringify(reason)}`;
          } catch (error) {
            message += " (could not decode reason; invalid string data)";
          }
        } else if ((0, index_js_3.hexlify)(bytes3.slice(0, 4)) === "0x4e487b71") {
          try {
            const code = Number(abiCoder.decode(["uint256"], bytes3.slice(4))[0]);
            revert = {
              signature: "Panic(uint256)",
              name: "Panic",
              args: [code]
            };
            reason = `Panic due to ${PanicReasons3.get(code) || "UNKNOWN"}(${code})`;
            message += `: ${reason}`;
          } catch (error) {
            message += " (could not decode panic code)";
          }
        } else {
          message += " (unknown custom error)";
        }
      }
      const transaction = {
        to: tx.to ? (0, index_js_2.getAddress)(tx.to) : null,
        data: tx.data || "0x"
      };
      if (tx.from) {
        transaction.from = (0, index_js_2.getAddress)(tx.from);
      }
      return (0, index_js_3.makeError)(message, "CALL_EXCEPTION", {
        action,
        data,
        reason,
        transaction,
        invocation,
        revert
      });
    }
    var _AbiCoder_instances2, getCoder_fn2;
    var _AbiCoder2 = class _AbiCoder2 {
      constructor() {
        __privateAdd(this, _AbiCoder_instances2);
      }
      /**
       *  Get the default values for the given %%types%%.
       *
       *  For example, a ``uint`` is by default ``0`` and ``bool``
       *  is by default ``false``.
       */
      getDefaultValue(types) {
        const coders = types.map((type) => __privateMethod(this, _AbiCoder_instances2, getCoder_fn2).call(this, fragments_js_1.ParamType.from(type)));
        const coder = new tuple_js_1.TupleCoder(coders, "_");
        return coder.defaultValue();
      }
      /**
       *  Encode the %%values%% as the %%types%% into ABI data.
       *
       *  @returns DataHexstring
       */
      encode(types, values) {
        (0, index_js_1.assertArgumentCount)(values.length, types.length, "types/values length mismatch");
        const coders = types.map((type) => __privateMethod(this, _AbiCoder_instances2, getCoder_fn2).call(this, fragments_js_1.ParamType.from(type)));
        const coder = new tuple_js_1.TupleCoder(coders, "_");
        const writer = new abstract_coder_js_1.Writer();
        coder.encode(writer, values);
        return writer.data;
      }
      /**
       *  Decode the ABI %%data%% as the %%types%% into values.
       *
       *  If %%loose%% decoding is enabled, then strict padding is
       *  not enforced. Some older versions of Solidity incorrectly
       *  padded event data emitted from ``external`` functions.
       */
      decode(types, data, loose) {
        const coders = types.map((type) => __privateMethod(this, _AbiCoder_instances2, getCoder_fn2).call(this, fragments_js_1.ParamType.from(type)));
        const coder = new tuple_js_1.TupleCoder(coders, "_");
        return coder.decode(new abstract_coder_js_1.Reader(data, loose, defaultMaxInflation2));
      }
      static _setDefaultMaxInflation(value) {
        (0, index_js_1.assertArgument)(typeof value === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
        defaultMaxInflation2 = value;
      }
      /**
       *  Returns the shared singleton instance of a default [[AbiCoder]].
       *
       *  On the first call, the instance is created internally.
       */
      static defaultAbiCoder() {
        if (defaultCoder2 == null) {
          defaultCoder2 = new _AbiCoder2();
        }
        return defaultCoder2;
      }
      /**
       *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
       *  result %%data%% for the [[CallExceptionAction]] %%action%% against
       *  the Transaction %%tx%%.
       */
      static getBuiltinCallException(action, tx, data) {
        return getBuiltinCallException2(action, tx, data, _AbiCoder2.defaultAbiCoder());
      }
    };
    _AbiCoder_instances2 = new WeakSet();
    getCoder_fn2 = function(param) {
      if (param.isArray()) {
        return new array_js_1.ArrayCoder(__privateMethod(this, _AbiCoder_instances2, getCoder_fn2).call(this, param.arrayChildren), param.arrayLength, param.name);
      }
      if (param.isTuple()) {
        return new tuple_js_1.TupleCoder(param.components.map((c) => __privateMethod(this, _AbiCoder_instances2, getCoder_fn2).call(this, c)), param.name);
      }
      switch (param.baseType) {
        case "address":
          return new address_js_1.AddressCoder(param.name);
        case "bool":
          return new boolean_js_1.BooleanCoder(param.name);
        case "string":
          return new string_js_1.StringCoder(param.name);
        case "bytes":
          return new bytes_js_1.BytesCoder(param.name);
        case "":
          return new null_js_1.NullCoder(param.name);
      }
      let match = param.type.match(paramTypeNumber3);
      if (match) {
        let size = parseInt(match[2] || "256");
        (0, index_js_1.assertArgument)(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
        return new number_js_1.NumberCoder(size / 8, match[1] === "int", param.name);
      }
      match = param.type.match(paramTypeBytes3);
      if (match) {
        let size = parseInt(match[1]);
        (0, index_js_1.assertArgument)(size !== 0 && size <= 32, "invalid bytes length", "param", param);
        return new fixed_bytes_js_1.FixedBytesCoder(size, param.name);
      }
      (0, index_js_1.assertArgument)(false, "invalid type", "type", param.type);
    };
    var AbiCoder3 = _AbiCoder2;
    exports.AbiCoder = AbiCoder3;
  }
});

// node_modules/ethers/lib.commonjs/abi/bytes32.js
var require_bytes32 = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/bytes32.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeBytes32String = exports.encodeBytes32String = void 0;
    var index_js_1 = require_utils();
    function encodeBytes32String2(text) {
      const bytes3 = (0, index_js_1.toUtf8Bytes)(text);
      if (bytes3.length > 31) {
        throw new Error("bytes32 string must be less than 32 bytes");
      }
      return (0, index_js_1.zeroPadBytes)(bytes3, 32);
    }
    exports.encodeBytes32String = encodeBytes32String2;
    function decodeBytes32String2(_bytes) {
      const data = (0, index_js_1.getBytes)(_bytes, "bytes");
      if (data.length !== 32) {
        throw new Error("invalid bytes32 - not 32 bytes long");
      }
      if (data[31] !== 0) {
        throw new Error("invalid bytes32 string - no null terminator");
      }
      let length = 31;
      while (data[length - 1] === 0) {
        length--;
      }
      return (0, index_js_1.toUtf8String)(data.slice(0, length));
    }
    exports.decodeBytes32String = decodeBytes32String2;
  }
});

// node_modules/ethers/lib.commonjs/abi/interface.js
var require_interface = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/interface.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Interface = exports.Indexed = exports.ErrorDescription = exports.TransactionDescription = exports.LogDescription = exports.Result = exports.checkResultErrors = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_hash();
    var index_js_3 = require_utils();
    var abi_coder_js_1 = require_abi_coder();
    var abstract_coder_js_1 = require_abstract_coder();
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return abstract_coder_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports, "Result", { enumerable: true, get: function() {
      return abstract_coder_js_1.Result;
    } });
    var fragments_js_1 = require_fragments();
    var typed_js_1 = require_typed();
    var LogDescription3 = class {
      /**
       *  @_ignore:
       */
      constructor(fragment, topic, args) {
        /**
         *  The matching fragment for the ``topic0``.
         */
        __publicField(this, "fragment");
        /**
         *  The name of the Event.
         */
        __publicField(this, "name");
        /**
         *  The full Event signature.
         */
        __publicField(this, "signature");
        /**
         *  The topic hash for the Event.
         */
        __publicField(this, "topic");
        /**
         *  The arguments passed into the Event with ``emit``.
         */
        __publicField(this, "args");
        const name = fragment.name, signature = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          signature,
          topic,
          args
        });
      }
    };
    exports.LogDescription = LogDescription3;
    var TransactionDescription3 = class {
      /**
       *  @_ignore:
       */
      constructor(fragment, selector, args, value) {
        /**
         *  The matching fragment from the transaction ``data``.
         */
        __publicField(this, "fragment");
        /**
         *  The name of the Function from the transaction ``data``.
         */
        __publicField(this, "name");
        /**
         *  The arguments passed to the Function from the transaction ``data``.
         */
        __publicField(this, "args");
        /**
         *  The full Function signature from the transaction ``data``.
         */
        __publicField(this, "signature");
        /**
         *  The selector for the Function from the transaction ``data``.
         */
        __publicField(this, "selector");
        /**
         *  The ``value`` (in wei) from the transaction.
         */
        __publicField(this, "value");
        const name = fragment.name, signature = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          args,
          signature,
          selector,
          value
        });
      }
    };
    exports.TransactionDescription = TransactionDescription3;
    var ErrorDescription3 = class {
      /**
       *  @_ignore:
       */
      constructor(fragment, selector, args) {
        /**
         *  The matching fragment.
         */
        __publicField(this, "fragment");
        /**
         *  The name of the Error.
         */
        __publicField(this, "name");
        /**
         *  The arguments passed to the Error with ``revert``.
         */
        __publicField(this, "args");
        /**
         *  The full Error signature.
         */
        __publicField(this, "signature");
        /**
         *  The selector for the Error.
         */
        __publicField(this, "selector");
        const name = fragment.name, signature = fragment.format();
        (0, index_js_3.defineProperties)(this, {
          fragment,
          name,
          args,
          signature,
          selector
        });
      }
    };
    exports.ErrorDescription = ErrorDescription3;
    var Indexed3 = class {
      /**
       *  @_ignore:
       */
      constructor(hash2) {
        /**
         *  The ``keccak256`` of the value logged.
         */
        __publicField(this, "hash");
        /**
         *  @_ignore:
         */
        __publicField(this, "_isIndexed");
        (0, index_js_3.defineProperties)(this, { hash: hash2, _isIndexed: true });
      }
      /**
       *  Returns ``true`` if %%value%% is an **Indexed**.
       *
       *  This provides a Type Guard for property access.
       */
      static isIndexed(value) {
        return !!(value && value._isIndexed);
      }
    };
    exports.Indexed = Indexed3;
    var PanicReasons3 = {
      "0": "generic panic",
      "1": "assert(false)",
      "17": "arithmetic overflow",
      "18": "division or modulo by zero",
      "33": "enum overflow",
      "34": "invalid encoded storage byte array accessed",
      "49": "out-of-bounds array access; popping on an empty array",
      "50": "out-of-bounds access of an array or bytesN",
      "65": "out of memory",
      "81": "uninitialized function"
    };
    var BuiltinErrors3 = {
      "0x08c379a0": {
        signature: "Error(string)",
        name: "Error",
        inputs: ["string"],
        reason: (message) => {
          return `reverted with reason string ${JSON.stringify(message)}`;
        }
      },
      "0x4e487b71": {
        signature: "Panic(uint256)",
        name: "Panic",
        inputs: ["uint256"],
        reason: (code) => {
          let reason = "unknown panic code";
          if (code >= 0 && code <= 255 && PanicReasons3[code.toString()]) {
            reason = PanicReasons3[code.toString()];
          }
          return `reverted with panic code 0x${code.toString(16)} (${reason})`;
        }
      }
    };
    var _errors2, _events2, _functions2, _abiCoder2, _Interface_instances2, getFunction_fn2, getEvent_fn2;
    var _Interface2 = class _Interface2 {
      /**
       *  Create a new Interface for the %%fragments%%.
       */
      constructor(fragments) {
        __privateAdd(this, _Interface_instances2);
        /**
         *  All the Contract ABI members (i.e. methods, events, errors, etc).
         */
        __publicField(this, "fragments");
        /**
         *  The Contract constructor.
         */
        __publicField(this, "deploy");
        /**
         *  The Fallback method, if any.
         */
        __publicField(this, "fallback");
        /**
         *  If receiving ether is supported.
         */
        __publicField(this, "receive");
        __privateAdd(this, _errors2);
        __privateAdd(this, _events2);
        __privateAdd(this, _functions2);
        //    #structs: Map<string, StructFragment>;
        __privateAdd(this, _abiCoder2);
        let abi = [];
        if (typeof fragments === "string") {
          abi = JSON.parse(fragments);
        } else {
          abi = fragments;
        }
        __privateSet(this, _functions2, /* @__PURE__ */ new Map());
        __privateSet(this, _errors2, /* @__PURE__ */ new Map());
        __privateSet(this, _events2, /* @__PURE__ */ new Map());
        const frags = [];
        for (const a of abi) {
          try {
            frags.push(fragments_js_1.Fragment.from(a));
          } catch (error) {
            console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
          }
        }
        (0, index_js_3.defineProperties)(this, {
          fragments: Object.freeze(frags)
        });
        let fallback = null;
        let receive = false;
        __privateSet(this, _abiCoder2, this.getAbiCoder());
        this.fragments.forEach((fragment, index) => {
          let bucket;
          switch (fragment.type) {
            case "constructor":
              if (this.deploy) {
                console.log("duplicate definition - constructor");
                return;
              }
              (0, index_js_3.defineProperties)(this, { deploy: fragment });
              return;
            case "fallback":
              if (fragment.inputs.length === 0) {
                receive = true;
              } else {
                (0, index_js_3.assertArgument)(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
                fallback = fragment;
                receive = fallback.payable;
              }
              return;
            case "function":
              bucket = __privateGet(this, _functions2);
              break;
            case "event":
              bucket = __privateGet(this, _events2);
              break;
            case "error":
              bucket = __privateGet(this, _errors2);
              break;
            default:
              return;
          }
          const signature = fragment.format();
          if (bucket.has(signature)) {
            return;
          }
          bucket.set(signature, fragment);
        });
        if (!this.deploy) {
          (0, index_js_3.defineProperties)(this, {
            deploy: fragments_js_1.ConstructorFragment.from("constructor()")
          });
        }
        (0, index_js_3.defineProperties)(this, { fallback, receive });
      }
      /**
       *  Returns the entire Human-Readable ABI, as an array of
       *  signatures, optionally as %%minimal%% strings, which
       *  removes parameter names and unneceesary spaces.
       */
      format(minimal) {
        const format = minimal ? "minimal" : "full";
        const abi = this.fragments.map((f2) => f2.format(format));
        return abi;
      }
      /**
       *  Return the JSON-encoded ABI. This is the format Solidiy
       *  returns.
       */
      formatJson() {
        const abi = this.fragments.map((f2) => f2.format("json"));
        return JSON.stringify(abi.map((j) => JSON.parse(j)));
      }
      /**
       *  The ABI coder that will be used to encode and decode binary
       *  data.
       */
      getAbiCoder() {
        return abi_coder_js_1.AbiCoder.defaultAbiCoder();
      }
      /**
       *  Get the function name for %%key%%, which may be a function selector,
       *  function name or function signature that belongs to the ABI.
       */
      getFunctionName(key) {
        const fragment = __privateMethod(this, _Interface_instances2, getFunction_fn2).call(this, key, null, false);
        (0, index_js_3.assertArgument)(fragment, "no matching function", "key", key);
        return fragment.name;
      }
      /**
       *  Returns true if %%key%% (a function selector, function name or
       *  function signature) is present in the ABI.
       *
       *  In the case of a function name, the name may be ambiguous, so
       *  accessing the [[FunctionFragment]] may require refinement.
       */
      hasFunction(key) {
        return !!__privateMethod(this, _Interface_instances2, getFunction_fn2).call(this, key, null, false);
      }
      /**
       *  Get the [[FunctionFragment]] for %%key%%, which may be a function
       *  selector, function name or function signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple functions match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single function in
       *  the ABI, this will throw.
       */
      getFunction(key, values) {
        return __privateMethod(this, _Interface_instances2, getFunction_fn2).call(this, key, values || null, true);
      }
      /**
       *  Iterate over all functions, calling %%callback%%, sorted by their name.
       */
      forEachFunction(callback) {
        const names = Array.from(__privateGet(this, _functions2).keys());
        names.sort((a, b2) => a.localeCompare(b2));
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          callback(__privateGet(this, _functions2).get(name), i);
        }
      }
      /**
       *  Get the event name for %%key%%, which may be a topic hash,
       *  event name or event signature that belongs to the ABI.
       */
      getEventName(key) {
        const fragment = __privateMethod(this, _Interface_instances2, getEvent_fn2).call(this, key, null, false);
        (0, index_js_3.assertArgument)(fragment, "no matching event", "key", key);
        return fragment.name;
      }
      /**
       *  Returns true if %%key%% (an event topic hash, event name or
       *  event signature) is present in the ABI.
       *
       *  In the case of an event name, the name may be ambiguous, so
       *  accessing the [[EventFragment]] may require refinement.
       */
      hasEvent(key) {
        return !!__privateMethod(this, _Interface_instances2, getEvent_fn2).call(this, key, null, false);
      }
      /**
       *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
       *  event name or event signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple events match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single event in
       *  the ABI, this will throw.
       */
      getEvent(key, values) {
        return __privateMethod(this, _Interface_instances2, getEvent_fn2).call(this, key, values || null, true);
      }
      /**
       *  Iterate over all events, calling %%callback%%, sorted by their name.
       */
      forEachEvent(callback) {
        const names = Array.from(__privateGet(this, _events2).keys());
        names.sort((a, b2) => a.localeCompare(b2));
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          callback(__privateGet(this, _events2).get(name), i);
        }
      }
      /**
       *  Get the [[ErrorFragment]] for %%key%%, which may be an error
       *  selector, error name or error signature that belongs to the ABI.
       *
       *  If %%values%% is provided, it will use the Typed API to handle
       *  ambiguous cases where multiple errors match by name.
       *
       *  If the %%key%% and %%values%% do not refine to a single error in
       *  the ABI, this will throw.
       */
      getError(key, values) {
        if ((0, index_js_3.isHexString)(key)) {
          const selector = key.toLowerCase();
          if (BuiltinErrors3[selector]) {
            return fragments_js_1.ErrorFragment.from(BuiltinErrors3[selector].signature);
          }
          for (const fragment of __privateGet(this, _errors2).values()) {
            if (selector === fragment.selector) {
              return fragment;
            }
          }
          return null;
        }
        if (key.indexOf("(") === -1) {
          const matching = [];
          for (const [name, fragment] of __privateGet(this, _errors2)) {
            if (name.split(
              "("
              /* fix:) */
            )[0] === key) {
              matching.push(fragment);
            }
          }
          if (matching.length === 0) {
            if (key === "Error") {
              return fragments_js_1.ErrorFragment.from("error Error(string)");
            }
            if (key === "Panic") {
              return fragments_js_1.ErrorFragment.from("error Panic(uint256)");
            }
            return null;
          } else if (matching.length > 1) {
            const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
            (0, index_js_3.assertArgument)(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
          }
          return matching[0];
        }
        key = fragments_js_1.ErrorFragment.from(key).format();
        if (key === "Error(string)") {
          return fragments_js_1.ErrorFragment.from("error Error(string)");
        }
        if (key === "Panic(uint256)") {
          return fragments_js_1.ErrorFragment.from("error Panic(uint256)");
        }
        const result = __privateGet(this, _errors2).get(key);
        if (result) {
          return result;
        }
        return null;
      }
      /**
       *  Iterate over all errors, calling %%callback%%, sorted by their name.
       */
      forEachError(callback) {
        const names = Array.from(__privateGet(this, _errors2).keys());
        names.sort((a, b2) => a.localeCompare(b2));
        for (let i = 0; i < names.length; i++) {
          const name = names[i];
          callback(__privateGet(this, _errors2).get(name), i);
        }
      }
      // Get the 4-byte selector used by Solidity to identify a function
      /*
      getSelector(fragment: ErrorFragment | FunctionFragment): string {
          if (typeof(fragment) === "string") {
              const matches: Array<Fragment> = [ ];
      
              try { matches.push(this.getFunction(fragment)); } catch (error) { }
              try { matches.push(this.getError(<string>fragment)); } catch (_) { }
      
              if (matches.length === 0) {
                  logger.throwArgumentError("unknown fragment", "key", fragment);
              } else if (matches.length > 1) {
                  logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
              }
      
              fragment = matches[0];
          }
      
          return dataSlice(id(fragment.format()), 0, 4);
      }
          */
      // Get the 32-byte topic hash used by Solidity to identify an event
      /*
      getEventTopic(fragment: EventFragment): string {
          //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
          return id(fragment.format());
      }
      */
      _decodeParams(params, data) {
        return __privateGet(this, _abiCoder2).decode(params, data);
      }
      _encodeParams(params, values) {
        return __privateGet(this, _abiCoder2).encode(params, values);
      }
      /**
       *  Encodes a ``tx.data`` object for deploying the Contract with
       *  the %%values%% as the constructor arguments.
       */
      encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
      }
      /**
       *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
       *  specified error (see [[getError]] for valid values for
       *  %%key%%).
       *
       *  Most developers should prefer the [[parseCallResult]] method instead,
       *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
       *  corresponding error.
       */
      decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
          const f2 = this.getError(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown error", "fragment", fragment);
          fragment = f2;
        }
        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));
      }
      /**
       *  Encodes the transaction revert data for a call result that
       *  reverted from the the Contract with the sepcified %%error%%
       *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
       *
       *  This is generally not used by most developers, unless trying to mock
       *  a result from a Contract.
       */
      encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
          const f2 = this.getError(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown error", "fragment", fragment);
          fragment = f2;
        }
        return (0, index_js_3.concat)([
          fragment.selector,
          this._encodeParams(fragment.inputs, values || [])
        ]);
      }
      /**
       *  Decodes the %%data%% from a transaction ``tx.data`` for
       *  the function specified (see [[getFunction]] for valid values
       *  for %%fragment%%).
       *
       *  Most developers should prefer the [[parseTransaction]] method
       *  instead, which will automatically detect the fragment.
       */
      decodeFunctionData(fragment, data) {
        if (typeof fragment === "string") {
          const f2 = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown function", "fragment", fragment);
          fragment = f2;
        }
        (0, index_js_3.assertArgument)((0, index_js_3.dataSlice)(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
        return this._decodeParams(fragment.inputs, (0, index_js_3.dataSlice)(data, 4));
      }
      /**
       *  Encodes the ``tx.data`` for a transaction that calls the function
       *  specified (see [[getFunction]] for valid values for %%fragment%%) with
       *  the %%values%%.
       */
      encodeFunctionData(fragment, values) {
        if (typeof fragment === "string") {
          const f2 = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown function", "fragment", fragment);
          fragment = f2;
        }
        return (0, index_js_3.concat)([
          fragment.selector,
          this._encodeParams(fragment.inputs, values || [])
        ]);
      }
      /**
       *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
       *  specified function (see [[getFunction]] for valid values for
       *  %%key%%).
       *
       *  Most developers should prefer the [[parseCallResult]] method instead,
       *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
       *  corresponding error.
       */
      decodeFunctionResult(fragment, data) {
        if (typeof fragment === "string") {
          const f2 = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown function", "fragment", fragment);
          fragment = f2;
        }
        let message = "invalid length for result data";
        const bytes3 = (0, index_js_3.getBytesCopy)(data);
        if (bytes3.length % 32 === 0) {
          try {
            return __privateGet(this, _abiCoder2).decode(fragment.outputs, bytes3);
          } catch (error) {
            message = "could not decode result data";
          }
        }
        (0, index_js_3.assert)(false, message, "BAD_DATA", {
          value: (0, index_js_3.hexlify)(bytes3),
          info: { method: fragment.name, signature: fragment.format() }
        });
      }
      makeError(_data4, tx) {
        const data = (0, index_js_3.getBytes)(_data4, "data");
        const error = abi_coder_js_1.AbiCoder.getBuiltinCallException("call", tx, data);
        const customPrefix = "execution reverted (unknown custom error)";
        if (error.message.startsWith(customPrefix)) {
          const selector = (0, index_js_3.hexlify)(data.slice(0, 4));
          const ef = this.getError(selector);
          if (ef) {
            try {
              const args = __privateGet(this, _abiCoder2).decode(ef.inputs, data.slice(4));
              error.revert = {
                name: ef.name,
                signature: ef.format(),
                args
              };
              error.reason = error.revert.signature;
              error.message = `execution reverted: ${error.reason}`;
            } catch (e) {
              error.message = `execution reverted (coult not decode custom error)`;
            }
          }
        }
        const parsed = this.parseTransaction(tx);
        if (parsed) {
          error.invocation = {
            method: parsed.name,
            signature: parsed.signature,
            args: parsed.args
          };
        }
        return error;
      }
      /**
       *  Encodes the result data (e.g. from an ``eth_call``) for the
       *  specified function (see [[getFunction]] for valid values
       *  for %%fragment%%) with %%values%%.
       *
       *  This is generally not used by most developers, unless trying to mock
       *  a result from a Contract.
       */
      encodeFunctionResult(fragment, values) {
        if (typeof fragment === "string") {
          const f2 = this.getFunction(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown function", "fragment", fragment);
          fragment = f2;
        }
        return (0, index_js_3.hexlify)(__privateGet(this, _abiCoder2).encode(fragment.outputs, values || []));
      }
      /*
          spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
              const promises: Array<Promise<>> = [ ];
              const process = function(type: ParamType, value: any): any {
                  if (type.baseType === "array") {
                      return descend(type.child
                  }
                  if (type. === "address") {
                  }
              };
      
              const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
                  if (inputs.length !== values.length) { throw new Error("length mismatch"); }
                  
              };
      
              const result: Array<any> = [ ];
              values.forEach((value, index) => {
                  if (value == null) {
                      topics.push(null);
                  } else if (param.baseType === "array" || param.baseType === "tuple") {
                      logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
                  } else if (Array.isArray(value)) {
                      topics.push(value.map((value) => encodeTopic(param, value)));
                  } else {
                      topics.push(encodeTopic(param, value));
                  }
              });
          }
      */
      // Create the filter for the event with search criteria (e.g. for eth_filterLog)
      encodeFilterTopics(fragment, values) {
        if (typeof fragment === "string") {
          const f2 = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown event", "eventFragment", fragment);
          fragment = f2;
        }
        (0, index_js_3.assert)(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
        const topics = [];
        if (!fragment.anonymous) {
          topics.push(fragment.topicHash);
        }
        const encodeTopic = (param, value) => {
          if (param.type === "string") {
            return (0, index_js_2.id)(value);
          } else if (param.type === "bytes") {
            return (0, index_js_1.keccak256)((0, index_js_3.hexlify)(value));
          }
          if (param.type === "bool" && typeof value === "boolean") {
            value = value ? "0x01" : "0x00";
          } else if (param.type.match(/^u?int/)) {
            value = (0, index_js_3.toBeHex)(value);
          } else if (param.type.match(/^bytes/)) {
            value = (0, index_js_3.zeroPadBytes)(value, 32);
          } else if (param.type === "address") {
            __privateGet(this, _abiCoder2).encode(["address"], [value]);
          }
          return (0, index_js_3.zeroPadValue)((0, index_js_3.hexlify)(value), 32);
        };
        values.forEach((value, index) => {
          const param = fragment.inputs[index];
          if (!param.indexed) {
            (0, index_js_3.assertArgument)(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
            return;
          }
          if (value == null) {
            topics.push(null);
          } else if (param.baseType === "array" || param.baseType === "tuple") {
            (0, index_js_3.assertArgument)(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
          } else if (Array.isArray(value)) {
            topics.push(value.map((value2) => encodeTopic(param, value2)));
          } else {
            topics.push(encodeTopic(param, value));
          }
        });
        while (topics.length && topics[topics.length - 1] === null) {
          topics.pop();
        }
        return topics;
      }
      encodeEventLog(fragment, values) {
        if (typeof fragment === "string") {
          const f2 = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown event", "eventFragment", fragment);
          fragment = f2;
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!fragment.anonymous) {
          topics.push(fragment.topicHash);
        }
        (0, index_js_3.assertArgument)(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
        fragment.inputs.forEach((param, index) => {
          const value = values[index];
          if (param.indexed) {
            if (param.type === "string") {
              topics.push((0, index_js_2.id)(value));
            } else if (param.type === "bytes") {
              topics.push((0, index_js_1.keccak256)(value));
            } else if (param.baseType === "tuple" || param.baseType === "array") {
              throw new Error("not implemented");
            } else {
              topics.push(__privateGet(this, _abiCoder2).encode([param.type], [value]));
            }
          } else {
            dataTypes.push(param);
            dataValues.push(value);
          }
        });
        return {
          data: __privateGet(this, _abiCoder2).encode(dataTypes, dataValues),
          topics
        };
      }
      // Decode a filter for the event and the search criteria
      decodeEventLog(fragment, data, topics) {
        if (typeof fragment === "string") {
          const f2 = this.getEvent(fragment);
          (0, index_js_3.assertArgument)(f2, "unknown event", "eventFragment", fragment);
          fragment = f2;
        }
        if (topics != null && !fragment.anonymous) {
          const eventTopic = fragment.topicHash;
          (0, index_js_3.assertArgument)((0, index_js_3.isHexString)(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
          topics = topics.slice(1);
        }
        const indexed = [];
        const nonIndexed = [];
        const dynamic = [];
        fragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
              indexed.push(fragments_js_1.ParamType.from({ type: "bytes32", name: param.name }));
              dynamic.push(true);
            } else {
              indexed.push(param);
              dynamic.push(false);
            }
          } else {
            nonIndexed.push(param);
            dynamic.push(false);
          }
        });
        const resultIndexed = topics != null ? __privateGet(this, _abiCoder2).decode(indexed, (0, index_js_3.concat)(topics)) : null;
        const resultNonIndexed = __privateGet(this, _abiCoder2).decode(nonIndexed, data, true);
        const values = [];
        const keys = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        fragment.inputs.forEach((param, index) => {
          let value = null;
          if (param.indexed) {
            if (resultIndexed == null) {
              value = new Indexed3(null);
            } else if (dynamic[index]) {
              value = new Indexed3(resultIndexed[indexedIndex++]);
            } else {
              try {
                value = resultIndexed[indexedIndex++];
              } catch (error) {
                value = error;
              }
            }
          } else {
            try {
              value = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
              value = error;
            }
          }
          values.push(value);
          keys.push(param.name || null);
        });
        return abstract_coder_js_1.Result.fromItems(values, keys);
      }
      /**
       *  Parses a transaction, finding the matching function and extracts
       *  the parameter values along with other useful function details.
       *
       *  If the matching function cannot be found, return null.
       */
      parseTransaction(tx) {
        const data = (0, index_js_3.getBytes)(tx.data, "tx.data");
        const value = (0, index_js_3.getBigInt)(tx.value != null ? tx.value : 0, "tx.value");
        const fragment = this.getFunction((0, index_js_3.hexlify)(data.slice(0, 4)));
        if (!fragment) {
          return null;
        }
        const args = __privateGet(this, _abiCoder2).decode(fragment.inputs, data.slice(4));
        return new TransactionDescription3(fragment, fragment.selector, args, value);
      }
      parseCallResult(data) {
        throw new Error("@TODO");
      }
      /**
       *  Parses a receipt log, finding the matching event and extracts
       *  the parameter values along with other useful event details.
       *
       *  If the matching event cannot be found, returns null.
       */
      parseLog(log) {
        const fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) {
          return null;
        }
        return new LogDescription3(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
      }
      /**
       *  Parses a revert data, finding the matching error and extracts
       *  the parameter values along with other useful error details.
       *
       *  If the matching error cannot be found, returns null.
       */
      parseError(data) {
        const hexData = (0, index_js_3.hexlify)(data);
        const fragment = this.getError((0, index_js_3.dataSlice)(hexData, 0, 4));
        if (!fragment) {
          return null;
        }
        const args = __privateGet(this, _abiCoder2).decode(fragment.inputs, (0, index_js_3.dataSlice)(hexData, 4));
        return new ErrorDescription3(fragment, fragment.selector, args);
      }
      /**
       *  Creates a new [[Interface]] from the ABI %%value%%.
       *
       *  The %%value%% may be provided as an existing [[Interface]] object,
       *  a JSON-encoded ABI or any Human-Readable ABI format.
       */
      static from(value) {
        if (value instanceof _Interface2) {
          return value;
        }
        if (typeof value === "string") {
          return new _Interface2(JSON.parse(value));
        }
        if (typeof value.formatJson === "function") {
          return new _Interface2(value.formatJson());
        }
        if (typeof value.format === "function") {
          return new _Interface2(value.format("json"));
        }
        return new _Interface2(value);
      }
    };
    _errors2 = new WeakMap();
    _events2 = new WeakMap();
    _functions2 = new WeakMap();
    _abiCoder2 = new WeakMap();
    _Interface_instances2 = new WeakSet();
    // Find a function definition by any means necessary (unless it is ambiguous)
    getFunction_fn2 = function(key, values, forceUnique) {
      if ((0, index_js_3.isHexString)(key)) {
        const selector = key.toLowerCase();
        for (const fragment of __privateGet(this, _functions2).values()) {
          if (selector === fragment.selector) {
            return fragment;
          }
        }
        return null;
      }
      if (key.indexOf("(") === -1) {
        const matching = [];
        for (const [name, fragment] of __privateGet(this, _functions2)) {
          if (name.split(
            "("
            /* fix:) */
          )[0] === key) {
            matching.push(fragment);
          }
        }
        if (values) {
          const lastValue = values.length > 0 ? values[values.length - 1] : null;
          let valueLength = values.length;
          let allowOptions = true;
          if (typed_js_1.Typed.isTyped(lastValue) && lastValue.type === "overrides") {
            allowOptions = false;
            valueLength--;
          }
          for (let i = matching.length - 1; i >= 0; i--) {
            const inputs = matching[i].inputs.length;
            if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
              matching.splice(i, 1);
            }
          }
          for (let i = matching.length - 1; i >= 0; i--) {
            const inputs = matching[i].inputs;
            for (let j = 0; j < values.length; j++) {
              if (!typed_js_1.Typed.isTyped(values[j])) {
                continue;
              }
              if (j >= inputs.length) {
                if (values[j].type === "overrides") {
                  continue;
                }
                matching.splice(i, 1);
                break;
              }
              if (values[j].type !== inputs[j].baseType) {
                matching.splice(i, 1);
                break;
              }
            }
          }
        }
        if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
          const lastArg = values[values.length - 1];
          if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") {
            matching.splice(0, 1);
          }
        }
        if (matching.length === 0) {
          return null;
        }
        if (matching.length > 1 && forceUnique) {
          const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
          (0, index_js_3.assertArgument)(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
        }
        return matching[0];
      }
      const result = __privateGet(this, _functions2).get(fragments_js_1.FunctionFragment.from(key).format());
      if (result) {
        return result;
      }
      return null;
    };
    // Find an event definition by any means necessary (unless it is ambiguous)
    getEvent_fn2 = function(key, values, forceUnique) {
      if ((0, index_js_3.isHexString)(key)) {
        const eventTopic = key.toLowerCase();
        for (const fragment of __privateGet(this, _events2).values()) {
          if (eventTopic === fragment.topicHash) {
            return fragment;
          }
        }
        return null;
      }
      if (key.indexOf("(") === -1) {
        const matching = [];
        for (const [name, fragment] of __privateGet(this, _events2)) {
          if (name.split(
            "("
            /* fix:) */
          )[0] === key) {
            matching.push(fragment);
          }
        }
        if (values) {
          for (let i = matching.length - 1; i >= 0; i--) {
            if (matching[i].inputs.length < values.length) {
              matching.splice(i, 1);
            }
          }
          for (let i = matching.length - 1; i >= 0; i--) {
            const inputs = matching[i].inputs;
            for (let j = 0; j < values.length; j++) {
              if (!typed_js_1.Typed.isTyped(values[j])) {
                continue;
              }
              if (values[j].type !== inputs[j].baseType) {
                matching.splice(i, 1);
                break;
              }
            }
          }
        }
        if (matching.length === 0) {
          return null;
        }
        if (matching.length > 1 && forceUnique) {
          const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
          (0, index_js_3.assertArgument)(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
        }
        return matching[0];
      }
      const result = __privateGet(this, _events2).get(fragments_js_1.EventFragment.from(key).format());
      if (result) {
        return result;
      }
      return null;
    };
    var Interface3 = _Interface2;
    exports.Interface = Interface3;
  }
});

// node_modules/ethers/lib.commonjs/abi/index.js
var require_abi = __commonJS({
  "node_modules/ethers/lib.commonjs/abi/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Typed = exports.Result = exports.TransactionDescription = exports.LogDescription = exports.ErrorDescription = exports.Interface = exports.Indexed = exports.checkResultErrors = exports.StructFragment = exports.ParamType = exports.NamedFragment = exports.FunctionFragment = exports.Fragment = exports.FallbackFragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.encodeBytes32String = exports.decodeBytes32String = exports.AbiCoder = void 0;
    var abi_coder_js_1 = require_abi_coder();
    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function() {
      return abi_coder_js_1.AbiCoder;
    } });
    var bytes32_js_1 = require_bytes32();
    Object.defineProperty(exports, "decodeBytes32String", { enumerable: true, get: function() {
      return bytes32_js_1.decodeBytes32String;
    } });
    Object.defineProperty(exports, "encodeBytes32String", { enumerable: true, get: function() {
      return bytes32_js_1.encodeBytes32String;
    } });
    var fragments_js_1 = require_fragments();
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function() {
      return fragments_js_1.ConstructorFragment;
    } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function() {
      return fragments_js_1.ErrorFragment;
    } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function() {
      return fragments_js_1.EventFragment;
    } });
    Object.defineProperty(exports, "FallbackFragment", { enumerable: true, get: function() {
      return fragments_js_1.FallbackFragment;
    } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function() {
      return fragments_js_1.Fragment;
    } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function() {
      return fragments_js_1.FunctionFragment;
    } });
    Object.defineProperty(exports, "NamedFragment", { enumerable: true, get: function() {
      return fragments_js_1.NamedFragment;
    } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function() {
      return fragments_js_1.ParamType;
    } });
    Object.defineProperty(exports, "StructFragment", { enumerable: true, get: function() {
      return fragments_js_1.StructFragment;
    } });
    var interface_js_1 = require_interface();
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return interface_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function() {
      return interface_js_1.Indexed;
    } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function() {
      return interface_js_1.Interface;
    } });
    Object.defineProperty(exports, "ErrorDescription", { enumerable: true, get: function() {
      return interface_js_1.ErrorDescription;
    } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function() {
      return interface_js_1.LogDescription;
    } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function() {
      return interface_js_1.TransactionDescription;
    } });
    Object.defineProperty(exports, "Result", { enumerable: true, get: function() {
      return interface_js_1.Result;
    } });
    var typed_js_1 = require_typed();
    Object.defineProperty(exports, "Typed", { enumerable: true, get: function() {
      return typed_js_1.Typed;
    } });
  }
});

// node_modules/ethers/lib.commonjs/providers/provider.js
var require_provider = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.Block = exports.copyRequest = exports.FeeData = void 0;
    var index_js_1 = require_utils();
    var index_js_2 = require_transaction2();
    var BN_012 = BigInt(0);
    function getValue2(value) {
      if (value == null) {
        return null;
      }
      return value;
    }
    function toJson2(value) {
      if (value == null) {
        return null;
      }
      return value.toString();
    }
    var FeeData2 = class {
      /**
       *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
       *  %%maxPriorityFeePerGas%%.
       */
      constructor(gasPrice, maxFeePerGas, maxPriorityFeePerGas) {
        /**
         *  The gas price for legacy networks.
         */
        __publicField(this, "gasPrice");
        /**
         *  The maximum fee to pay per gas.
         *
         *  The base fee per gas is defined by the network and based on
         *  congestion, increasing the cost during times of heavy load
         *  and lowering when less busy.
         *
         *  The actual fee per gas will be the base fee for the block
         *  and the priority fee, up to the max fee per gas.
         *
         *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
         */
        __publicField(this, "maxFeePerGas");
        /**
         *  The additional amout to pay per gas to encourage a validator
         *  to include the transaction.
         *
         *  The purpose of this is to compensate the validator for the
         *  adjusted risk for including a given transaction.
         *
         *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
         */
        __publicField(this, "maxPriorityFeePerGas");
        (0, index_js_1.defineProperties)(this, {
          gasPrice: getValue2(gasPrice),
          maxFeePerGas: getValue2(maxFeePerGas),
          maxPriorityFeePerGas: getValue2(maxPriorityFeePerGas)
        });
      }
      /**
       *  Returns a JSON-friendly value.
       */
      toJSON() {
        const { gasPrice, maxFeePerGas, maxPriorityFeePerGas } = this;
        return {
          _type: "FeeData",
          gasPrice: toJson2(gasPrice),
          maxFeePerGas: toJson2(maxFeePerGas),
          maxPriorityFeePerGas: toJson2(maxPriorityFeePerGas)
        };
      }
    };
    exports.FeeData = FeeData2;
    function copyRequest2(req) {
      const result = {};
      if (req.to) {
        result.to = req.to;
      }
      if (req.from) {
        result.from = req.from;
      }
      if (req.data) {
        result.data = (0, index_js_1.hexlify)(req.data);
      }
      const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
      for (const key of bigIntKeys) {
        if (!(key in req) || req[key] == null) {
          continue;
        }
        result[key] = (0, index_js_1.getBigInt)(req[key], `request.${key}`);
      }
      const numberKeys = "type,nonce".split(/,/);
      for (const key of numberKeys) {
        if (!(key in req) || req[key] == null) {
          continue;
        }
        result[key] = (0, index_js_1.getNumber)(req[key], `request.${key}`);
      }
      if (req.accessList) {
        result.accessList = (0, index_js_2.accessListify)(req.accessList);
      }
      if ("blockTag" in req) {
        result.blockTag = req.blockTag;
      }
      if ("enableCcipRead" in req) {
        result.enableCcipRead = !!req.enableCcipRead;
      }
      if ("customData" in req) {
        result.customData = req.customData;
      }
      if ("blobVersionedHashes" in req && req.blobVersionedHashes) {
        result.blobVersionedHashes = req.blobVersionedHashes.slice();
      }
      if ("kzg" in req) {
        result.kzg = req.kzg;
      }
      if ("blobs" in req && req.blobs) {
        result.blobs = req.blobs.map((b2) => {
          if ((0, index_js_1.isBytesLike)(b2)) {
            return (0, index_js_1.hexlify)(b2);
          }
          return Object.assign({}, b2);
        });
      }
      return result;
    }
    exports.copyRequest = copyRequest2;
    var _transactions;
    var Block2 = class {
      /**
       *  Create a new **Block** object.
       *
       *  This should generally not be necessary as the unless implementing a
       *  low-level library.
       */
      constructor(block, provider) {
        /**
         *  The provider connected to the block used to fetch additional details
         *  if necessary.
         */
        __publicField(this, "provider");
        /**
         *  The block number, sometimes called the block height. This is a
         *  sequential number that is one higher than the parent block.
         */
        __publicField(this, "number");
        /**
         *  The block hash.
         *
         *  This hash includes all properties, so can be safely used to identify
         *  an exact set of block properties.
         */
        __publicField(this, "hash");
        /**
         *  The timestamp for this block, which is the number of seconds since
         *  epoch that this block was included.
         */
        __publicField(this, "timestamp");
        /**
         *  The block hash of the parent block.
         */
        __publicField(this, "parentHash");
        /**
         *  The hash tree root of the parent beacon block for the given
         *  execution block. See [[link-eip-4788]].
         */
        __publicField(this, "parentBeaconBlockRoot");
        /**
         *  The nonce.
         *
         *  On legacy networks, this is the random number inserted which
         *  permitted the difficulty target to be reached.
         */
        __publicField(this, "nonce");
        /**
         *  The difficulty target.
         *
         *  On legacy networks, this is the proof-of-work target required
         *  for a block to meet the protocol rules to be included.
         *
         *  On modern networks, this is a random number arrived at using
         *  randao.  @TODO: Find links?
         */
        __publicField(this, "difficulty");
        /**
         *  The total gas limit for this block.
         */
        __publicField(this, "gasLimit");
        /**
         *  The total gas used in this block.
         */
        __publicField(this, "gasUsed");
        /**
         *  The root hash for the global state after applying changes
         *  in this block.
         */
        __publicField(this, "stateRoot");
        /**
         *  The hash of the transaction receipts trie.
         */
        __publicField(this, "receiptsRoot");
        /**
         *  The total amount of blob gas consumed by the transactions
         *  within the block. See [[link-eip-4844]].
         */
        __publicField(this, "blobGasUsed");
        /**
         *  The running total of blob gas consumed in excess of the
         *  target, prior to the block. See [[link-eip-4844]].
         */
        __publicField(this, "excessBlobGas");
        /**
         *  The miner coinbase address, wihch receives any subsidies for
         *  including this block.
         */
        __publicField(this, "miner");
        /**
         *  The latest RANDAO mix of the post beacon state of
         *  the previous block.
         */
        __publicField(this, "prevRandao");
        /**
         *  Any extra data the validator wished to include.
         */
        __publicField(this, "extraData");
        /**
         *  The base fee per gas that all transactions in this block were
         *  charged.
         *
         *  This adjusts after each block, depending on how congested the network
         *  is.
         */
        __publicField(this, "baseFeePerGas");
        __privateAdd(this, _transactions);
        __privateSet(this, _transactions, block.transactions.map((tx) => {
          if (typeof tx !== "string") {
            return new TransactionResponse2(tx, provider);
          }
          return tx;
        }));
        (0, index_js_1.defineProperties)(this, {
          provider,
          hash: getValue2(block.hash),
          number: block.number,
          timestamp: block.timestamp,
          parentHash: block.parentHash,
          parentBeaconBlockRoot: block.parentBeaconBlockRoot,
          nonce: block.nonce,
          difficulty: block.difficulty,
          gasLimit: block.gasLimit,
          gasUsed: block.gasUsed,
          blobGasUsed: block.blobGasUsed,
          excessBlobGas: block.excessBlobGas,
          miner: block.miner,
          prevRandao: getValue2(block.prevRandao),
          extraData: block.extraData,
          baseFeePerGas: getValue2(block.baseFeePerGas),
          stateRoot: block.stateRoot,
          receiptsRoot: block.receiptsRoot
        });
      }
      /**
       *  Returns the list of transaction hashes, in the order
       *  they were executed within the block.
       */
      get transactions() {
        return __privateGet(this, _transactions).map((tx) => {
          if (typeof tx === "string") {
            return tx;
          }
          return tx.hash;
        });
      }
      /**
       *  Returns the complete transactions, in the order they
       *  were executed within the block.
       *
       *  This is only available for blocks which prefetched
       *  transactions, by passing ``true`` to %%prefetchTxs%%
       *  into [[Provider-getBlock]].
       */
      get prefetchedTransactions() {
        const txs = __privateGet(this, _transactions).slice();
        if (txs.length === 0) {
          return [];
        }
        (0, index_js_1.assert)(typeof txs[0] === "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
          operation: "transactionResponses()"
        });
        return txs;
      }
      /**
       *  Returns a JSON-friendly value.
       */
      toJSON() {
        const { baseFeePerGas, difficulty, extraData, gasLimit, gasUsed, hash: hash2, miner, prevRandao, nonce, number: number2, parentHash, parentBeaconBlockRoot, stateRoot, receiptsRoot, timestamp, transactions } = this;
        return {
          _type: "Block",
          baseFeePerGas: toJson2(baseFeePerGas),
          difficulty: toJson2(difficulty),
          extraData,
          gasLimit: toJson2(gasLimit),
          gasUsed: toJson2(gasUsed),
          blobGasUsed: toJson2(this.blobGasUsed),
          excessBlobGas: toJson2(this.excessBlobGas),
          hash: hash2,
          miner,
          prevRandao,
          nonce,
          number: number2,
          parentHash,
          timestamp,
          parentBeaconBlockRoot,
          stateRoot,
          receiptsRoot,
          transactions
        };
      }
      [Symbol.iterator]() {
        let index = 0;
        const txs = this.transactions;
        return {
          next: () => {
            if (index < this.length) {
              return {
                value: txs[index++],
                done: false
              };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  The number of transactions in this block.
       */
      get length() {
        return __privateGet(this, _transactions).length;
      }
      /**
       *  The [[link-js-date]] this block was included at.
       */
      get date() {
        if (this.timestamp == null) {
          return null;
        }
        return new Date(this.timestamp * 1e3);
      }
      /**
       *  Get the transaction at %%indexe%% within this block.
       */
      async getTransaction(indexOrHash) {
        let tx = void 0;
        if (typeof indexOrHash === "number") {
          tx = __privateGet(this, _transactions)[indexOrHash];
        } else {
          const hash2 = indexOrHash.toLowerCase();
          for (const v of __privateGet(this, _transactions)) {
            if (typeof v === "string") {
              if (v !== hash2) {
                continue;
              }
              tx = v;
              break;
            } else {
              if (v.hash === hash2) {
                continue;
              }
              tx = v;
              break;
            }
          }
        }
        if (tx == null) {
          throw new Error("no such tx");
        }
        if (typeof tx === "string") {
          return await this.provider.getTransaction(tx);
        } else {
          return tx;
        }
      }
      /**
       *  If a **Block** was fetched with a request to include the transactions
       *  this will allow synchronous access to those transactions.
       *
       *  If the transactions were not prefetched, this will throw.
       */
      getPrefetchedTransaction(indexOrHash) {
        const txs = this.prefetchedTransactions;
        if (typeof indexOrHash === "number") {
          return txs[indexOrHash];
        }
        indexOrHash = indexOrHash.toLowerCase();
        for (const tx of txs) {
          if (tx.hash === indexOrHash) {
            return tx;
          }
        }
        (0, index_js_1.assertArgument)(false, "no matching transaction", "indexOrHash", indexOrHash);
      }
      /**
       *  Returns true if this block been mined. This provides a type guard
       *  for all properties on a [[MinedBlock]].
       */
      isMined() {
        return !!this.hash;
      }
      /**
       *  Returns true if this block is an [[link-eip-2930]] block.
       */
      isLondon() {
        return !!this.baseFeePerGas;
      }
      /**
       *  @_ignore:
       */
      orphanedEvent() {
        if (!this.isMined()) {
          throw new Error("");
        }
        return createOrphanedBlockFilter(this);
      }
    };
    _transactions = new WeakMap();
    exports.Block = Block2;
    var Log2 = class {
      /**
       *  @_ignore:
       */
      constructor(log, provider) {
        /**
         *  The provider connected to the log used to fetch additional details
         *  if necessary.
         */
        __publicField(this, "provider");
        /**
         *  The transaction hash of the transaction this log occurred in. Use the
         *  [[Log-getTransaction]] to get the [[TransactionResponse]].
         */
        __publicField(this, "transactionHash");
        /**
         *  The block hash of the block this log occurred in. Use the
         *  [[Log-getBlock]] to get the [[Block]].
         */
        __publicField(this, "blockHash");
        /**
         *  The block number of the block this log occurred in. It is preferred
         *  to use the [[Block-hash]] when fetching the related [[Block]],
         *  since in the case of an orphaned block, the block at that height may
         *  have changed.
         */
        __publicField(this, "blockNumber");
        /**
         *  If the **Log** represents a block that was removed due to an orphaned
         *  block, this will be true.
         *
         *  This can only happen within an orphan event listener.
         */
        __publicField(this, "removed");
        /**
         *  The address of the contract that emitted this log.
         */
        __publicField(this, "address");
        /**
         *  The data included in this log when it was emitted.
         */
        __publicField(this, "data");
        /**
         *  The indexed topics included in this log when it was emitted.
         *
         *  All topics are included in the bloom filters, so they can be
         *  efficiently filtered using the [[Provider-getLogs]] method.
         */
        __publicField(this, "topics");
        /**
         *  The index within the block this log occurred at. This is generally
         *  not useful to developers, but can be used with the various roots
         *  to proof inclusion within a block.
         */
        __publicField(this, "index");
        /**
         *  The index within the transaction of this log.
         */
        __publicField(this, "transactionIndex");
        this.provider = provider;
        const topics = Object.freeze(log.topics.slice());
        (0, index_js_1.defineProperties)(this, {
          transactionHash: log.transactionHash,
          blockHash: log.blockHash,
          blockNumber: log.blockNumber,
          removed: log.removed,
          address: log.address,
          data: log.data,
          topics,
          index: log.index,
          transactionIndex: log.transactionIndex
        });
      }
      /**
       *  Returns a JSON-compatible object.
       */
      toJSON() {
        const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
        return {
          _type: "log",
          address,
          blockHash,
          blockNumber,
          data,
          index,
          removed,
          topics,
          transactionHash,
          transactionIndex
        };
      }
      /**
       *  Returns the block that this log occurred in.
       */
      async getBlock() {
        const block = await this.provider.getBlock(this.blockHash);
        (0, index_js_1.assert)(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
        return block;
      }
      /**
       *  Returns the transaction that this log occurred in.
       */
      async getTransaction() {
        const tx = await this.provider.getTransaction(this.transactionHash);
        (0, index_js_1.assert)(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
        return tx;
      }
      /**
       *  Returns the transaction receipt fot the transaction that this
       *  log occurred in.
       */
      async getTransactionReceipt() {
        const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
        (0, index_js_1.assert)(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
        return receipt;
      }
      /**
       *  @_ignore:
       */
      removedEvent() {
        return createRemovedLogFilter2(this);
      }
    };
    exports.Log = Log2;
    var _logs2;
    var TransactionReceipt2 = class {
      /**
       *  @_ignore:
       */
      constructor(tx, provider) {
        /**
         *  The provider connected to the log used to fetch additional details
         *  if necessary.
         */
        __publicField(this, "provider");
        /**
         *  The address the transaction was sent to.
         */
        __publicField(this, "to");
        /**
         *  The sender of the transaction.
         */
        __publicField(this, "from");
        /**
         *  The address of the contract if the transaction was directly
         *  responsible for deploying one.
         *
         *  This is non-null **only** if the ``to`` is empty and the ``data``
         *  was successfully executed as initcode.
         */
        __publicField(this, "contractAddress");
        /**
         *  The transaction hash.
         */
        __publicField(this, "hash");
        /**
         *  The index of this transaction within the block transactions.
         */
        __publicField(this, "index");
        /**
         *  The block hash of the [[Block]] this transaction was included in.
         */
        __publicField(this, "blockHash");
        /**
         *  The block number of the [[Block]] this transaction was included in.
         */
        __publicField(this, "blockNumber");
        /**
         *  The bloom filter bytes that represent all logs that occurred within
         *  this transaction. This is generally not useful for most developers,
         *  but can be used to validate the included logs.
         */
        __publicField(this, "logsBloom");
        /**
         *  The actual amount of gas used by this transaction.
         *
         *  When creating a transaction, the amount of gas that will be used can
         *  only be approximated, but the sender must pay the gas fee for the
         *  entire gas limit. After the transaction, the difference is refunded.
         */
        __publicField(this, "gasUsed");
        /**
         *  The gas used for BLObs. See [[link-eip-4844]].
         */
        __publicField(this, "blobGasUsed");
        /**
         *  The amount of gas used by all transactions within the block for this
         *  and all transactions with a lower ``index``.
         *
         *  This is generally not useful for developers but can be used to
         *  validate certain aspects of execution.
         */
        __publicField(this, "cumulativeGasUsed");
        /**
         *  The actual gas price used during execution.
         *
         *  Due to the complexity of [[link-eip-1559]] this value can only
         *  be caluclated after the transaction has been mined, snce the base
         *  fee is protocol-enforced.
         */
        __publicField(this, "gasPrice");
        /**
         *  The price paid per BLOB in gas. See [[link-eip-4844]].
         */
        __publicField(this, "blobGasPrice");
        /**
         *  The [[link-eip-2718]] transaction type.
         */
        __publicField(this, "type");
        //readonly byzantium!: boolean;
        /**
         *  The status of this transaction, indicating success (i.e. ``1``) or
         *  a revert (i.e. ``0``).
         *
         *  This is available in post-byzantium blocks, but some backends may
         *  backfill this value.
         */
        __publicField(this, "status");
        /**
         *  The root hash of this transaction.
         *
         *  This is no present and was only included in pre-byzantium blocks, but
         *  could be used to validate certain parts of the receipt.
         */
        __publicField(this, "root");
        __privateAdd(this, _logs2);
        __privateSet(this, _logs2, Object.freeze(tx.logs.map((log) => {
          return new Log2(log, provider);
        })));
        let gasPrice = BN_012;
        if (tx.effectiveGasPrice != null) {
          gasPrice = tx.effectiveGasPrice;
        } else if (tx.gasPrice != null) {
          gasPrice = tx.gasPrice;
        }
        (0, index_js_1.defineProperties)(this, {
          provider,
          to: tx.to,
          from: tx.from,
          contractAddress: tx.contractAddress,
          hash: tx.hash,
          index: tx.index,
          blockHash: tx.blockHash,
          blockNumber: tx.blockNumber,
          logsBloom: tx.logsBloom,
          gasUsed: tx.gasUsed,
          cumulativeGasUsed: tx.cumulativeGasUsed,
          blobGasUsed: tx.blobGasUsed,
          gasPrice,
          blobGasPrice: tx.blobGasPrice,
          type: tx.type,
          //byzantium: tx.byzantium,
          status: tx.status,
          root: tx.root
        });
      }
      /**
       *  The logs for this transaction.
       */
      get logs() {
        return __privateGet(this, _logs2);
      }
      /**
       *  Returns a JSON-compatible representation.
       */
      toJSON() {
        const {
          to,
          from,
          contractAddress,
          hash: hash2,
          index,
          blockHash,
          blockNumber,
          logsBloom,
          logs,
          //byzantium, 
          status,
          root
        } = this;
        return {
          _type: "TransactionReceipt",
          blockHash,
          blockNumber,
          //byzantium, 
          contractAddress,
          cumulativeGasUsed: toJson2(this.cumulativeGasUsed),
          from,
          gasPrice: toJson2(this.gasPrice),
          blobGasUsed: toJson2(this.blobGasUsed),
          blobGasPrice: toJson2(this.blobGasPrice),
          gasUsed: toJson2(this.gasUsed),
          hash: hash2,
          index,
          logs,
          logsBloom,
          root,
          status,
          to
        };
      }
      /**
       *  @_ignore:
       */
      get length() {
        return this.logs.length;
      }
      [Symbol.iterator]() {
        let index = 0;
        return {
          next: () => {
            if (index < this.length) {
              return { value: this.logs[index++], done: false };
            }
            return { value: void 0, done: true };
          }
        };
      }
      /**
       *  The total fee for this transaction, in wei.
       */
      get fee() {
        return this.gasUsed * this.gasPrice;
      }
      /**
       *  Resolves to the block this transaction occurred in.
       */
      async getBlock() {
        const block = await this.provider.getBlock(this.blockHash);
        if (block == null) {
          throw new Error("TODO");
        }
        return block;
      }
      /**
       *  Resolves to the transaction this transaction occurred in.
       */
      async getTransaction() {
        const tx = await this.provider.getTransaction(this.hash);
        if (tx == null) {
          throw new Error("TODO");
        }
        return tx;
      }
      /**
       *  Resolves to the return value of the execution of this transaction.
       *
       *  Support for this feature is limited, as it requires an archive node
       *  with the ``debug_`` or ``trace_`` API enabled.
       */
      async getResult() {
        return await this.provider.getTransactionResult(this.hash);
      }
      /**
       *  Resolves to the number of confirmations this transaction has.
       */
      async confirmations() {
        return await this.provider.getBlockNumber() - this.blockNumber + 1;
      }
      /**
       *  @_ignore:
       */
      removedEvent() {
        return createRemovedTransactionFilter2(this);
      }
      /**
       *  @_ignore:
       */
      reorderedEvent(other) {
        (0, index_js_1.assert)(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
        return createReorderedTransactionFilter2(this, other);
      }
    };
    _logs2 = new WeakMap();
    exports.TransactionReceipt = TransactionReceipt2;
    var _startBlock2;
    var _TransactionResponse2 = class _TransactionResponse2 {
      /**
       *  @_ignore:
       */
      constructor(tx, provider) {
        /**
         *  The provider this is connected to, which will influence how its
         *  methods will resolve its async inspection methods.
         */
        __publicField(this, "provider");
        /**
         *  The block number of the block that this transaction was included in.
         *
         *  This is ``null`` for pending transactions.
         */
        __publicField(this, "blockNumber");
        /**
         *  The blockHash of the block that this transaction was included in.
         *
         *  This is ``null`` for pending transactions.
         */
        __publicField(this, "blockHash");
        /**
         *  The index within the block that this transaction resides at.
         */
        __publicField(this, "index");
        /**
         *  The transaction hash.
         */
        __publicField(this, "hash");
        /**
         *  The [[link-eip-2718]] transaction envelope type. This is
         *  ``0`` for legacy transactions types.
         */
        __publicField(this, "type");
        /**
         *  The receiver of this transaction.
         *
         *  If ``null``, then the transaction is an initcode transaction.
         *  This means the result of executing the [[data]] will be deployed
         *  as a new contract on chain (assuming it does not revert) and the
         *  address may be computed using [[getCreateAddress]].
         */
        __publicField(this, "to");
        /**
         *  The sender of this transaction. It is implicitly computed
         *  from the transaction pre-image hash (as the digest) and the
         *  [[signature]] using ecrecover.
         */
        __publicField(this, "from");
        /**
         *  The nonce, which is used to prevent replay attacks and offer
         *  a method to ensure transactions from a given sender are explicitly
         *  ordered.
         *
         *  When sending a transaction, this must be equal to the number of
         *  transactions ever sent by [[from]].
         */
        __publicField(this, "nonce");
        /**
         *  The maximum units of gas this transaction can consume. If execution
         *  exceeds this, the entries transaction is reverted and the sender
         *  is charged for the full amount, despite not state changes being made.
         */
        __publicField(this, "gasLimit");
        /**
         *  The gas price can have various values, depending on the network.
         *
         *  In modern networks, for transactions that are included this is
         *  the //effective gas price// (the fee per gas that was actually
         *  charged), while for transactions that have not been included yet
         *  is the [[maxFeePerGas]].
         *
         *  For legacy transactions, or transactions on legacy networks, this
         *  is the fee that will be charged per unit of gas the transaction
         *  consumes.
         */
        __publicField(this, "gasPrice");
        /**
         *  The maximum priority fee (per unit of gas) to allow a
         *  validator to charge the sender. This is inclusive of the
         *  [[maxFeeFeePerGas]].
         */
        __publicField(this, "maxPriorityFeePerGas");
        /**
         *  The maximum fee (per unit of gas) to allow this transaction
         *  to charge the sender.
         */
        __publicField(this, "maxFeePerGas");
        /**
         *  The [[link-eip-4844]] max fee per BLOb gas.
         */
        __publicField(this, "maxFeePerBlobGas");
        /**
         *  The data.
         */
        __publicField(this, "data");
        /**
         *  The value, in wei. Use [[formatEther]] to format this value
         *  as ether.
         */
        __publicField(this, "value");
        /**
         *  The chain ID.
         */
        __publicField(this, "chainId");
        /**
         *  The signature.
         */
        __publicField(this, "signature");
        /**
         *  The [[link-eip-2930]] access list for transaction types that
         *  support it, otherwise ``null``.
         */
        __publicField(this, "accessList");
        /**
         *  The [[link-eip-4844]] BLOb versioned hashes.
         */
        __publicField(this, "blobVersionedHashes");
        __privateAdd(this, _startBlock2);
        this.provider = provider;
        this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
        this.blockHash = tx.blockHash != null ? tx.blockHash : null;
        this.hash = tx.hash;
        this.index = tx.index;
        this.type = tx.type;
        this.from = tx.from;
        this.to = tx.to || null;
        this.gasLimit = tx.gasLimit;
        this.nonce = tx.nonce;
        this.data = tx.data;
        this.value = tx.value;
        this.gasPrice = tx.gasPrice;
        this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
        this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
        this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;
        this.chainId = tx.chainId;
        this.signature = tx.signature;
        this.accessList = tx.accessList != null ? tx.accessList : null;
        this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;
        __privateSet(this, _startBlock2, -1);
      }
      /**
       *  Returns a JSON-compatible representation of this transaction.
       */
      toJSON() {
        const { blockNumber, blockHash, index, hash: hash2, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;
        return {
          _type: "TransactionResponse",
          accessList,
          blockNumber,
          blockHash,
          blobVersionedHashes,
          chainId: toJson2(this.chainId),
          data,
          from,
          gasLimit: toJson2(this.gasLimit),
          gasPrice: toJson2(this.gasPrice),
          hash: hash2,
          maxFeePerGas: toJson2(this.maxFeePerGas),
          maxPriorityFeePerGas: toJson2(this.maxPriorityFeePerGas),
          maxFeePerBlobGas: toJson2(this.maxFeePerBlobGas),
          nonce,
          signature,
          to,
          index,
          type,
          value: toJson2(this.value)
        };
      }
      /**
       *  Resolves to the Block that this transaction was included in.
       *
       *  This will return null if the transaction has not been included yet.
       */
      async getBlock() {
        let blockNumber = this.blockNumber;
        if (blockNumber == null) {
          const tx = await this.getTransaction();
          if (tx) {
            blockNumber = tx.blockNumber;
          }
        }
        if (blockNumber == null) {
          return null;
        }
        const block = this.provider.getBlock(blockNumber);
        if (block == null) {
          throw new Error("TODO");
        }
        return block;
      }
      /**
       *  Resolves to this transaction being re-requested from the
       *  provider. This can be used if you have an unmined transaction
       *  and wish to get an up-to-date populated instance.
       */
      async getTransaction() {
        return this.provider.getTransaction(this.hash);
      }
      /**
       *  Resolve to the number of confirmations this transaction has.
       */
      async confirmations() {
        if (this.blockNumber == null) {
          const { tx, blockNumber: blockNumber2 } = await (0, index_js_1.resolveProperties)({
            tx: this.getTransaction(),
            blockNumber: this.provider.getBlockNumber()
          });
          if (tx == null || tx.blockNumber == null) {
            return 0;
          }
          return blockNumber2 - tx.blockNumber + 1;
        }
        const blockNumber = await this.provider.getBlockNumber();
        return blockNumber - this.blockNumber + 1;
      }
      /**
       *  Resolves once this transaction has been mined and has
       *  %%confirms%% blocks including it (default: ``1``) with an
       *  optional %%timeout%%.
       *
       *  This can resolve to ``null`` only if %%confirms%% is ``0``
       *  and the transaction has not been mined, otherwise this will
       *  wait until enough confirmations have completed.
       */
      async wait(_confirms, _timeout2) {
        const confirms = _confirms == null ? 1 : _confirms;
        const timeout = _timeout2 == null ? 0 : _timeout2;
        let startBlock = __privateGet(this, _startBlock2);
        let nextScan = -1;
        let stopScanning = startBlock === -1 ? true : false;
        const checkReplacement = async () => {
          if (stopScanning) {
            return null;
          }
          const { blockNumber, nonce } = await (0, index_js_1.resolveProperties)({
            blockNumber: this.provider.getBlockNumber(),
            nonce: this.provider.getTransactionCount(this.from)
          });
          if (nonce < this.nonce) {
            startBlock = blockNumber;
            return;
          }
          if (stopScanning) {
            return null;
          }
          const mined = await this.getTransaction();
          if (mined && mined.blockNumber != null) {
            return;
          }
          if (nextScan === -1) {
            nextScan = startBlock - 3;
            if (nextScan < __privateGet(this, _startBlock2)) {
              nextScan = __privateGet(this, _startBlock2);
            }
          }
          while (nextScan <= blockNumber) {
            if (stopScanning) {
              return null;
            }
            const block = await this.provider.getBlock(nextScan, true);
            if (block == null) {
              return;
            }
            for (const hash2 of block) {
              if (hash2 === this.hash) {
                return;
              }
            }
            for (let i = 0; i < block.length; i++) {
              const tx = await block.getTransaction(i);
              if (tx.from === this.from && tx.nonce === this.nonce) {
                if (stopScanning) {
                  return null;
                }
                const receipt2 = await this.provider.getTransactionReceipt(tx.hash);
                if (receipt2 == null) {
                  return;
                }
                if (blockNumber - receipt2.blockNumber + 1 < confirms) {
                  return;
                }
                let reason = "replaced";
                if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
                  reason = "repriced";
                } else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_012) {
                  reason = "cancelled";
                }
                (0, index_js_1.assert)(false, "transaction was replaced", "TRANSACTION_REPLACED", {
                  cancelled: reason === "replaced" || reason === "cancelled",
                  reason,
                  replacement: tx.replaceableTransaction(startBlock),
                  hash: tx.hash,
                  receipt: receipt2
                });
              }
            }
            nextScan++;
          }
          return;
        };
        const checkReceipt = (receipt2) => {
          if (receipt2 == null || receipt2.status !== 0) {
            return receipt2;
          }
          (0, index_js_1.assert)(false, "transaction execution reverted", "CALL_EXCEPTION", {
            action: "sendTransaction",
            data: null,
            reason: null,
            invocation: null,
            revert: null,
            transaction: {
              to: receipt2.to,
              from: receipt2.from,
              data: ""
              // @TODO: in v7, split out sendTransaction properties
            },
            receipt: receipt2
          });
        };
        const receipt = await this.provider.getTransactionReceipt(this.hash);
        if (confirms === 0) {
          return checkReceipt(receipt);
        }
        if (receipt) {
          if (await receipt.confirmations() >= confirms) {
            return checkReceipt(receipt);
          }
        } else {
          await checkReplacement();
          if (confirms === 0) {
            return null;
          }
        }
        const waiter = new Promise((resolve, reject) => {
          const cancellers = [];
          const cancel = () => {
            cancellers.forEach((c) => c());
          };
          cancellers.push(() => {
            stopScanning = true;
          });
          if (timeout > 0) {
            const timer = setTimeout(() => {
              cancel();
              reject((0, index_js_1.makeError)("wait for transaction timeout", "TIMEOUT"));
            }, timeout);
            cancellers.push(() => {
              clearTimeout(timer);
            });
          }
          const txListener = async (receipt2) => {
            if (await receipt2.confirmations() >= confirms) {
              cancel();
              try {
                resolve(checkReceipt(receipt2));
              } catch (error) {
                reject(error);
              }
            }
          };
          cancellers.push(() => {
            this.provider.off(this.hash, txListener);
          });
          this.provider.on(this.hash, txListener);
          if (startBlock >= 0) {
            const replaceListener = async () => {
              try {
                await checkReplacement();
              } catch (error) {
                if ((0, index_js_1.isError)(error, "TRANSACTION_REPLACED")) {
                  cancel();
                  reject(error);
                  return;
                }
              }
              if (!stopScanning) {
                this.provider.once("block", replaceListener);
              }
            };
            cancellers.push(() => {
              this.provider.off("block", replaceListener);
            });
            this.provider.once("block", replaceListener);
          }
        });
        return await waiter;
      }
      /**
       *  Returns ``true`` if this transaction has been included.
       *
       *  This is effective only as of the time the TransactionResponse
       *  was instantiated. To get up-to-date information, use
       *  [[getTransaction]].
       *
       *  This provides a Type Guard that this transaction will have
       *  non-null property values for properties that are null for
       *  unmined transactions.
       */
      isMined() {
        return this.blockHash != null;
      }
      /**
       *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
       *  transaction.
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */
      isLegacy() {
        return this.type === 0;
      }
      /**
       *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
       *  transaction. See [[link-eip-2070]].
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */
      isBerlin() {
        return this.type === 1;
      }
      /**
       *  Returns true if the transaction is a London (i.e. ``type == 2``)
       *  transaction. See [[link-eip-1559]].
       *
       *  This provides a Type Guard that this transaction will have
       *  the ``null``-ness for hardfork-specific properties set correctly.
       */
      isLondon() {
        return this.type === 2;
      }
      /**
       *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
       *  transaction. See [[link-eip-4844]].
       */
      isCancun() {
        return this.type === 3;
      }
      /**
       *  Returns a filter which can be used to listen for orphan events
       *  that evict this transaction.
       */
      removedEvent() {
        (0, index_js_1.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
        return createRemovedTransactionFilter2(this);
      }
      /**
       *  Returns a filter which can be used to listen for orphan events
       *  that re-order this event against %%other%%.
       */
      reorderedEvent(other) {
        (0, index_js_1.assert)(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
        (0, index_js_1.assert)(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
        return createReorderedTransactionFilter2(this, other);
      }
      /**
       *  Returns a new TransactionResponse instance which has the ability to
       *  detect (and throw an error) if the transaction is replaced, which
       *  will begin scanning at %%startBlock%%.
       *
       *  This should generally not be used by developers and is intended
       *  primarily for internal use. Setting an incorrect %%startBlock%% can
       *  have devastating performance consequences if used incorrectly.
       */
      replaceableTransaction(startBlock) {
        (0, index_js_1.assertArgument)(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
        const tx = new _TransactionResponse2(this, this.provider);
        __privateSet(tx, _startBlock2, startBlock);
        return tx;
      }
    };
    _startBlock2 = new WeakMap();
    var TransactionResponse2 = _TransactionResponse2;
    exports.TransactionResponse = TransactionResponse2;
    function createOrphanedBlockFilter(block) {
      return { orphan: "drop-block", hash: block.hash, number: block.number };
    }
    function createReorderedTransactionFilter2(tx, other) {
      return { orphan: "reorder-transaction", tx, other };
    }
    function createRemovedTransactionFilter2(tx) {
      return { orphan: "drop-transaction", tx };
    }
    function createRemovedLogFilter2(log) {
      return { orphan: "drop-log", log: {
        transactionHash: log.transactionHash,
        blockHash: log.blockHash,
        blockNumber: log.blockNumber,
        address: log.address,
        data: log.data,
        topics: Object.freeze(log.topics.slice()),
        index: log.index
      } };
    }
  }
});

// node_modules/ethers/lib.commonjs/contract/wrappers.js
var require_wrappers = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/wrappers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContractEventPayload = exports.ContractUnknownEventPayload = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.UndecodedEventLog = exports.EventLog = void 0;
    var provider_js_1 = require_provider();
    var index_js_1 = require_utils();
    var EventLog2 = class extends provider_js_1.Log {
      /**
       * @_ignore:
       */
      constructor(log, iface, fragment) {
        super(log, log.provider);
        /**
         *  The Contract Interface.
         */
        __publicField(this, "interface");
        /**
         *  The matching event.
         */
        __publicField(this, "fragment");
        /**
         *  The parsed arguments passed to the event by ``emit``.
         */
        __publicField(this, "args");
        const args = iface.decodeEventLog(fragment, log.data, log.topics);
        (0, index_js_1.defineProperties)(this, { args, fragment, interface: iface });
      }
      /**
       *  The name of the event.
       */
      get eventName() {
        return this.fragment.name;
      }
      /**
       *  The signature of the event.
       */
      get eventSignature() {
        return this.fragment.format();
      }
    };
    exports.EventLog = EventLog2;
    var UndecodedEventLog2 = class extends provider_js_1.Log {
      /**
       * @_ignore:
       */
      constructor(log, error) {
        super(log, log.provider);
        /**
         *  The error encounted when trying to decode the log.
         */
        __publicField(this, "error");
        (0, index_js_1.defineProperties)(this, { error });
      }
    };
    exports.UndecodedEventLog = UndecodedEventLog2;
    var _iface3;
    var ContractTransactionReceipt2 = class extends provider_js_1.TransactionReceipt {
      /**
       *  @_ignore:
       */
      constructor(iface, provider, tx) {
        super(tx, provider);
        __privateAdd(this, _iface3);
        __privateSet(this, _iface3, iface);
      }
      /**
       *  The parsed logs for any [[Log]] which has a matching event in the
       *  Contract ABI.
       */
      get logs() {
        return super.logs.map((log) => {
          const fragment = log.topics.length ? __privateGet(this, _iface3).getEvent(log.topics[0]) : null;
          if (fragment) {
            try {
              return new EventLog2(log, __privateGet(this, _iface3), fragment);
            } catch (error) {
              return new UndecodedEventLog2(log, error);
            }
          }
          return log;
        });
      }
    };
    _iface3 = new WeakMap();
    exports.ContractTransactionReceipt = ContractTransactionReceipt2;
    var _iface4;
    var ContractTransactionResponse2 = class extends provider_js_1.TransactionResponse {
      /**
       *  @_ignore:
       */
      constructor(iface, provider, tx) {
        super(tx, provider);
        __privateAdd(this, _iface4);
        __privateSet(this, _iface4, iface);
      }
      /**
       *  Resolves once this transaction has been mined and has
       *  %%confirms%% blocks including it (default: ``1``) with an
       *  optional %%timeout%%.
       *
       *  This can resolve to ``null`` only if %%confirms%% is ``0``
       *  and the transaction has not been mined, otherwise this will
       *  wait until enough confirmations have completed.
       */
      async wait(confirms, timeout) {
        const receipt = await super.wait(confirms, timeout);
        if (receipt == null) {
          return null;
        }
        return new ContractTransactionReceipt2(__privateGet(this, _iface4), this.provider, receipt);
      }
    };
    _iface4 = new WeakMap();
    exports.ContractTransactionResponse = ContractTransactionResponse2;
    var ContractUnknownEventPayload2 = class extends index_js_1.EventPayload {
      /**
       *  @_event:
       */
      constructor(contract, listener, filter, log) {
        super(contract, listener, filter);
        /**
         *  The log with no matching events.
         */
        __publicField(this, "log");
        (0, index_js_1.defineProperties)(this, { log });
      }
      /**
       *  Resolves to the block the event occured in.
       */
      async getBlock() {
        return await this.log.getBlock();
      }
      /**
       *  Resolves to the transaction the event occured in.
       */
      async getTransaction() {
        return await this.log.getTransaction();
      }
      /**
       *  Resolves to the transaction receipt the event occured in.
       */
      async getTransactionReceipt() {
        return await this.log.getTransactionReceipt();
      }
    };
    exports.ContractUnknownEventPayload = ContractUnknownEventPayload2;
    var ContractEventPayload2 = class extends ContractUnknownEventPayload2 {
      /**
       *  @_ignore:
       */
      constructor(contract, listener, filter, fragment, _log) {
        super(contract, listener, filter, new EventLog2(_log, contract.interface, fragment));
        const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
        (0, index_js_1.defineProperties)(this, { args, fragment });
      }
      /**
       *  The event name.
       */
      get eventName() {
        return this.fragment.name;
      }
      /**
       *  The event signature.
       */
      get eventSignature() {
        return this.fragment.format();
      }
    };
    exports.ContractEventPayload = ContractEventPayload2;
  }
});

// node_modules/ethers/lib.commonjs/contract/contract.js
var require_contract = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/contract.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Contract = exports.BaseContract = exports.resolveArgs = exports.copyOverrides = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_address2();
    var provider_js_1 = require_provider();
    var index_js_3 = require_utils();
    var wrappers_js_1 = require_wrappers();
    var BN_012 = BigInt(0);
    function canCall2(value) {
      return value && typeof value.call === "function";
    }
    function canEstimate2(value) {
      return value && typeof value.estimateGas === "function";
    }
    function canResolve2(value) {
      return value && typeof value.resolveName === "function";
    }
    function canSend2(value) {
      return value && typeof value.sendTransaction === "function";
    }
    function getResolver2(value) {
      if (value != null) {
        if (canResolve2(value)) {
          return value;
        }
        if (value.provider) {
          return value.provider;
        }
      }
      return void 0;
    }
    var _filter2;
    var PreparedTopicFilter2 = class {
      constructor(contract, fragment, args) {
        __privateAdd(this, _filter2);
        __publicField(this, "fragment");
        (0, index_js_3.defineProperties)(this, { fragment });
        if (fragment.inputs.length < args.length) {
          throw new Error("too many arguments");
        }
        const runner = getRunner2(contract.runner, "resolveName");
        const resolver = canResolve2(runner) ? runner : null;
        __privateSet(this, _filter2, async function() {
          const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
            const arg = args[index];
            if (arg == null) {
              return null;
            }
            return param.walkAsync(args[index], (type, value) => {
              if (type === "address") {
                if (Array.isArray(value)) {
                  return Promise.all(value.map((v) => (0, index_js_2.resolveAddress)(v, resolver)));
                }
                return (0, index_js_2.resolveAddress)(value, resolver);
              }
              return value;
            });
          }));
          return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
        }());
      }
      getTopicFilter() {
        return __privateGet(this, _filter2);
      }
    };
    _filter2 = new WeakMap();
    function getRunner2(value, feature) {
      if (value == null) {
        return null;
      }
      if (typeof value[feature] === "function") {
        return value;
      }
      if (value.provider && typeof value.provider[feature] === "function") {
        return value.provider;
      }
      return null;
    }
    function getProvider2(value) {
      if (value == null) {
        return null;
      }
      return value.provider || null;
    }
    async function copyOverrides2(arg, allowed) {
      const _overrides = index_js_1.Typed.dereference(arg, "overrides");
      (0, index_js_3.assertArgument)(typeof _overrides === "object", "invalid overrides parameter", "overrides", arg);
      const overrides = (0, provider_js_1.copyRequest)(_overrides);
      (0, index_js_3.assertArgument)(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
      (0, index_js_3.assertArgument)(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
      if (overrides.from) {
        overrides.from = overrides.from;
      }
      return overrides;
    }
    exports.copyOverrides = copyOverrides2;
    async function resolveArgs2(_runner, inputs, args) {
      const runner = getRunner2(_runner, "resolveName");
      const resolver = canResolve2(runner) ? runner : null;
      return await Promise.all(inputs.map((param, index) => {
        return param.walkAsync(args[index], (type, value) => {
          value = index_js_1.Typed.dereference(value, type);
          if (type === "address") {
            return (0, index_js_2.resolveAddress)(value, resolver);
          }
          return value;
        });
      }));
    }
    exports.resolveArgs = resolveArgs2;
    function buildWrappedFallback2(contract) {
      const populateTransaction = async function(overrides) {
        const tx = await copyOverrides2(overrides, ["data"]);
        tx.to = await contract.getAddress();
        if (tx.from) {
          tx.from = await (0, index_js_2.resolveAddress)(tx.from, getResolver2(contract.runner));
        }
        const iface = contract.interface;
        const noValue = (0, index_js_3.getBigInt)(tx.value || BN_012, "overrides.value") === BN_012;
        const noData = (tx.data || "0x") === "0x";
        if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {
          (0, index_js_3.assertArgument)(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
        }
        (0, index_js_3.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
        const payable = iface.receive || iface.fallback && iface.fallback.payable;
        (0, index_js_3.assertArgument)(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
        (0, index_js_3.assertArgument)(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
        return tx;
      };
      const staticCall = async function(overrides) {
        const runner = getRunner2(contract.runner, "call");
        (0, index_js_3.assert)(canCall2(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
        const tx = await populateTransaction(overrides);
        try {
          return await runner.call(tx);
        } catch (error) {
          if ((0, index_js_3.isCallException)(error) && error.data) {
            throw contract.interface.makeError(error.data, tx);
          }
          throw error;
        }
      };
      const send = async function(overrides) {
        const runner = contract.runner;
        (0, index_js_3.assert)(canSend2(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
        const tx = await runner.sendTransaction(await populateTransaction(overrides));
        const provider = getProvider2(contract.runner);
        return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);
      };
      const estimateGas = async function(overrides) {
        const runner = getRunner2(contract.runner, "estimateGas");
        (0, index_js_3.assert)(canEstimate2(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
        return await runner.estimateGas(await populateTransaction(overrides));
      };
      const method = async (overrides) => {
        return await send(overrides);
      };
      (0, index_js_3.defineProperties)(method, {
        _contract: contract,
        estimateGas,
        populateTransaction,
        send,
        staticCall
      });
      return method;
    }
    function buildWrappedMethod2(contract, key) {
      const getFragment = function(...args) {
        const fragment = contract.interface.getFunction(key, args);
        (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
          operation: "fragment",
          info: { key, args }
        });
        return fragment;
      };
      const populateTransaction = async function(...args) {
        const fragment = getFragment(...args);
        let overrides = {};
        if (fragment.inputs.length + 1 === args.length) {
          overrides = await copyOverrides2(args.pop());
          if (overrides.from) {
            overrides.from = await (0, index_js_2.resolveAddress)(overrides.from, getResolver2(contract.runner));
          }
        }
        if (fragment.inputs.length !== args.length) {
          throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
        }
        const resolvedArgs = await resolveArgs2(contract.runner, fragment.inputs, args);
        return Object.assign({}, overrides, await (0, index_js_3.resolveProperties)({
          to: contract.getAddress(),
          data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
        }));
      };
      const staticCall = async function(...args) {
        const result = await staticCallResult(...args);
        if (result.length === 1) {
          return result[0];
        }
        return result;
      };
      const send = async function(...args) {
        const runner = contract.runner;
        (0, index_js_3.assert)(canSend2(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
        const tx = await runner.sendTransaction(await populateTransaction(...args));
        const provider = getProvider2(contract.runner);
        return new wrappers_js_1.ContractTransactionResponse(contract.interface, provider, tx);
      };
      const estimateGas = async function(...args) {
        const runner = getRunner2(contract.runner, "estimateGas");
        (0, index_js_3.assert)(canEstimate2(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
        return await runner.estimateGas(await populateTransaction(...args));
      };
      const staticCallResult = async function(...args) {
        const runner = getRunner2(contract.runner, "call");
        (0, index_js_3.assert)(canCall2(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
        const tx = await populateTransaction(...args);
        let result = "0x";
        try {
          result = await runner.call(tx);
        } catch (error) {
          if ((0, index_js_3.isCallException)(error) && error.data) {
            throw contract.interface.makeError(error.data, tx);
          }
          throw error;
        }
        const fragment = getFragment(...args);
        return contract.interface.decodeFunctionResult(fragment, result);
      };
      const method = async (...args) => {
        const fragment = getFragment(...args);
        if (fragment.constant) {
          return await staticCall(...args);
        }
        return await send(...args);
      };
      (0, index_js_3.defineProperties)(method, {
        name: contract.interface.getFunctionName(key),
        _contract: contract,
        _key: key,
        getFragment,
        estimateGas,
        populateTransaction,
        send,
        staticCall,
        staticCallResult
      });
      Object.defineProperty(method, "fragment", {
        configurable: false,
        enumerable: true,
        get: () => {
          const fragment = contract.interface.getFunction(key);
          (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
            operation: "fragment",
            info: { key }
          });
          return fragment;
        }
      });
      return method;
    }
    function buildWrappedEvent2(contract, key) {
      const getFragment = function(...args) {
        const fragment = contract.interface.getEvent(key, args);
        (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
          operation: "fragment",
          info: { key, args }
        });
        return fragment;
      };
      const method = function(...args) {
        return new PreparedTopicFilter2(contract, getFragment(...args), args);
      };
      (0, index_js_3.defineProperties)(method, {
        name: contract.interface.getEventName(key),
        _contract: contract,
        _key: key,
        getFragment
      });
      Object.defineProperty(method, "fragment", {
        configurable: false,
        enumerable: true,
        get: () => {
          const fragment = contract.interface.getEvent(key);
          (0, index_js_3.assert)(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
            operation: "fragment",
            info: { key }
          });
          return fragment;
        }
      });
      return method;
    }
    var internal3 = Symbol.for("_ethersInternal_contract");
    var internalValues2 = /* @__PURE__ */ new WeakMap();
    function setInternal2(contract, values) {
      internalValues2.set(contract[internal3], values);
    }
    function getInternal2(contract) {
      return internalValues2.get(contract[internal3]);
    }
    function isDeferred2(value) {
      return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
    }
    async function getSubInfo2(contract, event) {
      let topics;
      let fragment = null;
      if (Array.isArray(event)) {
        const topicHashify = function(name) {
          if ((0, index_js_3.isHexString)(name, 32)) {
            return name;
          }
          const fragment2 = contract.interface.getEvent(name);
          (0, index_js_3.assertArgument)(fragment2, "unknown fragment", "name", name);
          return fragment2.topicHash;
        };
        topics = event.map((e) => {
          if (e == null) {
            return null;
          }
          if (Array.isArray(e)) {
            return e.map(topicHashify);
          }
          return topicHashify(e);
        });
      } else if (event === "*") {
        topics = [null];
      } else if (typeof event === "string") {
        if ((0, index_js_3.isHexString)(event, 32)) {
          topics = [event];
        } else {
          fragment = contract.interface.getEvent(event);
          (0, index_js_3.assertArgument)(fragment, "unknown fragment", "event", event);
          topics = [fragment.topicHash];
        }
      } else if (isDeferred2(event)) {
        topics = await event.getTopicFilter();
      } else if ("fragment" in event) {
        fragment = event.fragment;
        topics = [fragment.topicHash];
      } else {
        (0, index_js_3.assertArgument)(false, "unknown event name", "event", event);
      }
      topics = topics.map((t) => {
        if (t == null) {
          return null;
        }
        if (Array.isArray(t)) {
          const items = Array.from(new Set(t.map((t2) => t2.toLowerCase())).values());
          if (items.length === 1) {
            return items[0];
          }
          items.sort();
          return items;
        }
        return t.toLowerCase();
      });
      const tag = topics.map((t) => {
        if (t == null) {
          return "null";
        }
        if (Array.isArray(t)) {
          return t.join("|");
        }
        return t;
      }).join("&");
      return { fragment, tag, topics };
    }
    async function hasSub2(contract, event) {
      const { subs } = getInternal2(contract);
      return subs.get((await getSubInfo2(contract, event)).tag) || null;
    }
    async function getSub2(contract, operation, event) {
      const provider = getProvider2(contract.runner);
      (0, index_js_3.assert)(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
      const { fragment, tag, topics } = await getSubInfo2(contract, event);
      const { addr, subs } = getInternal2(contract);
      let sub = subs.get(tag);
      if (!sub) {
        const address = addr ? addr : contract;
        const filter = { address, topics };
        const listener = (log) => {
          let foundFragment = fragment;
          if (foundFragment == null) {
            try {
              foundFragment = contract.interface.getEvent(log.topics[0]);
            } catch (error) {
            }
          }
          if (foundFragment) {
            const _foundFragment = foundFragment;
            const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
            emit2(contract, event, args, (listener2) => {
              return new wrappers_js_1.ContractEventPayload(contract, listener2, event, _foundFragment, log);
            });
          } else {
            emit2(contract, event, [], (listener2) => {
              return new wrappers_js_1.ContractUnknownEventPayload(contract, listener2, event, log);
            });
          }
        };
        let starting = [];
        const start = () => {
          if (starting.length) {
            return;
          }
          starting.push(provider.on(filter, listener));
        };
        const stop = async () => {
          if (starting.length == 0) {
            return;
          }
          let started = starting;
          starting = [];
          await Promise.all(started);
          provider.off(filter, listener);
        };
        sub = { tag, listeners: [], start, stop };
        subs.set(tag, sub);
      }
      return sub;
    }
    var lastEmit2 = Promise.resolve();
    async function _emit2(contract, event, args, payloadFunc) {
      await lastEmit2;
      const sub = await hasSub2(contract, event);
      if (!sub) {
        return false;
      }
      const count = sub.listeners.length;
      sub.listeners = sub.listeners.filter(({ listener, once }) => {
        const passArgs = Array.from(args);
        if (payloadFunc) {
          passArgs.push(payloadFunc(once ? null : listener));
        }
        try {
          listener.call(contract, ...passArgs);
        } catch (error) {
        }
        return !once;
      });
      if (sub.listeners.length === 0) {
        sub.stop();
        getInternal2(contract).subs.delete(sub.tag);
      }
      return count > 0;
    }
    async function emit2(contract, event, args, payloadFunc) {
      try {
        await lastEmit2;
      } catch (error) {
      }
      const resultPromise = _emit2(contract, event, args, payloadFunc);
      lastEmit2 = resultPromise;
      return await resultPromise;
    }
    var passProperties3 = ["then"];
    var _a2;
    _a2 = internal3;
    var _BaseContract2 = class _BaseContract2 {
      /**
       *  Creates a new contract connected to %%target%% with the %%abi%% and
       *  optionally connected to a %%runner%% to perform operations on behalf
       *  of.
       */
      constructor(target, abi, runner, _deployTx) {
        /**
         *  The target to connect to.
         *
         *  This can be an address, ENS name or any [[Addressable]], such as
         *  another contract. To get the resovled address, use the ``getAddress``
         *  method.
         */
        __publicField(this, "target");
        /**
         *  The contract Interface.
         */
        __publicField(this, "interface");
        /**
         *  The connected runner. This is generally a [[Provider]] or a
         *  [[Signer]], which dictates what operations are supported.
         *
         *  For example, a **Contract** connected to a [[Provider]] may
         *  only execute read-only operations.
         */
        __publicField(this, "runner");
        /**
         *  All the Events available on this contract.
         */
        __publicField(this, "filters");
        /**
         *  @_ignore:
         */
        __publicField(this, _a2);
        /**
         *  The fallback or receive function if any.
         */
        __publicField(this, "fallback");
        (0, index_js_3.assertArgument)(typeof target === "string" || (0, index_js_2.isAddressable)(target), "invalid value for Contract target", "target", target);
        if (runner == null) {
          runner = null;
        }
        const iface = index_js_1.Interface.from(abi);
        (0, index_js_3.defineProperties)(this, { target, runner, interface: iface });
        Object.defineProperty(this, internal3, { value: {} });
        let addrPromise;
        let addr = null;
        let deployTx = null;
        if (_deployTx) {
          const provider = getProvider2(runner);
          deployTx = new wrappers_js_1.ContractTransactionResponse(this.interface, provider, _deployTx);
        }
        let subs = /* @__PURE__ */ new Map();
        if (typeof target === "string") {
          if ((0, index_js_3.isHexString)(target)) {
            addr = target;
            addrPromise = Promise.resolve(target);
          } else {
            const resolver = getRunner2(runner, "resolveName");
            if (!canResolve2(resolver)) {
              throw (0, index_js_3.makeError)("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
                operation: "resolveName"
              });
            }
            addrPromise = resolver.resolveName(target).then((addr2) => {
              if (addr2 == null) {
                throw (0, index_js_3.makeError)("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
                  value: target
                });
              }
              getInternal2(this).addr = addr2;
              return addr2;
            });
          }
        } else {
          addrPromise = target.getAddress().then((addr2) => {
            if (addr2 == null) {
              throw new Error("TODO");
            }
            getInternal2(this).addr = addr2;
            return addr2;
          });
        }
        setInternal2(this, { addrPromise, addr, deployTx, subs });
        const filters = new Proxy({}, {
          get: (target2, prop, receiver) => {
            if (typeof prop === "symbol" || passProperties3.indexOf(prop) >= 0) {
              return Reflect.get(target2, prop, receiver);
            }
            try {
              return this.getEvent(prop);
            } catch (error) {
              if (!(0, index_js_3.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") {
                throw error;
              }
            }
            return void 0;
          },
          has: (target2, prop) => {
            if (passProperties3.indexOf(prop) >= 0) {
              return Reflect.has(target2, prop);
            }
            return Reflect.has(target2, prop) || this.interface.hasEvent(String(prop));
          }
        });
        (0, index_js_3.defineProperties)(this, { filters });
        (0, index_js_3.defineProperties)(this, {
          fallback: iface.receive || iface.fallback ? buildWrappedFallback2(this) : null
        });
        return new Proxy(this, {
          get: (target2, prop, receiver) => {
            if (typeof prop === "symbol" || prop in target2 || passProperties3.indexOf(prop) >= 0) {
              return Reflect.get(target2, prop, receiver);
            }
            try {
              return target2.getFunction(prop);
            } catch (error) {
              if (!(0, index_js_3.isError)(error, "INVALID_ARGUMENT") || error.argument !== "key") {
                throw error;
              }
            }
            return void 0;
          },
          has: (target2, prop) => {
            if (typeof prop === "symbol" || prop in target2 || passProperties3.indexOf(prop) >= 0) {
              return Reflect.has(target2, prop);
            }
            return target2.interface.hasFunction(prop);
          }
        });
      }
      /**
       *  Return a new Contract instance with the same target and ABI, but
       *  a different %%runner%%.
       */
      connect(runner) {
        return new _BaseContract2(this.target, this.interface, runner);
      }
      /**
       *  Return a new Contract instance with the same ABI and runner, but
       *  a different %%target%%.
       */
      attach(target) {
        return new _BaseContract2(target, this.interface, this.runner);
      }
      /**
       *  Return the resolved address of this Contract.
       */
      async getAddress() {
        return await getInternal2(this).addrPromise;
      }
      /**
       *  Return the deployed bytecode or null if no bytecode is found.
       */
      async getDeployedCode() {
        const provider = getProvider2(this.runner);
        (0, index_js_3.assert)(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
        const code = await provider.getCode(await this.getAddress());
        if (code === "0x") {
          return null;
        }
        return code;
      }
      /**
       *  Resolve to this Contract once the bytecode has been deployed, or
       *  resolve immediately if already deployed.
       */
      async waitForDeployment() {
        const deployTx = this.deploymentTransaction();
        if (deployTx) {
          await deployTx.wait();
          return this;
        }
        const code = await this.getDeployedCode();
        if (code != null) {
          return this;
        }
        const provider = getProvider2(this.runner);
        (0, index_js_3.assert)(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
        return new Promise((resolve, reject) => {
          const checkCode = async () => {
            try {
              const code2 = await this.getDeployedCode();
              if (code2 != null) {
                return resolve(this);
              }
              provider.once("block", checkCode);
            } catch (error) {
              reject(error);
            }
          };
          checkCode();
        });
      }
      /**
       *  Return the transaction used to deploy this contract.
       *
       *  This is only available if this instance was returned from a
       *  [[ContractFactory]].
       */
      deploymentTransaction() {
        return getInternal2(this).deployTx;
      }
      /**
       *  Return the function for a given name. This is useful when a contract
       *  method name conflicts with a JavaScript name such as ``prototype`` or
       *  when using a Contract programatically.
       */
      getFunction(key) {
        if (typeof key !== "string") {
          key = key.format();
        }
        const func = buildWrappedMethod2(this, key);
        return func;
      }
      /**
       *  Return the event for a given name. This is useful when a contract
       *  event name conflicts with a JavaScript name such as ``prototype`` or
       *  when using a Contract programatically.
       */
      getEvent(key) {
        if (typeof key !== "string") {
          key = key.format();
        }
        return buildWrappedEvent2(this, key);
      }
      /**
       *  @_ignore:
       */
      async queryTransaction(hash2) {
        throw new Error("@TODO");
      }
      /*
          // @TODO: this is a non-backwards compatible change, but will be added
          //        in v7 and in a potential SmartContract class in an upcoming
          //        v6 release
          async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
              const provider = getProvider(this.runner);
              assert(provider, "contract runner does not have a provider",
                  "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
      
              const receipt = await provider.getTransactionReceipt(hash);
              if (receipt == null) { return null; }
      
              return new ContractTransactionReceipt(this.interface, provider, receipt);
          }
          */
      /**
       *  Provide historic access to event data for %%event%% in the range
       *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
       *  inclusive.
       */
      async queryFilter(event, fromBlock, toBlock) {
        if (fromBlock == null) {
          fromBlock = 0;
        }
        if (toBlock == null) {
          toBlock = "latest";
        }
        const { addr, addrPromise } = getInternal2(this);
        const address = addr ? addr : await addrPromise;
        const { fragment, topics } = await getSubInfo2(this, event);
        const filter = { address, topics, fromBlock, toBlock };
        const provider = getProvider2(this.runner);
        (0, index_js_3.assert)(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
        return (await provider.getLogs(filter)).map((log) => {
          let foundFragment = fragment;
          if (foundFragment == null) {
            try {
              foundFragment = this.interface.getEvent(log.topics[0]);
            } catch (error) {
            }
          }
          if (foundFragment) {
            try {
              return new wrappers_js_1.EventLog(log, this.interface, foundFragment);
            } catch (error) {
              return new wrappers_js_1.UndecodedEventLog(log, error);
            }
          }
          return new provider_js_1.Log(log, provider);
        });
      }
      /**
       *  Add an event %%listener%% for the %%event%%.
       */
      async on(event, listener) {
        const sub = await getSub2(this, "on", event);
        sub.listeners.push({ listener, once: false });
        sub.start();
        return this;
      }
      /**
       *  Add an event %%listener%% for the %%event%%, but remove the listener
       *  after it is fired once.
       */
      async once(event, listener) {
        const sub = await getSub2(this, "once", event);
        sub.listeners.push({ listener, once: true });
        sub.start();
        return this;
      }
      /**
       *  Emit an %%event%% calling all listeners with %%args%%.
       *
       *  Resolves to ``true`` if any listeners were called.
       */
      async emit(event, ...args) {
        return await emit2(this, event, args, null);
      }
      /**
       *  Resolves to the number of listeners of %%event%% or the total number
       *  of listeners if unspecified.
       */
      async listenerCount(event) {
        if (event) {
          const sub = await hasSub2(this, event);
          if (!sub) {
            return 0;
          }
          return sub.listeners.length;
        }
        const { subs } = getInternal2(this);
        let total = 0;
        for (const { listeners } of subs.values()) {
          total += listeners.length;
        }
        return total;
      }
      /**
       *  Resolves to the listeners subscribed to %%event%% or all listeners
       *  if unspecified.
       */
      async listeners(event) {
        if (event) {
          const sub = await hasSub2(this, event);
          if (!sub) {
            return [];
          }
          return sub.listeners.map(({ listener }) => listener);
        }
        const { subs } = getInternal2(this);
        let result = [];
        for (const { listeners } of subs.values()) {
          result = result.concat(listeners.map(({ listener }) => listener));
        }
        return result;
      }
      /**
       *  Remove the %%listener%% from the listeners for %%event%% or remove
       *  all listeners if unspecified.
       */
      async off(event, listener) {
        const sub = await hasSub2(this, event);
        if (!sub) {
          return this;
        }
        if (listener) {
          const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
          if (index >= 0) {
            sub.listeners.splice(index, 1);
          }
        }
        if (listener == null || sub.listeners.length === 0) {
          sub.stop();
          getInternal2(this).subs.delete(sub.tag);
        }
        return this;
      }
      /**
       *  Remove all the listeners for %%event%% or remove all listeners if
       *  unspecified.
       */
      async removeAllListeners(event) {
        if (event) {
          const sub = await hasSub2(this, event);
          if (!sub) {
            return this;
          }
          sub.stop();
          getInternal2(this).subs.delete(sub.tag);
        } else {
          const { subs } = getInternal2(this);
          for (const { tag, stop } of subs.values()) {
            stop();
            subs.delete(tag);
          }
        }
        return this;
      }
      /**
       *  Alias for [on].
       */
      async addListener(event, listener) {
        return await this.on(event, listener);
      }
      /**
       *  Alias for [off].
       */
      async removeListener(event, listener) {
        return await this.off(event, listener);
      }
      /**
       *  Create a new Class for the %%abi%%.
       */
      static buildClass(abi) {
        class CustomContract extends _BaseContract2 {
          constructor(address, runner = null) {
            super(address, abi, runner);
          }
        }
        return CustomContract;
      }
      /**
       *  Create a new BaseContract with a specified Interface.
       */
      static from(target, abi, runner) {
        if (runner == null) {
          runner = null;
        }
        const contract = new this(target, abi, runner);
        return contract;
      }
    };
    var BaseContract2 = _BaseContract2;
    exports.BaseContract = BaseContract2;
    function _ContractBase2() {
      return BaseContract2;
    }
    var Contract2 = class extends _ContractBase2() {
    };
    exports.Contract = Contract2;
  }
});

// node_modules/ethers/lib.commonjs/contract/factory.js
var require_factory = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/factory.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContractFactory = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_address2();
    var index_js_3 = require_utils();
    var contract_js_1 = require_contract();
    var ContractFactory2 = class _ContractFactory {
      /**
       *  Create a new **ContractFactory** with %%abi%% and %%bytecode%%,
       *  optionally connected to %%runner%%.
       *
       *  The %%bytecode%% may be the ``bytecode`` property within the
       *  standard Solidity JSON output.
       */
      constructor(abi, bytecode, runner) {
        /**
         *  The Contract Interface.
         */
        __publicField(this, "interface");
        /**
         *  The Contract deployment bytecode. Often called the initcode.
         */
        __publicField(this, "bytecode");
        /**
         *  The ContractRunner to deploy the Contract as.
         */
        __publicField(this, "runner");
        const iface = index_js_1.Interface.from(abi);
        if (bytecode instanceof Uint8Array) {
          bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));
        } else {
          if (typeof bytecode === "object") {
            bytecode = bytecode.object;
          }
          if (!bytecode.startsWith("0x")) {
            bytecode = "0x" + bytecode;
          }
          bytecode = (0, index_js_3.hexlify)((0, index_js_3.getBytes)(bytecode));
        }
        (0, index_js_3.defineProperties)(this, {
          bytecode,
          interface: iface,
          runner: runner || null
        });
      }
      attach(target) {
        return new contract_js_1.BaseContract(target, this.interface, this.runner);
      }
      /**
       *  Resolves to the transaction to deploy the contract, passing %%args%%
       *  into the constructor.
       */
      async getDeployTransaction(...args) {
        let overrides = {};
        const fragment = this.interface.deploy;
        if (fragment.inputs.length + 1 === args.length) {
          overrides = await (0, contract_js_1.copyOverrides)(args.pop());
        }
        if (fragment.inputs.length !== args.length) {
          throw new Error("incorrect number of arguments to constructor");
        }
        const resolvedArgs = await (0, contract_js_1.resolveArgs)(this.runner, fragment.inputs, args);
        const data = (0, index_js_3.concat)([this.bytecode, this.interface.encodeDeploy(resolvedArgs)]);
        return Object.assign({}, overrides, { data });
      }
      /**
       *  Resolves to the Contract deployed by passing %%args%% into the
       *  constructor.
       *
       *  This will resolve to the Contract before it has been deployed to the
       *  network, so the [[BaseContract-waitForDeployment]] should be used before
       *  sending any transactions to it.
       */
      async deploy(...args) {
        const tx = await this.getDeployTransaction(...args);
        (0, index_js_3.assert)(this.runner && typeof this.runner.sendTransaction === "function", "factory runner does not support sending transactions", "UNSUPPORTED_OPERATION", {
          operation: "sendTransaction"
        });
        const sentTx = await this.runner.sendTransaction(tx);
        const address = (0, index_js_2.getCreateAddress)(sentTx);
        return new contract_js_1.BaseContract(address, this.interface, this.runner, sentTx);
      }
      /**
       *  Return a new **ContractFactory** with the same ABI and bytecode,
       *  but connected to %%runner%%.
       */
      connect(runner) {
        return new _ContractFactory(this.interface, this.bytecode, runner);
      }
      /**
       *  Create a new **ContractFactory** from the standard Solidity JSON output.
       */
      static fromSolidity(output2, runner) {
        (0, index_js_3.assertArgument)(output2 != null, "bad compiler output", "output", output2);
        if (typeof output2 === "string") {
          output2 = JSON.parse(output2);
        }
        const abi = output2.abi;
        let bytecode = "";
        if (output2.bytecode) {
          bytecode = output2.bytecode;
        } else if (output2.evm && output2.evm.bytecode) {
          bytecode = output2.evm.bytecode;
        }
        return new this(abi, bytecode, runner);
      }
    };
    exports.ContractFactory = ContractFactory2;
  }
});

// node_modules/ethers/lib.commonjs/contract/index.js
var require_contract2 = __commonJS({
  "node_modules/ethers/lib.commonjs/contract/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UndecodedEventLog = exports.EventLog = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.ContractUnknownEventPayload = exports.ContractEventPayload = exports.ContractFactory = exports.Contract = exports.BaseContract = void 0;
    var contract_js_1 = require_contract();
    Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function() {
      return contract_js_1.BaseContract;
    } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return contract_js_1.Contract;
    } });
    var factory_js_1 = require_factory();
    Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function() {
      return factory_js_1.ContractFactory;
    } });
    var wrappers_js_1 = require_wrappers();
    Object.defineProperty(exports, "ContractEventPayload", { enumerable: true, get: function() {
      return wrappers_js_1.ContractEventPayload;
    } });
    Object.defineProperty(exports, "ContractUnknownEventPayload", { enumerable: true, get: function() {
      return wrappers_js_1.ContractUnknownEventPayload;
    } });
    Object.defineProperty(exports, "ContractTransactionReceipt", { enumerable: true, get: function() {
      return wrappers_js_1.ContractTransactionReceipt;
    } });
    Object.defineProperty(exports, "ContractTransactionResponse", { enumerable: true, get: function() {
      return wrappers_js_1.ContractTransactionResponse;
    } });
    Object.defineProperty(exports, "EventLog", { enumerable: true, get: function() {
      return wrappers_js_1.EventLog;
    } });
    Object.defineProperty(exports, "UndecodedEventLog", { enumerable: true, get: function() {
      return wrappers_js_1.UndecodedEventLog;
    } });
  }
});

// node_modules/ethers/lib.commonjs/providers/ens-resolver.js
var require_ens_resolver = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/ens-resolver.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EnsResolver = exports.BasicMulticoinProviderPlugin = exports.MulticoinProviderPlugin = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_constants();
    var index_js_3 = require_contract2();
    var index_js_4 = require_hash();
    var index_js_5 = require_utils();
    function getIpfsLink(link) {
      if (link.match(/^ipfs:\/\/ipfs\//i)) {
        link = link.substring(12);
      } else if (link.match(/^ipfs:\/\//i)) {
        link = link.substring(7);
      } else {
        (0, index_js_5.assertArgument)(false, "unsupported IPFS format", "link", link);
      }
      return `https://gateway.ipfs.io/ipfs/${link}`;
    }
    var MulticoinProviderPlugin2 = class {
      /**
       *  Creates a new **MulticoinProviderPluing** for %%name%%.
       */
      constructor(name) {
        /**
         *  The name.
         */
        __publicField(this, "name");
        (0, index_js_5.defineProperties)(this, { name });
      }
      connect(proivder) {
        return this;
      }
      /**
       *  Returns ``true`` if %%coinType%% is supported by this plugin.
       */
      supportsCoinType(coinType) {
        return false;
      }
      /**
       *  Resolves to the encoded %%address%% for %%coinType%%.
       */
      async encodeAddress(coinType, address) {
        throw new Error("unsupported coin");
      }
      /**
       *  Resolves to the decoded %%data%% for %%coinType%%.
       */
      async decodeAddress(coinType, data) {
        throw new Error("unsupported coin");
      }
    };
    exports.MulticoinProviderPlugin = MulticoinProviderPlugin2;
    var BasicMulticoinPluginId = "org.ethers.plugins.provider.BasicMulticoin";
    var BasicMulticoinProviderPlugin = class extends MulticoinProviderPlugin2 {
      /**
       *  Creates a new **BasicMulticoinProviderPlugin**.
       */
      constructor() {
        super(BasicMulticoinPluginId);
      }
    };
    exports.BasicMulticoinProviderPlugin = BasicMulticoinProviderPlugin;
    var matcherIpfs2 = new RegExp("^(ipfs)://(.*)$", "i");
    var matchers2 = [
      new RegExp("^(https)://(.*)$", "i"),
      new RegExp("^(data):(.*)$", "i"),
      matcherIpfs2,
      new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
    ];
    var _supports2544, _resolver, _EnsResolver_instances, fetch_fn, _EnsResolver_static, getResolver_fn;
    var _EnsResolver = class _EnsResolver {
      constructor(provider, address, name) {
        __privateAdd(this, _EnsResolver_instances);
        /**
         *  The connected provider.
         */
        __publicField(this, "provider");
        /**
         *  The address of the resolver.
         */
        __publicField(this, "address");
        /**
         *  The name this resolver was resolved against.
         */
        __publicField(this, "name");
        // For EIP-2544 names, the ancestor that provided the resolver
        __privateAdd(this, _supports2544);
        __privateAdd(this, _resolver);
        (0, index_js_5.defineProperties)(this, { provider, address, name });
        __privateSet(this, _supports2544, null);
        __privateSet(this, _resolver, new index_js_3.Contract(address, [
          "function supportsInterface(bytes4) view returns (bool)",
          "function resolve(bytes, bytes) view returns (bytes)",
          "function addr(bytes32) view returns (address)",
          "function addr(bytes32, uint) view returns (bytes)",
          "function text(bytes32, string) view returns (string)",
          "function contenthash(bytes32) view returns (bytes)"
        ], provider));
      }
      /**
       *  Resolves to true if the resolver supports wildcard resolution.
       */
      async supportsWildcard() {
        if (__privateGet(this, _supports2544) == null) {
          __privateSet(this, _supports2544, (async () => {
            try {
              return await __privateGet(this, _resolver).supportsInterface("0x9061b923");
            } catch (error) {
              if ((0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
                return false;
              }
              __privateSet(this, _supports2544, null);
              throw error;
            }
          })());
        }
        return await __privateGet(this, _supports2544);
      }
      /**
       *  Resolves to the address for %%coinType%% or null if the
       *  provided %%coinType%% has not been configured.
       */
      async getAddress(coinType) {
        if (coinType == null) {
          coinType = 60;
        }
        if (coinType === 60) {
          try {
            const result = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "addr(bytes32)");
            if (result == null || result === index_js_2.ZeroAddress) {
              return null;
            }
            return result;
          } catch (error) {
            if ((0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
              return null;
            }
            throw error;
          }
        }
        if (coinType >= 0 && coinType < 2147483648) {
          let ethCoinType = coinType + 2147483648;
          const data2 = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "addr(bytes32,uint)", [ethCoinType]);
          if ((0, index_js_5.isHexString)(data2, 20)) {
            return (0, index_js_1.getAddress)(data2);
          }
        }
        let coinPlugin = null;
        for (const plugin of this.provider.plugins) {
          if (!(plugin instanceof MulticoinProviderPlugin2)) {
            continue;
          }
          if (plugin.supportsCoinType(coinType)) {
            coinPlugin = plugin;
            break;
          }
        }
        if (coinPlugin == null) {
          return null;
        }
        const data = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "addr(bytes32,uint)", [coinType]);
        if (data == null || data === "0x") {
          return null;
        }
        const address = await coinPlugin.decodeAddress(coinType, data);
        if (address != null) {
          return address;
        }
        (0, index_js_5.assert)(false, `invalid coin data`, "UNSUPPORTED_OPERATION", {
          operation: `getAddress(${coinType})`,
          info: { coinType, data }
        });
      }
      /**
       *  Resolves to the EIP-634 text record for %%key%%, or ``null``
       *  if unconfigured.
       */
      async getText(key) {
        const data = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "text(bytes32,string)", [key]);
        if (data == null || data === "0x") {
          return null;
        }
        return data;
      }
      /**
       *  Rsolves to the content-hash or ``null`` if unconfigured.
       */
      async getContentHash() {
        const data = await __privateMethod(this, _EnsResolver_instances, fetch_fn).call(this, "contenthash(bytes32)");
        if (data == null || data === "0x") {
          return null;
        }
        const ipfs = data.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
        if (ipfs) {
          const scheme = ipfs[1] === "e3010170" ? "ipfs" : "ipns";
          const length = parseInt(ipfs[4], 16);
          if (ipfs[5].length === length * 2) {
            return `${scheme}://${(0, index_js_5.encodeBase58)("0x" + ipfs[2])}`;
          }
        }
        const swarm = data.match(/^0xe40101fa011b20([0-9a-f]*)$/);
        if (swarm && swarm[1].length === 64) {
          return `bzz://${swarm[1]}`;
        }
        (0, index_js_5.assert)(false, `invalid or unsupported content hash data`, "UNSUPPORTED_OPERATION", {
          operation: "getContentHash()",
          info: { data }
        });
      }
      /**
       *  Resolves to the avatar url or ``null`` if the avatar is either
       *  unconfigured or incorrectly configured (e.g. references an NFT
       *  not owned by the address).
       *
       *  If diagnosing issues with configurations, the [[_getAvatar]]
       *  method may be useful.
       */
      async getAvatar() {
        const avatar = await this._getAvatar();
        return avatar.url;
      }
      /**
       *  When resolving an avatar, there are many steps involved, such
       *  fetching metadata and possibly validating ownership of an
       *  NFT.
       *
       *  This method can be used to examine each step and the value it
       *  was working from.
       */
      async _getAvatar() {
        const linkage = [{ type: "name", value: this.name }];
        try {
          const avatar = await this.getText("avatar");
          if (avatar == null) {
            linkage.push({ type: "!avatar", value: "" });
            return { url: null, linkage };
          }
          linkage.push({ type: "avatar", value: avatar });
          for (let i = 0; i < matchers2.length; i++) {
            const match = avatar.match(matchers2[i]);
            if (match == null) {
              continue;
            }
            const scheme = match[1].toLowerCase();
            switch (scheme) {
              case "https":
              case "data":
                linkage.push({ type: "url", value: avatar });
                return { linkage, url: avatar };
              case "ipfs": {
                const url = getIpfsLink(avatar);
                linkage.push({ type: "ipfs", value: avatar });
                linkage.push({ type: "url", value: url });
                return { linkage, url };
              }
              case "erc721":
              case "erc1155": {
                const selector = scheme === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
                linkage.push({ type: scheme, value: avatar });
                const owner = await this.getAddress();
                if (owner == null) {
                  linkage.push({ type: "!owner", value: "" });
                  return { url: null, linkage };
                }
                const comps = (match[2] || "").split("/");
                if (comps.length !== 2) {
                  linkage.push({ type: `!${scheme}caip`, value: match[2] || "" });
                  return { url: null, linkage };
                }
                const tokenId = comps[1];
                const contract = new index_js_3.Contract(comps[0], [
                  // ERC-721
                  "function tokenURI(uint) view returns (string)",
                  "function ownerOf(uint) view returns (address)",
                  // ERC-1155
                  "function uri(uint) view returns (string)",
                  "function balanceOf(address, uint256) view returns (uint)"
                ], this.provider);
                if (scheme === "erc721") {
                  const tokenOwner = await contract.ownerOf(tokenId);
                  if (owner !== tokenOwner) {
                    linkage.push({ type: "!owner", value: tokenOwner });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "owner", value: tokenOwner });
                } else if (scheme === "erc1155") {
                  const balance = await contract.balanceOf(owner, tokenId);
                  if (!balance) {
                    linkage.push({ type: "!balance", value: "0" });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "balance", value: balance.toString() });
                }
                let metadataUrl = await contract[selector](tokenId);
                if (metadataUrl == null || metadataUrl === "0x") {
                  linkage.push({ type: "!metadata-url", value: "" });
                  return { url: null, linkage };
                }
                linkage.push({ type: "metadata-url-base", value: metadataUrl });
                if (scheme === "erc1155") {
                  metadataUrl = metadataUrl.replace("{id}", (0, index_js_5.toBeHex)(tokenId, 32).substring(2));
                  linkage.push({ type: "metadata-url-expanded", value: metadataUrl });
                }
                if (metadataUrl.match(/^ipfs:/i)) {
                  metadataUrl = getIpfsLink(metadataUrl);
                }
                linkage.push({ type: "metadata-url", value: metadataUrl });
                let metadata = {};
                const response = await new index_js_5.FetchRequest(metadataUrl).send();
                response.assertOk();
                try {
                  metadata = response.bodyJson;
                } catch (error) {
                  try {
                    linkage.push({ type: "!metadata", value: response.bodyText });
                  } catch (error2) {
                    const bytes3 = response.body;
                    if (bytes3) {
                      linkage.push({ type: "!metadata", value: (0, index_js_5.hexlify)(bytes3) });
                    }
                    return { url: null, linkage };
                  }
                  return { url: null, linkage };
                }
                if (!metadata) {
                  linkage.push({ type: "!metadata", value: "" });
                  return { url: null, linkage };
                }
                linkage.push({ type: "metadata", value: JSON.stringify(metadata) });
                let imageUrl = metadata.image;
                if (typeof imageUrl !== "string") {
                  linkage.push({ type: "!imageUrl", value: "" });
                  return { url: null, linkage };
                }
                if (imageUrl.match(/^(https:\/\/|data:)/i)) {
                } else {
                  const ipfs = imageUrl.match(matcherIpfs2);
                  if (ipfs == null) {
                    linkage.push({ type: "!imageUrl-ipfs", value: imageUrl });
                    return { url: null, linkage };
                  }
                  linkage.push({ type: "imageUrl-ipfs", value: imageUrl });
                  imageUrl = getIpfsLink(imageUrl);
                }
                linkage.push({ type: "url", value: imageUrl });
                return { linkage, url: imageUrl };
              }
            }
          }
        } catch (error) {
        }
        return { linkage, url: null };
      }
      static async getEnsAddress(provider) {
        const network = await provider.getNetwork();
        const ensPlugin = network.getPlugin("org.ethers.plugins.network.Ens");
        (0, index_js_5.assert)(ensPlugin, "network does not support ENS", "UNSUPPORTED_OPERATION", {
          operation: "getEnsAddress",
          info: { network }
        });
        return ensPlugin.address;
      }
      /**
       *  Resolve to the ENS resolver for %%name%% using %%provider%% or
       *  ``null`` if unconfigured.
       */
      static async fromName(provider, name) {
        var _a2;
        let currentName = name;
        while (true) {
          if (currentName === "" || currentName === ".") {
            return null;
          }
          if (name !== "eth" && currentName === "eth") {
            return null;
          }
          const addr = await __privateMethod(_a2 = _EnsResolver, _EnsResolver_static, getResolver_fn).call(_a2, provider, currentName);
          if (addr != null) {
            const resolver = new _EnsResolver(provider, addr, name);
            if (currentName !== name && !await resolver.supportsWildcard()) {
              return null;
            }
            return resolver;
          }
          currentName = currentName.split(".").slice(1).join(".");
        }
      }
    };
    _supports2544 = new WeakMap();
    _resolver = new WeakMap();
    _EnsResolver_instances = new WeakSet();
    fetch_fn = async function(funcName, params) {
      params = (params || []).slice();
      const iface = __privateGet(this, _resolver).interface;
      params.unshift((0, index_js_4.namehash)(this.name));
      let fragment = null;
      if (await this.supportsWildcard()) {
        fragment = iface.getFunction(funcName);
        (0, index_js_5.assert)(fragment, "missing fragment", "UNKNOWN_ERROR", {
          info: { funcName }
        });
        params = [
          (0, index_js_4.dnsEncode)(this.name, 255),
          iface.encodeFunctionData(fragment, params)
        ];
        funcName = "resolve(bytes,bytes)";
      }
      params.push({
        enableCcipRead: true
      });
      try {
        const result = await __privateGet(this, _resolver)[funcName](...params);
        if (fragment) {
          return iface.decodeFunctionResult(fragment, result)[0];
        }
        return result;
      } catch (error) {
        if (!(0, index_js_5.isError)(error, "CALL_EXCEPTION")) {
          throw error;
        }
      }
      return null;
    };
    _EnsResolver_static = new WeakSet();
    getResolver_fn = async function(provider, name) {
      const ensAddr = await _EnsResolver.getEnsAddress(provider);
      try {
        const contract = new index_js_3.Contract(ensAddr, [
          "function resolver(bytes32) view returns (address)"
        ], provider);
        const addr = await contract.resolver((0, index_js_4.namehash)(name), {
          enableCcipRead: true
        });
        if (addr === index_js_2.ZeroAddress) {
          return null;
        }
        return addr;
      } catch (error) {
        throw error;
      }
      return null;
    };
    __privateAdd(_EnsResolver, _EnsResolver_static);
    var EnsResolver2 = _EnsResolver;
    exports.EnsResolver = EnsResolver2;
  }
});

// node_modules/ethers/lib.commonjs/providers/format.js
var require_format = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/format.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatTransactionResponse = exports.formatTransactionReceipt = exports.formatReceiptLog = exports.formatBlock = exports.formatLog = exports.formatUint256 = exports.formatHash = exports.formatData = exports.formatBoolean = exports.object = exports.arrayOf = exports.allowNull = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils();
    var BN_012 = BigInt(0);
    function allowNull2(format, nullValue) {
      return function(value) {
        if (value == null) {
          return nullValue;
        }
        return format(value);
      };
    }
    exports.allowNull = allowNull2;
    function arrayOf2(format, allowNull3) {
      return (array) => {
        if (allowNull3 && array == null) {
          return null;
        }
        if (!Array.isArray(array)) {
          throw new Error("not an array");
        }
        return array.map((i) => format(i));
      };
    }
    exports.arrayOf = arrayOf2;
    function object2(format, altNames) {
      return (value) => {
        const result = {};
        for (const key in format) {
          let srcKey = key;
          if (altNames && key in altNames && !(srcKey in value)) {
            for (const altKey of altNames[key]) {
              if (altKey in value) {
                srcKey = altKey;
                break;
              }
            }
          }
          try {
            const nv = format[key](value[srcKey]);
            if (nv !== void 0) {
              result[key] = nv;
            }
          } catch (error) {
            const message = error instanceof Error ? error.message : "not-an-error";
            (0, index_js_4.assert)(false, `invalid value for value.${key} (${message})`, "BAD_DATA", { value });
          }
        }
        return result;
      };
    }
    exports.object = object2;
    function formatBoolean2(value) {
      switch (value) {
        case true:
        case "true":
          return true;
        case false:
        case "false":
          return false;
      }
      (0, index_js_4.assertArgument)(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
    }
    exports.formatBoolean = formatBoolean2;
    function formatData2(value) {
      (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, true), "invalid data", "value", value);
      return value;
    }
    exports.formatData = formatData2;
    function formatHash2(value) {
      (0, index_js_4.assertArgument)((0, index_js_4.isHexString)(value, 32), "invalid hash", "value", value);
      return value;
    }
    exports.formatHash = formatHash2;
    function formatUint256(value) {
      if (!(0, index_js_4.isHexString)(value)) {
        throw new Error("invalid uint256");
      }
      return (0, index_js_4.zeroPadValue)(value, 32);
    }
    exports.formatUint256 = formatUint256;
    var _formatLog2 = object2({
      address: index_js_1.getAddress,
      blockHash: formatHash2,
      blockNumber: index_js_4.getNumber,
      data: formatData2,
      index: index_js_4.getNumber,
      removed: allowNull2(formatBoolean2, false),
      topics: arrayOf2(formatHash2),
      transactionHash: formatHash2,
      transactionIndex: index_js_4.getNumber
    }, {
      index: ["logIndex"]
    });
    function formatLog2(value) {
      return _formatLog2(value);
    }
    exports.formatLog = formatLog2;
    var _formatBlock2 = object2({
      hash: allowNull2(formatHash2),
      parentHash: formatHash2,
      parentBeaconBlockRoot: allowNull2(formatHash2, null),
      number: index_js_4.getNumber,
      timestamp: index_js_4.getNumber,
      nonce: allowNull2(formatData2),
      difficulty: index_js_4.getBigInt,
      gasLimit: index_js_4.getBigInt,
      gasUsed: index_js_4.getBigInt,
      stateRoot: allowNull2(formatHash2, null),
      receiptsRoot: allowNull2(formatHash2, null),
      blobGasUsed: allowNull2(index_js_4.getBigInt, null),
      excessBlobGas: allowNull2(index_js_4.getBigInt, null),
      miner: allowNull2(index_js_1.getAddress),
      prevRandao: allowNull2(formatHash2, null),
      extraData: formatData2,
      baseFeePerGas: allowNull2(index_js_4.getBigInt)
    }, {
      prevRandao: ["mixHash"]
    });
    function formatBlock2(value) {
      const result = _formatBlock2(value);
      result.transactions = value.transactions.map((tx) => {
        if (typeof tx === "string") {
          return tx;
        }
        return formatTransactionResponse2(tx);
      });
      return result;
    }
    exports.formatBlock = formatBlock2;
    var _formatReceiptLog2 = object2({
      transactionIndex: index_js_4.getNumber,
      blockNumber: index_js_4.getNumber,
      transactionHash: formatHash2,
      address: index_js_1.getAddress,
      topics: arrayOf2(formatHash2),
      data: formatData2,
      index: index_js_4.getNumber,
      blockHash: formatHash2
    }, {
      index: ["logIndex"]
    });
    function formatReceiptLog2(value) {
      return _formatReceiptLog2(value);
    }
    exports.formatReceiptLog = formatReceiptLog2;
    var _formatTransactionReceipt2 = object2({
      to: allowNull2(index_js_1.getAddress, null),
      from: allowNull2(index_js_1.getAddress, null),
      contractAddress: allowNull2(index_js_1.getAddress, null),
      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
      index: index_js_4.getNumber,
      root: allowNull2(index_js_4.hexlify),
      gasUsed: index_js_4.getBigInt,
      blobGasUsed: allowNull2(index_js_4.getBigInt, null),
      logsBloom: allowNull2(formatData2),
      blockHash: formatHash2,
      hash: formatHash2,
      logs: arrayOf2(formatReceiptLog2),
      blockNumber: index_js_4.getNumber,
      //confirmations: allowNull(getNumber, null),
      cumulativeGasUsed: index_js_4.getBigInt,
      effectiveGasPrice: allowNull2(index_js_4.getBigInt),
      blobGasPrice: allowNull2(index_js_4.getBigInt, null),
      status: allowNull2(index_js_4.getNumber),
      type: allowNull2(index_js_4.getNumber, 0)
    }, {
      effectiveGasPrice: ["gasPrice"],
      hash: ["transactionHash"],
      index: ["transactionIndex"]
    });
    function formatTransactionReceipt2(value) {
      return _formatTransactionReceipt2(value);
    }
    exports.formatTransactionReceipt = formatTransactionReceipt2;
    function formatTransactionResponse2(value) {
      if (value.to && (0, index_js_4.getBigInt)(value.to) === BN_012) {
        value.to = "0x0000000000000000000000000000000000000000";
      }
      const result = object2({
        hash: formatHash2,
        // Some nodes do not return this, usually test nodes (like Ganache)
        index: allowNull2(index_js_4.getNumber, void 0),
        type: (value2) => {
          if (value2 === "0x" || value2 == null) {
            return 0;
          }
          return (0, index_js_4.getNumber)(value2);
        },
        accessList: allowNull2(index_js_3.accessListify, null),
        blobVersionedHashes: allowNull2(arrayOf2(formatHash2, true), null),
        blockHash: allowNull2(formatHash2, null),
        blockNumber: allowNull2(index_js_4.getNumber, null),
        transactionIndex: allowNull2(index_js_4.getNumber, null),
        from: index_js_1.getAddress,
        // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
        gasPrice: allowNull2(index_js_4.getBigInt),
        maxPriorityFeePerGas: allowNull2(index_js_4.getBigInt),
        maxFeePerGas: allowNull2(index_js_4.getBigInt),
        maxFeePerBlobGas: allowNull2(index_js_4.getBigInt, null),
        gasLimit: index_js_4.getBigInt,
        to: allowNull2(index_js_1.getAddress, null),
        value: index_js_4.getBigInt,
        nonce: index_js_4.getNumber,
        data: formatData2,
        creates: allowNull2(index_js_1.getAddress, null),
        chainId: allowNull2(index_js_4.getBigInt, null)
      }, {
        data: ["input"],
        gasLimit: ["gas"],
        index: ["transactionIndex"]
      })(value);
      if (result.to == null && result.creates == null) {
        result.creates = (0, index_js_1.getCreateAddress)(result);
      }
      if ((value.type === 1 || value.type === 2) && value.accessList == null) {
        result.accessList = [];
      }
      if (value.signature) {
        result.signature = index_js_2.Signature.from(value.signature);
      } else {
        result.signature = index_js_2.Signature.from(value);
      }
      if (result.chainId == null) {
        const chainId = result.signature.legacyChainId;
        if (chainId != null) {
          result.chainId = chainId;
        }
      }
      if (result.blockHash && (0, index_js_4.getBigInt)(result.blockHash) === BN_012) {
        result.blockHash = null;
      }
      return result;
    }
    exports.formatTransactionResponse = formatTransactionResponse2;
  }
});

// node_modules/ethers/lib.commonjs/providers/plugins-network.js
var require_plugins_network = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/plugins-network.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = exports.EnsPlugin = exports.GasCostPlugin = exports.NetworkPlugin = void 0;
    var properties_js_1 = require_properties();
    var index_js_1 = require_utils();
    var EnsAddress = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
    var NetworkPlugin2 = class _NetworkPlugin {
      /**
       *  Creates a new **NetworkPlugin**.
       */
      constructor(name) {
        /**
         *  The name of the plugin.
         *
         *  It is recommended to use reverse-domain-notation, which permits
         *  unique names with a known authority as well as hierarchal entries.
         */
        __publicField(this, "name");
        (0, properties_js_1.defineProperties)(this, { name });
      }
      /**
       *  Creates a copy of this plugin.
       */
      clone() {
        return new _NetworkPlugin(this.name);
      }
    };
    exports.NetworkPlugin = NetworkPlugin2;
    var GasCostPlugin2 = class _GasCostPlugin extends NetworkPlugin2 {
      /**
       *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
       *  latest block or another GasCostPlugin supercedes that block number,
       *  with the associated %%costs%%.
       */
      constructor(effectiveBlock, costs) {
        if (effectiveBlock == null) {
          effectiveBlock = 0;
        }
        super(`org.ethers.network.plugins.GasCost#${effectiveBlock || 0}`);
        /**
         *  The block number to treat these values as valid from.
         *
         *  This allows a hardfork to have updated values included as well as
         *  mulutiple hardforks to be supported.
         */
        __publicField(this, "effectiveBlock");
        /**
         *  The transactions base fee.
         */
        __publicField(this, "txBase");
        /**
         *  The fee for creating a new account.
         */
        __publicField(this, "txCreate");
        /**
         *  The fee per zero-byte in the data.
         */
        __publicField(this, "txDataZero");
        /**
         *  The fee per non-zero-byte in the data.
         */
        __publicField(this, "txDataNonzero");
        /**
         *  The fee per storage key in the [[link-eip-2930]] access list.
         */
        __publicField(this, "txAccessListStorageKey");
        /**
         *  The fee per address in the [[link-eip-2930]] access list.
         */
        __publicField(this, "txAccessListAddress");
        const props = { effectiveBlock };
        function set(name, nullish) {
          let value = (costs || {})[name];
          if (value == null) {
            value = nullish;
          }
          (0, index_js_1.assertArgument)(typeof value === "number", `invalud value for ${name}`, "costs", costs);
          props[name] = value;
        }
        set("txBase", 21e3);
        set("txCreate", 32e3);
        set("txDataZero", 4);
        set("txDataNonzero", 16);
        set("txAccessListStorageKey", 1900);
        set("txAccessListAddress", 2400);
        (0, properties_js_1.defineProperties)(this, props);
      }
      clone() {
        return new _GasCostPlugin(this.effectiveBlock, this);
      }
    };
    exports.GasCostPlugin = GasCostPlugin2;
    var EnsPlugin2 = class _EnsPlugin extends NetworkPlugin2 {
      /**
       *  Creates a new **EnsPlugin** connected to %%address%% on the
       *  %%targetNetwork%%. The default ENS address and mainnet is used
       *  if unspecified.
       */
      constructor(address, targetNetwork) {
        super("org.ethers.plugins.network.Ens");
        /**
         *  The ENS Registrty Contract address.
         */
        __publicField(this, "address");
        /**
         *  The chain ID that the ENS contract lives on.
         */
        __publicField(this, "targetNetwork");
        (0, properties_js_1.defineProperties)(this, {
          address: address || EnsAddress,
          targetNetwork: targetNetwork == null ? 1 : targetNetwork
        });
      }
      clone() {
        return new _EnsPlugin(this.address, this.targetNetwork);
      }
    };
    exports.EnsPlugin = EnsPlugin2;
    var _feeDataFunc;
    var _FeeDataNetworkPlugin = class _FeeDataNetworkPlugin extends NetworkPlugin2 {
      /**
       *  Creates a new **FeeDataNetworkPlugin**.
       */
      constructor(feeDataFunc) {
        super("org.ethers.plugins.network.FeeData");
        __privateAdd(this, _feeDataFunc);
        __privateSet(this, _feeDataFunc, feeDataFunc);
      }
      /**
       *  The fee data function provided to the constructor.
       */
      get feeDataFunc() {
        return __privateGet(this, _feeDataFunc);
      }
      /**
       *  Resolves to the fee data.
       */
      async getFeeData(provider) {
        return await __privateGet(this, _feeDataFunc).call(this, provider);
      }
      clone() {
        return new _FeeDataNetworkPlugin(__privateGet(this, _feeDataFunc));
      }
    };
    _feeDataFunc = new WeakMap();
    var FeeDataNetworkPlugin2 = _FeeDataNetworkPlugin;
    exports.FeeDataNetworkPlugin = FeeDataNetworkPlugin2;
    var _url2, _processFunc;
    var FetchUrlFeeDataNetworkPlugin2 = class extends NetworkPlugin2 {
      /**
       *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
       *  be used when computing the fee data for the network.
       */
      constructor(url, processFunc) {
        super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
        __privateAdd(this, _url2);
        __privateAdd(this, _processFunc);
        __privateSet(this, _url2, url);
        __privateSet(this, _processFunc, processFunc);
      }
      /**
       *  The URL to initialize the FetchRequest with in %%processFunc%%.
       */
      get url() {
        return __privateGet(this, _url2);
      }
      /**
       *  The callback to use when computing the FeeData.
       */
      get processFunc() {
        return __privateGet(this, _processFunc);
      }
      // We are immutable, so we can serve as our own clone
      clone() {
        return this;
      }
    };
    _url2 = new WeakMap();
    _processFunc = new WeakMap();
    exports.FetchUrlFeeDataNetworkPlugin = FetchUrlFeeDataNetworkPlugin2;
  }
});

// node_modules/ethers/lib.commonjs/providers/network.js
var require_network = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/network.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Network = void 0;
    var index_js_1 = require_transaction2();
    var index_js_2 = require_utils();
    var plugins_network_js_1 = require_plugins_network();
    var Networks = /* @__PURE__ */ new Map();
    var _name, _chainId, _plugins;
    var _Network = class _Network {
      /**
       *  Creates a new **Network** for %%name%% and %%chainId%%.
       */
      constructor(name, chainId) {
        __privateAdd(this, _name);
        __privateAdd(this, _chainId);
        __privateAdd(this, _plugins);
        __privateSet(this, _name, name);
        __privateSet(this, _chainId, (0, index_js_2.getBigInt)(chainId));
        __privateSet(this, _plugins, /* @__PURE__ */ new Map());
      }
      /**
       *  Returns a JSON-compatible representation of a Network.
       */
      toJSON() {
        return { name: this.name, chainId: String(this.chainId) };
      }
      /**
       *  The network common name.
       *
       *  This is the canonical name, as networks migh have multiple
       *  names.
       */
      get name() {
        return __privateGet(this, _name);
      }
      set name(value) {
        __privateSet(this, _name, value);
      }
      /**
       *  The network chain ID.
       */
      get chainId() {
        return __privateGet(this, _chainId);
      }
      set chainId(value) {
        __privateSet(this, _chainId, (0, index_js_2.getBigInt)(value, "chainId"));
      }
      /**
       *  Returns true if %%other%% matches this network. Any chain ID
       *  must match, and if no chain ID is present, the name must match.
       *
       *  This method does not currently check for additional properties,
       *  such as ENS address or plug-in compatibility.
       */
      matches(other) {
        if (other == null) {
          return false;
        }
        if (typeof other === "string") {
          try {
            return this.chainId === (0, index_js_2.getBigInt)(other);
          } catch (error) {
          }
          return this.name === other;
        }
        if (typeof other === "number" || typeof other === "bigint") {
          try {
            return this.chainId === (0, index_js_2.getBigInt)(other);
          } catch (error) {
          }
          return false;
        }
        if (typeof other === "object") {
          if (other.chainId != null) {
            try {
              return this.chainId === (0, index_js_2.getBigInt)(other.chainId);
            } catch (error) {
            }
            return false;
          }
          if (other.name != null) {
            return this.name === other.name;
          }
          return false;
        }
        return false;
      }
      /**
       *  Returns the list of plugins currently attached to this Network.
       */
      get plugins() {
        return Array.from(__privateGet(this, _plugins).values());
      }
      /**
       *  Attach a new %%plugin%% to this Network. The network name
       *  must be unique, excluding any fragment.
       */
      attachPlugin(plugin) {
        if (__privateGet(this, _plugins).get(plugin.name)) {
          throw new Error(`cannot replace existing plugin: ${plugin.name} `);
        }
        __privateGet(this, _plugins).set(plugin.name, plugin.clone());
        return this;
      }
      /**
       *  Return the plugin, if any, matching %%name%% exactly. Plugins
       *  with fragments will not be returned unless %%name%% includes
       *  a fragment.
       */
      getPlugin(name) {
        return __privateGet(this, _plugins).get(name) || null;
      }
      /**
       *  Gets a list of all plugins that match %%name%%, with otr without
       *  a fragment.
       */
      getPlugins(basename) {
        return this.plugins.filter((p) => p.name.split("#")[0] === basename);
      }
      /**
       *  Create a copy of this Network.
       */
      clone() {
        const clone = new _Network(this.name, this.chainId);
        this.plugins.forEach((plugin) => {
          clone.attachPlugin(plugin.clone());
        });
        return clone;
      }
      /**
       *  Compute the intrinsic gas required for a transaction.
       *
       *  A GasCostPlugin can be attached to override the default
       *  values.
       */
      computeIntrinsicGas(tx) {
        const costs = this.getPlugin("org.ethers.plugins.network.GasCost") || new plugins_network_js_1.GasCostPlugin();
        let gas = costs.txBase;
        if (tx.to == null) {
          gas += costs.txCreate;
        }
        if (tx.data) {
          for (let i = 2; i < tx.data.length; i += 2) {
            if (tx.data.substring(i, i + 2) === "00") {
              gas += costs.txDataZero;
            } else {
              gas += costs.txDataNonzero;
            }
          }
        }
        if (tx.accessList) {
          const accessList = (0, index_js_1.accessListify)(tx.accessList);
          for (const addr in accessList) {
            gas += costs.txAccessListAddress + costs.txAccessListStorageKey * accessList[addr].storageKeys.length;
          }
        }
        return gas;
      }
      /**
       *  Returns a new Network for the %%network%% name or chainId.
       */
      static from(network) {
        injectCommonNetworks();
        if (network == null) {
          return _Network.from("mainnet");
        }
        if (typeof network === "number") {
          network = BigInt(network);
        }
        if (typeof network === "string" || typeof network === "bigint") {
          const networkFunc = Networks.get(network);
          if (networkFunc) {
            return networkFunc();
          }
          if (typeof network === "bigint") {
            return new _Network("unknown", network);
          }
          (0, index_js_2.assertArgument)(false, "unknown network", "network", network);
        }
        if (typeof network.clone === "function") {
          const clone = network.clone();
          return clone;
        }
        if (typeof network === "object") {
          (0, index_js_2.assertArgument)(typeof network.name === "string" && typeof network.chainId === "number", "invalid network object name or chainId", "network", network);
          const custom = new _Network(network.name, network.chainId);
          if (network.ensAddress || network.ensNetwork != null) {
            custom.attachPlugin(new plugins_network_js_1.EnsPlugin(network.ensAddress, network.ensNetwork));
          }
          return custom;
        }
        (0, index_js_2.assertArgument)(false, "invalid network", "network", network);
      }
      /**
       *  Register %%nameOrChainId%% with a function which returns
       *  an instance of a Network representing that chain.
       */
      static register(nameOrChainId, networkFunc) {
        if (typeof nameOrChainId === "number") {
          nameOrChainId = BigInt(nameOrChainId);
        }
        const existing = Networks.get(nameOrChainId);
        if (existing) {
          (0, index_js_2.assertArgument)(false, `conflicting network for ${JSON.stringify(existing.name)}`, "nameOrChainId", nameOrChainId);
        }
        Networks.set(nameOrChainId, networkFunc);
      }
    };
    _name = new WeakMap();
    _chainId = new WeakMap();
    _plugins = new WeakMap();
    var Network2 = _Network;
    exports.Network = Network2;
    function parseUnits2(_value, decimals) {
      const value = String(_value);
      if (!value.match(/^[0-9.]+$/)) {
        throw new Error(`invalid gwei value: ${_value}`);
      }
      const comps = value.split(".");
      if (comps.length === 1) {
        comps.push("");
      }
      if (comps.length !== 2) {
        throw new Error(`invalid gwei value: ${_value}`);
      }
      while (comps[1].length < decimals) {
        comps[1] += "0";
      }
      if (comps[1].length > 9) {
        let frac = BigInt(comps[1].substring(0, 9));
        if (!comps[1].substring(9).match(/^0+$/)) {
          frac++;
        }
        comps[1] = frac.toString();
      }
      return BigInt(comps[0] + comps[1]);
    }
    function getGasStationPlugin(url) {
      return new plugins_network_js_1.FetchUrlFeeDataNetworkPlugin(url, async (fetchFeeData, provider, request) => {
        request.setHeader("User-Agent", "ethers");
        let response;
        try {
          const [_response, _feeData] = await Promise.all([
            request.send(),
            fetchFeeData()
          ]);
          response = _response;
          const payload = response.bodyJson.standard;
          const feeData = {
            gasPrice: _feeData.gasPrice,
            maxFeePerGas: parseUnits2(payload.maxFee, 9),
            maxPriorityFeePerGas: parseUnits2(payload.maxPriorityFee, 9)
          };
          return feeData;
        } catch (error) {
          (0, index_js_2.assert)(false, `error encountered with polygon gas station (${JSON.stringify(request.url)})`, "SERVER_ERROR", { request, response, error });
        }
      });
    }
    var injected = false;
    function injectCommonNetworks() {
      if (injected) {
        return;
      }
      injected = true;
      function registerEth(name, chainId, options) {
        const func = function() {
          const network = new Network2(name, chainId);
          if (options.ensNetwork != null) {
            network.attachPlugin(new plugins_network_js_1.EnsPlugin(null, options.ensNetwork));
          }
          network.attachPlugin(new plugins_network_js_1.GasCostPlugin());
          (options.plugins || []).forEach((plugin) => {
            network.attachPlugin(plugin);
          });
          return network;
        };
        Network2.register(name, func);
        Network2.register(chainId, func);
        if (options.altNames) {
          options.altNames.forEach((name2) => {
            Network2.register(name2, func);
          });
        }
      }
      registerEth("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] });
      registerEth("ropsten", 3, { ensNetwork: 3 });
      registerEth("rinkeby", 4, { ensNetwork: 4 });
      registerEth("goerli", 5, { ensNetwork: 5 });
      registerEth("kovan", 42, { ensNetwork: 42 });
      registerEth("sepolia", 11155111, { ensNetwork: 11155111 });
      registerEth("holesky", 17e3, { ensNetwork: 17e3 });
      registerEth("classic", 61, {});
      registerEth("classicKotti", 6, {});
      registerEth("arbitrum", 42161, {
        ensNetwork: 1
      });
      registerEth("arbitrum-goerli", 421613, {});
      registerEth("arbitrum-sepolia", 421614, {});
      registerEth("base", 8453, { ensNetwork: 1 });
      registerEth("base-goerli", 84531, {});
      registerEth("base-sepolia", 84532, {});
      registerEth("bnb", 56, { ensNetwork: 1 });
      registerEth("bnbt", 97, {});
      registerEth("linea", 59144, { ensNetwork: 1 });
      registerEth("linea-goerli", 59140, {});
      registerEth("linea-sepolia", 59141, {});
      registerEth("matic", 137, {
        ensNetwork: 1,
        plugins: [
          getGasStationPlugin("https://gasstation.polygon.technology/v2")
        ]
      });
      registerEth("matic-amoy", 80002, {});
      registerEth("matic-mumbai", 80001, {
        altNames: ["maticMumbai", "maticmum"],
        plugins: [
          getGasStationPlugin("https://gasstation-testnet.polygon.technology/v2")
        ]
      });
      registerEth("optimism", 10, {
        ensNetwork: 1,
        plugins: []
      });
      registerEth("optimism-goerli", 420, {});
      registerEth("optimism-sepolia", 11155420, {});
      registerEth("xdai", 100, { ensNetwork: 1 });
    }
  }
});

// node_modules/ethers/lib.commonjs/providers/subscriber-polling.js
var require_subscriber_polling = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/subscriber-polling.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PollingEventSubscriber = exports.PollingTransactionSubscriber = exports.PollingOrphanSubscriber = exports.PollingBlockTagSubscriber = exports.OnBlockSubscriber = exports.PollingBlockSubscriber = exports.getPollingSubscriber = void 0;
    var index_js_1 = require_utils();
    function copy(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    function getPollingSubscriber(provider, event) {
      if (event === "block") {
        return new PollingBlockSubscriber2(provider);
      }
      if ((0, index_js_1.isHexString)(event, 32)) {
        return new PollingTransactionSubscriber2(provider, event);
      }
      (0, index_js_1.assert)(false, "unsupported polling event", "UNSUPPORTED_OPERATION", {
        operation: "getPollingSubscriber",
        info: { event }
      });
    }
    exports.getPollingSubscriber = getPollingSubscriber;
    var _provider, _poller, _interval, _blockNumber, _PollingBlockSubscriber_instances, poll_fn;
    var PollingBlockSubscriber2 = class {
      /**
       *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
       */
      constructor(provider) {
        __privateAdd(this, _PollingBlockSubscriber_instances);
        __privateAdd(this, _provider);
        __privateAdd(this, _poller);
        __privateAdd(this, _interval);
        // The most recent block we have scanned for events. The value -2
        // indicates we still need to fetch an initial block number
        __privateAdd(this, _blockNumber);
        __privateSet(this, _provider, provider);
        __privateSet(this, _poller, null);
        __privateSet(this, _interval, 4e3);
        __privateSet(this, _blockNumber, -2);
      }
      /**
       *  The polling interval.
       */
      get pollingInterval() {
        return __privateGet(this, _interval);
      }
      set pollingInterval(value) {
        __privateSet(this, _interval, value);
      }
      start() {
        if (__privateGet(this, _poller)) {
          return;
        }
        __privateSet(this, _poller, __privateGet(this, _provider)._setTimeout(__privateMethod(this, _PollingBlockSubscriber_instances, poll_fn).bind(this), __privateGet(this, _interval)));
        __privateMethod(this, _PollingBlockSubscriber_instances, poll_fn).call(this);
      }
      stop() {
        if (!__privateGet(this, _poller)) {
          return;
        }
        __privateGet(this, _provider)._clearTimeout(__privateGet(this, _poller));
        __privateSet(this, _poller, null);
      }
      pause(dropWhilePaused) {
        this.stop();
        if (dropWhilePaused) {
          __privateSet(this, _blockNumber, -2);
        }
      }
      resume() {
        this.start();
      }
    };
    _provider = new WeakMap();
    _poller = new WeakMap();
    _interval = new WeakMap();
    _blockNumber = new WeakMap();
    _PollingBlockSubscriber_instances = new WeakSet();
    poll_fn = async function() {
      try {
        const blockNumber = await __privateGet(this, _provider).getBlockNumber();
        if (__privateGet(this, _blockNumber) === -2) {
          __privateSet(this, _blockNumber, blockNumber);
          return;
        }
        if (blockNumber !== __privateGet(this, _blockNumber)) {
          for (let b2 = __privateGet(this, _blockNumber) + 1; b2 <= blockNumber; b2++) {
            if (__privateGet(this, _poller) == null) {
              return;
            }
            await __privateGet(this, _provider).emit("block", b2);
          }
          __privateSet(this, _blockNumber, blockNumber);
        }
      } catch (error) {
      }
      if (__privateGet(this, _poller) == null) {
        return;
      }
      __privateSet(this, _poller, __privateGet(this, _provider)._setTimeout(__privateMethod(this, _PollingBlockSubscriber_instances, poll_fn).bind(this), __privateGet(this, _interval)));
    };
    exports.PollingBlockSubscriber = PollingBlockSubscriber2;
    var _provider2, _poll, _running;
    var OnBlockSubscriber = class {
      /**
       *  Create a new **OnBlockSubscriber** attached to %%provider%%.
       */
      constructor(provider) {
        __privateAdd(this, _provider2);
        __privateAdd(this, _poll);
        __privateAdd(this, _running);
        __privateSet(this, _provider2, provider);
        __privateSet(this, _running, false);
        __privateSet(this, _poll, (blockNumber) => {
          this._poll(blockNumber, __privateGet(this, _provider2));
        });
      }
      /**
       *  Called on every new block.
       */
      async _poll(blockNumber, provider) {
        throw new Error("sub-classes must override this");
      }
      start() {
        if (__privateGet(this, _running)) {
          return;
        }
        __privateSet(this, _running, true);
        __privateGet(this, _poll).call(this, -2);
        __privateGet(this, _provider2).on("block", __privateGet(this, _poll));
      }
      stop() {
        if (!__privateGet(this, _running)) {
          return;
        }
        __privateSet(this, _running, false);
        __privateGet(this, _provider2).off("block", __privateGet(this, _poll));
      }
      pause(dropWhilePaused) {
        this.stop();
      }
      resume() {
        this.start();
      }
    };
    _provider2 = new WeakMap();
    _poll = new WeakMap();
    _running = new WeakMap();
    exports.OnBlockSubscriber = OnBlockSubscriber;
    var _tag, _lastBlock;
    var PollingBlockTagSubscriber2 = class extends OnBlockSubscriber {
      constructor(provider, tag) {
        super(provider);
        __privateAdd(this, _tag);
        __privateAdd(this, _lastBlock);
        __privateSet(this, _tag, tag);
        __privateSet(this, _lastBlock, -2);
      }
      pause(dropWhilePaused) {
        if (dropWhilePaused) {
          __privateSet(this, _lastBlock, -2);
        }
        super.pause(dropWhilePaused);
      }
      async _poll(blockNumber, provider) {
        const block = await provider.getBlock(__privateGet(this, _tag));
        if (block == null) {
          return;
        }
        if (__privateGet(this, _lastBlock) === -2) {
          __privateSet(this, _lastBlock, block.number);
        } else if (block.number > __privateGet(this, _lastBlock)) {
          provider.emit(__privateGet(this, _tag), block.number);
          __privateSet(this, _lastBlock, block.number);
        }
      }
    };
    _tag = new WeakMap();
    _lastBlock = new WeakMap();
    exports.PollingBlockTagSubscriber = PollingBlockTagSubscriber2;
    var _filter2;
    var PollingOrphanSubscriber2 = class extends OnBlockSubscriber {
      constructor(provider, filter) {
        super(provider);
        __privateAdd(this, _filter2);
        __privateSet(this, _filter2, copy(filter));
      }
      async _poll(blockNumber, provider) {
        throw new Error("@TODO");
        console.log(__privateGet(this, _filter2));
      }
    };
    _filter2 = new WeakMap();
    exports.PollingOrphanSubscriber = PollingOrphanSubscriber2;
    var _hash;
    var PollingTransactionSubscriber2 = class extends OnBlockSubscriber {
      /**
       *  Create a new **PollingTransactionSubscriber** attached to
       *  %%provider%%, listening for %%hash%%.
       */
      constructor(provider, hash2) {
        super(provider);
        __privateAdd(this, _hash);
        __privateSet(this, _hash, hash2);
      }
      async _poll(blockNumber, provider) {
        const tx = await provider.getTransactionReceipt(__privateGet(this, _hash));
        if (tx) {
          provider.emit(__privateGet(this, _hash), tx);
        }
      }
    };
    _hash = new WeakMap();
    exports.PollingTransactionSubscriber = PollingTransactionSubscriber2;
    var _provider3, _filter3, _poller2, _running2, _blockNumber2, _PollingEventSubscriber_instances, poll_fn2;
    var PollingEventSubscriber2 = class {
      /**
       *  Create a new **PollingTransactionSubscriber** attached to
       *  %%provider%%, listening for %%filter%%.
       */
      constructor(provider, filter) {
        __privateAdd(this, _PollingEventSubscriber_instances);
        __privateAdd(this, _provider3);
        __privateAdd(this, _filter3);
        __privateAdd(this, _poller2);
        __privateAdd(this, _running2);
        // The most recent block we have scanned for events. The value -2
        // indicates we still need to fetch an initial block number
        __privateAdd(this, _blockNumber2);
        __privateSet(this, _provider3, provider);
        __privateSet(this, _filter3, copy(filter));
        __privateSet(this, _poller2, __privateMethod(this, _PollingEventSubscriber_instances, poll_fn2).bind(this));
        __privateSet(this, _running2, false);
        __privateSet(this, _blockNumber2, -2);
      }
      start() {
        if (__privateGet(this, _running2)) {
          return;
        }
        __privateSet(this, _running2, true);
        if (__privateGet(this, _blockNumber2) === -2) {
          __privateGet(this, _provider3).getBlockNumber().then((blockNumber) => {
            __privateSet(this, _blockNumber2, blockNumber);
          });
        }
        __privateGet(this, _provider3).on("block", __privateGet(this, _poller2));
      }
      stop() {
        if (!__privateGet(this, _running2)) {
          return;
        }
        __privateSet(this, _running2, false);
        __privateGet(this, _provider3).off("block", __privateGet(this, _poller2));
      }
      pause(dropWhilePaused) {
        this.stop();
        if (dropWhilePaused) {
          __privateSet(this, _blockNumber2, -2);
        }
      }
      resume() {
        this.start();
      }
    };
    _provider3 = new WeakMap();
    _filter3 = new WeakMap();
    _poller2 = new WeakMap();
    _running2 = new WeakMap();
    _blockNumber2 = new WeakMap();
    _PollingEventSubscriber_instances = new WeakSet();
    poll_fn2 = async function(blockNumber) {
      if (__privateGet(this, _blockNumber2) === -2) {
        return;
      }
      const filter = copy(__privateGet(this, _filter3));
      filter.fromBlock = __privateGet(this, _blockNumber2) + 1;
      filter.toBlock = blockNumber;
      const logs = await __privateGet(this, _provider3).getLogs(filter);
      if (logs.length === 0) {
        if (__privateGet(this, _blockNumber2) < blockNumber - 60) {
          __privateSet(this, _blockNumber2, blockNumber - 60);
        }
        return;
      }
      for (const log of logs) {
        __privateGet(this, _provider3).emit(__privateGet(this, _filter3), log);
        __privateSet(this, _blockNumber2, log.blockNumber);
      }
    };
    exports.PollingEventSubscriber = PollingEventSubscriber2;
  }
});

// node_modules/ethers/lib.commonjs/providers/abstract-provider.js
var require_abstract_provider = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/abstract-provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbstractProvider = exports.UnmanagedSubscriber = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_constants();
    var index_js_3 = require_contract2();
    var index_js_4 = require_hash();
    var index_js_5 = require_transaction2();
    var index_js_6 = require_utils();
    var ens_resolver_js_1 = require_ens_resolver();
    var format_js_1 = require_format();
    var network_js_1 = require_network();
    var provider_js_1 = require_provider();
    var subscriber_polling_js_1 = require_subscriber_polling();
    var BN_25 = BigInt(2);
    var MAX_CCIP_REDIRECTS = 10;
    function isPromise(value) {
      return value && typeof value.then === "function";
    }
    function getTag(prefix, value) {
      return prefix + ":" + JSON.stringify(value, (k, v) => {
        if (v == null) {
          return "null";
        }
        if (typeof v === "bigint") {
          return `bigint:${v.toString()}`;
        }
        if (typeof v === "string") {
          return v.toLowerCase();
        }
        if (typeof v === "object" && !Array.isArray(v)) {
          const keys = Object.keys(v);
          keys.sort();
          return keys.reduce((accum, key) => {
            accum[key] = v[key];
            return accum;
          }, {});
        }
        return v;
      });
    }
    var UnmanagedSubscriber2 = class {
      /**
       *  Create a new UnmanagedSubscriber with %%name%%.
       */
      constructor(name) {
        /**
         *  The name fof the event.
         */
        __publicField(this, "name");
        (0, index_js_6.defineProperties)(this, { name });
      }
      start() {
      }
      stop() {
      }
      pause(dropWhilePaused) {
      }
      resume() {
      }
    };
    exports.UnmanagedSubscriber = UnmanagedSubscriber2;
    function copy(value) {
      return JSON.parse(JSON.stringify(value));
    }
    function concisify(items) {
      items = Array.from(new Set(items).values());
      items.sort();
      return items;
    }
    async function getSubscription(_event, provider) {
      if (_event == null) {
        throw new Error("invalid event");
      }
      if (Array.isArray(_event)) {
        _event = { topics: _event };
      }
      if (typeof _event === "string") {
        switch (_event) {
          case "block":
          case "debug":
          case "error":
          case "finalized":
          case "network":
          case "pending":
          case "safe": {
            return { type: _event, tag: _event };
          }
        }
      }
      if ((0, index_js_6.isHexString)(_event, 32)) {
        const hash2 = _event.toLowerCase();
        return { type: "transaction", tag: getTag("tx", { hash: hash2 }), hash: hash2 };
      }
      if (_event.orphan) {
        const event = _event;
        return { type: "orphan", tag: getTag("orphan", event), filter: copy(event) };
      }
      if (_event.address || _event.topics) {
        const event = _event;
        const filter = {
          topics: (event.topics || []).map((t) => {
            if (t == null) {
              return null;
            }
            if (Array.isArray(t)) {
              return concisify(t.map((t2) => t2.toLowerCase()));
            }
            return t.toLowerCase();
          })
        };
        if (event.address) {
          const addresses = [];
          const promises = [];
          const addAddress = (addr) => {
            if ((0, index_js_6.isHexString)(addr)) {
              addresses.push(addr);
            } else {
              promises.push((async () => {
                addresses.push(await (0, index_js_1.resolveAddress)(addr, provider));
              })());
            }
          };
          if (Array.isArray(event.address)) {
            event.address.forEach(addAddress);
          } else {
            addAddress(event.address);
          }
          if (promises.length) {
            await Promise.all(promises);
          }
          filter.address = concisify(addresses.map((a) => a.toLowerCase()));
        }
        return { filter, tag: getTag("event", filter), type: "event" };
      }
      (0, index_js_6.assertArgument)(false, "unknown ProviderEvent", "event", _event);
    }
    function getTime2() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    var defaultOptions2 = {
      cacheTimeout: 250,
      pollingInterval: 4e3
    };
    var _subs, _plugins, _pausedState, _destroyed, _networkPromise, _anyNetwork, _performCache, _lastBlockNumber, _nextTimer, _timers, _disableCcipRead, _options2, _AbstractProvider_instances, perform_fn, call_fn, checkNetwork_fn, getAccountValue_fn, getBlock_fn, hasSub_fn, getSub_fn;
    var AbstractProvider2 = class {
      /**
       *  Create a new **AbstractProvider** connected to %%network%%, or
       *  use the various network detection capabilities to discover the
       *  [[Network]] if necessary.
       */
      constructor(_network, options) {
        __privateAdd(this, _AbstractProvider_instances);
        __privateAdd(this, _subs);
        __privateAdd(this, _plugins);
        // null=unpaused, true=paused+dropWhilePaused, false=paused
        __privateAdd(this, _pausedState);
        __privateAdd(this, _destroyed);
        __privateAdd(this, _networkPromise);
        __privateAdd(this, _anyNetwork);
        __privateAdd(this, _performCache);
        // The most recent block number if running an event or -1 if no "block" event
        __privateAdd(this, _lastBlockNumber);
        __privateAdd(this, _nextTimer);
        __privateAdd(this, _timers);
        __privateAdd(this, _disableCcipRead);
        __privateAdd(this, _options2);
        __privateSet(this, _options2, Object.assign({}, defaultOptions2, options || {}));
        if (_network === "any") {
          __privateSet(this, _anyNetwork, true);
          __privateSet(this, _networkPromise, null);
        } else if (_network) {
          const network = network_js_1.Network.from(_network);
          __privateSet(this, _anyNetwork, false);
          __privateSet(this, _networkPromise, Promise.resolve(network));
          setTimeout(() => {
            this.emit("network", network, null);
          }, 0);
        } else {
          __privateSet(this, _anyNetwork, false);
          __privateSet(this, _networkPromise, null);
        }
        __privateSet(this, _lastBlockNumber, -1);
        __privateSet(this, _performCache, /* @__PURE__ */ new Map());
        __privateSet(this, _subs, /* @__PURE__ */ new Map());
        __privateSet(this, _plugins, /* @__PURE__ */ new Map());
        __privateSet(this, _pausedState, null);
        __privateSet(this, _destroyed, false);
        __privateSet(this, _nextTimer, 1);
        __privateSet(this, _timers, /* @__PURE__ */ new Map());
        __privateSet(this, _disableCcipRead, false);
      }
      get pollingInterval() {
        return __privateGet(this, _options2).pollingInterval;
      }
      /**
       *  Returns ``this``, to allow an **AbstractProvider** to implement
       *  the [[ContractRunner]] interface.
       */
      get provider() {
        return this;
      }
      /**
       *  Returns all the registered plug-ins.
       */
      get plugins() {
        return Array.from(__privateGet(this, _plugins).values());
      }
      /**
       *  Attach a new plug-in.
       */
      attachPlugin(plugin) {
        if (__privateGet(this, _plugins).get(plugin.name)) {
          throw new Error(`cannot replace existing plugin: ${plugin.name} `);
        }
        __privateGet(this, _plugins).set(plugin.name, plugin.connect(this));
        return this;
      }
      /**
       *  Get a plugin by name.
       */
      getPlugin(name) {
        return __privateGet(this, _plugins).get(name) || null;
      }
      /**
       *  Prevent any CCIP-read operation, regardless of whether requested
       *  in a [[call]] using ``enableCcipRead``.
       */
      get disableCcipRead() {
        return __privateGet(this, _disableCcipRead);
      }
      set disableCcipRead(value) {
        __privateSet(this, _disableCcipRead, !!value);
      }
      /**
       *  Resolves to the data for executing the CCIP-read operations.
       */
      async ccipReadFetch(tx, calldata, urls) {
        if (this.disableCcipRead || urls.length === 0 || tx.to == null) {
          return null;
        }
        const sender = tx.to.toLowerCase();
        const data = calldata.toLowerCase();
        const errorMessages = [];
        for (let i = 0; i < urls.length; i++) {
          const url = urls[i];
          const href = url.replace("{sender}", sender).replace("{data}", data);
          const request = new index_js_6.FetchRequest(href);
          if (url.indexOf("{data}") === -1) {
            request.body = { data, sender };
          }
          this.emit("debug", { action: "sendCcipReadFetchRequest", request, index: i, urls });
          let errorMessage = "unknown error";
          const resp = await request.send();
          try {
            const result = resp.bodyJson;
            if (result.data) {
              this.emit("debug", { action: "receiveCcipReadFetchResult", request, result });
              return result.data;
            }
            if (result.message) {
              errorMessage = result.message;
            }
            this.emit("debug", { action: "receiveCcipReadFetchError", request, result });
          } catch (error) {
          }
          (0, index_js_6.assert)(resp.statusCode < 400 || resp.statusCode >= 500, `response not found during CCIP fetch: ${errorMessage}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: tx, info: { url, errorMessage } });
          errorMessages.push(errorMessage);
        }
        (0, index_js_6.assert)(false, `error encountered during CCIP fetch: ${errorMessages.map((m) => JSON.stringify(m)).join(", ")}`, "OFFCHAIN_FAULT", {
          reason: "500_SERVER_ERROR",
          transaction: tx,
          info: { urls, errorMessages }
        });
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a block before
       *  returning it, to add additional properties or an alternate
       *  sub-class of [[Block]].
       */
      _wrapBlock(value, network) {
        return new provider_js_1.Block((0, format_js_1.formatBlock)(value), this);
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a log before
       *  returning it, to add additional properties or an alternate
       *  sub-class of [[Log]].
       */
      _wrapLog(value, network) {
        return new provider_js_1.Log((0, format_js_1.formatLog)(value), this);
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a transaction
       *  receipt before returning it, to add additional properties or an
       *  alternate sub-class of [[TransactionReceipt]].
       */
      _wrapTransactionReceipt(value, network) {
        return new provider_js_1.TransactionReceipt((0, format_js_1.formatTransactionReceipt)(value), this);
      }
      /**
       *  Provides the opportunity for a sub-class to wrap a transaction
       *  response before returning it, to add additional properties or an
       *  alternate sub-class of [[TransactionResponse]].
       */
      _wrapTransactionResponse(tx, network) {
        return new provider_js_1.TransactionResponse((0, format_js_1.formatTransactionResponse)(tx), this);
      }
      /**
       *  Resolves to the Network, forcing a network detection using whatever
       *  technique the sub-class requires.
       *
       *  Sub-classes **must** override this.
       */
      _detectNetwork() {
        (0, index_js_6.assert)(false, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
          operation: "_detectNetwork"
        });
      }
      /**
       *  Sub-classes should use this to perform all built-in operations. All
       *  methods sanitizes and normalizes the values passed into this.
       *
       *  Sub-classes **must** override this.
       */
      async _perform(req) {
        (0, index_js_6.assert)(false, `unsupported method: ${req.method}`, "UNSUPPORTED_OPERATION", {
          operation: req.method,
          info: req
        });
      }
      // State
      async getBlockNumber() {
        const blockNumber = (0, index_js_6.getNumber)(await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getBlockNumber" }), "%response");
        if (__privateGet(this, _lastBlockNumber) >= 0) {
          __privateSet(this, _lastBlockNumber, blockNumber);
        }
        return blockNumber;
      }
      /**
       *  Returns or resolves to the address for %%address%%, resolving ENS
       *  names and [[Addressable]] objects and returning if already an
       *  address.
       */
      _getAddress(address) {
        return (0, index_js_1.resolveAddress)(address, this);
      }
      /**
       *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
       *  negative values and returning if already a valid block tag.
       */
      _getBlockTag(blockTag) {
        if (blockTag == null) {
          return "latest";
        }
        switch (blockTag) {
          case "earliest":
            return "0x0";
          case "finalized":
          case "latest":
          case "pending":
          case "safe":
            return blockTag;
        }
        if ((0, index_js_6.isHexString)(blockTag)) {
          if ((0, index_js_6.isHexString)(blockTag, 32)) {
            return blockTag;
          }
          return (0, index_js_6.toQuantity)(blockTag);
        }
        if (typeof blockTag === "bigint") {
          blockTag = (0, index_js_6.getNumber)(blockTag, "blockTag");
        }
        if (typeof blockTag === "number") {
          if (blockTag >= 0) {
            return (0, index_js_6.toQuantity)(blockTag);
          }
          if (__privateGet(this, _lastBlockNumber) >= 0) {
            return (0, index_js_6.toQuantity)(__privateGet(this, _lastBlockNumber) + blockTag);
          }
          return this.getBlockNumber().then((b2) => (0, index_js_6.toQuantity)(b2 + blockTag));
        }
        (0, index_js_6.assertArgument)(false, "invalid blockTag", "blockTag", blockTag);
      }
      /**
       *  Returns or resolves to a filter for %%filter%%, resolving any ENS
       *  names or [[Addressable]] object and returning if already a valid
       *  filter.
       */
      _getFilter(filter) {
        const topics = (filter.topics || []).map((t) => {
          if (t == null) {
            return null;
          }
          if (Array.isArray(t)) {
            return concisify(t.map((t2) => t2.toLowerCase()));
          }
          return t.toLowerCase();
        });
        const blockHash = "blockHash" in filter ? filter.blockHash : void 0;
        const resolve = (_address, fromBlock2, toBlock2) => {
          let address2 = void 0;
          switch (_address.length) {
            case 0:
              break;
            case 1:
              address2 = _address[0];
              break;
            default:
              _address.sort();
              address2 = _address;
          }
          if (blockHash) {
            if (fromBlock2 != null || toBlock2 != null) {
              throw new Error("invalid filter");
            }
          }
          const filter2 = {};
          if (address2) {
            filter2.address = address2;
          }
          if (topics.length) {
            filter2.topics = topics;
          }
          if (fromBlock2) {
            filter2.fromBlock = fromBlock2;
          }
          if (toBlock2) {
            filter2.toBlock = toBlock2;
          }
          if (blockHash) {
            filter2.blockHash = blockHash;
          }
          return filter2;
        };
        let address = [];
        if (filter.address) {
          if (Array.isArray(filter.address)) {
            for (const addr of filter.address) {
              address.push(this._getAddress(addr));
            }
          } else {
            address.push(this._getAddress(filter.address));
          }
        }
        let fromBlock = void 0;
        if ("fromBlock" in filter) {
          fromBlock = this._getBlockTag(filter.fromBlock);
        }
        let toBlock = void 0;
        if ("toBlock" in filter) {
          toBlock = this._getBlockTag(filter.toBlock);
        }
        if (address.filter((a) => typeof a !== "string").length || fromBlock != null && typeof fromBlock !== "string" || toBlock != null && typeof toBlock !== "string") {
          return Promise.all([Promise.all(address), fromBlock, toBlock]).then((result) => {
            return resolve(result[0], result[1], result[2]);
          });
        }
        return resolve(address, fromBlock, toBlock);
      }
      /**
       *  Returns or resolves to a transaction for %%request%%, resolving
       *  any ENS names or [[Addressable]] and returning if already a valid
       *  transaction.
       */
      _getTransactionRequest(_request2) {
        const request = (0, provider_js_1.copyRequest)(_request2);
        const promises = [];
        ["to", "from"].forEach((key) => {
          if (request[key] == null) {
            return;
          }
          const addr = (0, index_js_1.resolveAddress)(request[key], this);
          if (isPromise(addr)) {
            promises.push(async function() {
              request[key] = await addr;
            }());
          } else {
            request[key] = addr;
          }
        });
        if (request.blockTag != null) {
          const blockTag = this._getBlockTag(request.blockTag);
          if (isPromise(blockTag)) {
            promises.push(async function() {
              request.blockTag = await blockTag;
            }());
          } else {
            request.blockTag = blockTag;
          }
        }
        if (promises.length) {
          return async function() {
            await Promise.all(promises);
            return request;
          }();
        }
        return request;
      }
      async getNetwork() {
        if (__privateGet(this, _networkPromise) == null) {
          const detectNetwork = (async () => {
            try {
              const network = await this._detectNetwork();
              this.emit("network", network, null);
              return network;
            } catch (error) {
              if (__privateGet(this, _networkPromise) === detectNetwork) {
                __privateSet(this, _networkPromise, null);
              }
              throw error;
            }
          })();
          __privateSet(this, _networkPromise, detectNetwork);
          return (await detectNetwork).clone();
        }
        const networkPromise = __privateGet(this, _networkPromise);
        const [expected, actual] = await Promise.all([
          networkPromise,
          this._detectNetwork()
          // The actual connected network
        ]);
        if (expected.chainId !== actual.chainId) {
          if (__privateGet(this, _anyNetwork)) {
            this.emit("network", actual, expected);
            if (__privateGet(this, _networkPromise) === networkPromise) {
              __privateSet(this, _networkPromise, Promise.resolve(actual));
            }
          } else {
            (0, index_js_6.assert)(false, `network changed: ${expected.chainId} => ${actual.chainId} `, "NETWORK_ERROR", {
              event: "changed"
            });
          }
        }
        return expected.clone();
      }
      async getFeeData() {
        const network = await this.getNetwork();
        const getFeeDataFunc = async () => {
          const { _block, gasPrice, priorityFee } = await (0, index_js_6.resolveProperties)({
            _block: __privateMethod(this, _AbstractProvider_instances, getBlock_fn).call(this, "latest", false),
            gasPrice: (async () => {
              try {
                const value = await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getGasPrice" });
                return (0, index_js_6.getBigInt)(value, "%response");
              } catch (error) {
              }
              return null;
            })(),
            priorityFee: (async () => {
              try {
                const value = await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getPriorityFee" });
                return (0, index_js_6.getBigInt)(value, "%response");
              } catch (error) {
              }
              return null;
            })()
          });
          let maxFeePerGas = null;
          let maxPriorityFeePerGas = null;
          const block = this._wrapBlock(_block, network);
          if (block && block.baseFeePerGas) {
            maxPriorityFeePerGas = priorityFee != null ? priorityFee : BigInt("1000000000");
            maxFeePerGas = block.baseFeePerGas * BN_25 + maxPriorityFeePerGas;
          }
          return new provider_js_1.FeeData(gasPrice, maxFeePerGas, maxPriorityFeePerGas);
        };
        const plugin = network.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
        if (plugin) {
          const req = new index_js_6.FetchRequest(plugin.url);
          const feeData = await plugin.processFunc(getFeeDataFunc, this, req);
          return new provider_js_1.FeeData(feeData.gasPrice, feeData.maxFeePerGas, feeData.maxPriorityFeePerGas);
        }
        return await getFeeDataFunc();
      }
      async estimateGas(_tx) {
        let tx = this._getTransactionRequest(_tx);
        if (isPromise(tx)) {
          tx = await tx;
        }
        return (0, index_js_6.getBigInt)(await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, {
          method: "estimateGas",
          transaction: tx
        }), "%response");
      }
      async call(_tx) {
        const { tx, blockTag } = await (0, index_js_6.resolveProperties)({
          tx: this._getTransactionRequest(_tx),
          blockTag: this._getBlockTag(_tx.blockTag)
        });
        return await __privateMethod(this, _AbstractProvider_instances, checkNetwork_fn).call(this, __privateMethod(this, _AbstractProvider_instances, call_fn).call(this, tx, blockTag, _tx.enableCcipRead ? 0 : -1));
      }
      async getBalance(address, blockTag) {
        return (0, index_js_6.getBigInt)(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getBalance" }, address, blockTag), "%response");
      }
      async getTransactionCount(address, blockTag) {
        return (0, index_js_6.getNumber)(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getTransactionCount" }, address, blockTag), "%response");
      }
      async getCode(address, blockTag) {
        return (0, index_js_6.hexlify)(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getCode" }, address, blockTag));
      }
      async getStorage(address, _position, blockTag) {
        const position = (0, index_js_6.getBigInt)(_position, "position");
        return (0, index_js_6.hexlify)(await __privateMethod(this, _AbstractProvider_instances, getAccountValue_fn).call(this, { method: "getStorage", position }, address, blockTag));
      }
      // Write
      async broadcastTransaction(signedTx) {
        const { blockNumber, hash: hash2, network } = await (0, index_js_6.resolveProperties)({
          blockNumber: this.getBlockNumber(),
          hash: this._perform({
            method: "broadcastTransaction",
            signedTransaction: signedTx
          }),
          network: this.getNetwork()
        });
        const tx = index_js_5.Transaction.from(signedTx);
        if (tx.hash !== hash2) {
          throw new Error("@TODO: the returned hash did not match");
        }
        return this._wrapTransactionResponse(tx, network).replaceableTransaction(blockNumber);
      }
      // Queries
      async getBlock(block, prefetchTxs) {
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: __privateMethod(this, _AbstractProvider_instances, getBlock_fn).call(this, block, !!prefetchTxs)
        });
        if (params == null) {
          return null;
        }
        return this._wrapBlock(params, network);
      }
      async getTransaction(hash2) {
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransaction", hash: hash2 })
        });
        if (params == null) {
          return null;
        }
        return this._wrapTransactionResponse(params, network);
      }
      async getTransactionReceipt(hash2) {
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransactionReceipt", hash: hash2 })
        });
        if (params == null) {
          return null;
        }
        if (params.gasPrice == null && params.effectiveGasPrice == null) {
          const tx = await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransaction", hash: hash2 });
          if (tx == null) {
            throw new Error("report this; could not find tx or effectiveGasPrice");
          }
          params.effectiveGasPrice = tx.gasPrice;
        }
        return this._wrapTransactionReceipt(params, network);
      }
      async getTransactionResult(hash2) {
        const { result } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          result: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getTransactionResult", hash: hash2 })
        });
        if (result == null) {
          return null;
        }
        return (0, index_js_6.hexlify)(result);
      }
      // Bloom-filter Queries
      async getLogs(_filter2) {
        let filter = this._getFilter(_filter2);
        if (isPromise(filter)) {
          filter = await filter;
        }
        const { network, params } = await (0, index_js_6.resolveProperties)({
          network: this.getNetwork(),
          params: __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, { method: "getLogs", filter })
        });
        return params.map((p) => this._wrapLog(p, network));
      }
      // ENS
      _getProvider(chainId) {
        (0, index_js_6.assert)(false, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
          operation: "_getProvider()"
        });
      }
      async getResolver(name) {
        return await ens_resolver_js_1.EnsResolver.fromName(this, name);
      }
      async getAvatar(name) {
        const resolver = await this.getResolver(name);
        if (resolver) {
          return await resolver.getAvatar();
        }
        return null;
      }
      async resolveName(name) {
        const resolver = await this.getResolver(name);
        if (resolver) {
          return await resolver.getAddress();
        }
        return null;
      }
      async lookupAddress(address) {
        address = (0, index_js_1.getAddress)(address);
        const node = (0, index_js_4.namehash)(address.substring(2).toLowerCase() + ".addr.reverse");
        try {
          const ensAddr = await ens_resolver_js_1.EnsResolver.getEnsAddress(this);
          const ensContract = new index_js_3.Contract(ensAddr, [
            "function resolver(bytes32) view returns (address)"
          ], this);
          const resolver = await ensContract.resolver(node);
          if (resolver == null || resolver === index_js_2.ZeroAddress) {
            return null;
          }
          const resolverContract = new index_js_3.Contract(resolver, [
            "function name(bytes32) view returns (string)"
          ], this);
          const name = await resolverContract.name(node);
          const check = await this.resolveName(name);
          if (check !== address) {
            return null;
          }
          return name;
        } catch (error) {
          if ((0, index_js_6.isError)(error, "BAD_DATA") && error.value === "0x") {
            return null;
          }
          if ((0, index_js_6.isError)(error, "CALL_EXCEPTION")) {
            return null;
          }
          throw error;
        }
        return null;
      }
      async waitForTransaction(hash2, _confirms, timeout) {
        const confirms = _confirms != null ? _confirms : 1;
        if (confirms === 0) {
          return this.getTransactionReceipt(hash2);
        }
        return new Promise(async (resolve, reject) => {
          let timer = null;
          const listener = async (blockNumber) => {
            try {
              const receipt = await this.getTransactionReceipt(hash2);
              if (receipt != null) {
                if (blockNumber - receipt.blockNumber + 1 >= confirms) {
                  resolve(receipt);
                  if (timer) {
                    clearTimeout(timer);
                    timer = null;
                  }
                  return;
                }
              }
            } catch (error) {
              console.log("EEE", error);
            }
            this.once("block", listener);
          };
          if (timeout != null) {
            timer = setTimeout(() => {
              if (timer == null) {
                return;
              }
              timer = null;
              this.off("block", listener);
              reject((0, index_js_6.makeError)("timeout", "TIMEOUT", { reason: "timeout" }));
            }, timeout);
          }
          listener(await this.getBlockNumber());
        });
      }
      async waitForBlock(blockTag) {
        (0, index_js_6.assert)(false, "not implemented yet", "NOT_IMPLEMENTED", {
          operation: "waitForBlock"
        });
      }
      /**
       *  Clear a timer created using the [[_setTimeout]] method.
       */
      _clearTimeout(timerId) {
        const timer = __privateGet(this, _timers).get(timerId);
        if (!timer) {
          return;
        }
        if (timer.timer) {
          clearTimeout(timer.timer);
        }
        __privateGet(this, _timers).delete(timerId);
      }
      /**
       *  Create a timer that will execute %%func%% after at least %%timeout%%
       *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
       *  in the next event loop.
       *
       *  [Pausing](AbstractProvider-paused) the provider will pause any
       *  associated timers.
       */
      _setTimeout(_func, timeout) {
        if (timeout == null) {
          timeout = 0;
        }
        const timerId = __privateWrapper(this, _nextTimer)._++;
        const func = () => {
          __privateGet(this, _timers).delete(timerId);
          _func();
        };
        if (this.paused) {
          __privateGet(this, _timers).set(timerId, { timer: null, func, time: timeout });
        } else {
          const timer = setTimeout(func, timeout);
          __privateGet(this, _timers).set(timerId, { timer, func, time: getTime2() });
        }
        return timerId;
      }
      /**
       *  Perform %%func%% on each subscriber.
       */
      _forEachSubscriber(func) {
        for (const sub of __privateGet(this, _subs).values()) {
          func(sub.subscriber);
        }
      }
      /**
       *  Sub-classes may override this to customize subscription
       *  implementations.
       */
      _getSubscriber(sub) {
        switch (sub.type) {
          case "debug":
          case "error":
          case "network":
            return new UnmanagedSubscriber2(sub.type);
          case "block": {
            const subscriber = new subscriber_polling_js_1.PollingBlockSubscriber(this);
            subscriber.pollingInterval = this.pollingInterval;
            return subscriber;
          }
          case "safe":
          case "finalized":
            return new subscriber_polling_js_1.PollingBlockTagSubscriber(this, sub.type);
          case "event":
            return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);
          case "transaction":
            return new subscriber_polling_js_1.PollingTransactionSubscriber(this, sub.hash);
          case "orphan":
            return new subscriber_polling_js_1.PollingOrphanSubscriber(this, sub.filter);
        }
        throw new Error(`unsupported event: ${sub.type}`);
      }
      /**
       *  If a [[Subscriber]] fails and needs to replace itself, this
       *  method may be used.
       *
       *  For example, this is used for providers when using the
       *  ``eth_getFilterChanges`` method, which can return null if state
       *  filters are not supported by the backend, allowing the Subscriber
       *  to swap in a [[PollingEventSubscriber]].
       */
      _recoverSubscriber(oldSub, newSub) {
        for (const sub of __privateGet(this, _subs).values()) {
          if (sub.subscriber === oldSub) {
            if (sub.started) {
              sub.subscriber.stop();
            }
            sub.subscriber = newSub;
            if (sub.started) {
              newSub.start();
            }
            if (__privateGet(this, _pausedState) != null) {
              newSub.pause(__privateGet(this, _pausedState));
            }
            break;
          }
        }
      }
      async on(event, listener) {
        const sub = await __privateMethod(this, _AbstractProvider_instances, getSub_fn).call(this, event);
        sub.listeners.push({ listener, once: false });
        if (!sub.started) {
          sub.subscriber.start();
          sub.started = true;
          if (__privateGet(this, _pausedState) != null) {
            sub.subscriber.pause(__privateGet(this, _pausedState));
          }
        }
        return this;
      }
      async once(event, listener) {
        const sub = await __privateMethod(this, _AbstractProvider_instances, getSub_fn).call(this, event);
        sub.listeners.push({ listener, once: true });
        if (!sub.started) {
          sub.subscriber.start();
          sub.started = true;
          if (__privateGet(this, _pausedState) != null) {
            sub.subscriber.pause(__privateGet(this, _pausedState));
          }
        }
        return this;
      }
      async emit(event, ...args) {
        const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event, args);
        if (!sub || sub.listeners.length === 0) {
          return false;
        }
        ;
        const count = sub.listeners.length;
        sub.listeners = sub.listeners.filter(({ listener, once }) => {
          const payload = new index_js_6.EventPayload(this, once ? null : listener, event);
          try {
            listener.call(this, ...args, payload);
          } catch (error) {
          }
          return !once;
        });
        if (sub.listeners.length === 0) {
          if (sub.started) {
            sub.subscriber.stop();
          }
          __privateGet(this, _subs).delete(sub.tag);
        }
        return count > 0;
      }
      async listenerCount(event) {
        if (event) {
          const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event);
          if (!sub) {
            return 0;
          }
          return sub.listeners.length;
        }
        let total = 0;
        for (const { listeners } of __privateGet(this, _subs).values()) {
          total += listeners.length;
        }
        return total;
      }
      async listeners(event) {
        if (event) {
          const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event);
          if (!sub) {
            return [];
          }
          return sub.listeners.map(({ listener }) => listener);
        }
        let result = [];
        for (const { listeners } of __privateGet(this, _subs).values()) {
          result = result.concat(listeners.map(({ listener }) => listener));
        }
        return result;
      }
      async off(event, listener) {
        const sub = await __privateMethod(this, _AbstractProvider_instances, hasSub_fn).call(this, event);
        if (!sub) {
          return this;
        }
        if (listener) {
          const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
          if (index >= 0) {
            sub.listeners.splice(index, 1);
          }
        }
        if (!listener || sub.listeners.length === 0) {
          if (sub.started) {
            sub.subscriber.stop();
          }
          __privateGet(this, _subs).delete(sub.tag);
        }
        return this;
      }
      async removeAllListeners(event) {
        if (event) {
          const { tag, started, subscriber } = await __privateMethod(this, _AbstractProvider_instances, getSub_fn).call(this, event);
          if (started) {
            subscriber.stop();
          }
          __privateGet(this, _subs).delete(tag);
        } else {
          for (const [tag, { started, subscriber }] of __privateGet(this, _subs)) {
            if (started) {
              subscriber.stop();
            }
            __privateGet(this, _subs).delete(tag);
          }
        }
        return this;
      }
      // Alias for "on"
      async addListener(event, listener) {
        return await this.on(event, listener);
      }
      // Alias for "off"
      async removeListener(event, listener) {
        return this.off(event, listener);
      }
      /**
       *  If this provider has been destroyed using the [[destroy]] method.
       *
       *  Once destroyed, all resources are reclaimed, internal event loops
       *  and timers are cleaned up and no further requests may be sent to
       *  the provider.
       */
      get destroyed() {
        return __privateGet(this, _destroyed);
      }
      /**
       *  Sub-classes may use this to shutdown any sockets or release their
       *  resources and reject any pending requests.
       *
       *  Sub-classes **must** call ``super.destroy()``.
       */
      destroy() {
        this.removeAllListeners();
        for (const timerId of __privateGet(this, _timers).keys()) {
          this._clearTimeout(timerId);
        }
        __privateSet(this, _destroyed, true);
      }
      /**
       *  Whether the provider is currently paused.
       *
       *  A paused provider will not emit any events, and generally should
       *  not make any requests to the network, but that is up to sub-classes
       *  to manage.
       *
       *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
       *  which will buffer any events that occur while paused until the
       *  provider is unpaused.
       */
      get paused() {
        return __privateGet(this, _pausedState) != null;
      }
      set paused(pause) {
        if (!!pause === this.paused) {
          return;
        }
        if (this.paused) {
          this.resume();
        } else {
          this.pause(false);
        }
      }
      /**
       *  Pause the provider. If %%dropWhilePaused%%, any events that occur
       *  while paused are dropped, otherwise all events will be emitted once
       *  the provider is unpaused.
       */
      pause(dropWhilePaused) {
        __privateSet(this, _lastBlockNumber, -1);
        if (__privateGet(this, _pausedState) != null) {
          if (__privateGet(this, _pausedState) == !!dropWhilePaused) {
            return;
          }
          (0, index_js_6.assert)(false, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
            operation: "pause"
          });
        }
        this._forEachSubscriber((s) => s.pause(dropWhilePaused));
        __privateSet(this, _pausedState, !!dropWhilePaused);
        for (const timer of __privateGet(this, _timers).values()) {
          if (timer.timer) {
            clearTimeout(timer.timer);
          }
          timer.time = getTime2() - timer.time;
        }
      }
      /**
       *  Resume the provider.
       */
      resume() {
        if (__privateGet(this, _pausedState) == null) {
          return;
        }
        this._forEachSubscriber((s) => s.resume());
        __privateSet(this, _pausedState, null);
        for (const timer of __privateGet(this, _timers).values()) {
          let timeout = timer.time;
          if (timeout < 0) {
            timeout = 0;
          }
          timer.time = getTime2();
          setTimeout(timer.func, timeout);
        }
      }
    };
    _subs = new WeakMap();
    _plugins = new WeakMap();
    _pausedState = new WeakMap();
    _destroyed = new WeakMap();
    _networkPromise = new WeakMap();
    _anyNetwork = new WeakMap();
    _performCache = new WeakMap();
    _lastBlockNumber = new WeakMap();
    _nextTimer = new WeakMap();
    _timers = new WeakMap();
    _disableCcipRead = new WeakMap();
    _options2 = new WeakMap();
    _AbstractProvider_instances = new WeakSet();
    perform_fn = async function(req) {
      const timeout = __privateGet(this, _options2).cacheTimeout;
      if (timeout < 0) {
        return await this._perform(req);
      }
      const tag = getTag(req.method, req);
      let perform = __privateGet(this, _performCache).get(tag);
      if (!perform) {
        perform = this._perform(req);
        __privateGet(this, _performCache).set(tag, perform);
        setTimeout(() => {
          if (__privateGet(this, _performCache).get(tag) === perform) {
            __privateGet(this, _performCache).delete(tag);
          }
        }, timeout);
      }
      return await perform;
    };
    call_fn = async function(tx, blockTag, attempt) {
      (0, index_js_6.assert)(attempt < MAX_CCIP_REDIRECTS, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
        reason: "TOO_MANY_REDIRECTS",
        transaction: Object.assign({}, tx, { blockTag, enableCcipRead: true })
      });
      const transaction = (0, provider_js_1.copyRequest)(tx);
      try {
        return (0, index_js_6.hexlify)(await this._perform({ method: "call", transaction, blockTag }));
      } catch (error) {
        if (!this.disableCcipRead && (0, index_js_6.isCallException)(error) && error.data && attempt >= 0 && blockTag === "latest" && transaction.to != null && (0, index_js_6.dataSlice)(error.data, 0, 4) === "0x556f1830") {
          const data = error.data;
          const txSender = await (0, index_js_1.resolveAddress)(transaction.to, this);
          let ccipArgs;
          try {
            ccipArgs = parseOffchainLookup((0, index_js_6.dataSlice)(error.data, 4));
          } catch (error2) {
            (0, index_js_6.assert)(false, error2.message, "OFFCHAIN_FAULT", {
              reason: "BAD_DATA",
              transaction,
              info: { data }
            });
          }
          (0, index_js_6.assert)(ccipArgs.sender.toLowerCase() === txSender.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
            action: "call",
            data,
            reason: "OffchainLookup",
            transaction,
            invocation: null,
            revert: {
              signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
              name: "OffchainLookup",
              args: ccipArgs.errorArgs
            }
          });
          const ccipResult = await this.ccipReadFetch(transaction, ccipArgs.calldata, ccipArgs.urls);
          (0, index_js_6.assert)(ccipResult != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
            reason: "FETCH_FAILED",
            transaction,
            info: { data: error.data, errorArgs: ccipArgs.errorArgs }
          });
          const tx2 = {
            to: txSender,
            data: (0, index_js_6.concat)([ccipArgs.selector, encodeBytes([ccipResult, ccipArgs.extraData])])
          };
          this.emit("debug", { action: "sendCcipReadCall", transaction: tx2 });
          try {
            const result = await __privateMethod(this, _AbstractProvider_instances, call_fn).call(this, tx2, blockTag, attempt + 1);
            this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, tx2), result });
            return result;
          } catch (error2) {
            this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, tx2), error: error2 });
            throw error2;
          }
        }
        throw error;
      }
    };
    checkNetwork_fn = async function(promise) {
      const { value } = await (0, index_js_6.resolveProperties)({
        network: this.getNetwork(),
        value: promise
      });
      return value;
    };
    getAccountValue_fn = async function(request, _address, _blockTag) {
      let address = this._getAddress(_address);
      let blockTag = this._getBlockTag(_blockTag);
      if (typeof address !== "string" || typeof blockTag !== "string") {
        [address, blockTag] = await Promise.all([address, blockTag]);
      }
      return await __privateMethod(this, _AbstractProvider_instances, checkNetwork_fn).call(this, __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, Object.assign(request, { address, blockTag })));
    };
    getBlock_fn = async function(block, includeTransactions) {
      if ((0, index_js_6.isHexString)(block, 32)) {
        return await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, {
          method: "getBlock",
          blockHash: block,
          includeTransactions
        });
      }
      let blockTag = this._getBlockTag(block);
      if (typeof blockTag !== "string") {
        blockTag = await blockTag;
      }
      return await __privateMethod(this, _AbstractProvider_instances, perform_fn).call(this, {
        method: "getBlock",
        blockTag,
        includeTransactions
      });
    };
    hasSub_fn = async function(event, emitArgs) {
      let sub = await getSubscription(event, this);
      if (sub.type === "event" && emitArgs && emitArgs.length > 0 && emitArgs[0].removed === true) {
        sub = await getSubscription({ orphan: "drop-log", log: emitArgs[0] }, this);
      }
      return __privateGet(this, _subs).get(sub.tag) || null;
    };
    getSub_fn = async function(event) {
      const subscription = await getSubscription(event, this);
      const tag = subscription.tag;
      let sub = __privateGet(this, _subs).get(tag);
      if (!sub) {
        const subscriber = this._getSubscriber(subscription);
        const addressableMap = /* @__PURE__ */ new WeakMap();
        const nameMap = /* @__PURE__ */ new Map();
        sub = { subscriber, tag, addressableMap, nameMap, started: false, listeners: [] };
        __privateGet(this, _subs).set(tag, sub);
      }
      return sub;
    };
    exports.AbstractProvider = AbstractProvider2;
    function _parseString(result, start) {
      try {
        const bytes3 = _parseBytes(result, start);
        if (bytes3) {
          return (0, index_js_6.toUtf8String)(bytes3);
        }
      } catch (error) {
      }
      return null;
    }
    function _parseBytes(result, start) {
      if (result === "0x") {
        return null;
      }
      try {
        const offset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, start, start + 32));
        const length = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(result, offset, offset + 32));
        return (0, index_js_6.dataSlice)(result, offset + 32, offset + 32 + length);
      } catch (error) {
      }
      return null;
    }
    function numPad(value) {
      const result = (0, index_js_6.toBeArray)(value);
      if (result.length > 32) {
        throw new Error("internal; should not happen");
      }
      const padded = new Uint8Array(32);
      padded.set(result, 32 - result.length);
      return padded;
    }
    function bytesPad(value) {
      if (value.length % 32 === 0) {
        return value;
      }
      const result = new Uint8Array(Math.ceil(value.length / 32) * 32);
      result.set(value);
      return result;
    }
    var empty2 = new Uint8Array([]);
    function encodeBytes(datas) {
      const result = [];
      let byteCount = 0;
      for (let i = 0; i < datas.length; i++) {
        result.push(empty2);
        byteCount += 32;
      }
      for (let i = 0; i < datas.length; i++) {
        const data = (0, index_js_6.getBytes)(datas[i]);
        result[i] = numPad(byteCount);
        result.push(numPad(data.length));
        result.push(bytesPad(data));
        byteCount += 32 + Math.ceil(data.length / 32) * 32;
      }
      return (0, index_js_6.concat)(result);
    }
    var zeros2 = "0x0000000000000000000000000000000000000000000000000000000000000000";
    function parseOffchainLookup(data) {
      const result = {
        sender: "",
        urls: [],
        calldata: "",
        selector: "",
        extraData: "",
        errorArgs: []
      };
      (0, index_js_6.assert)((0, index_js_6.dataLength)(data) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
        reason: "insufficient OffchainLookup data"
      });
      const sender = (0, index_js_6.dataSlice)(data, 0, 32);
      (0, index_js_6.assert)((0, index_js_6.dataSlice)(sender, 0, 12) === (0, index_js_6.dataSlice)(zeros2, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup sender"
      });
      result.sender = (0, index_js_6.dataSlice)(sender, 12);
      try {
        const urls = [];
        const urlsOffset = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, 32, 64));
        const urlsLength = (0, index_js_6.getNumber)((0, index_js_6.dataSlice)(data, urlsOffset, urlsOffset + 32));
        const urlsData = (0, index_js_6.dataSlice)(data, urlsOffset + 32);
        for (let u = 0; u < urlsLength; u++) {
          const url = _parseString(urlsData, u * 32);
          if (url == null) {
            throw new Error("abort");
          }
          urls.push(url);
        }
        result.urls = urls;
      } catch (error) {
        (0, index_js_6.assert)(false, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup urls"
        });
      }
      try {
        const calldata = _parseBytes(data, 64);
        if (calldata == null) {
          throw new Error("abort");
        }
        result.calldata = calldata;
      } catch (error) {
        (0, index_js_6.assert)(false, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup calldata"
        });
      }
      (0, index_js_6.assert)((0, index_js_6.dataSlice)(data, 100, 128) === (0, index_js_6.dataSlice)(zeros2, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
        reason: "corrupt OffchainLookup callbaackSelector"
      });
      result.selector = (0, index_js_6.dataSlice)(data, 96, 100);
      try {
        const extraData = _parseBytes(data, 128);
        if (extraData == null) {
          throw new Error("abort");
        }
        result.extraData = extraData;
      } catch (error) {
        (0, index_js_6.assert)(false, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
          reason: "corrupt OffchainLookup extraData"
        });
      }
      result.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((k) => result[k]);
      return result;
    }
  }
});

// node_modules/ethers/lib.commonjs/providers/abstract-signer.js
var require_abstract_signer = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/abstract-signer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.VoidSigner = exports.AbstractSigner = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_transaction2();
    var index_js_3 = require_utils();
    var provider_js_1 = require_provider();
    function checkProvider(signer, operation) {
      if (signer.provider) {
        return signer.provider;
      }
      (0, index_js_3.assert)(false, "missing provider", "UNSUPPORTED_OPERATION", { operation });
    }
    async function populate2(signer, tx) {
      let pop = (0, provider_js_1.copyRequest)(tx);
      if (pop.to != null) {
        pop.to = (0, index_js_1.resolveAddress)(pop.to, signer);
      }
      if (pop.from != null) {
        const from = pop.from;
        pop.from = Promise.all([
          signer.getAddress(),
          (0, index_js_1.resolveAddress)(from, signer)
        ]).then(([address, from2]) => {
          (0, index_js_3.assertArgument)(address.toLowerCase() === from2.toLowerCase(), "transaction from mismatch", "tx.from", from2);
          return address;
        });
      } else {
        pop.from = signer.getAddress();
      }
      return await (0, index_js_3.resolveProperties)(pop);
    }
    var AbstractSigner2 = class {
      /**
       *  Creates a new Signer connected to %%provider%%.
       */
      constructor(provider) {
        /**
         *  The provider this signer is connected to.
         */
        __publicField(this, "provider");
        (0, index_js_3.defineProperties)(this, { provider: provider || null });
      }
      async getNonce(blockTag) {
        return checkProvider(this, "getTransactionCount").getTransactionCount(await this.getAddress(), blockTag);
      }
      async populateCall(tx) {
        const pop = await populate2(this, tx);
        return pop;
      }
      async populateTransaction(tx) {
        const provider = checkProvider(this, "populateTransaction");
        const pop = await populate2(this, tx);
        if (pop.nonce == null) {
          pop.nonce = await this.getNonce("pending");
        }
        if (pop.gasLimit == null) {
          pop.gasLimit = await this.estimateGas(pop);
        }
        const network = await this.provider.getNetwork();
        if (pop.chainId != null) {
          const chainId = (0, index_js_3.getBigInt)(pop.chainId);
          (0, index_js_3.assertArgument)(chainId === network.chainId, "transaction chainId mismatch", "tx.chainId", tx.chainId);
        } else {
          pop.chainId = network.chainId;
        }
        const hasEip1559 = pop.maxFeePerGas != null || pop.maxPriorityFeePerGas != null;
        if (pop.gasPrice != null && (pop.type === 2 || hasEip1559)) {
          (0, index_js_3.assertArgument)(false, "eip-1559 transaction do not support gasPrice", "tx", tx);
        } else if ((pop.type === 0 || pop.type === 1) && hasEip1559) {
          (0, index_js_3.assertArgument)(false, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", tx);
        }
        if ((pop.type === 2 || pop.type == null) && (pop.maxFeePerGas != null && pop.maxPriorityFeePerGas != null)) {
          pop.type = 2;
        } else if (pop.type === 0 || pop.type === 1) {
          const feeData = await provider.getFeeData();
          (0, index_js_3.assert)(feeData.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
            operation: "getGasPrice"
          });
          if (pop.gasPrice == null) {
            pop.gasPrice = feeData.gasPrice;
          }
        } else {
          const feeData = await provider.getFeeData();
          if (pop.type == null) {
            if (feeData.maxFeePerGas != null && feeData.maxPriorityFeePerGas != null) {
              pop.type = 2;
              if (pop.gasPrice != null) {
                const gasPrice = pop.gasPrice;
                delete pop.gasPrice;
                pop.maxFeePerGas = gasPrice;
                pop.maxPriorityFeePerGas = gasPrice;
              } else {
                if (pop.maxFeePerGas == null) {
                  pop.maxFeePerGas = feeData.maxFeePerGas;
                }
                if (pop.maxPriorityFeePerGas == null) {
                  pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
                }
              }
            } else if (feeData.gasPrice != null) {
              (0, index_js_3.assert)(!hasEip1559, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
                operation: "populateTransaction"
              });
              if (pop.gasPrice == null) {
                pop.gasPrice = feeData.gasPrice;
              }
              pop.type = 0;
            } else {
              (0, index_js_3.assert)(false, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
                operation: "signer.getFeeData"
              });
            }
          } else if (pop.type === 2 || pop.type === 3) {
            if (pop.maxFeePerGas == null) {
              pop.maxFeePerGas = feeData.maxFeePerGas;
            }
            if (pop.maxPriorityFeePerGas == null) {
              pop.maxPriorityFeePerGas = feeData.maxPriorityFeePerGas;
            }
          }
        }
        return await (0, index_js_3.resolveProperties)(pop);
      }
      async estimateGas(tx) {
        return checkProvider(this, "estimateGas").estimateGas(await this.populateCall(tx));
      }
      async call(tx) {
        return checkProvider(this, "call").call(await this.populateCall(tx));
      }
      async resolveName(name) {
        const provider = checkProvider(this, "resolveName");
        return await provider.resolveName(name);
      }
      async sendTransaction(tx) {
        const provider = checkProvider(this, "sendTransaction");
        const pop = await this.populateTransaction(tx);
        delete pop.from;
        const txObj = index_js_2.Transaction.from(pop);
        return await provider.broadcastTransaction(await this.signTransaction(txObj));
      }
    };
    exports.AbstractSigner = AbstractSigner2;
    var _VoidSigner_instances, throwUnsupported_fn;
    var _VoidSigner = class _VoidSigner extends AbstractSigner2 {
      /**
       *  Creates a new **VoidSigner** with %%address%% attached to
       *  %%provider%%.
       */
      constructor(address, provider) {
        super(provider);
        __privateAdd(this, _VoidSigner_instances);
        /**
         *  The signer address.
         */
        __publicField(this, "address");
        (0, index_js_3.defineProperties)(this, { address });
      }
      async getAddress() {
        return this.address;
      }
      connect(provider) {
        return new _VoidSigner(this.address, provider);
      }
      async signTransaction(tx) {
        __privateMethod(this, _VoidSigner_instances, throwUnsupported_fn).call(this, "transactions", "signTransaction");
      }
      async signMessage(message) {
        __privateMethod(this, _VoidSigner_instances, throwUnsupported_fn).call(this, "messages", "signMessage");
      }
      async signTypedData(domain, types, value) {
        __privateMethod(this, _VoidSigner_instances, throwUnsupported_fn).call(this, "typed-data", "signTypedData");
      }
    };
    _VoidSigner_instances = new WeakSet();
    throwUnsupported_fn = function(suffix, operation) {
      (0, index_js_3.assert)(false, `VoidSigner cannot sign ${suffix}`, "UNSUPPORTED_OPERATION", { operation });
    };
    var VoidSigner2 = _VoidSigner;
    exports.VoidSigner = VoidSigner2;
  }
});

// node_modules/ethers/lib.commonjs/providers/community.js
var require_community = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/community.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.showThrottleMessage = void 0;
    var shown = /* @__PURE__ */ new Set();
    function showThrottleMessage2(service) {
      if (shown.has(service)) {
        return;
      }
      shown.add(service);
      console.log("========= NOTICE =========");
      console.log(`Request-Rate Exceeded for ${service} (this message will not be repeated)`);
      console.log("");
      console.log("The default API keys for each service are provided as a highly-throttled,");
      console.log("community resource for low-traffic projects and early prototyping.");
      console.log("");
      console.log("While your application will continue to function, we highly recommended");
      console.log("signing up for your own API keys to improve performance, increase your");
      console.log("request rate/limit and enable other perks, such as metrics and advanced APIs.");
      console.log("");
      console.log("For more details: https://docs.ethers.org/api-keys/");
      console.log("==========================");
    }
    exports.showThrottleMessage = showThrottleMessage2;
  }
});

// node_modules/ethers/lib.commonjs/providers/subscriber-filterid.js
var require_subscriber_filterid = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/subscriber-filterid.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FilterIdPendingSubscriber = exports.FilterIdEventSubscriber = exports.FilterIdSubscriber = void 0;
    var index_js_1 = require_utils();
    var subscriber_polling_js_1 = require_subscriber_polling();
    function copy(obj) {
      return JSON.parse(JSON.stringify(obj));
    }
    var _provider, _filterIdPromise, _poller, _running, _network, _hault, _FilterIdSubscriber_instances, poll_fn, teardown_fn;
    var FilterIdSubscriber = class {
      /**
       *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
       *  and [[_emitResults]] to setup the subscription and provide the event
       *  to the %%provider%%.
       */
      constructor(provider) {
        __privateAdd(this, _FilterIdSubscriber_instances);
        __privateAdd(this, _provider);
        __privateAdd(this, _filterIdPromise);
        __privateAdd(this, _poller);
        __privateAdd(this, _running);
        __privateAdd(this, _network);
        __privateAdd(this, _hault);
        __privateSet(this, _provider, provider);
        __privateSet(this, _filterIdPromise, null);
        __privateSet(this, _poller, __privateMethod(this, _FilterIdSubscriber_instances, poll_fn).bind(this));
        __privateSet(this, _running, false);
        __privateSet(this, _network, null);
        __privateSet(this, _hault, false);
      }
      /**
       *  Sub-classes **must** override this to begin the subscription.
       */
      _subscribe(provider) {
        throw new Error("subclasses must override this");
      }
      /**
       *  Sub-classes **must** override this handle the events.
       */
      _emitResults(provider, result) {
        throw new Error("subclasses must override this");
      }
      /**
       *  Sub-classes **must** override this handle recovery on errors.
       */
      _recover(provider) {
        throw new Error("subclasses must override this");
      }
      start() {
        if (__privateGet(this, _running)) {
          return;
        }
        __privateSet(this, _running, true);
        __privateMethod(this, _FilterIdSubscriber_instances, poll_fn).call(this, -2);
      }
      stop() {
        if (!__privateGet(this, _running)) {
          return;
        }
        __privateSet(this, _running, false);
        __privateSet(this, _hault, true);
        __privateMethod(this, _FilterIdSubscriber_instances, teardown_fn).call(this);
        __privateGet(this, _provider).off("block", __privateGet(this, _poller));
      }
      pause(dropWhilePaused) {
        if (dropWhilePaused) {
          __privateMethod(this, _FilterIdSubscriber_instances, teardown_fn).call(this);
        }
        __privateGet(this, _provider).off("block", __privateGet(this, _poller));
      }
      resume() {
        this.start();
      }
    };
    _provider = new WeakMap();
    _filterIdPromise = new WeakMap();
    _poller = new WeakMap();
    _running = new WeakMap();
    _network = new WeakMap();
    _hault = new WeakMap();
    _FilterIdSubscriber_instances = new WeakSet();
    poll_fn = async function(blockNumber) {
      try {
        if (__privateGet(this, _filterIdPromise) == null) {
          __privateSet(this, _filterIdPromise, this._subscribe(__privateGet(this, _provider)));
        }
        let filterId = null;
        try {
          filterId = await __privateGet(this, _filterIdPromise);
        } catch (error) {
          if (!(0, index_js_1.isError)(error, "UNSUPPORTED_OPERATION") || error.operation !== "eth_newFilter") {
            throw error;
          }
        }
        if (filterId == null) {
          __privateSet(this, _filterIdPromise, null);
          __privateGet(this, _provider)._recoverSubscriber(this, this._recover(__privateGet(this, _provider)));
          return;
        }
        const network = await __privateGet(this, _provider).getNetwork();
        if (!__privateGet(this, _network)) {
          __privateSet(this, _network, network);
        }
        if (__privateGet(this, _network).chainId !== network.chainId) {
          throw new Error("chaid changed");
        }
        if (__privateGet(this, _hault)) {
          return;
        }
        const result = await __privateGet(this, _provider).send("eth_getFilterChanges", [filterId]);
        await this._emitResults(__privateGet(this, _provider), result);
      } catch (error) {
        console.log("@TODO", error);
      }
      __privateGet(this, _provider).once("block", __privateGet(this, _poller));
    };
    teardown_fn = function() {
      const filterIdPromise = __privateGet(this, _filterIdPromise);
      if (filterIdPromise) {
        __privateSet(this, _filterIdPromise, null);
        filterIdPromise.then((filterId) => {
          if (__privateGet(this, _provider).destroyed) {
            return;
          }
          __privateGet(this, _provider).send("eth_uninstallFilter", [filterId]);
        });
      }
    };
    exports.FilterIdSubscriber = FilterIdSubscriber;
    var _event;
    var FilterIdEventSubscriber2 = class extends FilterIdSubscriber {
      /**
       *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
       *  listening for %%filter%%.
       */
      constructor(provider, filter) {
        super(provider);
        __privateAdd(this, _event);
        __privateSet(this, _event, copy(filter));
      }
      _recover(provider) {
        return new subscriber_polling_js_1.PollingEventSubscriber(provider, __privateGet(this, _event));
      }
      async _subscribe(provider) {
        const filterId = await provider.send("eth_newFilter", [__privateGet(this, _event)]);
        return filterId;
      }
      async _emitResults(provider, results) {
        for (const result of results) {
          provider.emit(__privateGet(this, _event), provider._wrapLog(result, provider._network));
        }
      }
    };
    _event = new WeakMap();
    exports.FilterIdEventSubscriber = FilterIdEventSubscriber2;
    var FilterIdPendingSubscriber2 = class extends FilterIdSubscriber {
      async _subscribe(provider) {
        return await provider.send("eth_newPendingTransactionFilter", []);
      }
      async _emitResults(provider, results) {
        for (const result of results) {
          provider.emit("pending", result);
        }
      }
    };
    exports.FilterIdPendingSubscriber = FilterIdPendingSubscriber2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js
var require_provider_jsonrpc = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-jsonrpc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.JsonRpcProvider = exports.JsonRpcApiPollingProvider = exports.JsonRpcApiProvider = exports.JsonRpcSigner = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_address2();
    var index_js_3 = require_hash();
    var index_js_4 = require_transaction2();
    var index_js_5 = require_utils();
    var abstract_provider_js_1 = require_abstract_provider();
    var abstract_signer_js_1 = require_abstract_signer();
    var network_js_1 = require_network();
    var subscriber_filterid_js_1 = require_subscriber_filterid();
    var subscriber_polling_js_1 = require_subscriber_polling();
    var Primitive2 = "bigint,boolean,function,number,string,symbol".split(/,/g);
    function deepCopy2(value) {
      if (value == null || Primitive2.indexOf(typeof value) >= 0) {
        return value;
      }
      if (typeof value.getAddress === "function") {
        return value;
      }
      if (Array.isArray(value)) {
        return value.map(deepCopy2);
      }
      if (typeof value === "object") {
        return Object.keys(value).reduce((accum, key) => {
          accum[key] = value[key];
          return accum;
        }, {});
      }
      throw new Error(`should not happen: ${value} (${typeof value})`);
    }
    function stall(duration) {
      return new Promise((resolve) => {
        setTimeout(resolve, duration);
      });
    }
    function getLowerCase(value) {
      if (value) {
        return value.toLowerCase();
      }
      return value;
    }
    function isPollable(value) {
      return value && typeof value.pollingInterval === "number";
    }
    var defaultOptions2 = {
      polling: false,
      staticNetwork: null,
      batchStallTime: 10,
      batchMaxSize: 1 << 20,
      batchMaxCount: 100,
      cacheTimeout: 250,
      pollingInterval: 4e3
    };
    var JsonRpcSigner2 = class extends abstract_signer_js_1.AbstractSigner {
      constructor(provider, address) {
        super(provider);
        __publicField(this, "address");
        address = (0, index_js_2.getAddress)(address);
        (0, index_js_5.defineProperties)(this, { address });
      }
      connect(provider) {
        (0, index_js_5.assert)(false, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
          operation: "signer.connect"
        });
      }
      async getAddress() {
        return this.address;
      }
      // JSON-RPC will automatially fill in nonce, etc. so we just check from
      async populateTransaction(tx) {
        return await this.populateCall(tx);
      }
      // Returns just the hash of the transaction after sent, which is what
      // the bare JSON-RPC API does;
      async sendUncheckedTransaction(_tx) {
        const tx = deepCopy2(_tx);
        const promises = [];
        if (tx.from) {
          const _from = tx.from;
          promises.push((async () => {
            const from = await (0, index_js_2.resolveAddress)(_from, this.provider);
            (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
            tx.from = from;
          })());
        } else {
          tx.from = this.address;
        }
        if (tx.gasLimit == null) {
          promises.push((async () => {
            tx.gasLimit = await this.provider.estimateGas({ ...tx, from: this.address });
          })());
        }
        if (tx.to != null) {
          const _to = tx.to;
          promises.push((async () => {
            tx.to = await (0, index_js_2.resolveAddress)(_to, this.provider);
          })());
        }
        if (promises.length) {
          await Promise.all(promises);
        }
        const hexTx = this.provider.getRpcTransaction(tx);
        return this.provider.send("eth_sendTransaction", [hexTx]);
      }
      async sendTransaction(tx) {
        const blockNumber = await this.provider.getBlockNumber();
        const hash2 = await this.sendUncheckedTransaction(tx);
        return await new Promise((resolve, reject) => {
          const timeouts = [1e3, 100];
          let invalids = 0;
          const checkTx = async () => {
            try {
              const tx2 = await this.provider.getTransaction(hash2);
              if (tx2 != null) {
                resolve(tx2.replaceableTransaction(blockNumber));
                return;
              }
            } catch (error) {
              if ((0, index_js_5.isError)(error, "CANCELLED") || (0, index_js_5.isError)(error, "BAD_DATA") || (0, index_js_5.isError)(error, "NETWORK_ERROR")) {
                if (error.info == null) {
                  error.info = {};
                }
                error.info.sendTransactionHash = hash2;
                reject(error);
                return;
              }
              if ((0, index_js_5.isError)(error, "INVALID_ARGUMENT")) {
                invalids++;
                if (error.info == null) {
                  error.info = {};
                }
                error.info.sendTransactionHash = hash2;
                if (invalids > 10) {
                  reject(error);
                  return;
                }
              }
              this.provider.emit("error", (0, index_js_5.makeError)("failed to fetch transation after sending (will try again)", "UNKNOWN_ERROR", { error }));
            }
            this.provider._setTimeout(() => {
              checkTx();
            }, timeouts.pop() || 4e3);
          };
          checkTx();
        });
      }
      async signTransaction(_tx) {
        const tx = deepCopy2(_tx);
        if (tx.from) {
          const from = await (0, index_js_2.resolveAddress)(tx.from, this.provider);
          (0, index_js_5.assertArgument)(from != null && from.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", _tx);
          tx.from = from;
        } else {
          tx.from = this.address;
        }
        const hexTx = this.provider.getRpcTransaction(tx);
        return await this.provider.send("eth_signTransaction", [hexTx]);
      }
      async signMessage(_message) {
        const message = typeof _message === "string" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;
        return await this.provider.send("personal_sign", [
          (0, index_js_5.hexlify)(message),
          this.address.toLowerCase()
        ]);
      }
      async signTypedData(domain, types, _value) {
        const value = deepCopy2(_value);
        const populated = await index_js_3.TypedDataEncoder.resolveNames(domain, types, value, async (value2) => {
          const address = await (0, index_js_2.resolveAddress)(value2);
          (0, index_js_5.assertArgument)(address != null, "TypedData does not support null address", "value", value2);
          return address;
        });
        return await this.provider.send("eth_signTypedData_v4", [
          this.address.toLowerCase(),
          JSON.stringify(index_js_3.TypedDataEncoder.getPayload(populated.domain, types, populated.value))
        ]);
      }
      async unlock(password) {
        return this.provider.send("personal_unlockAccount", [
          this.address.toLowerCase(),
          password,
          null
        ]);
      }
      // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
      async _legacySignMessage(_message) {
        const message = typeof _message === "string" ? (0, index_js_5.toUtf8Bytes)(_message) : _message;
        return await this.provider.send("eth_sign", [
          this.address.toLowerCase(),
          (0, index_js_5.hexlify)(message)
        ]);
      }
    };
    exports.JsonRpcSigner = JsonRpcSigner2;
    var _options2, _nextId, _payloads, _drainTimer, _notReady, _network, _pendingDetectNetwork, _JsonRpcApiProvider_instances, scheduleDrain_fn;
    var JsonRpcApiProvider2 = class extends abstract_provider_js_1.AbstractProvider {
      constructor(network, options) {
        super(network, options);
        __privateAdd(this, _JsonRpcApiProvider_instances);
        __privateAdd(this, _options2);
        // The next ID to use for the JSON-RPC ID field
        __privateAdd(this, _nextId);
        // Payloads are queued and triggered in batches using the drainTimer
        __privateAdd(this, _payloads);
        __privateAdd(this, _drainTimer);
        __privateAdd(this, _notReady);
        __privateAdd(this, _network);
        __privateAdd(this, _pendingDetectNetwork);
        __privateSet(this, _nextId, 1);
        __privateSet(this, _options2, Object.assign({}, defaultOptions2, options || {}));
        __privateSet(this, _payloads, []);
        __privateSet(this, _drainTimer, null);
        __privateSet(this, _network, null);
        __privateSet(this, _pendingDetectNetwork, null);
        {
          let resolve = null;
          const promise = new Promise((_resolve) => {
            resolve = _resolve;
          });
          __privateSet(this, _notReady, { promise, resolve });
        }
        const staticNetwork = this._getOption("staticNetwork");
        if (typeof staticNetwork === "boolean") {
          (0, index_js_5.assertArgument)(!staticNetwork || network !== "any", "staticNetwork cannot be used on special network 'any'", "options", options);
          if (staticNetwork && network != null) {
            __privateSet(this, _network, network_js_1.Network.from(network));
          }
        } else if (staticNetwork) {
          (0, index_js_5.assertArgument)(network == null || staticNetwork.matches(network), "staticNetwork MUST match network object", "options", options);
          __privateSet(this, _network, staticNetwork);
        }
      }
      /**
       *  Returns the value associated with the option %%key%%.
       *
       *  Sub-classes can use this to inquire about configuration options.
       */
      _getOption(key) {
        return __privateGet(this, _options2)[key];
      }
      /**
       *  Gets the [[Network]] this provider has committed to. On each call, the network
       *  is detected, and if it has changed, the call will reject.
       */
      get _network() {
        (0, index_js_5.assert)(__privateGet(this, _network), "network is not available yet", "NETWORK_ERROR");
        return __privateGet(this, _network);
      }
      /**
       *  Resolves to the non-normalized value by performing %%req%%.
       *
       *  Sub-classes may override this to modify behavior of actions,
       *  and should generally call ``super._perform`` as a fallback.
       */
      async _perform(req) {
        if (req.method === "call" || req.method === "estimateGas") {
          let tx = req.transaction;
          if (tx && tx.type != null && (0, index_js_5.getBigInt)(tx.type)) {
            if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {
              const feeData = await this.getFeeData();
              if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {
                req = Object.assign({}, req, {
                  transaction: Object.assign({}, tx, { type: void 0 })
                });
              }
            }
          }
        }
        const request = this.getRpcRequest(req);
        if (request != null) {
          return await this.send(request.method, request.args);
        }
        return super._perform(req);
      }
      /**
       *  Sub-classes may override this; it detects the *actual* network that
       *  we are **currently** connected to.
       *
       *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
       *  _send primitive must be used instead.
       */
      async _detectNetwork() {
        const network = this._getOption("staticNetwork");
        if (network) {
          if (network === true) {
            if (__privateGet(this, _network)) {
              return __privateGet(this, _network);
            }
          } else {
            return network;
          }
        }
        if (__privateGet(this, _pendingDetectNetwork)) {
          return await __privateGet(this, _pendingDetectNetwork);
        }
        if (this.ready) {
          __privateSet(this, _pendingDetectNetwork, (async () => {
            try {
              const result = network_js_1.Network.from((0, index_js_5.getBigInt)(await this.send("eth_chainId", [])));
              __privateSet(this, _pendingDetectNetwork, null);
              return result;
            } catch (error) {
              __privateSet(this, _pendingDetectNetwork, null);
              throw error;
            }
          })());
          return await __privateGet(this, _pendingDetectNetwork);
        }
        __privateSet(this, _pendingDetectNetwork, (async () => {
          const payload = {
            id: __privateWrapper(this, _nextId)._++,
            method: "eth_chainId",
            params: [],
            jsonrpc: "2.0"
          };
          this.emit("debug", { action: "sendRpcPayload", payload });
          let result;
          try {
            result = (await this._send(payload))[0];
            __privateSet(this, _pendingDetectNetwork, null);
          } catch (error) {
            __privateSet(this, _pendingDetectNetwork, null);
            this.emit("debug", { action: "receiveRpcError", error });
            throw error;
          }
          this.emit("debug", { action: "receiveRpcResult", result });
          if ("result" in result) {
            return network_js_1.Network.from((0, index_js_5.getBigInt)(result.result));
          }
          throw this.getRpcError(payload, result);
        })());
        return await __privateGet(this, _pendingDetectNetwork);
      }
      /**
       *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
       *  will be passed to [[_send]] from [[send]]. If it is overridden, then
       *  ``super._start()`` **MUST** be called.
       *
       *  Calling it multiple times is safe and has no effect.
       */
      _start() {
        if (__privateGet(this, _notReady) == null || __privateGet(this, _notReady).resolve == null) {
          return;
        }
        __privateGet(this, _notReady).resolve();
        __privateSet(this, _notReady, null);
        (async () => {
          while (__privateGet(this, _network) == null && !this.destroyed) {
            try {
              __privateSet(this, _network, await this._detectNetwork());
            } catch (error) {
              if (this.destroyed) {
                break;
              }
              console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)");
              this.emit("error", (0, index_js_5.makeError)("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error } }));
              await stall(1e3);
            }
          }
          __privateMethod(this, _JsonRpcApiProvider_instances, scheduleDrain_fn).call(this);
        })();
      }
      /**
       *  Resolves once the [[_start]] has been called. This can be used in
       *  sub-classes to defer sending data until the connection has been
       *  established.
       */
      async _waitUntilReady() {
        if (__privateGet(this, _notReady) == null) {
          return;
        }
        return await __privateGet(this, _notReady).promise;
      }
      /**
       *  Return a Subscriber that will manage the %%sub%%.
       *
       *  Sub-classes may override this to modify the behavior of
       *  subscription management.
       */
      _getSubscriber(sub) {
        if (sub.type === "pending") {
          return new subscriber_filterid_js_1.FilterIdPendingSubscriber(this);
        }
        if (sub.type === "event") {
          if (this._getOption("polling")) {
            return new subscriber_polling_js_1.PollingEventSubscriber(this, sub.filter);
          }
          return new subscriber_filterid_js_1.FilterIdEventSubscriber(this, sub.filter);
        }
        if (sub.type === "orphan" && sub.filter.orphan === "drop-log") {
          return new abstract_provider_js_1.UnmanagedSubscriber("orphan");
        }
        return super._getSubscriber(sub);
      }
      /**
       *  Returns true only if the [[_start]] has been called.
       */
      get ready() {
        return __privateGet(this, _notReady) == null;
      }
      /**
       *  Returns %%tx%% as a normalized JSON-RPC transaction request,
       *  which has all values hexlified and any numeric values converted
       *  to Quantity values.
       */
      getRpcTransaction(tx) {
        const result = {};
        ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((key) => {
          if (tx[key] == null) {
            return;
          }
          let dstKey = key;
          if (key === "gasLimit") {
            dstKey = "gas";
          }
          result[dstKey] = (0, index_js_5.toQuantity)((0, index_js_5.getBigInt)(tx[key], `tx.${key}`));
        });
        ["from", "to", "data"].forEach((key) => {
          if (tx[key] == null) {
            return;
          }
          result[key] = (0, index_js_5.hexlify)(tx[key]);
        });
        if (tx.accessList) {
          result["accessList"] = (0, index_js_4.accessListify)(tx.accessList);
        }
        if (tx.blobVersionedHashes) {
          result["blobVersionedHashes"] = tx.blobVersionedHashes.map((h) => h.toLowerCase());
        }
        return result;
      }
      /**
       *  Returns the request method and arguments required to perform
       *  %%req%%.
       */
      getRpcRequest(req) {
        switch (req.method) {
          case "chainId":
            return { method: "eth_chainId", args: [] };
          case "getBlockNumber":
            return { method: "eth_blockNumber", args: [] };
          case "getGasPrice":
            return { method: "eth_gasPrice", args: [] };
          case "getPriorityFee":
            return { method: "eth_maxPriorityFeePerGas", args: [] };
          case "getBalance":
            return {
              method: "eth_getBalance",
              args: [getLowerCase(req.address), req.blockTag]
            };
          case "getTransactionCount":
            return {
              method: "eth_getTransactionCount",
              args: [getLowerCase(req.address), req.blockTag]
            };
          case "getCode":
            return {
              method: "eth_getCode",
              args: [getLowerCase(req.address), req.blockTag]
            };
          case "getStorage":
            return {
              method: "eth_getStorageAt",
              args: [
                getLowerCase(req.address),
                "0x" + req.position.toString(16),
                req.blockTag
              ]
            };
          case "broadcastTransaction":
            return {
              method: "eth_sendRawTransaction",
              args: [req.signedTransaction]
            };
          case "getBlock":
            if ("blockTag" in req) {
              return {
                method: "eth_getBlockByNumber",
                args: [req.blockTag, !!req.includeTransactions]
              };
            } else if ("blockHash" in req) {
              return {
                method: "eth_getBlockByHash",
                args: [req.blockHash, !!req.includeTransactions]
              };
            }
            break;
          case "getTransaction":
            return {
              method: "eth_getTransactionByHash",
              args: [req.hash]
            };
          case "getTransactionReceipt":
            return {
              method: "eth_getTransactionReceipt",
              args: [req.hash]
            };
          case "call":
            return {
              method: "eth_call",
              args: [this.getRpcTransaction(req.transaction), req.blockTag]
            };
          case "estimateGas": {
            return {
              method: "eth_estimateGas",
              args: [this.getRpcTransaction(req.transaction)]
            };
          }
          case "getLogs":
            if (req.filter && req.filter.address != null) {
              if (Array.isArray(req.filter.address)) {
                req.filter.address = req.filter.address.map(getLowerCase);
              } else {
                req.filter.address = getLowerCase(req.filter.address);
              }
            }
            return { method: "eth_getLogs", args: [req.filter] };
        }
        return null;
      }
      /**
       *  Returns an ethers-style Error for the given JSON-RPC error
       *  %%payload%%, coalescing the various strings and error shapes
       *  that different nodes return, coercing them into a machine-readable
       *  standardized error.
       */
      getRpcError(payload, _error2) {
        const { method } = payload;
        const { error } = _error2;
        if (method === "eth_estimateGas" && error.message) {
          const msg = error.message;
          if (!msg.match(/revert/i) && msg.match(/insufficient funds/i)) {
            return (0, index_js_5.makeError)("insufficient funds", "INSUFFICIENT_FUNDS", {
              transaction: payload.params[0],
              info: { payload, error }
            });
          }
        }
        if (method === "eth_call" || method === "eth_estimateGas") {
          const result = spelunkData(error);
          const e = index_js_1.AbiCoder.getBuiltinCallException(method === "eth_call" ? "call" : "estimateGas", payload.params[0], result ? result.data : null);
          e.info = { error, payload };
          return e;
        }
        const message = JSON.stringify(spelunkMessage(error));
        if (typeof error.message === "string" && error.message.match(/user denied|ethers-user-denied/i)) {
          const actionMap = {
            eth_sign: "signMessage",
            personal_sign: "signMessage",
            eth_signTypedData_v4: "signTypedData",
            eth_signTransaction: "signTransaction",
            eth_sendTransaction: "sendTransaction",
            eth_requestAccounts: "requestAccess",
            wallet_requestAccounts: "requestAccess"
          };
          return (0, index_js_5.makeError)(`user rejected action`, "ACTION_REJECTED", {
            action: actionMap[method] || "unknown",
            reason: "rejected",
            info: { payload, error }
          });
        }
        if (method === "eth_sendRawTransaction" || method === "eth_sendTransaction") {
          const transaction = payload.params[0];
          if (message.match(/insufficient funds|base fee exceeds gas limit/i)) {
            return (0, index_js_5.makeError)("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
              transaction,
              info: { error }
            });
          }
          if (message.match(/nonce/i) && message.match(/too low/i)) {
            return (0, index_js_5.makeError)("nonce has already been used", "NONCE_EXPIRED", { transaction, info: { error } });
          }
          if (message.match(/replacement transaction/i) && message.match(/underpriced/i)) {
            return (0, index_js_5.makeError)("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction, info: { error } });
          }
          if (message.match(/only replay-protected/i)) {
            return (0, index_js_5.makeError)("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
              operation: method,
              info: { transaction, info: { error } }
            });
          }
        }
        let unsupported = !!message.match(/the method .* does not exist/i);
        if (!unsupported) {
          if (error && error.details && error.details.startsWith("Unauthorized method:")) {
            unsupported = true;
          }
        }
        if (unsupported) {
          return (0, index_js_5.makeError)("unsupported operation", "UNSUPPORTED_OPERATION", {
            operation: payload.method,
            info: { error, payload }
          });
        }
        return (0, index_js_5.makeError)("could not coalesce error", "UNKNOWN_ERROR", { error, payload });
      }
      /**
       *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
       *  over the underlying channel. This can be used to call methods
       *  on the backend that do not have a high-level API within the Provider
       *  API.
       *
       *  This method queues requests according to the batch constraints
       *  in the options, assigns the request a unique ID.
       *
       *  **Do NOT override** this method in sub-classes; instead
       *  override [[_send]] or force the options values in the
       *  call to the constructor to modify this method's behavior.
       */
      send(method, params) {
        if (this.destroyed) {
          return Promise.reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: method }));
        }
        const id3 = __privateWrapper(this, _nextId)._++;
        const promise = new Promise((resolve, reject) => {
          __privateGet(this, _payloads).push({
            resolve,
            reject,
            payload: { method, params, id: id3, jsonrpc: "2.0" }
          });
        });
        __privateMethod(this, _JsonRpcApiProvider_instances, scheduleDrain_fn).call(this);
        return promise;
      }
      /**
       *  Resolves to the [[Signer]] account for  %%address%% managed by
       *  the client.
       *
       *  If the %%address%% is a number, it is used as an index in the
       *  the accounts from [[listAccounts]].
       *
       *  This can only be used on clients which manage accounts (such as
       *  Geth with imported account or MetaMask).
       *
       *  Throws if the account doesn't exist.
       */
      async getSigner(address) {
        if (address == null) {
          address = 0;
        }
        const accountsPromise = this.send("eth_accounts", []);
        if (typeof address === "number") {
          const accounts2 = await accountsPromise;
          if (address >= accounts2.length) {
            throw new Error("no such account");
          }
          return new JsonRpcSigner2(this, accounts2[address]);
        }
        const { accounts } = await (0, index_js_5.resolveProperties)({
          network: this.getNetwork(),
          accounts: accountsPromise
        });
        address = (0, index_js_2.getAddress)(address);
        for (const account of accounts) {
          if ((0, index_js_2.getAddress)(account) === address) {
            return new JsonRpcSigner2(this, address);
          }
        }
        throw new Error("invalid account");
      }
      async listAccounts() {
        const accounts = await this.send("eth_accounts", []);
        return accounts.map((a) => new JsonRpcSigner2(this, a));
      }
      destroy() {
        if (__privateGet(this, _drainTimer)) {
          clearTimeout(__privateGet(this, _drainTimer));
          __privateSet(this, _drainTimer, null);
        }
        for (const { payload, reject } of __privateGet(this, _payloads)) {
          reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload.method }));
        }
        __privateSet(this, _payloads, []);
        super.destroy();
      }
    };
    _options2 = new WeakMap();
    _nextId = new WeakMap();
    _payloads = new WeakMap();
    _drainTimer = new WeakMap();
    _notReady = new WeakMap();
    _network = new WeakMap();
    _pendingDetectNetwork = new WeakMap();
    _JsonRpcApiProvider_instances = new WeakSet();
    scheduleDrain_fn = function() {
      if (__privateGet(this, _drainTimer)) {
        return;
      }
      const stallTime = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
      __privateSet(this, _drainTimer, setTimeout(() => {
        __privateSet(this, _drainTimer, null);
        const payloads = __privateGet(this, _payloads);
        __privateSet(this, _payloads, []);
        while (payloads.length) {
          const batch = [payloads.shift()];
          while (payloads.length) {
            if (batch.length === __privateGet(this, _options2).batchMaxCount) {
              break;
            }
            batch.push(payloads.shift());
            const bytes3 = JSON.stringify(batch.map((p) => p.payload));
            if (bytes3.length > __privateGet(this, _options2).batchMaxSize) {
              payloads.unshift(batch.pop());
              break;
            }
          }
          (async () => {
            const payload = batch.length === 1 ? batch[0].payload : batch.map((p) => p.payload);
            this.emit("debug", { action: "sendRpcPayload", payload });
            try {
              const result = await this._send(payload);
              this.emit("debug", { action: "receiveRpcResult", result });
              for (const { resolve, reject, payload: payload2 } of batch) {
                if (this.destroyed) {
                  reject((0, index_js_5.makeError)("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: payload2.method }));
                  continue;
                }
                const resp = result.filter((r2) => r2.id === payload2.id)[0];
                if (resp == null) {
                  const error = (0, index_js_5.makeError)("missing response for request", "BAD_DATA", {
                    value: result,
                    info: { payload: payload2 }
                  });
                  this.emit("error", error);
                  reject(error);
                  continue;
                }
                if ("error" in resp) {
                  reject(this.getRpcError(payload2, resp));
                  continue;
                }
                resolve(resp.result);
              }
            } catch (error) {
              this.emit("debug", { action: "receiveRpcError", error });
              for (const { reject } of batch) {
                reject(error);
              }
            }
          })();
        }
      }, stallTime));
    };
    exports.JsonRpcApiProvider = JsonRpcApiProvider2;
    var _pollingInterval;
    var JsonRpcApiPollingProvider2 = class extends JsonRpcApiProvider2 {
      constructor(network, options) {
        super(network, options);
        __privateAdd(this, _pollingInterval);
        let pollingInterval = this._getOption("pollingInterval");
        if (pollingInterval == null) {
          pollingInterval = defaultOptions2.pollingInterval;
        }
        __privateSet(this, _pollingInterval, pollingInterval);
      }
      _getSubscriber(sub) {
        const subscriber = super._getSubscriber(sub);
        if (isPollable(subscriber)) {
          subscriber.pollingInterval = __privateGet(this, _pollingInterval);
        }
        return subscriber;
      }
      /**
       *  The polling interval (default: 4000 ms)
       */
      get pollingInterval() {
        return __privateGet(this, _pollingInterval);
      }
      set pollingInterval(value) {
        if (!Number.isInteger(value) || value < 0) {
          throw new Error("invalid interval");
        }
        __privateSet(this, _pollingInterval, value);
        this._forEachSubscriber((sub) => {
          if (isPollable(sub)) {
            sub.pollingInterval = __privateGet(this, _pollingInterval);
          }
        });
      }
    };
    _pollingInterval = new WeakMap();
    exports.JsonRpcApiPollingProvider = JsonRpcApiPollingProvider2;
    var _connect;
    var JsonRpcProvider2 = class extends JsonRpcApiPollingProvider2 {
      constructor(url, network, options) {
        if (url == null) {
          url = "http://localhost:8545";
        }
        super(network, options);
        __privateAdd(this, _connect);
        if (typeof url === "string") {
          __privateSet(this, _connect, new index_js_5.FetchRequest(url));
        } else {
          __privateSet(this, _connect, url.clone());
        }
      }
      _getConnection() {
        return __privateGet(this, _connect).clone();
      }
      async send(method, params) {
        await this._start();
        return await super.send(method, params);
      }
      async _send(payload) {
        const request = this._getConnection();
        request.body = JSON.stringify(payload);
        request.setHeader("content-type", "application/json");
        const response = await request.send();
        response.assertOk();
        let resp = response.bodyJson;
        if (!Array.isArray(resp)) {
          resp = [resp];
        }
        return resp;
      }
    };
    _connect = new WeakMap();
    exports.JsonRpcProvider = JsonRpcProvider2;
    function spelunkData(value) {
      if (value == null) {
        return null;
      }
      if (typeof value.message === "string" && value.message.match(/revert/i) && (0, index_js_5.isHexString)(value.data)) {
        return { message: value.message, data: value.data };
      }
      if (typeof value === "object") {
        for (const key in value) {
          const result = spelunkData(value[key]);
          if (result) {
            return result;
          }
        }
        return null;
      }
      if (typeof value === "string") {
        try {
          return spelunkData(JSON.parse(value));
        } catch (error) {
        }
      }
      return null;
    }
    function _spelunkMessage(value, result) {
      if (value == null) {
        return;
      }
      if (typeof value.message === "string") {
        result.push(value.message);
      }
      if (typeof value === "object") {
        for (const key in value) {
          _spelunkMessage(value[key], result);
        }
      }
      if (typeof value === "string") {
        try {
          return _spelunkMessage(JSON.parse(value), result);
        } catch (error) {
        }
      }
    }
    function spelunkMessage(value) {
      const result = [];
      _spelunkMessage(value, result);
      return result;
    }
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-ankr.js
var require_provider_ankr = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-ankr.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AnkrProvider = void 0;
    var index_js_1 = require_utils();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultApiKey = "9f7d929b018cdffb338517efa06f58359e86ff1ffd350bc889738523659e7972";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "rpc.ankr.com/eth";
        case "goerli":
          return "rpc.ankr.com/eth_goerli";
        case "sepolia":
          return "rpc.ankr.com/eth_sepolia";
        case "arbitrum":
          return "rpc.ankr.com/arbitrum";
        case "base":
          return "rpc.ankr.com/base";
        case "base-goerli":
          return "rpc.ankr.com/base_goerli";
        case "base-sepolia":
          return "rpc.ankr.com/base_sepolia";
        case "bnb":
          return "rpc.ankr.com/bsc";
        case "bnbt":
          return "rpc.ankr.com/bsc_testnet_chapel";
        case "matic":
          return "rpc.ankr.com/polygon";
        case "matic-mumbai":
          return "rpc.ankr.com/polygon_mumbai";
        case "optimism":
          return "rpc.ankr.com/optimism";
        case "optimism-goerli":
          return "rpc.ankr.com/optimism_testnet";
        case "optimism-sepolia":
          return "rpc.ankr.com/optimism_sepolia";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var AnkrProvider2 = class _AnkrProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Create a new **AnkrProvider**.
       *
       *  By default connecting to ``mainnet`` with a highly throttled
       *  API key.
       */
      constructor(_network, apiKey) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const options = { polling: true, staticNetwork: network };
        const request = _AnkrProvider.getRequest(network, apiKey);
        super(request, network, options);
        /**
         *  The API key for the Ankr connection.
         */
        __publicField(this, "apiKey");
        (0, index_js_1.defineProperties)(this, { apiKey });
      }
      _getProvider(chainId) {
        try {
          return new _AnkrProvider(chainId, this.apiKey);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%% with
       *  %%apiKey%%.
       */
      static getRequest(network, apiKey) {
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/${apiKey}`);
        request.allowGzip = true;
        if (apiKey === defaultApiKey) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("AnkrProvider");
            return true;
          };
        }
        return request;
      }
      getRpcError(payload, error) {
        if (payload.method === "eth_sendRawTransaction") {
          if (error && error.error && error.error.message === "INTERNAL_ERROR: could not replace existing tx") {
            error.error.message = "replacement transaction underpriced";
          }
        }
        return super.getRpcError(payload, error);
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
    };
    exports.AnkrProvider = AnkrProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-alchemy.js
var require_provider_alchemy = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-alchemy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AlchemyProvider = void 0;
    var index_js_1 = require_utils();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultApiKey = "_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "eth-mainnet.alchemyapi.io";
        case "goerli":
          return "eth-goerli.g.alchemy.com";
        case "sepolia":
          return "eth-sepolia.g.alchemy.com";
        case "arbitrum":
          return "arb-mainnet.g.alchemy.com";
        case "arbitrum-goerli":
          return "arb-goerli.g.alchemy.com";
        case "arbitrum-sepolia":
          return "arb-sepolia.g.alchemy.com";
        case "base":
          return "base-mainnet.g.alchemy.com";
        case "base-goerli":
          return "base-goerli.g.alchemy.com";
        case "base-sepolia":
          return "base-sepolia.g.alchemy.com";
        case "matic":
          return "polygon-mainnet.g.alchemy.com";
        case "matic-amoy":
          return "polygon-amoy.g.alchemy.com";
        case "matic-mumbai":
          return "polygon-mumbai.g.alchemy.com";
        case "optimism":
          return "opt-mainnet.g.alchemy.com";
        case "optimism-goerli":
          return "opt-goerli.g.alchemy.com";
        case "optimism-sepolia":
          return "opt-sepolia.g.alchemy.com";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var AlchemyProvider2 = class _AlchemyProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      constructor(_network, apiKey) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const request = _AlchemyProvider.getRequest(network, apiKey);
        super(request, network, { staticNetwork: network });
        __publicField(this, "apiKey");
        (0, index_js_1.defineProperties)(this, { apiKey });
      }
      _getProvider(chainId) {
        try {
          return new _AlchemyProvider(chainId, this.apiKey);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      async _perform(req) {
        if (req.method === "getTransactionResult") {
          const { trace, tx } = await (0, index_js_1.resolveProperties)({
            trace: this.send("trace_transaction", [req.hash]),
            tx: this.getTransaction(req.hash)
          });
          if (trace == null || tx == null) {
            return null;
          }
          let data;
          let error = false;
          try {
            data = trace[0].result.output;
            error = trace[0].error === "Reverted";
          } catch (error2) {
          }
          if (data) {
            (0, index_js_1.assert)(!error, "an error occurred during transaction executions", "CALL_EXCEPTION", {
              action: "getTransactionResult",
              data,
              reason: null,
              transaction: tx,
              invocation: null,
              revert: null
              // @TODO
            });
            return data;
          }
          (0, index_js_1.assert)(false, "could not parse trace result", "BAD_DATA", { value: trace });
        }
        return await super._perform(req);
      }
      isCommunityResource() {
        return this.apiKey === defaultApiKey;
      }
      static getRequest(network, apiKey) {
        if (apiKey == null) {
          apiKey = defaultApiKey;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/v2/${apiKey}`);
        request.allowGzip = true;
        if (apiKey === defaultApiKey) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("alchemy");
            return true;
          };
        }
        return request;
      }
    };
    exports.AlchemyProvider = AlchemyProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-chainstack.js
var require_provider_chainstack = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-chainstack.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ChainstackProvider = void 0;
    var index_js_1 = require_utils();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    function getApiKey(name) {
      switch (name) {
        case "mainnet":
          return "39f1d67cedf8b7831010a665328c9197";
        case "arbitrum":
          return "0550c209db33c3abf4cc927e1e18cea1";
        case "bnb":
          return "98b5a77e531614387366f6fc5da097f8";
        case "matic":
          return "cd9d4d70377471aa7c142ec4a4205249";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "ethereum-mainnet.core.chainstack.com";
        case "arbitrum":
          return "arbitrum-mainnet.core.chainstack.com";
        case "bnb":
          return "bsc-mainnet.core.chainstack.com";
        case "matic":
          return "polygon-mainnet.core.chainstack.com";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var ChainstackProvider2 = class _ChainstackProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Creates a new **ChainstackProvider**.
       */
      constructor(_network, apiKey) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (apiKey == null) {
          apiKey = getApiKey(network.name);
        }
        const request = _ChainstackProvider.getRequest(network, apiKey);
        super(request, network, { staticNetwork: network });
        /**
         *  The API key for the Chainstack connection.
         */
        __publicField(this, "apiKey");
        (0, index_js_1.defineProperties)(this, { apiKey });
      }
      _getProvider(chainId) {
        try {
          return new _ChainstackProvider(chainId, this.apiKey);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      isCommunityResource() {
        return this.apiKey === getApiKey(this._network.name);
      }
      /**
       *  Returns a prepared request for connecting to %%network%%
       *  with %%apiKey%% and %%projectSecret%%.
       */
      static getRequest(network, apiKey) {
        if (apiKey == null) {
          apiKey = getApiKey(network.name);
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/${apiKey}`);
        request.allowGzip = true;
        if (apiKey === getApiKey(network.name)) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("ChainstackProvider");
            return true;
          };
        }
        return request;
      }
    };
    exports.ChainstackProvider = ChainstackProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js
var require_provider_cloudflare = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-cloudflare.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CloudflareProvider = void 0;
    var index_js_1 = require_utils();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var CloudflareProvider2 = class extends provider_jsonrpc_js_1.JsonRpcProvider {
      constructor(_network) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        (0, index_js_1.assertArgument)(network.name === "mainnet", "unsupported network", "network", _network);
        super("https://cloudflare-eth.com/", network, { staticNetwork: network });
      }
    };
    exports.CloudflareProvider = CloudflareProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-etherscan.js
var require_provider_etherscan = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-etherscan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EtherscanProvider = exports.EtherscanPlugin = void 0;
    var index_js_1 = require_abi();
    var index_js_2 = require_contract2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils();
    var abstract_provider_js_1 = require_abstract_provider();
    var network_js_1 = require_network();
    var plugins_network_js_1 = require_plugins_network();
    var community_js_1 = require_community();
    var THROTTLE = 2e3;
    function isPromise(value) {
      return value && typeof value.then === "function";
    }
    var EtherscanPluginId = "org.ethers.plugins.provider.Etherscan";
    var EtherscanPlugin2 = class _EtherscanPlugin extends plugins_network_js_1.NetworkPlugin {
      /**
       *  Creates a new **EtherscanProvider** which will use
       *  %%baseUrl%%.
       */
      constructor(baseUrl) {
        super(EtherscanPluginId);
        /**
         *  The Etherscan API base URL.
         */
        __publicField(this, "baseUrl");
        (0, index_js_4.defineProperties)(this, { baseUrl });
      }
      clone() {
        return new _EtherscanPlugin(this.baseUrl);
      }
    };
    exports.EtherscanPlugin = EtherscanPlugin2;
    var skipKeys = ["enableCcipRead"];
    var nextId = 1;
    var _plugin;
    var EtherscanProvider2 = class extends abstract_provider_js_1.AbstractProvider {
      /**
       *  Creates a new **EtherscanBaseProvider**.
       */
      constructor(_network, _apiKey) {
        const apiKey = _apiKey != null ? _apiKey : null;
        super();
        /**
         *  The connected network.
         */
        __publicField(this, "network");
        /**
         *  The API key or null if using the community provided bandwidth.
         */
        __publicField(this, "apiKey");
        __privateAdd(this, _plugin);
        const network = network_js_1.Network.from(_network);
        __privateSet(this, _plugin, network.getPlugin(EtherscanPluginId));
        (0, index_js_4.defineProperties)(this, { apiKey, network });
        this.getBaseUrl();
      }
      /**
       *  Returns the base URL.
       *
       *  If an [[EtherscanPlugin]] is configured on the
       *  [[EtherscanBaseProvider_network]], returns the plugin's
       *  baseUrl.
       */
      getBaseUrl() {
        if (__privateGet(this, _plugin)) {
          return __privateGet(this, _plugin).baseUrl;
        }
        switch (this.network.name) {
          case "mainnet":
            return "https://api.etherscan.io";
          case "goerli":
            return "https://api-goerli.etherscan.io";
          case "sepolia":
            return "https://api-sepolia.etherscan.io";
          case "holesky":
            return "https://api-holesky.etherscan.io";
          case "arbitrum":
            return "https://api.arbiscan.io";
          case "arbitrum-goerli":
            return "https://api-goerli.arbiscan.io";
          case "base":
            return "https://api.basescan.org";
          case "base-sepolia":
            return "https://api-sepolia.basescan.org";
          case "bnb":
            return "https://api.bscscan.com";
          case "bnbt":
            return "https://api-testnet.bscscan.com";
          case "matic":
            return "https://api.polygonscan.com";
          case "matic-amoy":
            return "https://api-amoy.polygonscan.com";
          case "matic-mumbai":
            return "https://api-testnet.polygonscan.com";
          case "optimism":
            return "https://api-optimistic.etherscan.io";
          case "optimism-goerli":
            return "https://api-goerli-optimistic.etherscan.io";
          default:
        }
        (0, index_js_4.assertArgument)(false, "unsupported network", "network", this.network);
      }
      /**
       *  Returns the URL for the %%module%% and %%params%%.
       */
      getUrl(module2, params) {
        const query = Object.keys(params).reduce((accum, key) => {
          const value = params[key];
          if (value != null) {
            accum += `&${key}=${value}`;
          }
          return accum;
        }, "");
        const apiKey = this.apiKey ? `&apikey=${this.apiKey}` : "";
        return `${this.getBaseUrl()}/api?module=${module2}${query}${apiKey}`;
      }
      /**
       *  Returns the URL for using POST requests.
       */
      getPostUrl() {
        return `${this.getBaseUrl()}/api`;
      }
      /**
       *  Returns the parameters for using POST requests.
       */
      getPostData(module2, params) {
        params.module = module2;
        params.apikey = this.apiKey;
        return params;
      }
      async detectNetwork() {
        return this.network;
      }
      /**
       *  Resolves to the result of calling %%module%% with %%params%%.
       *
       *  If %%post%%, the request is made as a POST request.
       */
      async fetch(module2, params, post) {
        const id3 = nextId++;
        const url = post ? this.getPostUrl() : this.getUrl(module2, params);
        const payload = post ? this.getPostData(module2, params) : null;
        this.emit("debug", { action: "sendRequest", id: id3, url, payload });
        const request = new index_js_4.FetchRequest(url);
        request.setThrottleParams({ slotInterval: 1e3 });
        request.retryFunc = (req, resp, attempt) => {
          if (this.isCommunityResource()) {
            (0, community_js_1.showThrottleMessage)("Etherscan");
          }
          return Promise.resolve(true);
        };
        request.processFunc = async (request2, response2) => {
          const result2 = response2.hasBody() ? JSON.parse((0, index_js_4.toUtf8String)(response2.body)) : {};
          const throttle = (typeof result2.result === "string" ? result2.result : "").toLowerCase().indexOf("rate limit") >= 0;
          if (module2 === "proxy") {
            if (result2 && result2.status == 0 && result2.message == "NOTOK" && throttle) {
              this.emit("debug", { action: "receiveError", id: id3, reason: "proxy-NOTOK", error: result2 });
              response2.throwThrottleError(result2.result, THROTTLE);
            }
          } else {
            if (throttle) {
              this.emit("debug", { action: "receiveError", id: id3, reason: "null result", error: result2.result });
              response2.throwThrottleError(result2.result, THROTTLE);
            }
          }
          return response2;
        };
        if (payload) {
          request.setHeader("content-type", "application/x-www-form-urlencoded; charset=UTF-8");
          request.body = Object.keys(payload).map((k) => `${k}=${payload[k]}`).join("&");
        }
        const response = await request.send();
        try {
          response.assertOk();
        } catch (error) {
          this.emit("debug", { action: "receiveError", id: id3, error, reason: "assertOk" });
          (0, index_js_4.assert)(false, "response error", "SERVER_ERROR", { request, response });
        }
        if (!response.hasBody()) {
          this.emit("debug", { action: "receiveError", id: id3, error: "missing body", reason: "null body" });
          (0, index_js_4.assert)(false, "missing response", "SERVER_ERROR", { request, response });
        }
        const result = JSON.parse((0, index_js_4.toUtf8String)(response.body));
        if (module2 === "proxy") {
          if (result.jsonrpc != "2.0") {
            this.emit("debug", { action: "receiveError", id: id3, result, reason: "invalid JSON-RPC" });
            (0, index_js_4.assert)(false, "invalid JSON-RPC response (missing jsonrpc='2.0')", "SERVER_ERROR", { request, response, info: { result } });
          }
          if (result.error) {
            this.emit("debug", { action: "receiveError", id: id3, result, reason: "JSON-RPC error" });
            (0, index_js_4.assert)(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
          }
          this.emit("debug", { action: "receiveRequest", id: id3, result });
          return result.result;
        } else {
          if (result.status == 0 && (result.message === "No records found" || result.message === "No transactions found")) {
            this.emit("debug", { action: "receiveRequest", id: id3, result });
            return result.result;
          }
          if (result.status != 1 || typeof result.message === "string" && !result.message.match(/^OK/)) {
            this.emit("debug", { action: "receiveError", id: id3, result });
            (0, index_js_4.assert)(false, "error response", "SERVER_ERROR", { request, response, info: { result } });
          }
          this.emit("debug", { action: "receiveRequest", id: id3, result });
          return result.result;
        }
      }
      /**
       *  Returns %%transaction%% normalized for the Etherscan API.
       */
      _getTransactionPostData(transaction) {
        const result = {};
        for (let key in transaction) {
          if (skipKeys.indexOf(key) >= 0) {
            continue;
          }
          if (transaction[key] == null) {
            continue;
          }
          let value = transaction[key];
          if (key === "type" && value === 0) {
            continue;
          }
          if (key === "blockTag" && value === "latest") {
            continue;
          }
          if ({ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true }[key]) {
            value = (0, index_js_4.toQuantity)(value);
          } else if (key === "accessList") {
            value = "[" + (0, index_js_3.accessListify)(value).map((set) => {
              return `{address:"${set.address}",storageKeys:["${set.storageKeys.join('","')}"]}`;
            }).join(",") + "]";
          } else if (key === "blobVersionedHashes") {
            if (value.length === 0) {
              continue;
            }
            (0, index_js_4.assert)(false, "Etherscan API does not support blobVersionedHashes", "UNSUPPORTED_OPERATION", {
              operation: "_getTransactionPostData",
              info: { transaction }
            });
          } else {
            value = (0, index_js_4.hexlify)(value);
          }
          result[key] = value;
        }
        return result;
      }
      /**
       *  Throws the normalized Etherscan error.
       */
      _checkError(req, error, transaction) {
        let message = "";
        if ((0, index_js_4.isError)(error, "SERVER_ERROR")) {
          try {
            message = error.info.result.error.message;
          } catch (e) {
          }
          if (!message) {
            try {
              message = error.info.message;
            } catch (e) {
            }
          }
        }
        if (req.method === "estimateGas") {
          if (!message.match(/revert/i) && message.match(/insufficient funds/i)) {
            (0, index_js_4.assert)(false, "insufficient funds", "INSUFFICIENT_FUNDS", {
              transaction: req.transaction
            });
          }
        }
        if (req.method === "call" || req.method === "estimateGas") {
          if (message.match(/execution reverted/i)) {
            let data = "";
            try {
              data = error.info.result.error.data;
            } catch (error2) {
            }
            const e = index_js_1.AbiCoder.getBuiltinCallException(req.method, req.transaction, data);
            e.info = { request: req, error };
            throw e;
          }
        }
        if (message) {
          if (req.method === "broadcastTransaction") {
            const transaction2 = index_js_3.Transaction.from(req.signedTransaction);
            if (message.match(/replacement/i) && message.match(/underpriced/i)) {
              (0, index_js_4.assert)(false, "replacement fee too low", "REPLACEMENT_UNDERPRICED", {
                transaction: transaction2
              });
            }
            if (message.match(/insufficient funds/)) {
              (0, index_js_4.assert)(false, "insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
                transaction: transaction2
              });
            }
            if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {
              (0, index_js_4.assert)(false, "nonce has already been used", "NONCE_EXPIRED", {
                transaction: transaction2
              });
            }
          }
        }
        throw error;
      }
      async _detectNetwork() {
        return this.network;
      }
      async _perform(req) {
        switch (req.method) {
          case "chainId":
            return this.network.chainId;
          case "getBlockNumber":
            return this.fetch("proxy", { action: "eth_blockNumber" });
          case "getGasPrice":
            return this.fetch("proxy", { action: "eth_gasPrice" });
          case "getPriorityFee":
            if (this.network.name === "mainnet") {
              return "1000000000";
            } else if (this.network.name === "optimism") {
              return "1000000";
            } else {
              throw new Error("fallback onto the AbstractProvider default");
            }
          case "getBalance":
            return this.fetch("account", {
              action: "balance",
              address: req.address,
              tag: req.blockTag
            });
          case "getTransactionCount":
            return this.fetch("proxy", {
              action: "eth_getTransactionCount",
              address: req.address,
              tag: req.blockTag
            });
          case "getCode":
            return this.fetch("proxy", {
              action: "eth_getCode",
              address: req.address,
              tag: req.blockTag
            });
          case "getStorage":
            return this.fetch("proxy", {
              action: "eth_getStorageAt",
              address: req.address,
              position: req.position,
              tag: req.blockTag
            });
          case "broadcastTransaction":
            return this.fetch("proxy", {
              action: "eth_sendRawTransaction",
              hex: req.signedTransaction
            }, true).catch((error) => {
              return this._checkError(req, error, req.signedTransaction);
            });
          case "getBlock":
            if ("blockTag" in req) {
              return this.fetch("proxy", {
                action: "eth_getBlockByNumber",
                tag: req.blockTag,
                boolean: req.includeTransactions ? "true" : "false"
              });
            }
            (0, index_js_4.assert)(false, "getBlock by blockHash not supported by Etherscan", "UNSUPPORTED_OPERATION", {
              operation: "getBlock(blockHash)"
            });
          case "getTransaction":
            return this.fetch("proxy", {
              action: "eth_getTransactionByHash",
              txhash: req.hash
            });
          case "getTransactionReceipt":
            return this.fetch("proxy", {
              action: "eth_getTransactionReceipt",
              txhash: req.hash
            });
          case "call": {
            if (req.blockTag !== "latest") {
              throw new Error("EtherscanProvider does not support blockTag for call");
            }
            const postData = this._getTransactionPostData(req.transaction);
            postData.module = "proxy";
            postData.action = "eth_call";
            try {
              return await this.fetch("proxy", postData, true);
            } catch (error) {
              return this._checkError(req, error, req.transaction);
            }
          }
          case "estimateGas": {
            const postData = this._getTransactionPostData(req.transaction);
            postData.module = "proxy";
            postData.action = "eth_estimateGas";
            try {
              return await this.fetch("proxy", postData, true);
            } catch (error) {
              return this._checkError(req, error, req.transaction);
            }
          }
          default:
            break;
        }
        return super._perform(req);
      }
      async getNetwork() {
        return this.network;
      }
      /**
       *  Resolves to the current price of ether.
       *
       *  This returns ``0`` on any network other than ``mainnet``.
       */
      async getEtherPrice() {
        if (this.network.name !== "mainnet") {
          return 0;
        }
        return parseFloat((await this.fetch("stats", { action: "ethprice" })).ethusd);
      }
      /**
       *  Resolves to a [Contract]] for %%address%%, using the
       *  Etherscan API to retreive the Contract ABI.
       */
      async getContract(_address) {
        let address = this._getAddress(_address);
        if (isPromise(address)) {
          address = await address;
        }
        try {
          const resp = await this.fetch("contract", {
            action: "getabi",
            address
          });
          const abi = JSON.parse(resp);
          return new index_js_2.Contract(address, abi, this);
        } catch (error) {
          return null;
        }
      }
      isCommunityResource() {
        return this.apiKey == null;
      }
    };
    _plugin = new WeakMap();
    exports.EtherscanProvider = EtherscanProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/ws-browser.js
var require_ws_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/ws-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebSocket = void 0;
    function getGlobal3() {
      if (typeof self !== "undefined") {
        return self;
      }
      if (typeof window !== "undefined") {
        return window;
      }
      if (typeof global !== "undefined") {
        return global;
      }
      throw new Error("unable to locate global object");
    }
    var _WebSocket2 = getGlobal3().WebSocket;
    exports.WebSocket = _WebSocket2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-socket.js
var require_provider_socket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-socket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SocketProvider = exports.SocketEventSubscriber = exports.SocketPendingSubscriber = exports.SocketBlockSubscriber = exports.SocketSubscriber = void 0;
    var abstract_provider_js_1 = require_abstract_provider();
    var index_js_1 = require_utils();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var _provider, _filter2, _filterId, _paused, _emitPromise;
    var SocketSubscriber2 = class {
      /**
       *  Creates a new **SocketSubscriber** attached to %%provider%% listening
       *  to %%filter%%.
       */
      constructor(provider, filter) {
        __privateAdd(this, _provider);
        __privateAdd(this, _filter2);
        __privateAdd(this, _filterId);
        __privateAdd(this, _paused);
        __privateAdd(this, _emitPromise);
        __privateSet(this, _provider, provider);
        __privateSet(this, _filter2, JSON.stringify(filter));
        __privateSet(this, _filterId, null);
        __privateSet(this, _paused, null);
        __privateSet(this, _emitPromise, null);
      }
      /**
       *  The filter.
       */
      get filter() {
        return JSON.parse(__privateGet(this, _filter2));
      }
      start() {
        __privateSet(this, _filterId, __privateGet(this, _provider).send("eth_subscribe", this.filter).then((filterId) => {
          ;
          __privateGet(this, _provider)._register(filterId, this);
          return filterId;
        }));
      }
      stop() {
        __privateGet(this, _filterId).then((filterId) => {
          if (__privateGet(this, _provider).destroyed) {
            return;
          }
          __privateGet(this, _provider).send("eth_unsubscribe", [filterId]);
        });
        __privateSet(this, _filterId, null);
      }
      // @TODO: pause should trap the current blockNumber, unsub, and on resume use getLogs
      //        and resume
      pause(dropWhilePaused) {
        (0, index_js_1.assert)(dropWhilePaused, "preserve logs while paused not supported by SocketSubscriber yet", "UNSUPPORTED_OPERATION", { operation: "pause(false)" });
        __privateSet(this, _paused, !!dropWhilePaused);
      }
      resume() {
        __privateSet(this, _paused, null);
      }
      /**
       *  @_ignore:
       */
      _handleMessage(message) {
        if (__privateGet(this, _filterId) == null) {
          return;
        }
        if (__privateGet(this, _paused) === null) {
          let emitPromise = __privateGet(this, _emitPromise);
          if (emitPromise == null) {
            emitPromise = this._emit(__privateGet(this, _provider), message);
          } else {
            emitPromise = emitPromise.then(async () => {
              await this._emit(__privateGet(this, _provider), message);
            });
          }
          __privateSet(this, _emitPromise, emitPromise.then(() => {
            if (__privateGet(this, _emitPromise) === emitPromise) {
              __privateSet(this, _emitPromise, null);
            }
          }));
        }
      }
      /**
       *  Sub-classes **must** override this to emit the events on the
       *  provider.
       */
      async _emit(provider, message) {
        throw new Error("sub-classes must implemente this; _emit");
      }
    };
    _provider = new WeakMap();
    _filter2 = new WeakMap();
    _filterId = new WeakMap();
    _paused = new WeakMap();
    _emitPromise = new WeakMap();
    exports.SocketSubscriber = SocketSubscriber2;
    var SocketBlockSubscriber2 = class extends SocketSubscriber2 {
      /**
       *  @_ignore:
       */
      constructor(provider) {
        super(provider, ["newHeads"]);
      }
      async _emit(provider, message) {
        provider.emit("block", parseInt(message.number));
      }
    };
    exports.SocketBlockSubscriber = SocketBlockSubscriber2;
    var SocketPendingSubscriber2 = class extends SocketSubscriber2 {
      /**
       *  @_ignore:
       */
      constructor(provider) {
        super(provider, ["newPendingTransactions"]);
      }
      async _emit(provider, message) {
        provider.emit("pending", message);
      }
    };
    exports.SocketPendingSubscriber = SocketPendingSubscriber2;
    var _logFilter;
    var SocketEventSubscriber2 = class extends SocketSubscriber2 {
      /**
       *  @_ignore:
       */
      constructor(provider, filter) {
        super(provider, ["logs", filter]);
        __privateAdd(this, _logFilter);
        __privateSet(this, _logFilter, JSON.stringify(filter));
      }
      /**
       *  The filter.
       */
      get logFilter() {
        return JSON.parse(__privateGet(this, _logFilter));
      }
      async _emit(provider, message) {
        provider.emit(this.logFilter, provider._wrapLog(message, provider._network));
      }
    };
    _logFilter = new WeakMap();
    exports.SocketEventSubscriber = SocketEventSubscriber2;
    var _callbacks, _subs, _pending;
    var SocketProvider2 = class extends provider_jsonrpc_js_1.JsonRpcApiProvider {
      /**
       *  Creates a new **SocketProvider** connected to %%network%%.
       *
       *  If unspecified, the network will be discovered.
       */
      constructor(network, _options2) {
        const options = Object.assign({}, _options2 != null ? _options2 : {});
        (0, index_js_1.assertArgument)(options.batchMaxCount == null || options.batchMaxCount === 1, "sockets-based providers do not support batches", "options.batchMaxCount", _options2);
        options.batchMaxCount = 1;
        if (options.staticNetwork == null) {
          options.staticNetwork = true;
        }
        super(network, options);
        __privateAdd(this, _callbacks);
        // Maps each filterId to its subscriber
        __privateAdd(this, _subs);
        // If any events come in before a subscriber has finished
        // registering, queue them
        __privateAdd(this, _pending);
        __privateSet(this, _callbacks, /* @__PURE__ */ new Map());
        __privateSet(this, _subs, /* @__PURE__ */ new Map());
        __privateSet(this, _pending, /* @__PURE__ */ new Map());
      }
      // This value is only valid after _start has been called
      /*
      get _network(): Network {
          if (this.#network == null) {
              throw new Error("this shouldn't happen");
          }
          return this.#network.clone();
      }
      */
      _getSubscriber(sub) {
        switch (sub.type) {
          case "close":
            return new abstract_provider_js_1.UnmanagedSubscriber("close");
          case "block":
            return new SocketBlockSubscriber2(this);
          case "pending":
            return new SocketPendingSubscriber2(this);
          case "event":
            return new SocketEventSubscriber2(this, sub.filter);
          case "orphan":
            if (sub.filter.orphan === "drop-log") {
              return new abstract_provider_js_1.UnmanagedSubscriber("drop-log");
            }
        }
        return super._getSubscriber(sub);
      }
      /**
       *  Register a new subscriber. This is used internalled by Subscribers
       *  and generally is unecessary unless extending capabilities.
       */
      _register(filterId, subscriber) {
        __privateGet(this, _subs).set(filterId, subscriber);
        const pending = __privateGet(this, _pending).get(filterId);
        if (pending) {
          for (const message of pending) {
            subscriber._handleMessage(message);
          }
          __privateGet(this, _pending).delete(filterId);
        }
      }
      async _send(payload) {
        (0, index_js_1.assertArgument)(!Array.isArray(payload), "WebSocket does not support batch send", "payload", payload);
        const promise = new Promise((resolve, reject) => {
          __privateGet(this, _callbacks).set(payload.id, { payload, resolve, reject });
        });
        await this._waitUntilReady();
        await this._write(JSON.stringify(payload));
        return [await promise];
      }
      // Sub-classes must call this once they are connected
      /*
          async _start(): Promise<void> {
              if (this.#ready) { return; }
      
              for (const { payload } of this.#callbacks.values()) {
                  await this._write(JSON.stringify(payload));
              }
      
              this.#ready = (async function() {
                  await super._start();
              })();
          }
          */
      /**
       *  Sub-classes **must** call this with messages received over their
       *  transport to be processed and dispatched.
       */
      async _processMessage(message) {
        const result = JSON.parse(message);
        if (result && typeof result === "object" && "id" in result) {
          const callback = __privateGet(this, _callbacks).get(result.id);
          if (callback == null) {
            this.emit("error", (0, index_js_1.makeError)("received result for unknown id", "UNKNOWN_ERROR", {
              reasonCode: "UNKNOWN_ID",
              result
            }));
            return;
          }
          __privateGet(this, _callbacks).delete(result.id);
          callback.resolve(result);
        } else if (result && result.method === "eth_subscription") {
          const filterId = result.params.subscription;
          const subscriber = __privateGet(this, _subs).get(filterId);
          if (subscriber) {
            subscriber._handleMessage(result.params.result);
          } else {
            let pending = __privateGet(this, _pending).get(filterId);
            if (pending == null) {
              pending = [];
              __privateGet(this, _pending).set(filterId, pending);
            }
            pending.push(result.params.result);
          }
        } else {
          this.emit("error", (0, index_js_1.makeError)("received unexpected message", "UNKNOWN_ERROR", {
            reasonCode: "UNEXPECTED_MESSAGE",
            result
          }));
          return;
        }
      }
      /**
       *  Sub-classes **must** override this to send %%message%% over their
       *  transport.
       */
      async _write(message) {
        throw new Error("sub-classes must override this");
      }
    };
    _callbacks = new WeakMap();
    _subs = new WeakMap();
    _pending = new WeakMap();
    exports.SocketProvider = SocketProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-websocket.js
var require_provider_websocket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-websocket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebSocketProvider = void 0;
    var ws_js_1 = require_ws_browser();
    var provider_socket_js_1 = require_provider_socket();
    var _connect, _websocket;
    var WebSocketProvider2 = class extends provider_socket_js_1.SocketProvider {
      constructor(url, network, options) {
        super(network, options);
        __privateAdd(this, _connect);
        __privateAdd(this, _websocket);
        if (typeof url === "string") {
          __privateSet(this, _connect, () => {
            return new ws_js_1.WebSocket(url);
          });
          __privateSet(this, _websocket, __privateGet(this, _connect).call(this));
        } else if (typeof url === "function") {
          __privateSet(this, _connect, url);
          __privateSet(this, _websocket, url());
        } else {
          __privateSet(this, _connect, null);
          __privateSet(this, _websocket, url);
        }
        this.websocket.onopen = async () => {
          try {
            await this._start();
            this.resume();
          } catch (error) {
            console.log("failed to start WebsocketProvider", error);
          }
        };
        this.websocket.onmessage = (message) => {
          this._processMessage(message.data);
        };
      }
      get websocket() {
        if (__privateGet(this, _websocket) == null) {
          throw new Error("websocket closed");
        }
        return __privateGet(this, _websocket);
      }
      async _write(message) {
        this.websocket.send(message);
      }
      async destroy() {
        if (__privateGet(this, _websocket) != null) {
          __privateGet(this, _websocket).close();
          __privateSet(this, _websocket, null);
        }
        super.destroy();
      }
    };
    _connect = new WeakMap();
    _websocket = new WeakMap();
    exports.WebSocketProvider = WebSocketProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-infura.js
var require_provider_infura = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-infura.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InfuraProvider = exports.InfuraWebSocketProvider = void 0;
    var index_js_1 = require_utils();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var provider_websocket_js_1 = require_provider_websocket();
    var defaultProjectId = "84842078b09946638c03157f83405213";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "mainnet.infura.io";
        case "goerli":
          return "goerli.infura.io";
        case "sepolia":
          return "sepolia.infura.io";
        case "arbitrum":
          return "arbitrum-mainnet.infura.io";
        case "arbitrum-goerli":
          return "arbitrum-goerli.infura.io";
        case "arbitrum-sepolia":
          return "arbitrum-sepolia.infura.io";
        case "base":
          return "base-mainnet.infura.io";
        case "base-goerlia":
          return "base-goerli.infura.io";
        case "base-sepolia":
          return "base-sepolia.infura.io";
        case "bnb":
          return "bnbsmartchain-mainnet.infura.io";
        case "bnbt":
          return "bnbsmartchain-testnet.infura.io";
        case "linea":
          return "linea-mainnet.infura.io";
        case "linea-goerli":
          return "linea-goerli.infura.io";
        case "linea-sepolia":
          return "linea-sepolia.infura.io";
        case "matic":
          return "polygon-mainnet.infura.io";
        case "matic-amoy":
          return "polygon-amoy.infura.io";
        case "matic-mumbai":
          return "polygon-mumbai.infura.io";
        case "optimism":
          return "optimism-mainnet.infura.io";
        case "optimism-goerli":
          return "optimism-goerli.infura.io";
        case "optimism-sepolia":
          return "optimism-sepolia.infura.io";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var InfuraWebSocketProvider2 = class extends provider_websocket_js_1.WebSocketProvider {
      /**
       *  Creates a new **InfuraWebSocketProvider**.
       */
      constructor(network, projectId) {
        const provider = new InfuraProvider2(network, projectId);
        const req = provider._getConnection();
        (0, index_js_1.assert)(!req.credentials, "INFURA WebSocket project secrets unsupported", "UNSUPPORTED_OPERATION", { operation: "InfuraProvider.getWebSocketProvider()" });
        const url = req.url.replace(/^http/i, "ws").replace("/v3/", "/ws/v3/");
        super(url, provider._network);
        /**
         *  The Project ID for the INFURA connection.
         */
        __publicField(this, "projectId");
        /**
         *  The Project Secret.
         *
         *  If null, no authenticated requests are made. This should not
         *  be used outside of private contexts.
         */
        __publicField(this, "projectSecret");
        (0, index_js_1.defineProperties)(this, {
          projectId: provider.projectId,
          projectSecret: provider.projectSecret
        });
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
    };
    exports.InfuraWebSocketProvider = InfuraWebSocketProvider2;
    var InfuraProvider2 = class _InfuraProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Creates a new **InfuraProvider**.
       */
      constructor(_network, projectId, projectSecret) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (projectId == null) {
          projectId = defaultProjectId;
        }
        if (projectSecret == null) {
          projectSecret = null;
        }
        const request = _InfuraProvider.getRequest(network, projectId, projectSecret);
        super(request, network, { staticNetwork: network });
        /**
         *  The Project ID for the INFURA connection.
         */
        __publicField(this, "projectId");
        /**
         *  The Project Secret.
         *
         *  If null, no authenticated requests are made. This should not
         *  be used outside of private contexts.
         */
        __publicField(this, "projectSecret");
        (0, index_js_1.defineProperties)(this, { projectId, projectSecret });
      }
      _getProvider(chainId) {
        try {
          return new _InfuraProvider(chainId, this.projectId, this.projectSecret);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      isCommunityResource() {
        return this.projectId === defaultProjectId;
      }
      /**
       *  Creates a new **InfuraWebSocketProvider**.
       */
      static getWebSocketProvider(network, projectId) {
        return new InfuraWebSocketProvider2(network, projectId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%%
       *  with %%projectId%% and %%projectSecret%%.
       */
      static getRequest(network, projectId, projectSecret) {
        if (projectId == null) {
          projectId = defaultProjectId;
        }
        if (projectSecret == null) {
          projectSecret = null;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/v3/${projectId}`);
        request.allowGzip = true;
        if (projectSecret) {
          request.setCredentials("", projectSecret);
        }
        if (projectId === defaultProjectId) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("InfuraProvider");
            return true;
          };
        }
        return request;
      }
    };
    exports.InfuraProvider = InfuraProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-quicknode.js
var require_provider_quicknode = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-quicknode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuickNodeProvider = void 0;
    var index_js_1 = require_utils();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultToken = "919b412a057b5e9c9b6dce193c5a60242d6efadb";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "ethers.quiknode.pro";
        case "goerli":
          return "ethers.ethereum-goerli.quiknode.pro";
        case "sepolia":
          return "ethers.ethereum-sepolia.quiknode.pro";
        case "holesky":
          return "ethers.ethereum-holesky.quiknode.pro";
        case "arbitrum":
          return "ethers.arbitrum-mainnet.quiknode.pro";
        case "arbitrum-goerli":
          return "ethers.arbitrum-goerli.quiknode.pro";
        case "arbitrum-sepolia":
          return "ethers.arbitrum-sepolia.quiknode.pro";
        case "base":
          return "ethers.base-mainnet.quiknode.pro";
        case "base-goerli":
          return "ethers.base-goerli.quiknode.pro";
        case "base-spolia":
          return "ethers.base-sepolia.quiknode.pro";
        case "bnb":
          return "ethers.bsc.quiknode.pro";
        case "bnbt":
          return "ethers.bsc-testnet.quiknode.pro";
        case "matic":
          return "ethers.matic.quiknode.pro";
        case "matic-mumbai":
          return "ethers.matic-testnet.quiknode.pro";
        case "optimism":
          return "ethers.optimism.quiknode.pro";
        case "optimism-goerli":
          return "ethers.optimism-goerli.quiknode.pro";
        case "optimism-sepolia":
          return "ethers.optimism-sepolia.quiknode.pro";
        case "xdai":
          return "ethers.xdai.quiknode.pro";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var QuickNodeProvider2 = class _QuickNodeProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Creates a new **QuickNodeProvider**.
       */
      constructor(_network, token) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (token == null) {
          token = defaultToken;
        }
        const request = _QuickNodeProvider.getRequest(network, token);
        super(request, network, { staticNetwork: network });
        /**
         *  The API token.
         */
        __publicField(this, "token");
        (0, index_js_1.defineProperties)(this, { token });
      }
      _getProvider(chainId) {
        try {
          return new _QuickNodeProvider(chainId, this.token);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      isCommunityResource() {
        return this.token === defaultToken;
      }
      /**
       *  Returns a new request prepared for %%network%% and the
       *  %%token%%.
       */
      static getRequest(network, token) {
        if (token == null) {
          token = defaultToken;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/${token}`);
        request.allowGzip = true;
        if (token === defaultToken) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("QuickNodeProvider");
            return true;
          };
        }
        return request;
      }
    };
    exports.QuickNodeProvider = QuickNodeProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-fallback.js
var require_provider_fallback = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-fallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FallbackProvider = void 0;
    var index_js_1 = require_utils();
    var abstract_provider_js_1 = require_abstract_provider();
    var network_js_1 = require_network();
    var BN_17 = BigInt("1");
    var BN_25 = BigInt("2");
    function shuffle(array) {
      for (let i = array.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        const tmp = array[i];
        array[i] = array[j];
        array[j] = tmp;
      }
    }
    function stall(duration) {
      return new Promise((resolve) => {
        setTimeout(resolve, duration);
      });
    }
    function getTime2() {
      return (/* @__PURE__ */ new Date()).getTime();
    }
    function stringify2(value) {
      return JSON.stringify(value, (key, value2) => {
        if (typeof value2 === "bigint") {
          return { type: "bigint", value: value2.toString() };
        }
        return value2;
      });
    }
    var defaultConfig = { stallTimeout: 400, priority: 1, weight: 1 };
    var defaultState = {
      blockNumber: -2,
      requests: 0,
      lateResponses: 0,
      errorResponses: 0,
      outOfSync: -1,
      unsupportedEvents: 0,
      rollingDuration: 0,
      score: 0,
      _network: null,
      _updateNumber: null,
      _totalTime: 0,
      _lastFatalError: null,
      _lastFatalErrorTimestamp: 0
    };
    async function waitForSync(config, blockNumber) {
      while (config.blockNumber < 0 || config.blockNumber < blockNumber) {
        if (!config._updateNumber) {
          config._updateNumber = (async () => {
            try {
              const blockNumber2 = await config.provider.getBlockNumber();
              if (blockNumber2 > config.blockNumber) {
                config.blockNumber = blockNumber2;
              }
            } catch (error) {
              config.blockNumber = -2;
              config._lastFatalError = error;
              config._lastFatalErrorTimestamp = getTime2();
            }
            config._updateNumber = null;
          })();
        }
        await config._updateNumber;
        config.outOfSync++;
        if (config._lastFatalError) {
          break;
        }
      }
    }
    function _normalize(value) {
      if (value == null) {
        return "null";
      }
      if (Array.isArray(value)) {
        return "[" + value.map(_normalize).join(",") + "]";
      }
      if (typeof value === "object" && typeof value.toJSON === "function") {
        return _normalize(value.toJSON());
      }
      switch (typeof value) {
        case "boolean":
        case "symbol":
          return value.toString();
        case "bigint":
        case "number":
          return BigInt(value).toString();
        case "string":
          return JSON.stringify(value);
        case "object": {
          const keys = Object.keys(value);
          keys.sort();
          return "{" + keys.map((k) => `${JSON.stringify(k)}:${_normalize(value[k])}`).join(",") + "}";
        }
      }
      console.log("Could not serialize", value);
      throw new Error("Hmm...");
    }
    function normalizeResult(value) {
      if ("error" in value) {
        const error = value.error;
        return { tag: _normalize(error), value: error };
      }
      const result = value.result;
      return { tag: _normalize(result), value: result };
    }
    function checkQuorum(quorum, results) {
      const tally = /* @__PURE__ */ new Map();
      for (const { value, tag, weight } of results) {
        const t = tally.get(tag) || { value, weight: 0 };
        t.weight += weight;
        tally.set(tag, t);
      }
      let best = null;
      for (const r2 of tally.values()) {
        if (r2.weight >= quorum && (!best || r2.weight > best.weight)) {
          best = r2;
        }
      }
      if (best) {
        return best.value;
      }
      return void 0;
    }
    function getMedian(quorum, results) {
      let resultWeight = 0;
      const errorMap = /* @__PURE__ */ new Map();
      let bestError = null;
      const values = [];
      for (const { value, tag, weight } of results) {
        if (value instanceof Error) {
          const e = errorMap.get(tag) || { value, weight: 0 };
          e.weight += weight;
          errorMap.set(tag, e);
          if (bestError == null || e.weight > bestError.weight) {
            bestError = e;
          }
        } else {
          values.push(BigInt(value));
          resultWeight += weight;
        }
      }
      if (resultWeight < quorum) {
        if (bestError && bestError.weight >= quorum) {
          return bestError.value;
        }
        return void 0;
      }
      values.sort((a, b2) => a < b2 ? -1 : b2 > a ? 1 : 0);
      const mid = Math.floor(values.length / 2);
      if (values.length % 2) {
        return values[mid];
      }
      return (values[mid - 1] + values[mid] + BN_17) / BN_25;
    }
    function getAnyResult(quorum, results) {
      const result = checkQuorum(quorum, results);
      if (result !== void 0) {
        return result;
      }
      for (const r2 of results) {
        if (r2.value) {
          return r2.value;
        }
      }
      return void 0;
    }
    function getFuzzyMode(quorum, results) {
      if (quorum === 1) {
        return (0, index_js_1.getNumber)(getMedian(quorum, results), "%internal");
      }
      const tally = /* @__PURE__ */ new Map();
      const add2 = (result, weight) => {
        const t = tally.get(result) || { result, weight: 0 };
        t.weight += weight;
        tally.set(result, t);
      };
      for (const { weight, value } of results) {
        const r2 = (0, index_js_1.getNumber)(value);
        add2(r2 - 1, weight);
        add2(r2, weight);
        add2(r2 + 1, weight);
      }
      let bestWeight = 0;
      let bestResult = void 0;
      for (const { weight, result } of tally.values()) {
        if (weight >= quorum && (weight > bestWeight || bestResult != null && weight === bestWeight && result > bestResult)) {
          bestWeight = weight;
          bestResult = result;
        }
      }
      return bestResult;
    }
    var _configs, _height, _initialSyncPromise, _FallbackProvider_instances, getNextConfig_fn, addRunner_fn, initialSync_fn, checkQuorum_fn, waitForQuorum_fn;
    var FallbackProvider2 = class extends abstract_provider_js_1.AbstractProvider {
      /**
       *  Creates a new **FallbackProvider** with %%providers%% connected to
       *  %%network%%.
       *
       *  If a [[Provider]] is included in %%providers%%, defaults are used
       *  for the configuration.
       */
      constructor(providers, network, options) {
        super(network, options);
        __privateAdd(this, _FallbackProvider_instances);
        /**
         *  The number of backends that must agree on a value before it is
         *  accpeted.
         */
        __publicField(this, "quorum");
        /**
         *  @_ignore:
         */
        __publicField(this, "eventQuorum");
        /**
         *  @_ignore:
         */
        __publicField(this, "eventWorkers");
        __privateAdd(this, _configs);
        __privateAdd(this, _height);
        __privateAdd(this, _initialSyncPromise);
        __privateSet(this, _configs, providers.map((p) => {
          if (p instanceof abstract_provider_js_1.AbstractProvider) {
            return Object.assign({ provider: p }, defaultConfig, defaultState);
          } else {
            return Object.assign({}, defaultConfig, p, defaultState);
          }
        }));
        __privateSet(this, _height, -2);
        __privateSet(this, _initialSyncPromise, null);
        if (options && options.quorum != null) {
          this.quorum = options.quorum;
        } else {
          this.quorum = Math.ceil(__privateGet(this, _configs).reduce((accum, config) => {
            accum += config.weight;
            return accum;
          }, 0) / 2);
        }
        this.eventQuorum = 1;
        this.eventWorkers = 1;
        (0, index_js_1.assertArgument)(this.quorum <= __privateGet(this, _configs).reduce((a, c) => a + c.weight, 0), "quorum exceed provider weight", "quorum", this.quorum);
      }
      get providerConfigs() {
        return __privateGet(this, _configs).map((c) => {
          const result = Object.assign({}, c);
          for (const key in result) {
            if (key[0] === "_") {
              delete result[key];
            }
          }
          return result;
        });
      }
      async _detectNetwork() {
        return network_js_1.Network.from((0, index_js_1.getBigInt)(await this._perform({ method: "chainId" })));
      }
      // @TODO: Add support to select providers to be the event subscriber
      //_getSubscriber(sub: Subscription): Subscriber {
      //    throw new Error("@TODO");
      //}
      /**
       *  Transforms a %%req%% into the correct method call on %%provider%%.
       */
      async _translatePerform(provider, req) {
        switch (req.method) {
          case "broadcastTransaction":
            return await provider.broadcastTransaction(req.signedTransaction);
          case "call":
            return await provider.call(Object.assign({}, req.transaction, { blockTag: req.blockTag }));
          case "chainId":
            return (await provider.getNetwork()).chainId;
          case "estimateGas":
            return await provider.estimateGas(req.transaction);
          case "getBalance":
            return await provider.getBalance(req.address, req.blockTag);
          case "getBlock": {
            const block = "blockHash" in req ? req.blockHash : req.blockTag;
            return await provider.getBlock(block, req.includeTransactions);
          }
          case "getBlockNumber":
            return await provider.getBlockNumber();
          case "getCode":
            return await provider.getCode(req.address, req.blockTag);
          case "getGasPrice":
            return (await provider.getFeeData()).gasPrice;
          case "getPriorityFee":
            return (await provider.getFeeData()).maxPriorityFeePerGas;
          case "getLogs":
            return await provider.getLogs(req.filter);
          case "getStorage":
            return await provider.getStorage(req.address, req.position, req.blockTag);
          case "getTransaction":
            return await provider.getTransaction(req.hash);
          case "getTransactionCount":
            return await provider.getTransactionCount(req.address, req.blockTag);
          case "getTransactionReceipt":
            return await provider.getTransactionReceipt(req.hash);
          case "getTransactionResult":
            return await provider.getTransactionResult(req.hash);
        }
      }
      async _perform(req) {
        if (req.method === "broadcastTransaction") {
          const results = __privateGet(this, _configs).map((c) => null);
          const broadcasts = __privateGet(this, _configs).map(async ({ provider, weight }, index) => {
            try {
              const result3 = await provider._perform(req);
              results[index] = Object.assign(normalizeResult({ result: result3 }), { weight });
            } catch (error) {
              results[index] = Object.assign(normalizeResult({ error }), { weight });
            }
          });
          while (true) {
            const done = results.filter((r2) => r2 != null);
            for (const { value } of done) {
              if (!(value instanceof Error)) {
                return value;
              }
            }
            const result3 = checkQuorum(this.quorum, results.filter((r2) => r2 != null));
            if ((0, index_js_1.isError)(result3, "INSUFFICIENT_FUNDS")) {
              throw result3;
            }
            const waiting = broadcasts.filter((b2, i) => results[i] == null);
            if (waiting.length === 0) {
              break;
            }
            await Promise.race(waiting);
          }
          const result2 = getAnyResult(this.quorum, results);
          (0, index_js_1.assert)(result2 !== void 0, "problem multi-broadcasting", "SERVER_ERROR", {
            request: "%sub-requests",
            info: { request: req, results: results.map(stringify2) }
          });
          if (result2 instanceof Error) {
            throw result2;
          }
          return result2;
        }
        await __privateMethod(this, _FallbackProvider_instances, initialSync_fn).call(this);
        const running = /* @__PURE__ */ new Set();
        let inflightQuorum = 0;
        while (true) {
          const runner = __privateMethod(this, _FallbackProvider_instances, addRunner_fn).call(this, running, req);
          if (runner == null) {
            break;
          }
          inflightQuorum += runner.config.weight;
          if (inflightQuorum >= this.quorum) {
            break;
          }
        }
        const result = await __privateMethod(this, _FallbackProvider_instances, waitForQuorum_fn).call(this, running, req);
        for (const runner of running) {
          if (runner.perform && runner.result == null) {
            runner.config.lateResponses++;
          }
        }
        return result;
      }
      async destroy() {
        for (const { provider } of __privateGet(this, _configs)) {
          provider.destroy();
        }
        super.destroy();
      }
    };
    _configs = new WeakMap();
    _height = new WeakMap();
    _initialSyncPromise = new WeakMap();
    _FallbackProvider_instances = new WeakSet();
    // Grab the next (random) config that is not already part of
    // the running set
    getNextConfig_fn = function(running) {
      const configs = Array.from(running).map((r2) => r2.config);
      const allConfigs = __privateGet(this, _configs).slice();
      shuffle(allConfigs);
      allConfigs.sort((a, b2) => a.priority - b2.priority);
      for (const config of allConfigs) {
        if (config._lastFatalError) {
          continue;
        }
        if (configs.indexOf(config) === -1) {
          return config;
        }
      }
      return null;
    };
    // Adds a new runner (if available) to running.
    addRunner_fn = function(running, req) {
      const config = __privateMethod(this, _FallbackProvider_instances, getNextConfig_fn).call(this, running);
      if (config == null) {
        return null;
      }
      const runner = {
        config,
        result: null,
        didBump: false,
        perform: null,
        staller: null
      };
      const now5 = getTime2();
      runner.perform = (async () => {
        try {
          config.requests++;
          const result = await this._translatePerform(config.provider, req);
          runner.result = { result };
        } catch (error) {
          config.errorResponses++;
          runner.result = { error };
        }
        const dt = getTime2() - now5;
        config._totalTime += dt;
        config.rollingDuration = 0.95 * config.rollingDuration + 0.05 * dt;
        runner.perform = null;
      })();
      runner.staller = (async () => {
        await stall(config.stallTimeout);
        runner.staller = null;
      })();
      running.add(runner);
      return runner;
    };
    initialSync_fn = async function() {
      let initialSync = __privateGet(this, _initialSyncPromise);
      if (!initialSync) {
        const promises = [];
        __privateGet(this, _configs).forEach((config) => {
          promises.push((async () => {
            await waitForSync(config, 0);
            if (!config._lastFatalError) {
              config._network = await config.provider.getNetwork();
            }
          })());
        });
        __privateSet(this, _initialSyncPromise, initialSync = (async () => {
          await Promise.all(promises);
          let chainId = null;
          for (const config of __privateGet(this, _configs)) {
            if (config._lastFatalError) {
              continue;
            }
            const network = config._network;
            if (chainId == null) {
              chainId = network.chainId;
            } else if (network.chainId !== chainId) {
              (0, index_js_1.assert)(false, "cannot mix providers on different networks", "UNSUPPORTED_OPERATION", {
                operation: "new FallbackProvider"
              });
            }
          }
        })());
      }
      await initialSync;
    };
    checkQuorum_fn = async function(running, req) {
      const results = [];
      for (const runner of running) {
        if (runner.result != null) {
          const { tag, value } = normalizeResult(runner.result);
          results.push({ tag, value, weight: runner.config.weight });
        }
      }
      if (results.reduce((a, r2) => a + r2.weight, 0) < this.quorum) {
        return void 0;
      }
      switch (req.method) {
        case "getBlockNumber": {
          if (__privateGet(this, _height) === -2) {
            __privateSet(this, _height, Math.ceil((0, index_js_1.getNumber)(getMedian(this.quorum, __privateGet(this, _configs).filter((c) => !c._lastFatalError).map((c) => ({
              value: c.blockNumber,
              tag: (0, index_js_1.getNumber)(c.blockNumber).toString(),
              weight: c.weight
            }))))));
          }
          const mode = getFuzzyMode(this.quorum, results);
          if (mode === void 0) {
            return void 0;
          }
          if (mode > __privateGet(this, _height)) {
            __privateSet(this, _height, mode);
          }
          return __privateGet(this, _height);
        }
        case "getGasPrice":
        case "getPriorityFee":
        case "estimateGas":
          return getMedian(this.quorum, results);
        case "getBlock":
          if ("blockTag" in req && req.blockTag === "pending") {
            return getAnyResult(this.quorum, results);
          }
          return checkQuorum(this.quorum, results);
        case "call":
        case "chainId":
        case "getBalance":
        case "getTransactionCount":
        case "getCode":
        case "getStorage":
        case "getTransaction":
        case "getTransactionReceipt":
        case "getLogs":
          return checkQuorum(this.quorum, results);
        case "broadcastTransaction":
          return getAnyResult(this.quorum, results);
      }
      (0, index_js_1.assert)(false, "unsupported method", "UNSUPPORTED_OPERATION", {
        operation: `_perform(${stringify2(req.method)})`
      });
    };
    waitForQuorum_fn = async function(running, req) {
      if (running.size === 0) {
        throw new Error("no runners?!");
      }
      const interesting = [];
      let newRunners = 0;
      for (const runner of running) {
        if (runner.perform) {
          interesting.push(runner.perform);
        }
        if (runner.staller) {
          interesting.push(runner.staller);
          continue;
        }
        if (runner.didBump) {
          continue;
        }
        runner.didBump = true;
        newRunners++;
      }
      const value = await __privateMethod(this, _FallbackProvider_instances, checkQuorum_fn).call(this, running, req);
      if (value !== void 0) {
        if (value instanceof Error) {
          throw value;
        }
        return value;
      }
      for (let i = 0; i < newRunners; i++) {
        __privateMethod(this, _FallbackProvider_instances, addRunner_fn).call(this, running, req);
      }
      (0, index_js_1.assert)(interesting.length > 0, "quorum not met", "SERVER_ERROR", {
        request: "%sub-requests",
        info: { request: req, results: Array.from(running).map((r2) => stringify2(r2.result)) }
      });
      await Promise.race(interesting);
      return await __privateMethod(this, _FallbackProvider_instances, waitForQuorum_fn).call(this, running, req);
    };
    exports.FallbackProvider = FallbackProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/default-provider.js
var require_default_provider = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/default-provider.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDefaultProvider = void 0;
    var index_js_1 = require_utils();
    var provider_ankr_js_1 = require_provider_ankr();
    var provider_alchemy_js_1 = require_provider_alchemy();
    var provider_chainstack_js_1 = require_provider_chainstack();
    var provider_cloudflare_js_1 = require_provider_cloudflare();
    var provider_etherscan_js_1 = require_provider_etherscan();
    var provider_infura_js_1 = require_provider_infura();
    var provider_quicknode_js_1 = require_provider_quicknode();
    var provider_fallback_js_1 = require_provider_fallback();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var network_js_1 = require_network();
    var provider_websocket_js_1 = require_provider_websocket();
    function isWebSocketLike(value) {
      return value && typeof value.send === "function" && typeof value.close === "function";
    }
    var Testnets2 = "goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" ");
    function getDefaultProvider2(network, options) {
      if (options == null) {
        options = {};
      }
      const allowService = (name) => {
        if (options[name] === "-") {
          return false;
        }
        if (typeof options.exclusive === "string") {
          return name === options.exclusive;
        }
        if (Array.isArray(options.exclusive)) {
          return options.exclusive.indexOf(name) !== -1;
        }
        return true;
      };
      if (typeof network === "string" && network.match(/^https?:/)) {
        return new provider_jsonrpc_js_1.JsonRpcProvider(network);
      }
      if (typeof network === "string" && network.match(/^wss?:/) || isWebSocketLike(network)) {
        return new provider_websocket_js_1.WebSocketProvider(network);
      }
      let staticNetwork = null;
      try {
        staticNetwork = network_js_1.Network.from(network);
      } catch (error) {
      }
      const providers = [];
      if (allowService("publicPolygon") && staticNetwork) {
        if (staticNetwork.name === "matic") {
          providers.push(new provider_jsonrpc_js_1.JsonRpcProvider("https://polygon-rpc.com/", staticNetwork, { staticNetwork }));
        } else if (staticNetwork.name === "matic-amoy") {
          providers.push(new provider_jsonrpc_js_1.JsonRpcProvider("https://rpc-amoy.polygon.technology/", staticNetwork, { staticNetwork }));
        }
      }
      if (allowService("alchemy")) {
        try {
          providers.push(new provider_alchemy_js_1.AlchemyProvider(network, options.alchemy));
        } catch (error) {
        }
      }
      if (allowService("ankr") && options.ankr != null) {
        try {
          providers.push(new provider_ankr_js_1.AnkrProvider(network, options.ankr));
        } catch (error) {
        }
      }
      if (allowService("chainstack")) {
        try {
          providers.push(new provider_chainstack_js_1.ChainstackProvider(network, options.chainstack));
        } catch (error) {
        }
      }
      if (allowService("cloudflare")) {
        try {
          providers.push(new provider_cloudflare_js_1.CloudflareProvider(network));
        } catch (error) {
        }
      }
      if (allowService("etherscan")) {
        try {
          providers.push(new provider_etherscan_js_1.EtherscanProvider(network, options.etherscan));
        } catch (error) {
        }
      }
      if (allowService("infura")) {
        try {
          let projectId = options.infura;
          let projectSecret = void 0;
          if (typeof projectId === "object") {
            projectSecret = projectId.projectSecret;
            projectId = projectId.projectId;
          }
          providers.push(new provider_infura_js_1.InfuraProvider(network, projectId, projectSecret));
        } catch (error) {
        }
      }
      if (allowService("quicknode")) {
        try {
          let token = options.quicknode;
          providers.push(new provider_quicknode_js_1.QuickNodeProvider(network, token));
        } catch (error) {
        }
      }
      (0, index_js_1.assert)(providers.length, "unsupported default network", "UNSUPPORTED_OPERATION", {
        operation: "getDefaultProvider"
      });
      if (providers.length === 1) {
        return providers[0];
      }
      let quorum = Math.floor(providers.length / 2);
      if (quorum > 2) {
        quorum = 2;
      }
      if (staticNetwork && Testnets2.indexOf(staticNetwork.name) !== -1) {
        quorum = 1;
      }
      if (options && options.quorum) {
        quorum = options.quorum;
      }
      return new provider_fallback_js_1.FallbackProvider(providers, void 0, { quorum });
    }
    exports.getDefaultProvider = getDefaultProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/signer-noncemanager.js
var require_signer_noncemanager = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/signer-noncemanager.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NonceManager = void 0;
    var index_js_1 = require_utils();
    var abstract_signer_js_1 = require_abstract_signer();
    var _noncePromise, _delta;
    var _NonceManager = class _NonceManager extends abstract_signer_js_1.AbstractSigner {
      /**
       *  Creates a new **NonceManager** to manage %%signer%%.
       */
      constructor(signer) {
        super(signer.provider);
        /**
         *  The Signer being managed.
         */
        __publicField(this, "signer");
        __privateAdd(this, _noncePromise);
        __privateAdd(this, _delta);
        (0, index_js_1.defineProperties)(this, { signer });
        __privateSet(this, _noncePromise, null);
        __privateSet(this, _delta, 0);
      }
      async getAddress() {
        return this.signer.getAddress();
      }
      connect(provider) {
        return new _NonceManager(this.signer.connect(provider));
      }
      async getNonce(blockTag) {
        if (blockTag === "pending") {
          if (__privateGet(this, _noncePromise) == null) {
            __privateSet(this, _noncePromise, super.getNonce("pending"));
          }
          const delta = __privateGet(this, _delta);
          return await __privateGet(this, _noncePromise) + delta;
        }
        return super.getNonce(blockTag);
      }
      /**
       *  Manually increment the nonce. This may be useful when managng
       *  offline transactions.
       */
      increment() {
        __privateWrapper(this, _delta)._++;
      }
      /**
       *  Resets the nonce, causing the **NonceManager** to reload the current
       *  nonce from the blockchain on the next transaction.
       */
      reset() {
        __privateSet(this, _delta, 0);
        __privateSet(this, _noncePromise, null);
      }
      async sendTransaction(tx) {
        const noncePromise = this.getNonce("pending");
        this.increment();
        tx = await this.signer.populateTransaction(tx);
        tx.nonce = await noncePromise;
        return await this.signer.sendTransaction(tx);
      }
      signTransaction(tx) {
        return this.signer.signTransaction(tx);
      }
      signMessage(message) {
        return this.signer.signMessage(message);
      }
      signTypedData(domain, types, value) {
        return this.signer.signTypedData(domain, types, value);
      }
    };
    _noncePromise = new WeakMap();
    _delta = new WeakMap();
    var NonceManager2 = _NonceManager;
    exports.NonceManager = NonceManager2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-browser.js
var require_provider_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BrowserProvider = void 0;
    var index_js_1 = require_utils();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var _request2;
    var BrowserProvider2 = class extends provider_jsonrpc_js_1.JsonRpcApiPollingProvider {
      /**
       *  Connnect to the %%ethereum%% provider, optionally forcing the
       *  %%network%%.
       */
      constructor(ethereum, network, _options2) {
        const options = Object.assign({}, _options2 != null ? _options2 : {}, { batchMaxCount: 1 });
        (0, index_js_1.assertArgument)(ethereum && ethereum.request, "invalid EIP-1193 provider", "ethereum", ethereum);
        super(network, options);
        __privateAdd(this, _request2);
        __privateSet(this, _request2, async (method, params) => {
          const payload = { method, params };
          this.emit("debug", { action: "sendEip1193Request", payload });
          try {
            const result = await ethereum.request(payload);
            this.emit("debug", { action: "receiveEip1193Result", result });
            return result;
          } catch (e) {
            const error = new Error(e.message);
            error.code = e.code;
            error.data = e.data;
            error.payload = payload;
            this.emit("debug", { action: "receiveEip1193Error", error });
            throw error;
          }
        });
      }
      async send(method, params) {
        await this._start();
        return await super.send(method, params);
      }
      async _send(payload) {
        (0, index_js_1.assertArgument)(!Array.isArray(payload), "EIP-1193 does not support batch request", "payload", payload);
        try {
          const result = await __privateGet(this, _request2).call(this, payload.method, payload.params || []);
          return [{ id: payload.id, result }];
        } catch (e) {
          return [{
            id: payload.id,
            error: { code: e.code, data: e.data, message: e.message }
          }];
        }
      }
      getRpcError(payload, error) {
        error = JSON.parse(JSON.stringify(error));
        switch (error.error.code || -1) {
          case 4001:
            error.error.message = `ethers-user-denied: ${error.error.message}`;
            break;
          case 4200:
            error.error.message = `ethers-unsupported: ${error.error.message}`;
            break;
        }
        return super.getRpcError(payload, error);
      }
      /**
       *  Resolves to ``true`` if the provider manages the %%address%%.
       */
      async hasSigner(address) {
        if (address == null) {
          address = 0;
        }
        const accounts = await this.send("eth_accounts", []);
        if (typeof address === "number") {
          return accounts.length > address;
        }
        address = address.toLowerCase();
        return accounts.filter((a) => a.toLowerCase() === address).length !== 0;
      }
      async getSigner(address) {
        if (address == null) {
          address = 0;
        }
        if (!await this.hasSigner(address)) {
          try {
            await __privateGet(this, _request2).call(this, "eth_requestAccounts", []);
          } catch (error) {
            const payload = error.payload;
            throw this.getRpcError(payload, { id: payload.id, error });
          }
        }
        return await super.getSigner(address);
      }
    };
    _request2 = new WeakMap();
    exports.BrowserProvider = BrowserProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-pocket.js
var require_provider_pocket = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-pocket.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PocketProvider = void 0;
    var index_js_1 = require_utils();
    var community_js_1 = require_community();
    var network_js_1 = require_network();
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    var defaultApplicationId = "62e1ad51b37b8e00394bda3b";
    function getHost(name) {
      switch (name) {
        case "mainnet":
          return "eth-mainnet.gateway.pokt.network";
        case "goerli":
          return "eth-goerli.gateway.pokt.network";
        case "matic":
          return "poly-mainnet.gateway.pokt.network";
        case "matic-mumbai":
          return "polygon-mumbai-rpc.gateway.pokt.network";
      }
      (0, index_js_1.assertArgument)(false, "unsupported network", "network", name);
    }
    var PocketProvider2 = class _PocketProvider extends provider_jsonrpc_js_1.JsonRpcProvider {
      /**
       *  Create a new **PocketProvider**.
       *
       *  By default connecting to ``mainnet`` with a highly throttled
       *  API key.
       */
      constructor(_network, applicationId, applicationSecret) {
        if (_network == null) {
          _network = "mainnet";
        }
        const network = network_js_1.Network.from(_network);
        if (applicationId == null) {
          applicationId = defaultApplicationId;
        }
        if (applicationSecret == null) {
          applicationSecret = null;
        }
        const options = { staticNetwork: network };
        const request = _PocketProvider.getRequest(network, applicationId, applicationSecret);
        super(request, network, options);
        /**
         *  The Application ID for the Pocket connection.
         */
        __publicField(this, "applicationId");
        /**
         *  The Application Secret for making authenticated requests
         *  to the Pocket connection.
         */
        __publicField(this, "applicationSecret");
        (0, index_js_1.defineProperties)(this, { applicationId, applicationSecret });
      }
      _getProvider(chainId) {
        try {
          return new _PocketProvider(chainId, this.applicationId, this.applicationSecret);
        } catch (error) {
        }
        return super._getProvider(chainId);
      }
      /**
       *  Returns a prepared request for connecting to %%network%% with
       *  %%applicationId%%.
       */
      static getRequest(network, applicationId, applicationSecret) {
        if (applicationId == null) {
          applicationId = defaultApplicationId;
        }
        const request = new index_js_1.FetchRequest(`https://${getHost(network.name)}/v1/lb/${applicationId}`);
        request.allowGzip = true;
        if (applicationSecret) {
          request.setCredentials("", applicationSecret);
        }
        if (applicationId === defaultApplicationId) {
          request.retryFunc = async (request2, response, attempt) => {
            (0, community_js_1.showThrottleMessage)("PocketProvider");
            return true;
          };
        }
        return request;
      }
      isCommunityResource() {
        return this.applicationId === defaultApplicationId;
      }
    };
    exports.PocketProvider = PocketProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/provider-ipcsocket-browser.js
var require_provider_ipcsocket_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/provider-ipcsocket-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IpcSocketProvider = void 0;
    var IpcSocketProvider2 = void 0;
    exports.IpcSocketProvider = IpcSocketProvider2;
  }
});

// node_modules/ethers/lib.commonjs/providers/index.js
var require_providers = __commonJS({
  "node_modules/ethers/lib.commonjs/providers/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SocketEventSubscriber = exports.SocketPendingSubscriber = exports.SocketBlockSubscriber = exports.SocketSubscriber = exports.WebSocketProvider = exports.SocketProvider = exports.IpcSocketProvider = exports.QuickNodeProvider = exports.PocketProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanPlugin = exports.EtherscanProvider = exports.ChainstackProvider = exports.CloudflareProvider = exports.AnkrProvider = exports.AlchemyProvider = exports.BrowserProvider = exports.JsonRpcSigner = exports.JsonRpcProvider = exports.JsonRpcApiProvider = exports.FallbackProvider = exports.copyRequest = exports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.FeeData = exports.Block = exports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = exports.EnsPlugin = exports.GasCostPlugin = exports.NetworkPlugin = exports.NonceManager = exports.Network = exports.MulticoinProviderPlugin = exports.EnsResolver = exports.getDefaultProvider = exports.showThrottleMessage = exports.VoidSigner = exports.AbstractSigner = exports.UnmanagedSubscriber = exports.AbstractProvider = void 0;
    var abstract_provider_js_1 = require_abstract_provider();
    Object.defineProperty(exports, "AbstractProvider", { enumerable: true, get: function() {
      return abstract_provider_js_1.AbstractProvider;
    } });
    Object.defineProperty(exports, "UnmanagedSubscriber", { enumerable: true, get: function() {
      return abstract_provider_js_1.UnmanagedSubscriber;
    } });
    var abstract_signer_js_1 = require_abstract_signer();
    Object.defineProperty(exports, "AbstractSigner", { enumerable: true, get: function() {
      return abstract_signer_js_1.AbstractSigner;
    } });
    Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function() {
      return abstract_signer_js_1.VoidSigner;
    } });
    var community_js_1 = require_community();
    Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function() {
      return community_js_1.showThrottleMessage;
    } });
    var default_provider_js_1 = require_default_provider();
    Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function() {
      return default_provider_js_1.getDefaultProvider;
    } });
    var ens_resolver_js_1 = require_ens_resolver();
    Object.defineProperty(exports, "EnsResolver", { enumerable: true, get: function() {
      return ens_resolver_js_1.EnsResolver;
    } });
    Object.defineProperty(exports, "MulticoinProviderPlugin", { enumerable: true, get: function() {
      return ens_resolver_js_1.MulticoinProviderPlugin;
    } });
    var network_js_1 = require_network();
    Object.defineProperty(exports, "Network", { enumerable: true, get: function() {
      return network_js_1.Network;
    } });
    var signer_noncemanager_js_1 = require_signer_noncemanager();
    Object.defineProperty(exports, "NonceManager", { enumerable: true, get: function() {
      return signer_noncemanager_js_1.NonceManager;
    } });
    var plugins_network_js_1 = require_plugins_network();
    Object.defineProperty(exports, "NetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.NetworkPlugin;
    } });
    Object.defineProperty(exports, "GasCostPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.GasCostPlugin;
    } });
    Object.defineProperty(exports, "EnsPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.EnsPlugin;
    } });
    Object.defineProperty(exports, "FeeDataNetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.FeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports, "FetchUrlFeeDataNetworkPlugin", { enumerable: true, get: function() {
      return plugins_network_js_1.FetchUrlFeeDataNetworkPlugin;
    } });
    var provider_js_1 = require_provider();
    Object.defineProperty(exports, "Block", { enumerable: true, get: function() {
      return provider_js_1.Block;
    } });
    Object.defineProperty(exports, "FeeData", { enumerable: true, get: function() {
      return provider_js_1.FeeData;
    } });
    Object.defineProperty(exports, "Log", { enumerable: true, get: function() {
      return provider_js_1.Log;
    } });
    Object.defineProperty(exports, "TransactionReceipt", { enumerable: true, get: function() {
      return provider_js_1.TransactionReceipt;
    } });
    Object.defineProperty(exports, "TransactionResponse", { enumerable: true, get: function() {
      return provider_js_1.TransactionResponse;
    } });
    Object.defineProperty(exports, "copyRequest", { enumerable: true, get: function() {
      return provider_js_1.copyRequest;
    } });
    var provider_fallback_js_1 = require_provider_fallback();
    Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function() {
      return provider_fallback_js_1.FallbackProvider;
    } });
    var provider_jsonrpc_js_1 = require_provider_jsonrpc();
    Object.defineProperty(exports, "JsonRpcApiProvider", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcApiProvider;
    } });
    Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcProvider;
    } });
    Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function() {
      return provider_jsonrpc_js_1.JsonRpcSigner;
    } });
    var provider_browser_js_1 = require_provider_browser();
    Object.defineProperty(exports, "BrowserProvider", { enumerable: true, get: function() {
      return provider_browser_js_1.BrowserProvider;
    } });
    var provider_alchemy_js_1 = require_provider_alchemy();
    Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function() {
      return provider_alchemy_js_1.AlchemyProvider;
    } });
    var provider_ankr_js_1 = require_provider_ankr();
    Object.defineProperty(exports, "AnkrProvider", { enumerable: true, get: function() {
      return provider_ankr_js_1.AnkrProvider;
    } });
    var provider_cloudflare_js_1 = require_provider_cloudflare();
    Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function() {
      return provider_cloudflare_js_1.CloudflareProvider;
    } });
    var provider_chainstack_js_1 = require_provider_chainstack();
    Object.defineProperty(exports, "ChainstackProvider", { enumerable: true, get: function() {
      return provider_chainstack_js_1.ChainstackProvider;
    } });
    var provider_etherscan_js_1 = require_provider_etherscan();
    Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function() {
      return provider_etherscan_js_1.EtherscanProvider;
    } });
    Object.defineProperty(exports, "EtherscanPlugin", { enumerable: true, get: function() {
      return provider_etherscan_js_1.EtherscanPlugin;
    } });
    var provider_infura_js_1 = require_provider_infura();
    Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function() {
      return provider_infura_js_1.InfuraProvider;
    } });
    Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function() {
      return provider_infura_js_1.InfuraWebSocketProvider;
    } });
    var provider_pocket_js_1 = require_provider_pocket();
    Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function() {
      return provider_pocket_js_1.PocketProvider;
    } });
    var provider_quicknode_js_1 = require_provider_quicknode();
    Object.defineProperty(exports, "QuickNodeProvider", { enumerable: true, get: function() {
      return provider_quicknode_js_1.QuickNodeProvider;
    } });
    var provider_ipcsocket_js_1 = require_provider_ipcsocket_browser();
    Object.defineProperty(exports, "IpcSocketProvider", { enumerable: true, get: function() {
      return provider_ipcsocket_js_1.IpcSocketProvider;
    } });
    var provider_socket_js_1 = require_provider_socket();
    Object.defineProperty(exports, "SocketProvider", { enumerable: true, get: function() {
      return provider_socket_js_1.SocketProvider;
    } });
    var provider_websocket_js_1 = require_provider_websocket();
    Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function() {
      return provider_websocket_js_1.WebSocketProvider;
    } });
    var provider_socket_js_2 = require_provider_socket();
    Object.defineProperty(exports, "SocketSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketSubscriber;
    } });
    Object.defineProperty(exports, "SocketBlockSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketBlockSubscriber;
    } });
    Object.defineProperty(exports, "SocketPendingSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketPendingSubscriber;
    } });
    Object.defineProperty(exports, "SocketEventSubscriber", { enumerable: true, get: function() {
      return provider_socket_js_2.SocketEventSubscriber;
    } });
  }
});

// node_modules/ethers/lib.commonjs/wallet/base-wallet.js
var require_base_wallet = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/base-wallet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BaseWallet = void 0;
    var index_js_1 = require_address2();
    var index_js_2 = require_hash();
    var index_js_3 = require_providers();
    var index_js_4 = require_transaction2();
    var index_js_5 = require_utils();
    var _signingKey;
    var _BaseWallet = class _BaseWallet extends index_js_3.AbstractSigner {
      /**
       *  Creates a new BaseWallet for %%privateKey%%, optionally
       *  connected to %%provider%%.
       *
       *  If %%provider%% is not specified, only offline methods can
       *  be used.
       */
      constructor(privateKey, provider) {
        super(provider);
        /**
         *  The wallet address.
         */
        __publicField(this, "address");
        __privateAdd(this, _signingKey);
        (0, index_js_5.assertArgument)(privateKey && typeof privateKey.sign === "function", "invalid private key", "privateKey", "[ REDACTED ]");
        __privateSet(this, _signingKey, privateKey);
        const address = (0, index_js_4.computeAddress)(this.signingKey.publicKey);
        (0, index_js_5.defineProperties)(this, { address });
      }
      // Store private values behind getters to reduce visibility
      // in console.log
      /**
       *  The [[SigningKey]] used for signing payloads.
       */
      get signingKey() {
        return __privateGet(this, _signingKey);
      }
      /**
       *  The private key for this wallet.
       */
      get privateKey() {
        return this.signingKey.privateKey;
      }
      async getAddress() {
        return this.address;
      }
      connect(provider) {
        return new _BaseWallet(__privateGet(this, _signingKey), provider);
      }
      async signTransaction(tx) {
        const { to, from } = await (0, index_js_5.resolveProperties)({
          to: tx.to ? (0, index_js_1.resolveAddress)(tx.to, this.provider) : void 0,
          from: tx.from ? (0, index_js_1.resolveAddress)(tx.from, this.provider) : void 0
        });
        if (to != null) {
          tx.to = to;
        }
        if (from != null) {
          tx.from = from;
        }
        if (tx.from != null) {
          (0, index_js_5.assertArgument)((0, index_js_1.getAddress)(tx.from) === this.address, "transaction from address mismatch", "tx.from", tx.from);
          delete tx.from;
        }
        const btx = index_js_4.Transaction.from(tx);
        btx.signature = this.signingKey.sign(btx.unsignedHash);
        return btx.serialized;
      }
      async signMessage(message) {
        return this.signMessageSync(message);
      }
      // @TODO: Add a secialized signTx and signTyped sync that enforces
      // all parameters are known?
      /**
       *  Returns the signature for %%message%% signed with this wallet.
       */
      signMessageSync(message) {
        return this.signingKey.sign((0, index_js_2.hashMessage)(message)).serialized;
      }
      async signTypedData(domain, types, value) {
        const populated = await index_js_2.TypedDataEncoder.resolveNames(domain, types, value, async (name) => {
          (0, index_js_5.assert)(this.provider != null, "cannot resolve ENS names without a provider", "UNSUPPORTED_OPERATION", {
            operation: "resolveName",
            info: { name }
          });
          const address = await this.provider.resolveName(name);
          (0, index_js_5.assert)(address != null, "unconfigured ENS name", "UNCONFIGURED_NAME", {
            value: name
          });
          return address;
        });
        return this.signingKey.sign(index_js_2.TypedDataEncoder.hash(populated.domain, types, populated.value)).serialized;
      }
    };
    _signingKey = new WeakMap();
    var BaseWallet2 = _BaseWallet;
    exports.BaseWallet = BaseWallet2;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/decode-owl.js
var require_decode_owl = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/decode-owl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeOwl = exports.decode = void 0;
    var index_js_1 = require_utils();
    var subsChrs2 = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
    var Word2 = /^[a-z]*$/i;
    function unfold2(words2, sep) {
      let initial = 97;
      return words2.reduce((accum, word) => {
        if (word === sep) {
          initial++;
        } else if (word.match(Word2)) {
          accum.push(String.fromCharCode(initial) + word);
        } else {
          initial = 97;
          accum.push(word);
        }
        return accum;
      }, []);
    }
    function decode3(data, subs) {
      for (let i = subsChrs2.length - 1; i >= 0; i--) {
        data = data.split(subsChrs2[i]).join(subs.substring(2 * i, 2 * i + 2));
      }
      const clumps = [];
      const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {
        if (semi) {
          for (let i = parseInt(semi); i >= 0; i--) {
            clumps.push(";");
          }
        } else {
          clumps.push(item.toLowerCase());
        }
        return "";
      });
      if (leftover) {
        throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
      }
      return unfold2(unfold2(clumps, ";"), ":");
    }
    exports.decode = decode3;
    function decodeOwl2(data) {
      (0, index_js_1.assertArgument)(data[0] === "0", "unsupported auwl data", "data", data);
      return decode3(data.substring(1 + 2 * subsChrs2.length), data.substring(1, 1 + 2 * subsChrs2.length));
    }
    exports.decodeOwl = decodeOwl2;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlist.js
var require_wordlist = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlist.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wordlist = void 0;
    var index_js_1 = require_utils();
    var Wordlist2 = class {
      /**
       *  Creates a new Wordlist instance.
       *
       *  Sub-classes MUST call this if they provide their own constructor,
       *  passing in the locale string of the language.
       *
       *  Generally there is no need to create instances of a Wordlist,
       *  since each language-specific Wordlist creates an instance and
       *  there is no state kept internally, so they are safe to share.
       */
      constructor(locale) {
        __publicField(this, "locale");
        (0, index_js_1.defineProperties)(this, { locale });
      }
      /**
       *  Sub-classes may override this to provide a language-specific
       *  method for spliting %%phrase%% into individual words.
       *
       *  By default, %%phrase%% is split using any sequences of
       *  white-space as defined by regular expressions (i.e. ``/\s+/``).
       */
      split(phrase) {
        return phrase.toLowerCase().split(/\s+/g);
      }
      /**
       *  Sub-classes may override this to provider a language-specific
       *  method for joining %%words%% into a phrase.
       *
       *  By default, %%words%% are joined by a single space.
       */
      join(words2) {
        return words2.join(" ");
      }
    };
    exports.Wordlist = Wordlist2;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js
var require_wordlist_owl = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlist-owl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WordlistOwl = void 0;
    var index_js_1 = require_hash();
    var index_js_2 = require_utils();
    var decode_owl_js_1 = require_decode_owl();
    var wordlist_js_1 = require_wordlist();
    var _data4, _checksum2, _words2, _WordlistOwl_instances2, loadWords_fn2;
    var WordlistOwl2 = class extends wordlist_js_1.Wordlist {
      /**
       *  Creates a new Wordlist for %%locale%% using the OWL %%data%%
       *  and validated against the %%checksum%%.
       */
      constructor(locale, data, checksum2) {
        super(locale);
        __privateAdd(this, _WordlistOwl_instances2);
        __privateAdd(this, _data4);
        __privateAdd(this, _checksum2);
        __privateAdd(this, _words2);
        __privateSet(this, _data4, data);
        __privateSet(this, _checksum2, checksum2);
        __privateSet(this, _words2, null);
      }
      /**
       *  The OWL-encoded data.
       */
      get _data() {
        return __privateGet(this, _data4);
      }
      /**
       *  Decode all the words for the wordlist.
       */
      _decodeWords() {
        return (0, decode_owl_js_1.decodeOwl)(__privateGet(this, _data4));
      }
      getWord(index) {
        const words2 = __privateMethod(this, _WordlistOwl_instances2, loadWords_fn2).call(this);
        (0, index_js_2.assertArgument)(index >= 0 && index < words2.length, `invalid word index: ${index}`, "index", index);
        return words2[index];
      }
      getWordIndex(word) {
        return __privateMethod(this, _WordlistOwl_instances2, loadWords_fn2).call(this).indexOf(word);
      }
    };
    _data4 = new WeakMap();
    _checksum2 = new WeakMap();
    _words2 = new WeakMap();
    _WordlistOwl_instances2 = new WeakSet();
    loadWords_fn2 = function() {
      if (__privateGet(this, _words2) == null) {
        const words2 = this._decodeWords();
        const checksum2 = (0, index_js_1.id)(words2.join("\n") + "\n");
        if (checksum2 !== __privateGet(this, _checksum2)) {
          throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
        }
        __privateSet(this, _words2, words2);
      }
      return __privateGet(this, _words2);
    };
    exports.WordlistOwl = WordlistOwl2;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/lang-en.js
var require_lang_en = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/lang-en.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LangEn = void 0;
    var wordlist_owl_js_1 = require_wordlist_owl();
    var words2 = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
    var checksum2 = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
    var wordlist2 = null;
    var LangEn2 = class _LangEn extends wordlist_owl_js_1.WordlistOwl {
      /**
       *  Creates a new instance of the English language Wordlist.
       *
       *  This should be unnecessary most of the time as the exported
       *  [[langEn]] should suffice.
       *
       *  @_ignore:
       */
      constructor() {
        super("en", words2, checksum2);
      }
      /**
       *  Returns a singleton instance of a ``LangEn``, creating it
       *  if this is the first time being called.
       */
      static wordlist() {
        if (wordlist2 == null) {
          wordlist2 = new _LangEn();
        }
        return wordlist2;
      }
    };
    exports.LangEn = LangEn2;
  }
});

// node_modules/ethers/lib.commonjs/wallet/mnemonic.js
var require_mnemonic = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/mnemonic.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Mnemonic = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils();
    var lang_en_js_1 = require_lang_en();
    function getUpperMask(bits) {
      return (1 << bits) - 1 << 8 - bits & 255;
    }
    function getLowerMask(bits) {
      return (1 << bits) - 1 & 255;
    }
    function mnemonicToEntropy(mnemonic, wordlist2) {
      (0, index_js_2.assertNormalize)("NFKD");
      if (wordlist2 == null) {
        wordlist2 = lang_en_js_1.LangEn.wordlist();
      }
      const words2 = wordlist2.split(mnemonic);
      (0, index_js_2.assertArgument)(words2.length % 3 === 0 && words2.length >= 12 && words2.length <= 24, "invalid mnemonic length", "mnemonic", "[ REDACTED ]");
      const entropy = new Uint8Array(Math.ceil(11 * words2.length / 8));
      let offset = 0;
      for (let i = 0; i < words2.length; i++) {
        let index = wordlist2.getWordIndex(words2[i].normalize("NFKD"));
        (0, index_js_2.assertArgument)(index >= 0, `invalid mnemonic word at index ${i}`, "mnemonic", "[ REDACTED ]");
        for (let bit = 0; bit < 11; bit++) {
          if (index & 1 << 10 - bit) {
            entropy[offset >> 3] |= 1 << 7 - offset % 8;
          }
          offset++;
        }
      }
      const entropyBits = 32 * words2.length / 3;
      const checksumBits = words2.length / 3;
      const checksumMask = getUpperMask(checksumBits);
      const checksum2 = (0, index_js_2.getBytes)((0, index_js_1.sha256)(entropy.slice(0, entropyBits / 8)))[0] & checksumMask;
      (0, index_js_2.assertArgument)(checksum2 === (entropy[entropy.length - 1] & checksumMask), "invalid mnemonic checksum", "mnemonic", "[ REDACTED ]");
      return (0, index_js_2.hexlify)(entropy.slice(0, entropyBits / 8));
    }
    function entropyToMnemonic(entropy, wordlist2) {
      (0, index_js_2.assertArgument)(entropy.length % 4 === 0 && entropy.length >= 16 && entropy.length <= 32, "invalid entropy size", "entropy", "[ REDACTED ]");
      if (wordlist2 == null) {
        wordlist2 = lang_en_js_1.LangEn.wordlist();
      }
      const indices = [0];
      let remainingBits = 11;
      for (let i = 0; i < entropy.length; i++) {
        if (remainingBits > 8) {
          indices[indices.length - 1] <<= 8;
          indices[indices.length - 1] |= entropy[i];
          remainingBits -= 8;
        } else {
          indices[indices.length - 1] <<= remainingBits;
          indices[indices.length - 1] |= entropy[i] >> 8 - remainingBits;
          indices.push(entropy[i] & getLowerMask(8 - remainingBits));
          remainingBits += 3;
        }
      }
      const checksumBits = entropy.length / 4;
      const checksum2 = parseInt((0, index_js_1.sha256)(entropy).substring(2, 4), 16) & getUpperMask(checksumBits);
      indices[indices.length - 1] <<= checksumBits;
      indices[indices.length - 1] |= checksum2 >> 8 - checksumBits;
      return wordlist2.join(indices.map((index) => wordlist2.getWord(index)));
    }
    var _guard4 = {};
    var Mnemonic2 = class _Mnemonic {
      /**
       *  @private
       */
      constructor(guard, entropy, phrase, password, wordlist2) {
        /**
         *  The mnemonic phrase of 12, 15, 18, 21 or 24 words.
         *
         *  Use the [[wordlist]] ``split`` method to get the individual words.
         */
        __publicField(this, "phrase");
        /**
         *  The password used for this mnemonic. If no password is used this
         *  is the empty string (i.e. ``""``) as per the specification.
         */
        __publicField(this, "password");
        /**
         *  The wordlist for this mnemonic.
         */
        __publicField(this, "wordlist");
        /**
         *  The underlying entropy which the mnemonic encodes.
         */
        __publicField(this, "entropy");
        if (password == null) {
          password = "";
        }
        if (wordlist2 == null) {
          wordlist2 = lang_en_js_1.LangEn.wordlist();
        }
        (0, index_js_2.assertPrivate)(guard, _guard4, "Mnemonic");
        (0, index_js_2.defineProperties)(this, { phrase, password, wordlist: wordlist2, entropy });
      }
      /**
       *  Returns the seed for the mnemonic.
       */
      computeSeed() {
        const salt = (0, index_js_2.toUtf8Bytes)("mnemonic" + this.password, "NFKD");
        return (0, index_js_1.pbkdf2)((0, index_js_2.toUtf8Bytes)(this.phrase, "NFKD"), salt, 2048, 64, "sha512");
      }
      /**
       *  Creates a new Mnemonic for the %%phrase%%.
       *
       *  The default %%password%% is the empty string and the default
       *  wordlist is the [English wordlists](LangEn).
       */
      static fromPhrase(phrase, password, wordlist2) {
        const entropy = mnemonicToEntropy(phrase, wordlist2);
        phrase = entropyToMnemonic((0, index_js_2.getBytes)(entropy), wordlist2);
        return new _Mnemonic(_guard4, entropy, phrase, password, wordlist2);
      }
      /**
       *  Create a new **Mnemonic** from the %%entropy%%.
       *
       *  The default %%password%% is the empty string and the default
       *  wordlist is the [English wordlists](LangEn).
       */
      static fromEntropy(_entropy, password, wordlist2) {
        const entropy = (0, index_js_2.getBytes)(_entropy, "entropy");
        const phrase = entropyToMnemonic(entropy, wordlist2);
        return new _Mnemonic(_guard4, (0, index_js_2.hexlify)(entropy), phrase, password, wordlist2);
      }
      /**
       *  Returns the phrase for %%mnemonic%%.
       */
      static entropyToPhrase(_entropy, wordlist2) {
        const entropy = (0, index_js_2.getBytes)(_entropy, "entropy");
        return entropyToMnemonic(entropy, wordlist2);
      }
      /**
       *  Returns the entropy for %%phrase%%.
       */
      static phraseToEntropy(phrase, wordlist2) {
        return mnemonicToEntropy(phrase, wordlist2);
      }
      /**
       *  Returns true if %%phrase%% is a valid [[link-bip-39]] phrase.
       *
       *  This checks all the provided words belong to the %%wordlist%%,
       *  that the length is valid and the checksum is correct.
       */
      static isValidMnemonic(phrase, wordlist2) {
        try {
          mnemonicToEntropy(phrase, wordlist2);
          return true;
        } catch (error) {
        }
        return false;
      }
    };
    exports.Mnemonic = Mnemonic2;
  }
});

// node_modules/ethers/node_modules/aes-js/lib.commonjs/aes.js
var require_aes = __commonJS({
  "node_modules/ethers/node_modules/aes-js/lib.commonjs/aes.js"(exports) {
    "use strict";
    var __classPrivateFieldGet3 = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f2) {
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
    };
    var __classPrivateFieldSet2 = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
    };
    var _AES_key2;
    var _AES_Kd2;
    var _AES_Ke2;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AES = void 0;
    var numberOfRounds = { 16: 10, 24: 12, 32: 14 };
    var rcon = [1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145];
    var S = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22];
    var Si = [82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125];
    var T1 = [3328402341, 4168907908, 4000806809, 4135287693, 4294111757, 3597364157, 3731845041, 2445657428, 1613770832, 33620227, 3462883241, 1445669757, 3892248089, 3050821474, 1303096294, 3967186586, 2412431941, 528646813, 2311702848, 4202528135, 4026202645, 2992200171, 2387036105, 4226871307, 1101901292, 3017069671, 1604494077, 1169141738, 597466303, 1403299063, 3832705686, 2613100635, 1974974402, 3791519004, 1033081774, 1277568618, 1815492186, 2118074177, 4126668546, 2211236943, 1748251740, 1369810420, 3521504564, 4193382664, 3799085459, 2883115123, 1647391059, 706024767, 134480908, 2512897874, 1176707941, 2646852446, 806885416, 932615841, 168101135, 798661301, 235341577, 605164086, 461406363, 3756188221, 3454790438, 1311188841, 2142417613, 3933566367, 302582043, 495158174, 1479289972, 874125870, 907746093, 3698224818, 3025820398, 1537253627, 2756858614, 1983593293, 3084310113, 2108928974, 1378429307, 3722699582, 1580150641, 327451799, 2790478837, 3117535592, 0, 3253595436, 1075847264, 3825007647, 2041688520, 3059440621, 3563743934, 2378943302, 1740553945, 1916352843, 2487896798, 2555137236, 2958579944, 2244988746, 3151024235, 3320835882, 1336584933, 3992714006, 2252555205, 2588757463, 1714631509, 293963156, 2319795663, 3925473552, 67240454, 4269768577, 2689618160, 2017213508, 631218106, 1269344483, 2723238387, 1571005438, 2151694528, 93294474, 1066570413, 563977660, 1882732616, 4059428100, 1673313503, 2008463041, 2950355573, 1109467491, 537923632, 3858759450, 4260623118, 3218264685, 2177748300, 403442708, 638784309, 3287084079, 3193921505, 899127202, 2286175436, 773265209, 2479146071, 1437050866, 4236148354, 2050833735, 3362022572, 3126681063, 840505643, 3866325909, 3227541664, 427917720, 2655997905, 2749160575, 1143087718, 1412049534, 999329963, 193497219, 2353415882, 3354324521, 1807268051, 672404540, 2816401017, 3160301282, 369822493, 2916866934, 3688947771, 1681011286, 1949973070, 336202270, 2454276571, 201721354, 1210328172, 3093060836, 2680341085, 3184776046, 1135389935, 3294782118, 965841320, 831886756, 3554993207, 4068047243, 3588745010, 2345191491, 1849112409, 3664604599, 26054028, 2983581028, 2622377682, 1235855840, 3630984372, 2891339514, 4092916743, 3488279077, 3395642799, 4101667470, 1202630377, 268961816, 1874508501, 4034427016, 1243948399, 1546530418, 941366308, 1470539505, 1941222599, 2546386513, 3421038627, 2715671932, 3899946140, 1042226977, 2521517021, 1639824860, 227249030, 260737669, 3765465232, 2084453954, 1907733956, 3429263018, 2420656344, 100860677, 4160157185, 470683154, 3261161891, 1781871967, 2924959737, 1773779408, 394692241, 2579611992, 974986535, 664706745, 3655459128, 3958962195, 731420851, 571543859, 3530123707, 2849626480, 126783113, 865375399, 765172662, 1008606754, 361203602, 3387549984, 2278477385, 2857719295, 1344809080, 2782912378, 59542671, 1503764984, 160008576, 437062935, 1707065306, 3622233649, 2218934982, 3496503480, 2185314755, 697932208, 1512910199, 504303377, 2075177163, 2824099068, 1841019862, 739644986];
    var T2 = [2781242211, 2230877308, 2582542199, 2381740923, 234877682, 3184946027, 2984144751, 1418839493, 1348481072, 50462977, 2848876391, 2102799147, 434634494, 1656084439, 3863849899, 2599188086, 1167051466, 2636087938, 1082771913, 2281340285, 368048890, 3954334041, 3381544775, 201060592, 3963727277, 1739838676, 4250903202, 3930435503, 3206782108, 4149453988, 2531553906, 1536934080, 3262494647, 484572669, 2923271059, 1783375398, 1517041206, 1098792767, 49674231, 1334037708, 1550332980, 4098991525, 886171109, 150598129, 2481090929, 1940642008, 1398944049, 1059722517, 201851908, 1385547719, 1699095331, 1587397571, 674240536, 2704774806, 252314885, 3039795866, 151914247, 908333586, 2602270848, 1038082786, 651029483, 1766729511, 3447698098, 2682942837, 454166793, 2652734339, 1951935532, 775166490, 758520603, 3000790638, 4004797018, 4217086112, 4137964114, 1299594043, 1639438038, 3464344499, 2068982057, 1054729187, 1901997871, 2534638724, 4121318227, 1757008337, 0, 750906861, 1614815264, 535035132, 3363418545, 3988151131, 3201591914, 1183697867, 3647454910, 1265776953, 3734260298, 3566750796, 3903871064, 1250283471, 1807470800, 717615087, 3847203498, 384695291, 3313910595, 3617213773, 1432761139, 2484176261, 3481945413, 283769337, 100925954, 2180939647, 4037038160, 1148730428, 3123027871, 3813386408, 4087501137, 4267549603, 3229630528, 2315620239, 2906624658, 3156319645, 1215313976, 82966005, 3747855548, 3245848246, 1974459098, 1665278241, 807407632, 451280895, 251524083, 1841287890, 1283575245, 337120268, 891687699, 801369324, 3787349855, 2721421207, 3431482436, 959321879, 1469301956, 4065699751, 2197585534, 1199193405, 2898814052, 3887750493, 724703513, 2514908019, 2696962144, 2551808385, 3516813135, 2141445340, 1715741218, 2119445034, 2872807568, 2198571144, 3398190662, 700968686, 3547052216, 1009259540, 2041044702, 3803995742, 487983883, 1991105499, 1004265696, 1449407026, 1316239930, 504629770, 3683797321, 168560134, 1816667172, 3837287516, 1570751170, 1857934291, 4014189740, 2797888098, 2822345105, 2754712981, 936633572, 2347923833, 852879335, 1133234376, 1500395319, 3084545389, 2348912013, 1689376213, 3533459022, 3762923945, 3034082412, 4205598294, 133428468, 634383082, 2949277029, 2398386810, 3913789102, 403703816, 3580869306, 2297460856, 1867130149, 1918643758, 607656988, 4049053350, 3346248884, 1368901318, 600565992, 2090982877, 2632479860, 557719327, 3717614411, 3697393085, 2249034635, 2232388234, 2430627952, 1115438654, 3295786421, 2865522278, 3633334344, 84280067, 33027830, 303828494, 2747425121, 1600795957, 4188952407, 3496589753, 2434238086, 1486471617, 658119965, 3106381470, 953803233, 334231800, 3005978776, 857870609, 3151128937, 1890179545, 2298973838, 2805175444, 3056442267, 574365214, 2450884487, 550103529, 1233637070, 4289353045, 2018519080, 2057691103, 2399374476, 4166623649, 2148108681, 387583245, 3664101311, 836232934, 3330556482, 3100665960, 3280093505, 2955516313, 2002398509, 287182607, 3413881008, 4238890068, 3597515707, 975967766];
    var T3 = [1671808611, 2089089148, 2006576759, 2072901243, 4061003762, 1807603307, 1873927791, 3310653893, 810573872, 16974337, 1739181671, 729634347, 4263110654, 3613570519, 2883997099, 1989864566, 3393556426, 2191335298, 3376449993, 2106063485, 4195741690, 1508618841, 1204391495, 4027317232, 2917941677, 3563566036, 2734514082, 2951366063, 2629772188, 2767672228, 1922491506, 3227229120, 3082974647, 4246528509, 2477669779, 644500518, 911895606, 1061256767, 4144166391, 3427763148, 878471220, 2784252325, 3845444069, 4043897329, 1905517169, 3631459288, 827548209, 356461077, 67897348, 3344078279, 593839651, 3277757891, 405286936, 2527147926, 84871685, 2595565466, 118033927, 305538066, 2157648768, 3795705826, 3945188843, 661212711, 2999812018, 1973414517, 152769033, 2208177539, 745822252, 439235610, 455947803, 1857215598, 1525593178, 2700827552, 1391895634, 994932283, 3596728278, 3016654259, 695947817, 3812548067, 795958831, 2224493444, 1408607827, 3513301457, 0, 3979133421, 543178784, 4229948412, 2982705585, 1542305371, 1790891114, 3410398667, 3201918910, 961245753, 1256100938, 1289001036, 1491644504, 3477767631, 3496721360, 4012557807, 2867154858, 4212583931, 1137018435, 1305975373, 861234739, 2241073541, 1171229253, 4178635257, 33948674, 2139225727, 1357946960, 1011120188, 2679776671, 2833468328, 1374921297, 2751356323, 1086357568, 2408187279, 2460827538, 2646352285, 944271416, 4110742005, 3168756668, 3066132406, 3665145818, 560153121, 271589392, 4279952895, 4077846003, 3530407890, 3444343245, 202643468, 322250259, 3962553324, 1608629855, 2543990167, 1154254916, 389623319, 3294073796, 2817676711, 2122513534, 1028094525, 1689045092, 1575467613, 422261273, 1939203699, 1621147744, 2174228865, 1339137615, 3699352540, 577127458, 712922154, 2427141008, 2290289544, 1187679302, 3995715566, 3100863416, 339486740, 3732514782, 1591917662, 186455563, 3681988059, 3762019296, 844522546, 978220090, 169743370, 1239126601, 101321734, 611076132, 1558493276, 3260915650, 3547250131, 2901361580, 1655096418, 2443721105, 2510565781, 3828863972, 2039214713, 3878868455, 3359869896, 928607799, 1840765549, 2374762893, 3580146133, 1322425422, 2850048425, 1823791212, 1459268694, 4094161908, 3928346602, 1706019429, 2056189050, 2934523822, 135794696, 3134549946, 2022240376, 628050469, 779246638, 472135708, 2800834470, 3032970164, 3327236038, 3894660072, 3715932637, 1956440180, 522272287, 1272813131, 3185336765, 2340818315, 2323976074, 1888542832, 1044544574, 3049550261, 1722469478, 1222152264, 50660867, 4127324150, 236067854, 1638122081, 895445557, 1475980887, 3117443513, 2257655686, 3243809217, 489110045, 2662934430, 3778599393, 4162055160, 2561878936, 288563729, 1773916777, 3648039385, 2391345038, 2493985684, 2612407707, 505560094, 2274497927, 3911240169, 3460925390, 1442818645, 678973480, 3749357023, 2358182796, 2717407649, 2306869641, 219617805, 3218761151, 3862026214, 1120306242, 1756942440, 1103331905, 2578459033, 762796589, 252780047, 2966125488, 1425844308, 3151392187, 372911126];
    var T4 = [1667474886, 2088535288, 2004326894, 2071694838, 4075949567, 1802223062, 1869591006, 3318043793, 808472672, 16843522, 1734846926, 724270422, 4278065639, 3621216949, 2880169549, 1987484396, 3402253711, 2189597983, 3385409673, 2105378810, 4210693615, 1499065266, 1195886990, 4042263547, 2913856577, 3570689971, 2728590687, 2947541573, 2627518243, 2762274643, 1920112356, 3233831835, 3082273397, 4261223649, 2475929149, 640051788, 909531756, 1061110142, 4160160501, 3435941763, 875846760, 2779116625, 3857003729, 4059105529, 1903268834, 3638064043, 825316194, 353713962, 67374088, 3351728789, 589522246, 3284360861, 404236336, 2526454071, 84217610, 2593830191, 117901582, 303183396, 2155911963, 3806477791, 3958056653, 656894286, 2998062463, 1970642922, 151591698, 2206440989, 741110872, 437923380, 454765878, 1852748508, 1515908788, 2694904667, 1381168804, 993742198, 3604373943, 3014905469, 690584402, 3823320797, 791638366, 2223281939, 1398011302, 3520161977, 0, 3991743681, 538992704, 4244381667, 2981218425, 1532751286, 1785380564, 3419096717, 3200178535, 960056178, 1246420628, 1280103576, 1482221744, 3486468741, 3503319995, 4025428677, 2863326543, 4227536621, 1128514950, 1296947098, 859002214, 2240123921, 1162203018, 4193849577, 33687044, 2139062782, 1347481760, 1010582648, 2678045221, 2829640523, 1364325282, 2745433693, 1077985408, 2408548869, 2459086143, 2644360225, 943212656, 4126475505, 3166494563, 3065430391, 3671750063, 555836226, 269496352, 4294908645, 4092792573, 3537006015, 3452783745, 202118168, 320025894, 3974901699, 1600119230, 2543297077, 1145359496, 387397934, 3301201811, 2812801621, 2122220284, 1027426170, 1684319432, 1566435258, 421079858, 1936954854, 1616945344, 2172753945, 1330631070, 3705438115, 572679748, 707427924, 2425400123, 2290647819, 1179044492, 4008585671, 3099120491, 336870440, 3739122087, 1583276732, 185277718, 3688593069, 3772791771, 842159716, 976899700, 168435220, 1229577106, 101059084, 606366792, 1549591736, 3267517855, 3553849021, 2897014595, 1650632388, 2442242105, 2509612081, 3840161747, 2038008818, 3890688725, 3368567691, 926374254, 1835907034, 2374863873, 3587531953, 1313788572, 2846482505, 1819063512, 1448540844, 4109633523, 3941213647, 1701162954, 2054852340, 2930698567, 134748176, 3132806511, 2021165296, 623210314, 774795868, 471606328, 2795958615, 3031746419, 3334885783, 3907527627, 3722280097, 1953799400, 522133822, 1263263126, 3183336545, 2341176845, 2324333839, 1886425312, 1044267644, 3048588401, 1718004428, 1212733584, 50529542, 4143317495, 235803164, 1633788866, 892690282, 1465383342, 3115962473, 2256965911, 3250673817, 488449850, 2661202215, 3789633753, 4177007595, 2560144171, 286339874, 1768537042, 3654906025, 2391705863, 2492770099, 2610673197, 505291324, 2273808917, 3924369609, 3469625735, 1431699370, 673740880, 3755965093, 2358021891, 2711746649, 2307489801, 218961690, 3217021541, 3873845719, 1111672452, 1751693520, 1094828930, 2576986153, 757954394, 252645662, 2964376443, 1414855848, 3149649517, 370555436];
    var T5 = [1374988112, 2118214995, 437757123, 975658646, 1001089995, 530400753, 2902087851, 1273168787, 540080725, 2910219766, 2295101073, 4110568485, 1340463100, 3307916247, 641025152, 3043140495, 3736164937, 632953703, 1172967064, 1576976609, 3274667266, 2169303058, 2370213795, 1809054150, 59727847, 361929877, 3211623147, 2505202138, 3569255213, 1484005843, 1239443753, 2395588676, 1975683434, 4102977912, 2572697195, 666464733, 3202437046, 4035489047, 3374361702, 2110667444, 1675577880, 3843699074, 2538681184, 1649639237, 2976151520, 3144396420, 4269907996, 4178062228, 1883793496, 2403728665, 2497604743, 1383856311, 2876494627, 1917518562, 3810496343, 1716890410, 3001755655, 800440835, 2261089178, 3543599269, 807962610, 599762354, 33778362, 3977675356, 2328828971, 2809771154, 4077384432, 1315562145, 1708848333, 101039829, 3509871135, 3299278474, 875451293, 2733856160, 92987698, 2767645557, 193195065, 1080094634, 1584504582, 3178106961, 1042385657, 2531067453, 3711829422, 1306967366, 2438237621, 1908694277, 67556463, 1615861247, 429456164, 3602770327, 2302690252, 1742315127, 2968011453, 126454664, 3877198648, 2043211483, 2709260871, 2084704233, 4169408201, 0, 159417987, 841739592, 504459436, 1817866830, 4245618683, 260388950, 1034867998, 908933415, 168810852, 1750902305, 2606453969, 607530554, 202008497, 2472011535, 3035535058, 463180190, 2160117071, 1641816226, 1517767529, 470948374, 3801332234, 3231722213, 1008918595, 303765277, 235474187, 4069246893, 766945465, 337553864, 1475418501, 2943682380, 4003061179, 2743034109, 4144047775, 1551037884, 1147550661, 1543208500, 2336434550, 3408119516, 3069049960, 3102011747, 3610369226, 1113818384, 328671808, 2227573024, 2236228733, 3535486456, 2935566865, 3341394285, 496906059, 3702665459, 226906860, 2009195472, 733156972, 2842737049, 294930682, 1206477858, 2835123396, 2700099354, 1451044056, 573804783, 2269728455, 3644379585, 2362090238, 2564033334, 2801107407, 2776292904, 3669462566, 1068351396, 742039012, 1350078989, 1784663195, 1417561698, 4136440770, 2430122216, 775550814, 2193862645, 2673705150, 1775276924, 1876241833, 3475313331, 3366754619, 270040487, 3902563182, 3678124923, 3441850377, 1851332852, 3969562369, 2203032232, 3868552805, 2868897406, 566021896, 4011190502, 3135740889, 1248802510, 3936291284, 699432150, 832877231, 708780849, 3332740144, 899835584, 1951317047, 4236429990, 3767586992, 866637845, 4043610186, 1106041591, 2144161806, 395441711, 1984812685, 1139781709, 3433712980, 3835036895, 2664543715, 1282050075, 3240894392, 1181045119, 2640243204, 25965917, 4203181171, 4211818798, 3009879386, 2463879762, 3910161971, 1842759443, 2597806476, 933301370, 1509430414, 3943906441, 3467192302, 3076639029, 3776767469, 2051518780, 2631065433, 1441952575, 404016761, 1942435775, 1408749034, 1610459739, 3745345300, 2017778566, 3400528769, 3110650942, 941896748, 3265478751, 371049330, 3168937228, 675039627, 4279080257, 967311729, 135050206, 3635733660, 1683407248, 2076935265, 3576870512, 1215061108, 3501741890];
    var T6 = [1347548327, 1400783205, 3273267108, 2520393566, 3409685355, 4045380933, 2880240216, 2471224067, 1428173050, 4138563181, 2441661558, 636813900, 4233094615, 3620022987, 2149987652, 2411029155, 1239331162, 1730525723, 2554718734, 3781033664, 46346101, 310463728, 2743944855, 3328955385, 3875770207, 2501218972, 3955191162, 3667219033, 768917123, 3545789473, 692707433, 1150208456, 1786102409, 2029293177, 1805211710, 3710368113, 3065962831, 401639597, 1724457132, 3028143674, 409198410, 2196052529, 1620529459, 1164071807, 3769721975, 2226875310, 486441376, 2499348523, 1483753576, 428819965, 2274680428, 3075636216, 598438867, 3799141122, 1474502543, 711349675, 129166120, 53458370, 2592523643, 2782082824, 4063242375, 2988687269, 3120694122, 1559041666, 730517276, 2460449204, 4042459122, 2706270690, 3446004468, 3573941694, 533804130, 2328143614, 2637442643, 2695033685, 839224033, 1973745387, 957055980, 2856345839, 106852767, 1371368976, 4181598602, 1033297158, 2933734917, 1179510461, 3046200461, 91341917, 1862534868, 4284502037, 605657339, 2547432937, 3431546947, 2003294622, 3182487618, 2282195339, 954669403, 3682191598, 1201765386, 3917234703, 3388507166, 0, 2198438022, 1211247597, 2887651696, 1315723890, 4227665663, 1443857720, 507358933, 657861945, 1678381017, 560487590, 3516619604, 975451694, 2970356327, 261314535, 3535072918, 2652609425, 1333838021, 2724322336, 1767536459, 370938394, 182621114, 3854606378, 1128014560, 487725847, 185469197, 2918353863, 3106780840, 3356761769, 2237133081, 1286567175, 3152976349, 4255350624, 2683765030, 3160175349, 3309594171, 878443390, 1988838185, 3704300486, 1756818940, 1673061617, 3403100636, 272786309, 1075025698, 545572369, 2105887268, 4174560061, 296679730, 1841768865, 1260232239, 4091327024, 3960309330, 3497509347, 1814803222, 2578018489, 4195456072, 575138148, 3299409036, 446754879, 3629546796, 4011996048, 3347532110, 3252238545, 4270639778, 915985419, 3483825537, 681933534, 651868046, 2755636671, 3828103837, 223377554, 2607439820, 1649704518, 3270937875, 3901806776, 1580087799, 4118987695, 3198115200, 2087309459, 2842678573, 3016697106, 1003007129, 2802849917, 1860738147, 2077965243, 164439672, 4100872472, 32283319, 2827177882, 1709610350, 2125135846, 136428751, 3874428392, 3652904859, 3460984630, 3572145929, 3593056380, 2939266226, 824852259, 818324884, 3224740454, 930369212, 2801566410, 2967507152, 355706840, 1257309336, 4148292826, 243256656, 790073846, 2373340630, 1296297904, 1422699085, 3756299780, 3818836405, 457992840, 3099667487, 2135319889, 77422314, 1560382517, 1945798516, 788204353, 1521706781, 1385356242, 870912086, 325965383, 2358957921, 2050466060, 2388260884, 2313884476, 4006521127, 901210569, 3990953189, 1014646705, 1503449823, 1062597235, 2031621326, 3212035895, 3931371469, 1533017514, 350174575, 2256028891, 2177544179, 1052338372, 741876788, 1606591296, 1914052035, 213705253, 2334669897, 1107234197, 1899603969, 3725069491, 2631447780, 2422494913, 1635502980, 1893020342, 1950903388, 1120974935];
    var T7 = [2807058932, 1699970625, 2764249623, 1586903591, 1808481195, 1173430173, 1487645946, 59984867, 4199882800, 1844882806, 1989249228, 1277555970, 3623636965, 3419915562, 1149249077, 2744104290, 1514790577, 459744698, 244860394, 3235995134, 1963115311, 4027744588, 2544078150, 4190530515, 1608975247, 2627016082, 2062270317, 1507497298, 2200818878, 567498868, 1764313568, 3359936201, 2305455554, 2037970062, 1047239e3, 1910319033, 1337376481, 2904027272, 2892417312, 984907214, 1243112415, 830661914, 861968209, 2135253587, 2011214180, 2927934315, 2686254721, 731183368, 1750626376, 4246310725, 1820824798, 4172763771, 3542330227, 48394827, 2404901663, 2871682645, 671593195, 3254988725, 2073724613, 145085239, 2280796200, 2779915199, 1790575107, 2187128086, 472615631, 3029510009, 4075877127, 3802222185, 4107101658, 3201631749, 1646252340, 4270507174, 1402811438, 1436590835, 3778151818, 3950355702, 3963161475, 4020912224, 2667994737, 273792366, 2331590177, 104699613, 95345982, 3175501286, 2377486676, 1560637892, 3564045318, 369057872, 4213447064, 3919042237, 1137477952, 2658625497, 1119727848, 2340947849, 1530455833, 4007360968, 172466556, 266959938, 516552836, 0, 2256734592, 3980931627, 1890328081, 1917742170, 4294704398, 945164165, 3575528878, 958871085, 3647212047, 2787207260, 1423022939, 775562294, 1739656202, 3876557655, 2530391278, 2443058075, 3310321856, 547512796, 1265195639, 437656594, 3121275539, 719700128, 3762502690, 387781147, 218828297, 3350065803, 2830708150, 2848461854, 428169201, 122466165, 3720081049, 1627235199, 648017665, 4122762354, 1002783846, 2117360635, 695634755, 3336358691, 4234721005, 4049844452, 3704280881, 2232435299, 574624663, 287343814, 612205898, 1039717051, 840019705, 2708326185, 793451934, 821288114, 1391201670, 3822090177, 376187827, 3113855344, 1224348052, 1679968233, 2361698556, 1058709744, 752375421, 2431590963, 1321699145, 3519142200, 2734591178, 188127444, 2177869557, 3727205754, 2384911031, 3215212461, 2648976442, 2450346104, 3432737375, 1180849278, 331544205, 3102249176, 4150144569, 2952102595, 2159976285, 2474404304, 766078933, 313773861, 2570832044, 2108100632, 1668212892, 3145456443, 2013908262, 418672217, 3070356634, 2594734927, 1852171925, 3867060991, 3473416636, 3907448597, 2614737639, 919489135, 164948639, 2094410160, 2997825956, 590424639, 2486224549, 1723872674, 3157750862, 3399941250, 3501252752, 3625268135, 2555048196, 3673637356, 1343127501, 4130281361, 3599595085, 2957853679, 1297403050, 81781910, 3051593425, 2283490410, 532201772, 1367295589, 3926170974, 895287692, 1953757831, 1093597963, 492483431, 3528626907, 1446242576, 1192455638, 1636604631, 209336225, 344873464, 1015671571, 669961897, 3375740769, 3857572124, 2973530695, 3747192018, 1933530610, 3464042516, 935293895, 3454686199, 2858115069, 1863638845, 3683022916, 4085369519, 3292445032, 875313188, 1080017571, 3279033885, 621591778, 1233856572, 2504130317, 24197544, 3017672716, 3835484340, 3247465558, 2220981195, 3060847922, 1551124588, 1463996600];
    var T8 = [4104605777, 1097159550, 396673818, 660510266, 2875968315, 2638606623, 4200115116, 3808662347, 821712160, 1986918061, 3430322568, 38544885, 3856137295, 718002117, 893681702, 1654886325, 2975484382, 3122358053, 3926825029, 4274053469, 796197571, 1290801793, 1184342925, 3556361835, 2405426947, 2459735317, 1836772287, 1381620373, 3196267988, 1948373848, 3764988233, 3385345166, 3263785589, 2390325492, 1480485785, 3111247143, 3780097726, 2293045232, 548169417, 3459953789, 3746175075, 439452389, 1362321559, 1400849762, 1685577905, 1806599355, 2174754046, 137073913, 1214797936, 1174215055, 3731654548, 2079897426, 1943217067, 1258480242, 529487843, 1437280870, 3945269170, 3049390895, 3313212038, 923313619, 679998e3, 3215307299, 57326082, 377642221, 3474729866, 2041877159, 133361907, 1776460110, 3673476453, 96392454, 878845905, 2801699524, 777231668, 4082475170, 2330014213, 4142626212, 2213296395, 1626319424, 1906247262, 1846563261, 562755902, 3708173718, 1040559837, 3871163981, 1418573201, 3294430577, 114585348, 1343618912, 2566595609, 3186202582, 1078185097, 3651041127, 3896688048, 2307622919, 425408743, 3371096953, 2081048481, 1108339068, 2216610296, 0, 2156299017, 736970802, 292596766, 1517440620, 251657213, 2235061775, 2933202493, 758720310, 265905162, 1554391400, 1532285339, 908999204, 174567692, 1474760595, 4002861748, 2610011675, 3234156416, 3693126241, 2001430874, 303699484, 2478443234, 2687165888, 585122620, 454499602, 151849742, 2345119218, 3064510765, 514443284, 4044981591, 1963412655, 2581445614, 2137062819, 19308535, 1928707164, 1715193156, 4219352155, 1126790795, 600235211, 3992742070, 3841024952, 836553431, 1669664834, 2535604243, 3323011204, 1243905413, 3141400786, 4180808110, 698445255, 2653899549, 2989552604, 2253581325, 3252932727, 3004591147, 1891211689, 2487810577, 3915653703, 4237083816, 4030667424, 2100090966, 865136418, 1229899655, 953270745, 3399679628, 3557504664, 4118925222, 2061379749, 3079546586, 2915017791, 983426092, 2022837584, 1607244650, 2118541908, 2366882550, 3635996816, 972512814, 3283088770, 1568718495, 3499326569, 3576539503, 621982671, 2895723464, 410887952, 2623762152, 1002142683, 645401037, 1494807662, 2595684844, 1335535747, 2507040230, 4293295786, 3167684641, 367585007, 3885750714, 1865862730, 2668221674, 2960971305, 2763173681, 1059270954, 2777952454, 2724642869, 1320957812, 2194319100, 2429595872, 2815956275, 77089521, 3973773121, 3444575871, 2448830231, 1305906550, 4021308739, 2857194700, 2516901860, 3518358430, 1787304780, 740276417, 1699839814, 1592394909, 2352307457, 2272556026, 188821243, 1729977011, 3687994002, 274084841, 3594982253, 3613494426, 2701949495, 4162096729, 322734571, 2837966542, 1640576439, 484830689, 1202797690, 3537852828, 4067639125, 349075736, 3342319475, 4157467219, 4255800159, 1030690015, 1155237496, 2951971274, 1757691577, 607398968, 2738905026, 499347990, 3794078908, 1011452712, 227885567, 2818666809, 213114376, 3034881240, 1455525988, 3414450555, 850817237, 1817998408, 3092726480];
    var U1 = [0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795];
    var U2 = [0, 185469197, 370938394, 487725847, 741876788, 657861945, 975451694, 824852259, 1483753576, 1400783205, 1315723890, 1164071807, 1950903388, 2135319889, 1649704518, 1767536459, 2967507152, 3152976349, 2801566410, 2918353863, 2631447780, 2547432937, 2328143614, 2177544179, 3901806776, 3818836405, 4270639778, 4118987695, 3299409036, 3483825537, 3535072918, 3652904859, 2077965243, 1893020342, 1841768865, 1724457132, 1474502543, 1559041666, 1107234197, 1257309336, 598438867, 681933534, 901210569, 1052338372, 261314535, 77422314, 428819965, 310463728, 3409685355, 3224740454, 3710368113, 3593056380, 3875770207, 3960309330, 4045380933, 4195456072, 2471224067, 2554718734, 2237133081, 2388260884, 3212035895, 3028143674, 2842678573, 2724322336, 4138563181, 4255350624, 3769721975, 3955191162, 3667219033, 3516619604, 3431546947, 3347532110, 2933734917, 2782082824, 3099667487, 3016697106, 2196052529, 2313884476, 2499348523, 2683765030, 1179510461, 1296297904, 1347548327, 1533017514, 1786102409, 1635502980, 2087309459, 2003294622, 507358933, 355706840, 136428751, 53458370, 839224033, 957055980, 605657339, 790073846, 2373340630, 2256028891, 2607439820, 2422494913, 2706270690, 2856345839, 3075636216, 3160175349, 3573941694, 3725069491, 3273267108, 3356761769, 4181598602, 4063242375, 4011996048, 3828103837, 1033297158, 915985419, 730517276, 545572369, 296679730, 446754879, 129166120, 213705253, 1709610350, 1860738147, 1945798516, 2029293177, 1239331162, 1120974935, 1606591296, 1422699085, 4148292826, 4233094615, 3781033664, 3931371469, 3682191598, 3497509347, 3446004468, 3328955385, 2939266226, 2755636671, 3106780840, 2988687269, 2198438022, 2282195339, 2501218972, 2652609425, 1201765386, 1286567175, 1371368976, 1521706781, 1805211710, 1620529459, 2105887268, 1988838185, 533804130, 350174575, 164439672, 46346101, 870912086, 954669403, 636813900, 788204353, 2358957921, 2274680428, 2592523643, 2441661558, 2695033685, 2880240216, 3065962831, 3182487618, 3572145929, 3756299780, 3270937875, 3388507166, 4174560061, 4091327024, 4006521127, 3854606378, 1014646705, 930369212, 711349675, 560487590, 272786309, 457992840, 106852767, 223377554, 1678381017, 1862534868, 1914052035, 2031621326, 1211247597, 1128014560, 1580087799, 1428173050, 32283319, 182621114, 401639597, 486441376, 768917123, 651868046, 1003007129, 818324884, 1503449823, 1385356242, 1333838021, 1150208456, 1973745387, 2125135846, 1673061617, 1756818940, 2970356327, 3120694122, 2802849917, 2887651696, 2637442643, 2520393566, 2334669897, 2149987652, 3917234703, 3799141122, 4284502037, 4100872472, 3309594171, 3460984630, 3545789473, 3629546796, 2050466060, 1899603969, 1814803222, 1730525723, 1443857720, 1560382517, 1075025698, 1260232239, 575138148, 692707433, 878443390, 1062597235, 243256656, 91341917, 409198410, 325965383, 3403100636, 3252238545, 3704300486, 3620022987, 3874428392, 3990953189, 4042459122, 4227665663, 2460449204, 2578018489, 2226875310, 2411029155, 3198115200, 3046200461, 2827177882, 2743944855];
    var U3 = [0, 218828297, 437656594, 387781147, 875313188, 958871085, 775562294, 590424639, 1750626376, 1699970625, 1917742170, 2135253587, 1551124588, 1367295589, 1180849278, 1265195639, 3501252752, 3720081049, 3399941250, 3350065803, 3835484340, 3919042237, 4270507174, 4085369519, 3102249176, 3051593425, 2734591178, 2952102595, 2361698556, 2177869557, 2530391278, 2614737639, 3145456443, 3060847922, 2708326185, 2892417312, 2404901663, 2187128086, 2504130317, 2555048196, 3542330227, 3727205754, 3375740769, 3292445032, 3876557655, 3926170974, 4246310725, 4027744588, 1808481195, 1723872674, 1910319033, 2094410160, 1608975247, 1391201670, 1173430173, 1224348052, 59984867, 244860394, 428169201, 344873464, 935293895, 984907214, 766078933, 547512796, 1844882806, 1627235199, 2011214180, 2062270317, 1507497298, 1423022939, 1137477952, 1321699145, 95345982, 145085239, 532201772, 313773861, 830661914, 1015671571, 731183368, 648017665, 3175501286, 2957853679, 2807058932, 2858115069, 2305455554, 2220981195, 2474404304, 2658625497, 3575528878, 3625268135, 3473416636, 3254988725, 3778151818, 3963161475, 4213447064, 4130281361, 3599595085, 3683022916, 3432737375, 3247465558, 3802222185, 4020912224, 4172763771, 4122762354, 3201631749, 3017672716, 2764249623, 2848461854, 2331590177, 2280796200, 2431590963, 2648976442, 104699613, 188127444, 472615631, 287343814, 840019705, 1058709744, 671593195, 621591778, 1852171925, 1668212892, 1953757831, 2037970062, 1514790577, 1463996600, 1080017571, 1297403050, 3673637356, 3623636965, 3235995134, 3454686199, 4007360968, 3822090177, 4107101658, 4190530515, 2997825956, 3215212461, 2830708150, 2779915199, 2256734592, 2340947849, 2627016082, 2443058075, 172466556, 122466165, 273792366, 492483431, 1047239e3, 861968209, 612205898, 695634755, 1646252340, 1863638845, 2013908262, 1963115311, 1446242576, 1530455833, 1277555970, 1093597963, 1636604631, 1820824798, 2073724613, 1989249228, 1436590835, 1487645946, 1337376481, 1119727848, 164948639, 81781910, 331544205, 516552836, 1039717051, 821288114, 669961897, 719700128, 2973530695, 3157750862, 2871682645, 2787207260, 2232435299, 2283490410, 2667994737, 2450346104, 3647212047, 3564045318, 3279033885, 3464042516, 3980931627, 3762502690, 4150144569, 4199882800, 3070356634, 3121275539, 2904027272, 2686254721, 2200818878, 2384911031, 2570832044, 2486224549, 3747192018, 3528626907, 3310321856, 3359936201, 3950355702, 3867060991, 4049844452, 4234721005, 1739656202, 1790575107, 2108100632, 1890328081, 1402811438, 1586903591, 1233856572, 1149249077, 266959938, 48394827, 369057872, 418672217, 1002783846, 919489135, 567498868, 752375421, 209336225, 24197544, 376187827, 459744698, 945164165, 895287692, 574624663, 793451934, 1679968233, 1764313568, 2117360635, 1933530610, 1343127501, 1560637892, 1243112415, 1192455638, 3704280881, 3519142200, 3336358691, 3419915562, 3907448597, 3857572124, 4075877127, 4294704398, 3029510009, 3113855344, 2927934315, 2744104290, 2159976285, 2377486676, 2594734927, 2544078150];
    var U4 = [0, 151849742, 303699484, 454499602, 607398968, 758720310, 908999204, 1059270954, 1214797936, 1097159550, 1517440620, 1400849762, 1817998408, 1699839814, 2118541908, 2001430874, 2429595872, 2581445614, 2194319100, 2345119218, 3034881240, 3186202582, 2801699524, 2951971274, 3635996816, 3518358430, 3399679628, 3283088770, 4237083816, 4118925222, 4002861748, 3885750714, 1002142683, 850817237, 698445255, 548169417, 529487843, 377642221, 227885567, 77089521, 1943217067, 2061379749, 1640576439, 1757691577, 1474760595, 1592394909, 1174215055, 1290801793, 2875968315, 2724642869, 3111247143, 2960971305, 2405426947, 2253581325, 2638606623, 2487810577, 3808662347, 3926825029, 4044981591, 4162096729, 3342319475, 3459953789, 3576539503, 3693126241, 1986918061, 2137062819, 1685577905, 1836772287, 1381620373, 1532285339, 1078185097, 1229899655, 1040559837, 923313619, 740276417, 621982671, 439452389, 322734571, 137073913, 19308535, 3871163981, 4021308739, 4104605777, 4255800159, 3263785589, 3414450555, 3499326569, 3651041127, 2933202493, 2815956275, 3167684641, 3049390895, 2330014213, 2213296395, 2566595609, 2448830231, 1305906550, 1155237496, 1607244650, 1455525988, 1776460110, 1626319424, 2079897426, 1928707164, 96392454, 213114376, 396673818, 514443284, 562755902, 679998e3, 865136418, 983426092, 3708173718, 3557504664, 3474729866, 3323011204, 4180808110, 4030667424, 3945269170, 3794078908, 2507040230, 2623762152, 2272556026, 2390325492, 2975484382, 3092726480, 2738905026, 2857194700, 3973773121, 3856137295, 4274053469, 4157467219, 3371096953, 3252932727, 3673476453, 3556361835, 2763173681, 2915017791, 3064510765, 3215307299, 2156299017, 2307622919, 2459735317, 2610011675, 2081048481, 1963412655, 1846563261, 1729977011, 1480485785, 1362321559, 1243905413, 1126790795, 878845905, 1030690015, 645401037, 796197571, 274084841, 425408743, 38544885, 188821243, 3613494426, 3731654548, 3313212038, 3430322568, 4082475170, 4200115116, 3780097726, 3896688048, 2668221674, 2516901860, 2366882550, 2216610296, 3141400786, 2989552604, 2837966542, 2687165888, 1202797690, 1320957812, 1437280870, 1554391400, 1669664834, 1787304780, 1906247262, 2022837584, 265905162, 114585348, 499347990, 349075736, 736970802, 585122620, 972512814, 821712160, 2595684844, 2478443234, 2293045232, 2174754046, 3196267988, 3079546586, 2895723464, 2777952454, 3537852828, 3687994002, 3234156416, 3385345166, 4142626212, 4293295786, 3841024952, 3992742070, 174567692, 57326082, 410887952, 292596766, 777231668, 660510266, 1011452712, 893681702, 1108339068, 1258480242, 1343618912, 1494807662, 1715193156, 1865862730, 1948373848, 2100090966, 2701949495, 2818666809, 3004591147, 3122358053, 2235061775, 2352307457, 2535604243, 2653899549, 3915653703, 3764988233, 4219352155, 4067639125, 3444575871, 3294430577, 3746175075, 3594982253, 836553431, 953270745, 600235211, 718002117, 367585007, 484830689, 133361907, 251657213, 2041877159, 1891211689, 1806599355, 1654886325, 1568718495, 1418573201, 1335535747, 1184342925];
    function convertToInt32(bytes3) {
      const result = [];
      for (let i = 0; i < bytes3.length; i += 4) {
        result.push(bytes3[i] << 24 | bytes3[i + 1] << 16 | bytes3[i + 2] << 8 | bytes3[i + 3]);
      }
      return result;
    }
    var AES2 = class _AES {
      get key() {
        return __classPrivateFieldGet3(this, _AES_key2, "f").slice();
      }
      constructor(key) {
        _AES_key2.set(this, void 0);
        _AES_Kd2.set(this, void 0);
        _AES_Ke2.set(this, void 0);
        if (!(this instanceof _AES)) {
          throw Error("AES must be instanitated with `new`");
        }
        __classPrivateFieldSet2(this, _AES_key2, new Uint8Array(key), "f");
        const rounds = numberOfRounds[this.key.length];
        if (rounds == null) {
          throw new TypeError("invalid key size (must be 16, 24 or 32 bytes)");
        }
        __classPrivateFieldSet2(this, _AES_Ke2, [], "f");
        __classPrivateFieldSet2(this, _AES_Kd2, [], "f");
        for (let i = 0; i <= rounds; i++) {
          __classPrivateFieldGet3(this, _AES_Ke2, "f").push([0, 0, 0, 0]);
          __classPrivateFieldGet3(this, _AES_Kd2, "f").push([0, 0, 0, 0]);
        }
        const roundKeyCount = (rounds + 1) * 4;
        const KC = this.key.length / 4;
        const tk = convertToInt32(this.key);
        let index;
        for (let i = 0; i < KC; i++) {
          index = i >> 2;
          __classPrivateFieldGet3(this, _AES_Ke2, "f")[index][i % 4] = tk[i];
          __classPrivateFieldGet3(this, _AES_Kd2, "f")[rounds - index][i % 4] = tk[i];
        }
        let rconpointer = 0;
        let t = KC, tt;
        while (t < roundKeyCount) {
          tt = tk[KC - 1];
          tk[0] ^= S[tt >> 16 & 255] << 24 ^ S[tt >> 8 & 255] << 16 ^ S[tt & 255] << 8 ^ S[tt >> 24 & 255] ^ rcon[rconpointer] << 24;
          rconpointer += 1;
          if (KC != 8) {
            for (let i2 = 1; i2 < KC; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
          } else {
            for (let i2 = 1; i2 < KC / 2; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
            tt = tk[KC / 2 - 1];
            tk[KC / 2] ^= S[tt & 255] ^ S[tt >> 8 & 255] << 8 ^ S[tt >> 16 & 255] << 16 ^ S[tt >> 24 & 255] << 24;
            for (let i2 = KC / 2 + 1; i2 < KC; i2++) {
              tk[i2] ^= tk[i2 - 1];
            }
          }
          let i = 0, r2, c;
          while (i < KC && t < roundKeyCount) {
            r2 = t >> 2;
            c = t % 4;
            __classPrivateFieldGet3(this, _AES_Ke2, "f")[r2][c] = tk[i];
            __classPrivateFieldGet3(this, _AES_Kd2, "f")[rounds - r2][c] = tk[i++];
            t++;
          }
        }
        for (let r2 = 1; r2 < rounds; r2++) {
          for (let c = 0; c < 4; c++) {
            tt = __classPrivateFieldGet3(this, _AES_Kd2, "f")[r2][c];
            __classPrivateFieldGet3(this, _AES_Kd2, "f")[r2][c] = U1[tt >> 24 & 255] ^ U2[tt >> 16 & 255] ^ U3[tt >> 8 & 255] ^ U4[tt & 255];
          }
        }
      }
      encrypt(plaintext) {
        if (plaintext.length != 16) {
          throw new TypeError("invalid plaintext size (must be 16 bytes)");
        }
        const rounds = __classPrivateFieldGet3(this, _AES_Ke2, "f").length - 1;
        const a = [0, 0, 0, 0];
        let t = convertToInt32(plaintext);
        for (let i = 0; i < 4; i++) {
          t[i] ^= __classPrivateFieldGet3(this, _AES_Ke2, "f")[0][i];
        }
        for (let r2 = 1; r2 < rounds; r2++) {
          for (let i = 0; i < 4; i++) {
            a[i] = T1[t[i] >> 24 & 255] ^ T2[t[(i + 1) % 4] >> 16 & 255] ^ T3[t[(i + 2) % 4] >> 8 & 255] ^ T4[t[(i + 3) % 4] & 255] ^ __classPrivateFieldGet3(this, _AES_Ke2, "f")[r2][i];
          }
          t = a.slice();
        }
        const result = new Uint8Array(16);
        let tt = 0;
        for (let i = 0; i < 4; i++) {
          tt = __classPrivateFieldGet3(this, _AES_Ke2, "f")[rounds][i];
          result[4 * i] = (S[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (S[t[(i + 1) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (S[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (S[t[(i + 3) % 4] & 255] ^ tt) & 255;
        }
        return result;
      }
      decrypt(ciphertext) {
        if (ciphertext.length != 16) {
          throw new TypeError("invalid ciphertext size (must be 16 bytes)");
        }
        const rounds = __classPrivateFieldGet3(this, _AES_Kd2, "f").length - 1;
        const a = [0, 0, 0, 0];
        let t = convertToInt32(ciphertext);
        for (let i = 0; i < 4; i++) {
          t[i] ^= __classPrivateFieldGet3(this, _AES_Kd2, "f")[0][i];
        }
        for (let r2 = 1; r2 < rounds; r2++) {
          for (let i = 0; i < 4; i++) {
            a[i] = T5[t[i] >> 24 & 255] ^ T6[t[(i + 3) % 4] >> 16 & 255] ^ T7[t[(i + 2) % 4] >> 8 & 255] ^ T8[t[(i + 1) % 4] & 255] ^ __classPrivateFieldGet3(this, _AES_Kd2, "f")[r2][i];
          }
          t = a.slice();
        }
        const result = new Uint8Array(16);
        let tt = 0;
        for (let i = 0; i < 4; i++) {
          tt = __classPrivateFieldGet3(this, _AES_Kd2, "f")[rounds][i];
          result[4 * i] = (Si[t[i] >> 24 & 255] ^ tt >> 24) & 255;
          result[4 * i + 1] = (Si[t[(i + 3) % 4] >> 16 & 255] ^ tt >> 16) & 255;
          result[4 * i + 2] = (Si[t[(i + 2) % 4] >> 8 & 255] ^ tt >> 8) & 255;
          result[4 * i + 3] = (Si[t[(i + 1) % 4] & 255] ^ tt) & 255;
        }
        return result;
      }
    };
    exports.AES = AES2;
    _AES_key2 = /* @__PURE__ */ new WeakMap(), _AES_Kd2 = /* @__PURE__ */ new WeakMap(), _AES_Ke2 = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/ethers/node_modules/aes-js/lib.commonjs/mode.js
var require_mode = __commonJS({
  "node_modules/ethers/node_modules/aes-js/lib.commonjs/mode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModeOfOperation = void 0;
    var aes_js_1 = require_aes();
    var ModeOfOperation2 = class {
      constructor(name, key, cls) {
        if (cls && !(this instanceof cls)) {
          throw new Error(`${name} must be instantiated with "new"`);
        }
        Object.defineProperties(this, {
          aes: { enumerable: true, value: new aes_js_1.AES(key) },
          name: { enumerable: true, value: name }
        });
      }
    };
    exports.ModeOfOperation = ModeOfOperation2;
  }
});

// node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-cbc.js
var require_mode_cbc = __commonJS({
  "node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-cbc.js"(exports) {
    "use strict";
    var __classPrivateFieldSet2 = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet3 = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f2) {
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
    };
    var _CBC_iv2;
    var _CBC_lastBlock2;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CBC = void 0;
    var mode_js_1 = require_mode();
    var CBC2 = class _CBC extends mode_js_1.ModeOfOperation {
      constructor(key, iv) {
        super("ECC", key, _CBC);
        _CBC_iv2.set(this, void 0);
        _CBC_lastBlock2.set(this, void 0);
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet2(this, _CBC_iv2, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet2(this, _CBC_iv2, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet2(this, _CBC_lastBlock2, this.iv, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet3(this, _CBC_iv2, "f"));
      }
      encrypt(plaintext) {
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const ciphertext = new Uint8Array(plaintext.length);
        for (let i = 0; i < plaintext.length; i += 16) {
          for (let j = 0; j < 16; j++) {
            __classPrivateFieldGet3(this, _CBC_lastBlock2, "f")[j] ^= plaintext[i + j];
          }
          __classPrivateFieldSet2(this, _CBC_lastBlock2, this.aes.encrypt(__classPrivateFieldGet3(this, _CBC_lastBlock2, "f")), "f");
          ciphertext.set(__classPrivateFieldGet3(this, _CBC_lastBlock2, "f"), i);
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (ciphertext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        const plaintext = new Uint8Array(ciphertext.length);
        for (let i = 0; i < ciphertext.length; i += 16) {
          const block = this.aes.decrypt(ciphertext.subarray(i, i + 16));
          for (let j = 0; j < 16; j++) {
            plaintext[i + j] = block[j] ^ __classPrivateFieldGet3(this, _CBC_lastBlock2, "f")[j];
            __classPrivateFieldGet3(this, _CBC_lastBlock2, "f")[j] = ciphertext[i + j];
          }
        }
        return plaintext;
      }
    };
    exports.CBC = CBC2;
    _CBC_iv2 = /* @__PURE__ */ new WeakMap(), _CBC_lastBlock2 = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-cfb.js
var require_mode_cfb = __commonJS({
  "node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-cfb.js"(exports) {
    "use strict";
    var __classPrivateFieldSet2 = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet3 = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f2) {
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
    };
    var _CFB_instances2;
    var _CFB_iv2;
    var _CFB_shiftRegister2;
    var _CFB_shift3;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CFB = void 0;
    var mode_js_1 = require_mode();
    var CFB2 = class _CFB extends mode_js_1.ModeOfOperation {
      constructor(key, iv, segmentSize = 8) {
        super("CFB", key, _CFB);
        _CFB_instances2.add(this);
        _CFB_iv2.set(this, void 0);
        _CFB_shiftRegister2.set(this, void 0);
        if (!Number.isInteger(segmentSize) || segmentSize % 8) {
          throw new TypeError("invalid segmentSize");
        }
        Object.defineProperties(this, {
          segmentSize: { enumerable: true, value: segmentSize }
        });
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet2(this, _CFB_iv2, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet2(this, _CFB_iv2, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet2(this, _CFB_shiftRegister2, this.iv, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet3(this, _CFB_iv2, "f"));
      }
      encrypt(plaintext) {
        if (8 * plaintext.length % this.segmentSize) {
          throw new TypeError("invalid plaintext size (must be multiple of segmentSize bytes)");
        }
        const segmentSize = this.segmentSize / 8;
        const ciphertext = new Uint8Array(plaintext);
        for (let i = 0; i < ciphertext.length; i += segmentSize) {
          const xorSegment = this.aes.encrypt(__classPrivateFieldGet3(this, _CFB_shiftRegister2, "f"));
          for (let j = 0; j < segmentSize; j++) {
            ciphertext[i + j] ^= xorSegment[j];
          }
          __classPrivateFieldGet3(this, _CFB_instances2, "m", _CFB_shift3).call(this, ciphertext.subarray(i));
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (8 * ciphertext.length % this.segmentSize) {
          throw new TypeError("invalid ciphertext size (must be multiple of segmentSize bytes)");
        }
        const segmentSize = this.segmentSize / 8;
        const plaintext = new Uint8Array(ciphertext);
        for (let i = 0; i < plaintext.length; i += segmentSize) {
          const xorSegment = this.aes.encrypt(__classPrivateFieldGet3(this, _CFB_shiftRegister2, "f"));
          for (let j = 0; j < segmentSize; j++) {
            plaintext[i + j] ^= xorSegment[j];
          }
          __classPrivateFieldGet3(this, _CFB_instances2, "m", _CFB_shift3).call(this, ciphertext.subarray(i));
        }
        return plaintext;
      }
    };
    exports.CFB = CFB2;
    _CFB_iv2 = /* @__PURE__ */ new WeakMap(), _CFB_shiftRegister2 = /* @__PURE__ */ new WeakMap(), _CFB_instances2 = /* @__PURE__ */ new WeakSet(), _CFB_shift3 = function _CFB_shift4(data) {
      const segmentSize = this.segmentSize / 8;
      __classPrivateFieldGet3(this, _CFB_shiftRegister2, "f").set(__classPrivateFieldGet3(this, _CFB_shiftRegister2, "f").subarray(segmentSize));
      __classPrivateFieldGet3(this, _CFB_shiftRegister2, "f").set(data.subarray(0, segmentSize), 16 - segmentSize);
    };
  }
});

// node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ctr.js
var require_mode_ctr = __commonJS({
  "node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ctr.js"(exports) {
    "use strict";
    var __classPrivateFieldSet2 = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet3 = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f2) {
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
    };
    var _CTR_remaining2;
    var _CTR_remainingIndex2;
    var _CTR_counter2;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CTR = void 0;
    var mode_js_1 = require_mode();
    var CTR2 = class _CTR extends mode_js_1.ModeOfOperation {
      constructor(key, initialValue) {
        super("CTR", key, _CTR);
        _CTR_remaining2.set(this, void 0);
        _CTR_remainingIndex2.set(this, void 0);
        _CTR_counter2.set(this, void 0);
        __classPrivateFieldSet2(this, _CTR_counter2, new Uint8Array(16), "f");
        __classPrivateFieldGet3(this, _CTR_counter2, "f").fill(0);
        __classPrivateFieldSet2(this, _CTR_remaining2, __classPrivateFieldGet3(this, _CTR_counter2, "f"), "f");
        __classPrivateFieldSet2(this, _CTR_remainingIndex2, 16, "f");
        if (initialValue == null) {
          initialValue = 1;
        }
        if (typeof initialValue === "number") {
          this.setCounterValue(initialValue);
        } else {
          this.setCounterBytes(initialValue);
        }
      }
      get counter() {
        return new Uint8Array(__classPrivateFieldGet3(this, _CTR_counter2, "f"));
      }
      setCounterValue(value) {
        if (!Number.isInteger(value) || value < 0 || value > Number.MAX_SAFE_INTEGER) {
          throw new TypeError("invalid counter initial integer value");
        }
        for (let index = 15; index >= 0; --index) {
          __classPrivateFieldGet3(this, _CTR_counter2, "f")[index] = value % 256;
          value = Math.floor(value / 256);
        }
      }
      setCounterBytes(value) {
        if (value.length !== 16) {
          throw new TypeError("invalid counter initial Uint8Array value length");
        }
        __classPrivateFieldGet3(this, _CTR_counter2, "f").set(value);
      }
      increment() {
        for (let i = 15; i >= 0; i--) {
          if (__classPrivateFieldGet3(this, _CTR_counter2, "f")[i] === 255) {
            __classPrivateFieldGet3(this, _CTR_counter2, "f")[i] = 0;
          } else {
            __classPrivateFieldGet3(this, _CTR_counter2, "f")[i]++;
            break;
          }
        }
      }
      encrypt(plaintext) {
        var _a2, _b;
        const crypttext = new Uint8Array(plaintext);
        for (let i = 0; i < crypttext.length; i++) {
          if (__classPrivateFieldGet3(this, _CTR_remainingIndex2, "f") === 16) {
            __classPrivateFieldSet2(this, _CTR_remaining2, this.aes.encrypt(__classPrivateFieldGet3(this, _CTR_counter2, "f")), "f");
            __classPrivateFieldSet2(this, _CTR_remainingIndex2, 0, "f");
            this.increment();
          }
          crypttext[i] ^= __classPrivateFieldGet3(this, _CTR_remaining2, "f")[__classPrivateFieldSet2(this, _CTR_remainingIndex2, (_b = __classPrivateFieldGet3(this, _CTR_remainingIndex2, "f"), _a2 = _b++, _b), "f"), _a2];
        }
        return crypttext;
      }
      decrypt(ciphertext) {
        return this.encrypt(ciphertext);
      }
    };
    exports.CTR = CTR2;
    _CTR_remaining2 = /* @__PURE__ */ new WeakMap(), _CTR_remainingIndex2 = /* @__PURE__ */ new WeakMap(), _CTR_counter2 = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ecb.js
var require_mode_ecb = __commonJS({
  "node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ecb.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ECB = void 0;
    var mode_js_1 = require_mode();
    var ECB2 = class _ECB extends mode_js_1.ModeOfOperation {
      constructor(key) {
        super("ECB", key, _ECB);
      }
      encrypt(plaintext) {
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const crypttext = new Uint8Array(plaintext.length);
        for (let i = 0; i < plaintext.length; i += 16) {
          crypttext.set(this.aes.encrypt(plaintext.subarray(i, i + 16)), i);
        }
        return crypttext;
      }
      decrypt(crypttext) {
        if (crypttext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        const plaintext = new Uint8Array(crypttext.length);
        for (let i = 0; i < crypttext.length; i += 16) {
          plaintext.set(this.aes.decrypt(crypttext.subarray(i, i + 16)), i);
        }
        return plaintext;
      }
    };
    exports.ECB = ECB2;
  }
});

// node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ofb.js
var require_mode_ofb = __commonJS({
  "node_modules/ethers/node_modules/aes-js/lib.commonjs/mode-ofb.js"(exports) {
    "use strict";
    var __classPrivateFieldSet2 = exports && exports.__classPrivateFieldSet || function(receiver, state, value, kind, f2) {
      if (kind === "m") throw new TypeError("Private method is not writable");
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a setter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
      return kind === "a" ? f2.call(receiver, value) : f2 ? f2.value = value : state.set(receiver, value), value;
    };
    var __classPrivateFieldGet3 = exports && exports.__classPrivateFieldGet || function(receiver, state, kind, f2) {
      if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
      if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
      return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
    };
    var _OFB_iv2;
    var _OFB_lastPrecipher2;
    var _OFB_lastPrecipherIndex2;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OFB = void 0;
    var mode_js_1 = require_mode();
    var OFB2 = class _OFB extends mode_js_1.ModeOfOperation {
      constructor(key, iv) {
        super("OFB", key, _OFB);
        _OFB_iv2.set(this, void 0);
        _OFB_lastPrecipher2.set(this, void 0);
        _OFB_lastPrecipherIndex2.set(this, void 0);
        if (iv) {
          if (iv.length % 16) {
            throw new TypeError("invalid iv size (must be 16 bytes)");
          }
          __classPrivateFieldSet2(this, _OFB_iv2, new Uint8Array(iv), "f");
        } else {
          __classPrivateFieldSet2(this, _OFB_iv2, new Uint8Array(16), "f");
        }
        __classPrivateFieldSet2(this, _OFB_lastPrecipher2, this.iv, "f");
        __classPrivateFieldSet2(this, _OFB_lastPrecipherIndex2, 16, "f");
      }
      get iv() {
        return new Uint8Array(__classPrivateFieldGet3(this, _OFB_iv2, "f"));
      }
      encrypt(plaintext) {
        var _a2, _b;
        if (plaintext.length % 16) {
          throw new TypeError("invalid plaintext size (must be multiple of 16 bytes)");
        }
        const ciphertext = new Uint8Array(plaintext);
        for (let i = 0; i < ciphertext.length; i++) {
          if (__classPrivateFieldGet3(this, _OFB_lastPrecipherIndex2, "f") === 16) {
            __classPrivateFieldSet2(this, _OFB_lastPrecipher2, this.aes.encrypt(__classPrivateFieldGet3(this, _OFB_lastPrecipher2, "f")), "f");
            __classPrivateFieldSet2(this, _OFB_lastPrecipherIndex2, 0, "f");
          }
          ciphertext[i] ^= __classPrivateFieldGet3(this, _OFB_lastPrecipher2, "f")[__classPrivateFieldSet2(this, _OFB_lastPrecipherIndex2, (_b = __classPrivateFieldGet3(this, _OFB_lastPrecipherIndex2, "f"), _a2 = _b++, _b), "f"), _a2];
        }
        return ciphertext;
      }
      decrypt(ciphertext) {
        if (ciphertext.length % 16) {
          throw new TypeError("invalid ciphertext size (must be multiple of 16 bytes)");
        }
        return this.encrypt(ciphertext);
      }
    };
    exports.OFB = OFB2;
    _OFB_iv2 = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipher2 = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipherIndex2 = /* @__PURE__ */ new WeakMap();
  }
});

// node_modules/ethers/node_modules/aes-js/lib.commonjs/padding.js
var require_padding = __commonJS({
  "node_modules/ethers/node_modules/aes-js/lib.commonjs/padding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pkcs7Strip = exports.pkcs7Pad = void 0;
    function pkcs7Pad2(data) {
      const padder = 16 - data.length % 16;
      const result = new Uint8Array(data.length + padder);
      result.set(data);
      for (let i = data.length; i < result.length; i++) {
        result[i] = padder;
      }
      return result;
    }
    exports.pkcs7Pad = pkcs7Pad2;
    function pkcs7Strip2(data) {
      if (data.length < 16) {
        throw new TypeError("PKCS#7 invalid length");
      }
      const padder = data[data.length - 1];
      if (padder > 16) {
        throw new TypeError("PKCS#7 padding byte out of range");
      }
      const length = data.length - padder;
      for (let i = 0; i < padder; i++) {
        if (data[length + i] !== padder) {
          throw new TypeError("PKCS#7 invalid padding byte");
        }
      }
      return new Uint8Array(data.subarray(0, length));
    }
    exports.pkcs7Strip = pkcs7Strip2;
  }
});

// node_modules/ethers/node_modules/aes-js/lib.commonjs/index.js
var require_lib = __commonJS({
  "node_modules/ethers/node_modules/aes-js/lib.commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pkcs7Strip = exports.pkcs7Pad = exports.OFB = exports.ECB = exports.CTR = exports.CFB = exports.CBC = exports.ModeOfOperation = exports.AES = void 0;
    var aes_js_1 = require_aes();
    Object.defineProperty(exports, "AES", { enumerable: true, get: function() {
      return aes_js_1.AES;
    } });
    var mode_js_1 = require_mode();
    Object.defineProperty(exports, "ModeOfOperation", { enumerable: true, get: function() {
      return mode_js_1.ModeOfOperation;
    } });
    var mode_cbc_js_1 = require_mode_cbc();
    Object.defineProperty(exports, "CBC", { enumerable: true, get: function() {
      return mode_cbc_js_1.CBC;
    } });
    var mode_cfb_js_1 = require_mode_cfb();
    Object.defineProperty(exports, "CFB", { enumerable: true, get: function() {
      return mode_cfb_js_1.CFB;
    } });
    var mode_ctr_js_1 = require_mode_ctr();
    Object.defineProperty(exports, "CTR", { enumerable: true, get: function() {
      return mode_ctr_js_1.CTR;
    } });
    var mode_ecb_js_1 = require_mode_ecb();
    Object.defineProperty(exports, "ECB", { enumerable: true, get: function() {
      return mode_ecb_js_1.ECB;
    } });
    var mode_ofb_js_1 = require_mode_ofb();
    Object.defineProperty(exports, "OFB", { enumerable: true, get: function() {
      return mode_ofb_js_1.OFB;
    } });
    var padding_js_1 = require_padding();
    Object.defineProperty(exports, "pkcs7Pad", { enumerable: true, get: function() {
      return padding_js_1.pkcs7Pad;
    } });
    Object.defineProperty(exports, "pkcs7Strip", { enumerable: true, get: function() {
      return padding_js_1.pkcs7Strip;
    } });
  }
});

// node_modules/ethers/lib.commonjs/wallet/utils.js
var require_utils4 = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.spelunk = exports.getPassword = exports.zpad = exports.looseArrayify = void 0;
    var index_js_1 = require_utils();
    function looseArrayify2(hexString) {
      if (typeof hexString === "string" && !hexString.startsWith("0x")) {
        hexString = "0x" + hexString;
      }
      return (0, index_js_1.getBytesCopy)(hexString);
    }
    exports.looseArrayify = looseArrayify2;
    function zpad2(value, length) {
      value = String(value);
      while (value.length < length) {
        value = "0" + value;
      }
      return value;
    }
    exports.zpad = zpad2;
    function getPassword2(password) {
      if (typeof password === "string") {
        return (0, index_js_1.toUtf8Bytes)(password, "NFKC");
      }
      return (0, index_js_1.getBytesCopy)(password);
    }
    exports.getPassword = getPassword2;
    function spelunk2(object2, _path) {
      const match = _path.match(/^([a-z0-9$_.-]*)(:([a-z]+))?(!)?$/i);
      (0, index_js_1.assertArgument)(match != null, "invalid path", "path", _path);
      const path = match[1];
      const type = match[3];
      const reqd = match[4] === "!";
      let cur = object2;
      for (const comp of path.toLowerCase().split(".")) {
        if (Array.isArray(cur)) {
          if (!comp.match(/^[0-9]+$/)) {
            break;
          }
          cur = cur[parseInt(comp)];
        } else if (typeof cur === "object") {
          let found = null;
          for (const key in cur) {
            if (key.toLowerCase() === comp) {
              found = cur[key];
              break;
            }
          }
          cur = found;
        } else {
          cur = null;
        }
        if (cur == null) {
          break;
        }
      }
      (0, index_js_1.assertArgument)(!reqd || cur != null, "missing required value", "path", path);
      if (type && cur != null) {
        if (type === "int") {
          if (typeof cur === "string" && cur.match(/^-?[0-9]+$/)) {
            return parseInt(cur);
          } else if (Number.isSafeInteger(cur)) {
            return cur;
          }
        }
        if (type === "number") {
          if (typeof cur === "string" && cur.match(/^-?[0-9.]*$/)) {
            return parseFloat(cur);
          }
        }
        if (type === "data") {
          if (typeof cur === "string") {
            return looseArrayify2(cur);
          }
        }
        if (type === "array" && Array.isArray(cur)) {
          return cur;
        }
        if (type === typeof cur) {
          return cur;
        }
        (0, index_js_1.assertArgument)(false, `wrong type found for ${type} `, "path", path);
      }
      return cur;
    }
    exports.spelunk = spelunk2;
  }
});

// node_modules/ethers/lib.commonjs/wallet/json-keystore.js
var require_json_keystore = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/json-keystore.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encryptKeystoreJson = exports.encryptKeystoreJsonSync = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.isKeystoreJson = void 0;
    var aes_js_1 = require_lib();
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils();
    var utils_js_1 = require_utils4();
    var _version_js_1 = require_version();
    var defaultPath2 = "m/44'/60'/0'/0/0";
    function isKeystoreJson2(json) {
      try {
        const data = JSON.parse(json);
        const version11 = data.version != null ? parseInt(data.version) : 0;
        if (version11 === 3) {
          return true;
        }
      } catch (error) {
      }
      return false;
    }
    exports.isKeystoreJson = isKeystoreJson2;
    function decrypt(data, key, ciphertext) {
      const cipher = (0, utils_js_1.spelunk)(data, "crypto.cipher:string");
      if (cipher === "aes-128-ctr") {
        const iv = (0, utils_js_1.spelunk)(data, "crypto.cipherparams.iv:data!");
        const aesCtr = new aes_js_1.CTR(key, iv);
        return (0, index_js_4.hexlify)(aesCtr.decrypt(ciphertext));
      }
      (0, index_js_4.assert)(false, "unsupported cipher", "UNSUPPORTED_OPERATION", {
        operation: "decrypt"
      });
    }
    function getAccount(data, _key) {
      const key = (0, index_js_4.getBytes)(_key);
      const ciphertext = (0, utils_js_1.spelunk)(data, "crypto.ciphertext:data!");
      const computedMAC = (0, index_js_4.hexlify)((0, index_js_2.keccak256)((0, index_js_4.concat)([key.slice(16, 32), ciphertext]))).substring(2);
      (0, index_js_4.assertArgument)(computedMAC === (0, utils_js_1.spelunk)(data, "crypto.mac:string!").toLowerCase(), "incorrect password", "password", "[ REDACTED ]");
      const privateKey = decrypt(data, key.slice(0, 16), ciphertext);
      const address = (0, index_js_3.computeAddress)(privateKey);
      if (data.address) {
        let check = data.address.toLowerCase();
        if (!check.startsWith("0x")) {
          check = "0x" + check;
        }
        (0, index_js_4.assertArgument)((0, index_js_1.getAddress)(check) === address, "keystore address/privateKey mismatch", "address", data.address);
      }
      const account = { address, privateKey };
      const version11 = (0, utils_js_1.spelunk)(data, "x-ethers.version:string");
      if (version11 === "0.1") {
        const mnemonicKey = key.slice(32, 64);
        const mnemonicCiphertext = (0, utils_js_1.spelunk)(data, "x-ethers.mnemonicCiphertext:data!");
        const mnemonicIv = (0, utils_js_1.spelunk)(data, "x-ethers.mnemonicCounter:data!");
        const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);
        account.mnemonic = {
          path: (0, utils_js_1.spelunk)(data, "x-ethers.path:string") || defaultPath2,
          locale: (0, utils_js_1.spelunk)(data, "x-ethers.locale:string") || "en",
          entropy: (0, index_js_4.hexlify)((0, index_js_4.getBytes)(mnemonicAesCtr.decrypt(mnemonicCiphertext)))
        };
      }
      return account;
    }
    function getDecryptKdfParams(data) {
      const kdf = (0, utils_js_1.spelunk)(data, "crypto.kdf:string");
      if (kdf && typeof kdf === "string") {
        if (kdf.toLowerCase() === "scrypt") {
          const salt = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.salt:data!");
          const N3 = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.n:int!");
          const r2 = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.r:int!");
          const p = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.p:int!");
          (0, index_js_4.assertArgument)(N3 > 0 && (N3 & N3 - 1) === 0, "invalid kdf.N", "kdf.N", N3);
          (0, index_js_4.assertArgument)(r2 > 0 && p > 0, "invalid kdf", "kdf", kdf);
          const dkLen = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.dklen:int!");
          (0, index_js_4.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dflen", dkLen);
          return { name: "scrypt", salt, N: N3, r: r2, p, dkLen: 64 };
        } else if (kdf.toLowerCase() === "pbkdf2") {
          const salt = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.salt:data!");
          const prf = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.prf:string!");
          const algorithm = prf.split("-").pop();
          (0, index_js_4.assertArgument)(algorithm === "sha256" || algorithm === "sha512", "invalid kdf.pdf", "kdf.pdf", prf);
          const count = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.c:int!");
          const dkLen = (0, utils_js_1.spelunk)(data, "crypto.kdfparams.dklen:int!");
          (0, index_js_4.assertArgument)(dkLen === 32, "invalid kdf.dklen", "kdf.dklen", dkLen);
          return { name: "pbkdf2", salt, count, dkLen, algorithm };
        }
      }
      (0, index_js_4.assertArgument)(false, "unsupported key-derivation function", "kdf", kdf);
    }
    function decryptKeystoreJsonSync2(json, _password) {
      const data = JSON.parse(json);
      const password = (0, utils_js_1.getPassword)(_password);
      const params = getDecryptKdfParams(data);
      if (params.name === "pbkdf2") {
        const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
        const key2 = (0, index_js_2.pbkdf2)(password, salt2, count, dkLen2, algorithm);
        return getAccount(data, key2);
      }
      (0, index_js_4.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
      const { salt, N: N3, r: r2, p, dkLen } = params;
      const key = (0, index_js_2.scryptSync)(password, salt, N3, r2, p, dkLen);
      return getAccount(data, key);
    }
    exports.decryptKeystoreJsonSync = decryptKeystoreJsonSync2;
    function stall(duration) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve();
        }, duration);
      });
    }
    async function decryptKeystoreJson2(json, _password, progress) {
      const data = JSON.parse(json);
      const password = (0, utils_js_1.getPassword)(_password);
      const params = getDecryptKdfParams(data);
      if (params.name === "pbkdf2") {
        if (progress) {
          progress(0);
          await stall(0);
        }
        const { salt: salt2, count, dkLen: dkLen2, algorithm } = params;
        const key2 = (0, index_js_2.pbkdf2)(password, salt2, count, dkLen2, algorithm);
        if (progress) {
          progress(1);
          await stall(0);
        }
        return getAccount(data, key2);
      }
      (0, index_js_4.assert)(params.name === "scrypt", "cannot be reached", "UNKNOWN_ERROR", { params });
      const { salt, N: N3, r: r2, p, dkLen } = params;
      const key = await (0, index_js_2.scrypt)(password, salt, N3, r2, p, dkLen, progress);
      return getAccount(data, key);
    }
    exports.decryptKeystoreJson = decryptKeystoreJson2;
    function getEncryptKdfParams(options) {
      const salt = options.salt != null ? (0, index_js_4.getBytes)(options.salt, "options.salt") : (0, index_js_2.randomBytes)(32);
      let N3 = 1 << 17, r2 = 8, p = 1;
      if (options.scrypt) {
        if (options.scrypt.N) {
          N3 = options.scrypt.N;
        }
        if (options.scrypt.r) {
          r2 = options.scrypt.r;
        }
        if (options.scrypt.p) {
          p = options.scrypt.p;
        }
      }
      (0, index_js_4.assertArgument)(typeof N3 === "number" && N3 > 0 && Number.isSafeInteger(N3) && (BigInt(N3) & BigInt(N3 - 1)) === BigInt(0), "invalid scrypt N parameter", "options.N", N3);
      (0, index_js_4.assertArgument)(typeof r2 === "number" && r2 > 0 && Number.isSafeInteger(r2), "invalid scrypt r parameter", "options.r", r2);
      (0, index_js_4.assertArgument)(typeof p === "number" && p > 0 && Number.isSafeInteger(p), "invalid scrypt p parameter", "options.p", p);
      return { name: "scrypt", dkLen: 32, salt, N: N3, r: r2, p };
    }
    function _encryptKeystore(key, kdf, account, options) {
      const privateKey = (0, index_js_4.getBytes)(account.privateKey, "privateKey");
      const iv = options.iv != null ? (0, index_js_4.getBytes)(options.iv, "options.iv") : (0, index_js_2.randomBytes)(16);
      (0, index_js_4.assertArgument)(iv.length === 16, "invalid options.iv length", "options.iv", options.iv);
      const uuidRandom = options.uuid != null ? (0, index_js_4.getBytes)(options.uuid, "options.uuid") : (0, index_js_2.randomBytes)(16);
      (0, index_js_4.assertArgument)(uuidRandom.length === 16, "invalid options.uuid length", "options.uuid", options.iv);
      const derivedKey = key.slice(0, 16);
      const macPrefix = key.slice(16, 32);
      const aesCtr = new aes_js_1.CTR(derivedKey, iv);
      const ciphertext = (0, index_js_4.getBytes)(aesCtr.encrypt(privateKey));
      const mac = (0, index_js_2.keccak256)((0, index_js_4.concat)([macPrefix, ciphertext]));
      const data = {
        address: account.address.substring(2).toLowerCase(),
        id: (0, index_js_4.uuidV4)(uuidRandom),
        version: 3,
        Crypto: {
          cipher: "aes-128-ctr",
          cipherparams: {
            iv: (0, index_js_4.hexlify)(iv).substring(2)
          },
          ciphertext: (0, index_js_4.hexlify)(ciphertext).substring(2),
          kdf: "scrypt",
          kdfparams: {
            salt: (0, index_js_4.hexlify)(kdf.salt).substring(2),
            n: kdf.N,
            dklen: 32,
            p: kdf.p,
            r: kdf.r
          },
          mac: mac.substring(2)
        }
      };
      if (account.mnemonic) {
        const client = options.client != null ? options.client : `ethers/${_version_js_1.version}`;
        const path = account.mnemonic.path || defaultPath2;
        const locale = account.mnemonic.locale || "en";
        const mnemonicKey = key.slice(32, 64);
        const entropy = (0, index_js_4.getBytes)(account.mnemonic.entropy, "account.mnemonic.entropy");
        const mnemonicIv = (0, index_js_2.randomBytes)(16);
        const mnemonicAesCtr = new aes_js_1.CTR(mnemonicKey, mnemonicIv);
        const mnemonicCiphertext = (0, index_js_4.getBytes)(mnemonicAesCtr.encrypt(entropy));
        const now5 = /* @__PURE__ */ new Date();
        const timestamp = now5.getUTCFullYear() + "-" + (0, utils_js_1.zpad)(now5.getUTCMonth() + 1, 2) + "-" + (0, utils_js_1.zpad)(now5.getUTCDate(), 2) + "T" + (0, utils_js_1.zpad)(now5.getUTCHours(), 2) + "-" + (0, utils_js_1.zpad)(now5.getUTCMinutes(), 2) + "-" + (0, utils_js_1.zpad)(now5.getUTCSeconds(), 2) + ".0Z";
        const gethFilename = "UTC--" + timestamp + "--" + data.address;
        data["x-ethers"] = {
          client,
          gethFilename,
          path,
          locale,
          mnemonicCounter: (0, index_js_4.hexlify)(mnemonicIv).substring(2),
          mnemonicCiphertext: (0, index_js_4.hexlify)(mnemonicCiphertext).substring(2),
          version: "0.1"
        };
      }
      return JSON.stringify(data);
    }
    function encryptKeystoreJsonSync2(account, password, options) {
      if (options == null) {
        options = {};
      }
      const passwordBytes = (0, utils_js_1.getPassword)(password);
      const kdf = getEncryptKdfParams(options);
      const key = (0, index_js_2.scryptSync)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64);
      return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);
    }
    exports.encryptKeystoreJsonSync = encryptKeystoreJsonSync2;
    async function encryptKeystoreJson2(account, password, options) {
      if (options == null) {
        options = {};
      }
      const passwordBytes = (0, utils_js_1.getPassword)(password);
      const kdf = getEncryptKdfParams(options);
      const key = await (0, index_js_2.scrypt)(passwordBytes, kdf.salt, kdf.N, kdf.r, kdf.p, 64, options.progressCallback);
      return _encryptKeystore((0, index_js_4.getBytes)(key), kdf, account, options);
    }
    exports.encryptKeystoreJson = encryptKeystoreJson2;
  }
});

// node_modules/ethers/lib.commonjs/wallet/hdwallet.js
var require_hdwallet = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/hdwallet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getIndexedAccountPath = exports.getAccountPath = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.defaultPath = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_providers();
    var index_js_3 = require_transaction2();
    var index_js_4 = require_utils();
    var lang_en_js_1 = require_lang_en();
    var base_wallet_js_1 = require_base_wallet();
    var mnemonic_js_1 = require_mnemonic();
    var json_keystore_js_1 = require_json_keystore();
    exports.defaultPath = "m/44'/60'/0'/0/0";
    var MasterSecret2 = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
    var HardenedBit = 2147483648;
    var N3 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
    var Nibbles2 = "0123456789abcdef";
    function zpad2(value, length) {
      let result = "";
      while (value) {
        result = Nibbles2[value % 16] + result;
        value = Math.trunc(value / 16);
      }
      while (result.length < length * 2) {
        result = "0" + result;
      }
      return "0x" + result;
    }
    function encodeBase58Check(_value) {
      const value = (0, index_js_4.getBytes)(_value);
      const check = (0, index_js_4.dataSlice)((0, index_js_1.sha256)((0, index_js_1.sha256)(value)), 0, 4);
      const bytes3 = (0, index_js_4.concat)([value, check]);
      return (0, index_js_4.encodeBase58)(bytes3);
    }
    var _guard4 = {};
    function ser_I(index, chainCode, publicKey, privateKey) {
      const data = new Uint8Array(37);
      if (index & HardenedBit) {
        (0, index_js_4.assert)(privateKey != null, "cannot derive child of neutered node", "UNSUPPORTED_OPERATION", {
          operation: "deriveChild"
        });
        data.set((0, index_js_4.getBytes)(privateKey), 1);
      } else {
        data.set((0, index_js_4.getBytes)(publicKey));
      }
      for (let i = 24; i >= 0; i -= 8) {
        data[33 + (i >> 3)] = index >> 24 - i & 255;
      }
      const I = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)("sha512", chainCode, data));
      return { IL: I.slice(0, 32), IR: I.slice(32) };
    }
    function derivePath(node, path) {
      const components = path.split("/");
      (0, index_js_4.assertArgument)(components.length > 0, "invalid path", "path", path);
      if (components[0] === "m") {
        (0, index_js_4.assertArgument)(node.depth === 0, `cannot derive root path (i.e. path starting with "m/") for a node at non-zero depth ${node.depth}`, "path", path);
        components.shift();
      }
      let result = node;
      for (let i = 0; i < components.length; i++) {
        const component = components[i];
        if (component.match(/^[0-9]+'$/)) {
          const index = parseInt(component.substring(0, component.length - 1));
          (0, index_js_4.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
          result = result.deriveChild(HardenedBit + index);
        } else if (component.match(/^[0-9]+$/)) {
          const index = parseInt(component);
          (0, index_js_4.assertArgument)(index < HardenedBit, "invalid path index", `path[${i}]`, component);
          result = result.deriveChild(index);
        } else {
          (0, index_js_4.assertArgument)(false, "invalid path component", `path[${i}]`, component);
        }
      }
      return result;
    }
    var _HDNodeWallet_instances, account_fn, _HDNodeWallet_static, fromSeed_fn;
    var _HDNodeWallet = class _HDNodeWallet extends base_wallet_js_1.BaseWallet {
      /**
       *  @private
       */
      constructor(guard, signingKey, parentFingerprint, chainCode, path, index, depth, mnemonic, provider) {
        super(signingKey, provider);
        __privateAdd(this, _HDNodeWallet_instances);
        /**
         *  The compressed public key.
         */
        __publicField(this, "publicKey");
        /**
         *  The fingerprint.
         *
         *  A fingerprint allows quick qay to detect parent and child nodes,
         *  but developers should be prepared to deal with collisions as it
         *  is only 4 bytes.
         */
        __publicField(this, "fingerprint");
        /**
         *  The parent fingerprint.
         */
        __publicField(this, "parentFingerprint");
        /**
         *  The mnemonic used to create this HD Node, if available.
         *
         *  Sources such as extended keys do not encode the mnemonic, in
         *  which case this will be ``null``.
         */
        __publicField(this, "mnemonic");
        /**
         *  The chaincode, which is effectively a public key used
         *  to derive children.
         */
        __publicField(this, "chainCode");
        /**
         *  The derivation path of this wallet.
         *
         *  Since extended keys do not provide full path details, this
         *  may be ``null``, if instantiated from a source that does not
         *  encode it.
         */
        __publicField(this, "path");
        /**
         *  The child index of this wallet. Values over ``2 *\* 31`` indicate
         *  the node is hardened.
         */
        __publicField(this, "index");
        /**
         *  The depth of this wallet, which is the number of components
         *  in its path.
         */
        __publicField(this, "depth");
        (0, index_js_4.assertPrivate)(guard, _guard4, "HDNodeWallet");
        (0, index_js_4.defineProperties)(this, { publicKey: signingKey.compressedPublicKey });
        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(this.publicKey)), 0, 4);
        (0, index_js_4.defineProperties)(this, {
          parentFingerprint,
          fingerprint,
          chainCode,
          path,
          index,
          depth
        });
        (0, index_js_4.defineProperties)(this, { mnemonic });
      }
      connect(provider) {
        return new _HDNodeWallet(_guard4, this.signingKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.mnemonic, provider);
      }
      /**
       *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
       *  %%password%%.
       *
       *  If %%progressCallback%% is specified, it will receive periodic
       *  updates as the encryption process progreses.
       */
      async encrypt(password, progressCallback) {
        return await (0, json_keystore_js_1.encryptKeystoreJson)(__privateMethod(this, _HDNodeWallet_instances, account_fn).call(this), password, { progressCallback });
      }
      /**
       *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
       *  %%password%%.
       *
       *  It is preferred to use the [async version](encrypt) instead,
       *  which allows a [[ProgressCallback]] to keep the user informed.
       *
       *  This method will block the event loop (freezing all UI) until
       *  it is complete, which may be a non-trivial duration.
       */
      encryptSync(password) {
        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(__privateMethod(this, _HDNodeWallet_instances, account_fn).call(this), password);
      }
      /**
       *  The extended key.
       *
       *  This key will begin with the prefix ``xpriv`` and can be used to
       *  reconstruct this HD Node to derive its children.
       */
      get extendedKey() {
        (0, index_js_4.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
        return encodeBase58Check((0, index_js_4.concat)([
          "0x0488ADE4",
          zpad2(this.depth, 1),
          this.parentFingerprint,
          zpad2(this.index, 4),
          this.chainCode,
          (0, index_js_4.concat)(["0x00", this.privateKey])
        ]));
      }
      /**
       *  Returns true if this wallet has a path, providing a Type Guard
       *  that the path is non-null.
       */
      hasPath() {
        return this.path != null;
      }
      /**
       *  Returns a neutered HD Node, which removes the private details
       *  of an HD Node.
       *
       *  A neutered node has no private key, but can be used to derive
       *  child addresses and other public data about the HD Node.
       */
      neuter() {
        return new HDNodeVoidWallet2(_guard4, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, this.provider);
      }
      /**
       *  Return the child for %%index%%.
       */
      deriveChild(_index) {
        const index = (0, index_js_4.getNumber)(_index, "index");
        (0, index_js_4.assertArgument)(index <= 4294967295, "invalid index", "index", index);
        let path = this.path;
        if (path) {
          path += "/" + (index & ~HardenedBit);
          if (index & HardenedBit) {
            path += "'";
          }
        }
        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, this.privateKey);
        const ki = new index_js_1.SigningKey((0, index_js_4.toBeHex)(((0, index_js_4.toBigInt)(IL) + BigInt(this.privateKey)) % N3, 32));
        return new _HDNodeWallet(_guard4, ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path, index, this.depth + 1, this.mnemonic, this.provider);
      }
      /**
       *  Return the HDNode for %%path%% from this node.
       */
      derivePath(path) {
        return derivePath(this, path);
      }
      /**
       *  Creates a new HD Node from %%extendedKey%%.
       *
       *  If the %%extendedKey%% will either have a prefix or ``xpub`` or
       *  ``xpriv``, returning a neutered HD Node ([[HDNodeVoidWallet]])
       *  or full HD Node ([[HDNodeWallet) respectively.
       */
      static fromExtendedKey(extendedKey) {
        const bytes3 = (0, index_js_4.toBeArray)((0, index_js_4.decodeBase58)(extendedKey));
        (0, index_js_4.assertArgument)(bytes3.length === 82 || encodeBase58Check(bytes3.slice(0, 78)) === extendedKey, "invalid extended key", "extendedKey", "[ REDACTED ]");
        const depth = bytes3[4];
        const parentFingerprint = (0, index_js_4.hexlify)(bytes3.slice(5, 9));
        const index = parseInt((0, index_js_4.hexlify)(bytes3.slice(9, 13)).substring(2), 16);
        const chainCode = (0, index_js_4.hexlify)(bytes3.slice(13, 45));
        const key = bytes3.slice(45, 78);
        switch ((0, index_js_4.hexlify)(bytes3.slice(0, 4))) {
          case "0x0488b21e":
          case "0x043587cf": {
            const publicKey = (0, index_js_4.hexlify)(key);
            return new HDNodeVoidWallet2(_guard4, (0, index_js_3.computeAddress)(publicKey), publicKey, parentFingerprint, chainCode, null, index, depth, null);
          }
          case "0x0488ade4":
          case "0x04358394 ":
            if (key[0] !== 0) {
              break;
            }
            return new _HDNodeWallet(_guard4, new index_js_1.SigningKey(key.slice(1)), parentFingerprint, chainCode, null, index, depth, null, null);
        }
        (0, index_js_4.assertArgument)(false, "invalid extended key prefix", "extendedKey", "[ REDACTED ]");
      }
      /**
       *  Creates a new random HDNode.
       */
      static createRandom(password, path, wordlist2) {
        var _a2;
        if (password == null) {
          password = "";
        }
        if (path == null) {
          path = exports.defaultPath;
        }
        if (wordlist2 == null) {
          wordlist2 = lang_en_js_1.LangEn.wordlist();
        }
        const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy((0, index_js_1.randomBytes)(16), password, wordlist2);
        return __privateMethod(_a2 = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a2, mnemonic.computeSeed(), mnemonic).derivePath(path);
      }
      /**
       *  Create an HD Node from %%mnemonic%%.
       */
      static fromMnemonic(mnemonic, path) {
        var _a2;
        if (!path) {
          path = exports.defaultPath;
        }
        return __privateMethod(_a2 = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a2, mnemonic.computeSeed(), mnemonic).derivePath(path);
      }
      /**
       *  Creates an HD Node from a mnemonic %%phrase%%.
       */
      static fromPhrase(phrase, password, path, wordlist2) {
        var _a2;
        if (password == null) {
          password = "";
        }
        if (path == null) {
          path = exports.defaultPath;
        }
        if (wordlist2 == null) {
          wordlist2 = lang_en_js_1.LangEn.wordlist();
        }
        const mnemonic = mnemonic_js_1.Mnemonic.fromPhrase(phrase, password, wordlist2);
        return __privateMethod(_a2 = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a2, mnemonic.computeSeed(), mnemonic).derivePath(path);
      }
      /**
       *  Creates an HD Node from a %%seed%%.
       */
      static fromSeed(seed) {
        var _a2;
        return __privateMethod(_a2 = _HDNodeWallet, _HDNodeWallet_static, fromSeed_fn).call(_a2, seed, null);
      }
    };
    _HDNodeWallet_instances = new WeakSet();
    account_fn = function() {
      const account = { address: this.address, privateKey: this.privateKey };
      const m = this.mnemonic;
      if (this.path && m && m.wordlist.locale === "en" && m.password === "") {
        account.mnemonic = {
          path: this.path,
          locale: "en",
          entropy: m.entropy
        };
      }
      return account;
    };
    _HDNodeWallet_static = new WeakSet();
    fromSeed_fn = function(_seed, mnemonic) {
      (0, index_js_4.assertArgument)((0, index_js_4.isBytesLike)(_seed), "invalid seed", "seed", "[REDACTED]");
      const seed = (0, index_js_4.getBytes)(_seed, "seed");
      (0, index_js_4.assertArgument)(seed.length >= 16 && seed.length <= 64, "invalid seed", "seed", "[REDACTED]");
      const I = (0, index_js_4.getBytes)((0, index_js_1.computeHmac)("sha512", MasterSecret2, seed));
      const signingKey = new index_js_1.SigningKey((0, index_js_4.hexlify)(I.slice(0, 32)));
      return new _HDNodeWallet(_guard4, signingKey, "0x00000000", (0, index_js_4.hexlify)(I.slice(32)), "m", 0, 0, mnemonic, null);
    };
    __privateAdd(_HDNodeWallet, _HDNodeWallet_static);
    var HDNodeWallet2 = _HDNodeWallet;
    exports.HDNodeWallet = HDNodeWallet2;
    var HDNodeVoidWallet2 = class _HDNodeVoidWallet extends index_js_2.VoidSigner {
      /**
       *  @private
       */
      constructor(guard, address, publicKey, parentFingerprint, chainCode, path, index, depth, provider) {
        super(address, provider);
        /**
         *  The compressed public key.
         */
        __publicField(this, "publicKey");
        /**
         *  The fingerprint.
         *
         *  A fingerprint allows quick qay to detect parent and child nodes,
         *  but developers should be prepared to deal with collisions as it
         *  is only 4 bytes.
         */
        __publicField(this, "fingerprint");
        /**
         *  The parent node fingerprint.
         */
        __publicField(this, "parentFingerprint");
        /**
         *  The chaincode, which is effectively a public key used
         *  to derive children.
         */
        __publicField(this, "chainCode");
        /**
         *  The derivation path of this wallet.
         *
         *  Since extended keys do not provider full path details, this
         *  may be ``null``, if instantiated from a source that does not
         *  enocde it.
         */
        __publicField(this, "path");
        /**
         *  The child index of this wallet. Values over ``2 *\* 31`` indicate
         *  the node is hardened.
         */
        __publicField(this, "index");
        /**
         *  The depth of this wallet, which is the number of components
         *  in its path.
         */
        __publicField(this, "depth");
        (0, index_js_4.assertPrivate)(guard, _guard4, "HDNodeVoidWallet");
        (0, index_js_4.defineProperties)(this, { publicKey });
        const fingerprint = (0, index_js_4.dataSlice)((0, index_js_1.ripemd160)((0, index_js_1.sha256)(publicKey)), 0, 4);
        (0, index_js_4.defineProperties)(this, {
          publicKey,
          fingerprint,
          parentFingerprint,
          chainCode,
          path,
          index,
          depth
        });
      }
      connect(provider) {
        return new _HDNodeVoidWallet(_guard4, this.address, this.publicKey, this.parentFingerprint, this.chainCode, this.path, this.index, this.depth, provider);
      }
      /**
       *  The extended key.
       *
       *  This key will begin with the prefix ``xpub`` and can be used to
       *  reconstruct this neutered key to derive its children addresses.
       */
      get extendedKey() {
        (0, index_js_4.assert)(this.depth < 256, "Depth too deep", "UNSUPPORTED_OPERATION", { operation: "extendedKey" });
        return encodeBase58Check((0, index_js_4.concat)([
          "0x0488B21E",
          zpad2(this.depth, 1),
          this.parentFingerprint,
          zpad2(this.index, 4),
          this.chainCode,
          this.publicKey
        ]));
      }
      /**
       *  Returns true if this wallet has a path, providing a Type Guard
       *  that the path is non-null.
       */
      hasPath() {
        return this.path != null;
      }
      /**
       *  Return the child for %%index%%.
       */
      deriveChild(_index) {
        const index = (0, index_js_4.getNumber)(_index, "index");
        (0, index_js_4.assertArgument)(index <= 4294967295, "invalid index", "index", index);
        let path = this.path;
        if (path) {
          path += "/" + (index & ~HardenedBit);
          if (index & HardenedBit) {
            path += "'";
          }
        }
        const { IR, IL } = ser_I(index, this.chainCode, this.publicKey, null);
        const Ki = index_js_1.SigningKey.addPoints(IL, this.publicKey, true);
        const address = (0, index_js_3.computeAddress)(Ki);
        return new _HDNodeVoidWallet(_guard4, address, Ki, this.fingerprint, (0, index_js_4.hexlify)(IR), path, index, this.depth + 1, this.provider);
      }
      /**
       *  Return the signer for %%path%% from this node.
       */
      derivePath(path) {
        return derivePath(this, path);
      }
    };
    exports.HDNodeVoidWallet = HDNodeVoidWallet2;
    function getAccountPath2(_index) {
      const index = (0, index_js_4.getNumber)(_index, "index");
      (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
      return `m/44'/60'/${index}'/0/0`;
    }
    exports.getAccountPath = getAccountPath2;
    function getIndexedAccountPath2(_index) {
      const index = (0, index_js_4.getNumber)(_index, "index");
      (0, index_js_4.assertArgument)(index >= 0 && index < HardenedBit, "invalid account index", "index", index);
      return `m/44'/60'/0'/0/${index}`;
    }
    exports.getIndexedAccountPath = getIndexedAccountPath2;
  }
});

// node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js
var require_json_crowdsale = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/json-crowdsale.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decryptCrowdsaleJson = exports.isCrowdsaleJson = void 0;
    var aes_js_1 = require_lib();
    var index_js_1 = require_address2();
    var index_js_2 = require_crypto2();
    var index_js_3 = require_hash();
    var index_js_4 = require_utils();
    var utils_js_1 = require_utils4();
    function isCrowdsaleJson2(json) {
      try {
        const data = JSON.parse(json);
        if (data.encseed) {
          return true;
        }
      } catch (error) {
      }
      return false;
    }
    exports.isCrowdsaleJson = isCrowdsaleJson2;
    function decryptCrowdsaleJson2(json, _password) {
      const data = JSON.parse(json);
      const password = (0, utils_js_1.getPassword)(_password);
      const address = (0, index_js_1.getAddress)((0, utils_js_1.spelunk)(data, "ethaddr:string!"));
      const encseed = (0, utils_js_1.looseArrayify)((0, utils_js_1.spelunk)(data, "encseed:string!"));
      (0, index_js_4.assertArgument)(encseed && encseed.length % 16 === 0, "invalid encseed", "json", json);
      const key = (0, index_js_4.getBytes)((0, index_js_2.pbkdf2)(password, password, 2e3, 32, "sha256")).slice(0, 16);
      const iv = encseed.slice(0, 16);
      const encryptedSeed = encseed.slice(16);
      const aesCbc = new aes_js_1.CBC(key, iv);
      const seed = (0, aes_js_1.pkcs7Strip)((0, index_js_4.getBytes)(aesCbc.decrypt(encryptedSeed)));
      let seedHex = "";
      for (let i = 0; i < seed.length; i++) {
        seedHex += String.fromCharCode(seed[i]);
      }
      return { address, privateKey: (0, index_js_3.id)(seedHex) };
    }
    exports.decryptCrowdsaleJson = decryptCrowdsaleJson2;
  }
});

// node_modules/ethers/lib.commonjs/wallet/wallet.js
var require_wallet = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/wallet.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wallet = void 0;
    var index_js_1 = require_crypto2();
    var index_js_2 = require_utils();
    var base_wallet_js_1 = require_base_wallet();
    var hdwallet_js_1 = require_hdwallet();
    var json_crowdsale_js_1 = require_json_crowdsale();
    var json_keystore_js_1 = require_json_keystore();
    var mnemonic_js_1 = require_mnemonic();
    function stall(duration) {
      return new Promise((resolve) => {
        setTimeout(() => {
          resolve();
        }, duration);
      });
    }
    var _Wallet_static, fromAccount_fn;
    var _Wallet = class _Wallet extends base_wallet_js_1.BaseWallet {
      /**
       *  Create a new wallet for the private %%key%%, optionally connected
       *  to %%provider%%.
       */
      constructor(key, provider) {
        if (typeof key === "string" && !key.startsWith("0x")) {
          key = "0x" + key;
        }
        let signingKey = typeof key === "string" ? new index_js_1.SigningKey(key) : key;
        super(signingKey, provider);
      }
      connect(provider) {
        return new _Wallet(this.signingKey, provider);
      }
      /**
       *  Resolves to a [JSON Keystore Wallet](json-wallets) encrypted with
       *  %%password%%.
       *
       *  If %%progressCallback%% is specified, it will receive periodic
       *  updates as the encryption process progreses.
       */
      async encrypt(password, progressCallback) {
        const account = { address: this.address, privateKey: this.privateKey };
        return await (0, json_keystore_js_1.encryptKeystoreJson)(account, password, { progressCallback });
      }
      /**
       *  Returns a [JSON Keystore Wallet](json-wallets) encryped with
       *  %%password%%.
       *
       *  It is preferred to use the [async version](encrypt) instead,
       *  which allows a [[ProgressCallback]] to keep the user informed.
       *
       *  This method will block the event loop (freezing all UI) until
       *  it is complete, which may be a non-trivial duration.
       */
      encryptSync(password) {
        const account = { address: this.address, privateKey: this.privateKey };
        return (0, json_keystore_js_1.encryptKeystoreJsonSync)(account, password);
      }
      /**
       *  Creates (asynchronously) a **Wallet** by decrypting the %%json%%
       *  with %%password%%.
       *
       *  If %%progress%% is provided, it is called periodically during
       *  decryption so that any UI can be updated.
       */
      static async fromEncryptedJson(json, password, progress) {
        var _a2;
        let account = null;
        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
          account = await (0, json_keystore_js_1.decryptKeystoreJson)(json, password, progress);
        } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {
          if (progress) {
            progress(0);
            await stall(0);
          }
          account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);
          if (progress) {
            progress(1);
            await stall(0);
          }
        }
        return __privateMethod(_a2 = _Wallet, _Wallet_static, fromAccount_fn).call(_a2, account);
      }
      /**
       *  Creates a **Wallet** by decrypting the %%json%% with %%password%%.
       *
       *  The [[fromEncryptedJson]] method is preferred, as this method
       *  will lock up and freeze the UI during decryption, which may take
       *  some time.
       */
      static fromEncryptedJsonSync(json, password) {
        var _a2;
        let account = null;
        if ((0, json_keystore_js_1.isKeystoreJson)(json)) {
          account = (0, json_keystore_js_1.decryptKeystoreJsonSync)(json, password);
        } else if ((0, json_crowdsale_js_1.isCrowdsaleJson)(json)) {
          account = (0, json_crowdsale_js_1.decryptCrowdsaleJson)(json, password);
        } else {
          (0, index_js_2.assertArgument)(false, "invalid JSON wallet", "json", "[ REDACTED ]");
        }
        return __privateMethod(_a2 = _Wallet, _Wallet_static, fromAccount_fn).call(_a2, account);
      }
      /**
       *  Creates a new random [[HDNodeWallet]] using the available
       *  [cryptographic random source](randomBytes).
       *
       *  If there is no crytographic random source, this will throw.
       */
      static createRandom(provider) {
        const wallet = hdwallet_js_1.HDNodeWallet.createRandom();
        if (provider) {
          return wallet.connect(provider);
        }
        return wallet;
      }
      /**
       *  Creates a [[HDNodeWallet]] for %%phrase%%.
       */
      static fromPhrase(phrase, provider) {
        const wallet = hdwallet_js_1.HDNodeWallet.fromPhrase(phrase);
        if (provider) {
          return wallet.connect(provider);
        }
        return wallet;
      }
    };
    _Wallet_static = new WeakSet();
    fromAccount_fn = function(account) {
      (0, index_js_2.assertArgument)(account, "invalid JSON wallet", "json", "[ REDACTED ]");
      if ("mnemonic" in account && account.mnemonic && account.mnemonic.locale === "en") {
        const mnemonic = mnemonic_js_1.Mnemonic.fromEntropy(account.mnemonic.entropy);
        const wallet2 = hdwallet_js_1.HDNodeWallet.fromMnemonic(mnemonic, account.mnemonic.path);
        if (wallet2.address === account.address && wallet2.privateKey === account.privateKey) {
          return wallet2;
        }
        console.log("WARNING: JSON mismatch address/privateKey != mnemonic; fallback onto private key");
      }
      const wallet = new _Wallet(account.privateKey);
      (0, index_js_2.assertArgument)(wallet.address === account.address, "address/privateKey mismatch", "json", "[ REDACTED ]");
      return wallet;
    };
    __privateAdd(_Wallet, _Wallet_static);
    var Wallet2 = _Wallet;
    exports.Wallet = Wallet2;
  }
});

// node_modules/ethers/lib.commonjs/wallet/index.js
var require_wallet2 = __commonJS({
  "node_modules/ethers/lib.commonjs/wallet/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Wallet = exports.Mnemonic = exports.encryptKeystoreJsonSync = exports.encryptKeystoreJson = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.isKeystoreJson = exports.decryptCrowdsaleJson = exports.isCrowdsaleJson = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.getIndexedAccountPath = exports.getAccountPath = exports.defaultPath = exports.BaseWallet = void 0;
    var base_wallet_js_1 = require_base_wallet();
    Object.defineProperty(exports, "BaseWallet", { enumerable: true, get: function() {
      return base_wallet_js_1.BaseWallet;
    } });
    var hdwallet_js_1 = require_hdwallet();
    Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function() {
      return hdwallet_js_1.defaultPath;
    } });
    Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function() {
      return hdwallet_js_1.getAccountPath;
    } });
    Object.defineProperty(exports, "getIndexedAccountPath", { enumerable: true, get: function() {
      return hdwallet_js_1.getIndexedAccountPath;
    } });
    Object.defineProperty(exports, "HDNodeWallet", { enumerable: true, get: function() {
      return hdwallet_js_1.HDNodeWallet;
    } });
    Object.defineProperty(exports, "HDNodeVoidWallet", { enumerable: true, get: function() {
      return hdwallet_js_1.HDNodeVoidWallet;
    } });
    var json_crowdsale_js_1 = require_json_crowdsale();
    Object.defineProperty(exports, "isCrowdsaleJson", { enumerable: true, get: function() {
      return json_crowdsale_js_1.isCrowdsaleJson;
    } });
    Object.defineProperty(exports, "decryptCrowdsaleJson", { enumerable: true, get: function() {
      return json_crowdsale_js_1.decryptCrowdsaleJson;
    } });
    var json_keystore_js_1 = require_json_keystore();
    Object.defineProperty(exports, "isKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.isKeystoreJson;
    } });
    Object.defineProperty(exports, "decryptKeystoreJsonSync", { enumerable: true, get: function() {
      return json_keystore_js_1.decryptKeystoreJsonSync;
    } });
    Object.defineProperty(exports, "decryptKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.decryptKeystoreJson;
    } });
    Object.defineProperty(exports, "encryptKeystoreJson", { enumerable: true, get: function() {
      return json_keystore_js_1.encryptKeystoreJson;
    } });
    Object.defineProperty(exports, "encryptKeystoreJsonSync", { enumerable: true, get: function() {
      return json_keystore_js_1.encryptKeystoreJsonSync;
    } });
    var mnemonic_js_1 = require_mnemonic();
    Object.defineProperty(exports, "Mnemonic", { enumerable: true, get: function() {
      return mnemonic_js_1.Mnemonic;
    } });
    var wallet_js_1 = require_wallet();
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function() {
      return wallet_js_1.Wallet;
    } });
  }
});

// node_modules/ethers/lib.commonjs/wordlists/bit-reader.js
var require_bit_reader = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/bit-reader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeBits = void 0;
    var Base64 = ")!@#$%^&*(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_";
    function decodeBits2(width, data) {
      const maxValue2 = (1 << width) - 1;
      const result = [];
      let accum = 0, bits = 0, flood = 0;
      for (let i = 0; i < data.length; i++) {
        accum = accum << 6 | Base64.indexOf(data[i]);
        bits += 6;
        while (bits >= width) {
          const value = accum >> bits - width;
          accum &= (1 << bits - width) - 1;
          bits -= width;
          if (value === 0) {
            flood += maxValue2;
          } else {
            result.push(value + flood);
            flood = 0;
          }
        }
      }
      return result;
    }
    exports.decodeBits = decodeBits2;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/decode-owla.js
var require_decode_owla = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/decode-owla.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodeOwlA = void 0;
    var index_js_1 = require_utils();
    var bit_reader_js_1 = require_bit_reader();
    var decode_owl_js_1 = require_decode_owl();
    function decodeOwlA2(data, accents) {
      let words2 = (0, decode_owl_js_1.decodeOwl)(data).join(",");
      accents.split(/,/g).forEach((accent) => {
        const match = accent.match(/^([a-z]*)([0-9]+)([0-9])(.*)$/);
        (0, index_js_1.assertArgument)(match !== null, "internal error parsing accents", "accents", accents);
        let posOffset = 0;
        const positions = (0, bit_reader_js_1.decodeBits)(parseInt(match[3]), match[4]);
        const charCode = parseInt(match[2]);
        const regex = new RegExp(`([${match[1]}])`, "g");
        words2 = words2.replace(regex, (all, letter) => {
          const rem = --positions[posOffset];
          if (rem === 0) {
            letter = String.fromCharCode(letter.charCodeAt(0), charCode);
            posOffset++;
          }
          return letter;
        });
      });
      return words2.split(",");
    }
    exports.decodeOwlA = decodeOwlA2;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js
var require_wordlist_owla = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlist-owla.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WordlistOwlA = void 0;
    var wordlist_owl_js_1 = require_wordlist_owl();
    var decode_owla_js_1 = require_decode_owla();
    var _accent;
    var WordlistOwlA2 = class extends wordlist_owl_js_1.WordlistOwl {
      /**
       *  Creates a new Wordlist for %%locale%% using the OWLA %%data%%
       *  and %%accent%% data and validated against the %%checksum%%.
       */
      constructor(locale, data, accent, checksum2) {
        super(locale, data, checksum2);
        __privateAdd(this, _accent);
        __privateSet(this, _accent, accent);
      }
      /**
       *  The OWLA-encoded accent data.
       */
      get _accent() {
        return __privateGet(this, _accent);
      }
      /**
       *  Decode all the words for the wordlist.
       */
      _decodeWords() {
        return (0, decode_owla_js_1.decodeOwlA)(this._data, this._accent);
      }
    };
    _accent = new WeakMap();
    exports.WordlistOwlA = WordlistOwlA2;
  }
});

// node_modules/ethers/lib.commonjs/wordlists/wordlists-browser.js
var require_wordlists_browser = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/wordlists-browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wordlists = void 0;
    var lang_en_js_1 = require_lang_en();
    exports.wordlists = {
      en: lang_en_js_1.LangEn.wordlist()
    };
  }
});

// node_modules/ethers/lib.commonjs/wordlists/index.js
var require_wordlists = __commonJS({
  "node_modules/ethers/lib.commonjs/wordlists/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.wordlists = exports.WordlistOwlA = exports.WordlistOwl = exports.LangEn = exports.Wordlist = void 0;
    var wordlist_js_1 = require_wordlist();
    Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function() {
      return wordlist_js_1.Wordlist;
    } });
    var lang_en_js_1 = require_lang_en();
    Object.defineProperty(exports, "LangEn", { enumerable: true, get: function() {
      return lang_en_js_1.LangEn;
    } });
    var wordlist_owl_js_1 = require_wordlist_owl();
    Object.defineProperty(exports, "WordlistOwl", { enumerable: true, get: function() {
      return wordlist_owl_js_1.WordlistOwl;
    } });
    var wordlist_owla_js_1 = require_wordlist_owla();
    Object.defineProperty(exports, "WordlistOwlA", { enumerable: true, get: function() {
      return wordlist_owla_js_1.WordlistOwlA;
    } });
    var wordlists_js_1 = require_wordlists_browser();
    Object.defineProperty(exports, "wordlists", { enumerable: true, get: function() {
      return wordlists_js_1.wordlists;
    } });
  }
});

// node_modules/ethers/lib.commonjs/ethers.js
var require_ethers = __commonJS({
  "node_modules/ethers/lib.commonjs/ethers.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ripemd160 = exports.keccak256 = exports.randomBytes = exports.computeHmac = exports.UndecodedEventLog = exports.EventLog = exports.ContractUnknownEventPayload = exports.ContractTransactionResponse = exports.ContractTransactionReceipt = exports.ContractEventPayload = exports.ContractFactory = exports.Contract = exports.BaseContract = exports.MessagePrefix = exports.EtherSymbol = exports.ZeroHash = exports.N = exports.MaxInt256 = exports.MinInt256 = exports.MaxUint256 = exports.WeiPerEther = exports.ZeroAddress = exports.resolveAddress = exports.isAddress = exports.isAddressable = exports.getCreate2Address = exports.getCreateAddress = exports.getIcapAddress = exports.getAddress = exports.Typed = exports.TransactionDescription = exports.Result = exports.LogDescription = exports.Interface = exports.Indexed = exports.ErrorDescription = exports.checkResultErrors = exports.StructFragment = exports.ParamType = exports.NamedFragment = exports.FunctionFragment = exports.FallbackFragment = exports.Fragment = exports.EventFragment = exports.ErrorFragment = exports.ConstructorFragment = exports.AbiCoder = exports.encodeBytes32String = exports.decodeBytes32String = exports.version = void 0;
    exports.EnsPlugin = exports.Network = exports.EnsResolver = exports.WebSocketProvider = exports.SocketProvider = exports.IpcSocketProvider = exports.QuickNodeProvider = exports.PocketProvider = exports.InfuraWebSocketProvider = exports.InfuraProvider = exports.EtherscanProvider = exports.CloudflareProvider = exports.ChainstackProvider = exports.AnkrProvider = exports.AlchemyProvider = exports.BrowserProvider = exports.JsonRpcSigner = exports.JsonRpcProvider = exports.JsonRpcApiProvider = exports.FallbackProvider = exports.AbstractProvider = exports.VoidSigner = exports.NonceManager = exports.AbstractSigner = exports.TransactionResponse = exports.TransactionReceipt = exports.Log = exports.FeeData = exports.Block = exports.getDefaultProvider = exports.verifyTypedData = exports.TypedDataEncoder = exports.solidityPackedSha256 = exports.solidityPackedKeccak256 = exports.solidityPacked = exports.verifyMessage = exports.hashMessage = exports.dnsEncode = exports.namehash = exports.isValidName = exports.ensNormalize = exports.id = exports.SigningKey = exports.Signature = exports.lock = exports.scryptSync = exports.scrypt = exports.pbkdf2 = exports.sha512 = exports.sha256 = void 0;
    exports.getUint = exports.getNumber = exports.getBigInt = exports.FixedNumber = exports.FetchCancelSignal = exports.FetchResponse = exports.FetchRequest = exports.EventPayload = exports.isError = exports.isCallException = exports.makeError = exports.assertPrivate = exports.assertNormalize = exports.assertArgumentCount = exports.assertArgument = exports.assert = exports.resolveProperties = exports.defineProperties = exports.zeroPadValue = exports.zeroPadBytes = exports.stripZerosLeft = exports.isBytesLike = exports.isHexString = exports.hexlify = exports.getBytesCopy = exports.getBytes = exports.dataSlice = exports.dataLength = exports.concat = exports.encodeBase64 = exports.decodeBase64 = exports.encodeBase58 = exports.decodeBase58 = exports.Transaction = exports.recoverAddress = exports.computeAddress = exports.accessListify = exports.showThrottleMessage = exports.copyRequest = exports.UnmanagedSubscriber = exports.SocketSubscriber = exports.SocketPendingSubscriber = exports.SocketEventSubscriber = exports.SocketBlockSubscriber = exports.MulticoinProviderPlugin = exports.NetworkPlugin = exports.GasCostPlugin = exports.FetchUrlFeeDataNetworkPlugin = exports.FeeDataNetworkPlugin = exports.EtherscanPlugin = void 0;
    exports.wordlists = exports.WordlistOwlA = exports.WordlistOwl = exports.LangEn = exports.Wordlist = exports.encryptKeystoreJsonSync = exports.encryptKeystoreJson = exports.decryptKeystoreJson = exports.decryptKeystoreJsonSync = exports.decryptCrowdsaleJson = exports.isKeystoreJson = exports.isCrowdsaleJson = exports.getIndexedAccountPath = exports.getAccountPath = exports.defaultPath = exports.Wallet = exports.HDNodeVoidWallet = exports.HDNodeWallet = exports.BaseWallet = exports.Mnemonic = exports.uuidV4 = exports.encodeRlp = exports.decodeRlp = exports.Utf8ErrorFuncs = exports.toUtf8String = exports.toUtf8CodePoints = exports.toUtf8Bytes = exports.parseUnits = exports.formatUnits = exports.parseEther = exports.formatEther = exports.mask = exports.toTwos = exports.fromTwos = exports.toQuantity = exports.toNumber = exports.toBeHex = exports.toBigInt = exports.toBeArray = void 0;
    var _version_js_1 = require_version();
    Object.defineProperty(exports, "version", { enumerable: true, get: function() {
      return _version_js_1.version;
    } });
    var index_js_1 = require_abi();
    Object.defineProperty(exports, "decodeBytes32String", { enumerable: true, get: function() {
      return index_js_1.decodeBytes32String;
    } });
    Object.defineProperty(exports, "encodeBytes32String", { enumerable: true, get: function() {
      return index_js_1.encodeBytes32String;
    } });
    Object.defineProperty(exports, "AbiCoder", { enumerable: true, get: function() {
      return index_js_1.AbiCoder;
    } });
    Object.defineProperty(exports, "ConstructorFragment", { enumerable: true, get: function() {
      return index_js_1.ConstructorFragment;
    } });
    Object.defineProperty(exports, "ErrorFragment", { enumerable: true, get: function() {
      return index_js_1.ErrorFragment;
    } });
    Object.defineProperty(exports, "EventFragment", { enumerable: true, get: function() {
      return index_js_1.EventFragment;
    } });
    Object.defineProperty(exports, "Fragment", { enumerable: true, get: function() {
      return index_js_1.Fragment;
    } });
    Object.defineProperty(exports, "FallbackFragment", { enumerable: true, get: function() {
      return index_js_1.FallbackFragment;
    } });
    Object.defineProperty(exports, "FunctionFragment", { enumerable: true, get: function() {
      return index_js_1.FunctionFragment;
    } });
    Object.defineProperty(exports, "NamedFragment", { enumerable: true, get: function() {
      return index_js_1.NamedFragment;
    } });
    Object.defineProperty(exports, "ParamType", { enumerable: true, get: function() {
      return index_js_1.ParamType;
    } });
    Object.defineProperty(exports, "StructFragment", { enumerable: true, get: function() {
      return index_js_1.StructFragment;
    } });
    Object.defineProperty(exports, "checkResultErrors", { enumerable: true, get: function() {
      return index_js_1.checkResultErrors;
    } });
    Object.defineProperty(exports, "ErrorDescription", { enumerable: true, get: function() {
      return index_js_1.ErrorDescription;
    } });
    Object.defineProperty(exports, "Indexed", { enumerable: true, get: function() {
      return index_js_1.Indexed;
    } });
    Object.defineProperty(exports, "Interface", { enumerable: true, get: function() {
      return index_js_1.Interface;
    } });
    Object.defineProperty(exports, "LogDescription", { enumerable: true, get: function() {
      return index_js_1.LogDescription;
    } });
    Object.defineProperty(exports, "Result", { enumerable: true, get: function() {
      return index_js_1.Result;
    } });
    Object.defineProperty(exports, "TransactionDescription", { enumerable: true, get: function() {
      return index_js_1.TransactionDescription;
    } });
    Object.defineProperty(exports, "Typed", { enumerable: true, get: function() {
      return index_js_1.Typed;
    } });
    var index_js_2 = require_address2();
    Object.defineProperty(exports, "getAddress", { enumerable: true, get: function() {
      return index_js_2.getAddress;
    } });
    Object.defineProperty(exports, "getIcapAddress", { enumerable: true, get: function() {
      return index_js_2.getIcapAddress;
    } });
    Object.defineProperty(exports, "getCreateAddress", { enumerable: true, get: function() {
      return index_js_2.getCreateAddress;
    } });
    Object.defineProperty(exports, "getCreate2Address", { enumerable: true, get: function() {
      return index_js_2.getCreate2Address;
    } });
    Object.defineProperty(exports, "isAddressable", { enumerable: true, get: function() {
      return index_js_2.isAddressable;
    } });
    Object.defineProperty(exports, "isAddress", { enumerable: true, get: function() {
      return index_js_2.isAddress;
    } });
    Object.defineProperty(exports, "resolveAddress", { enumerable: true, get: function() {
      return index_js_2.resolveAddress;
    } });
    var index_js_3 = require_constants();
    Object.defineProperty(exports, "ZeroAddress", { enumerable: true, get: function() {
      return index_js_3.ZeroAddress;
    } });
    Object.defineProperty(exports, "WeiPerEther", { enumerable: true, get: function() {
      return index_js_3.WeiPerEther;
    } });
    Object.defineProperty(exports, "MaxUint256", { enumerable: true, get: function() {
      return index_js_3.MaxUint256;
    } });
    Object.defineProperty(exports, "MinInt256", { enumerable: true, get: function() {
      return index_js_3.MinInt256;
    } });
    Object.defineProperty(exports, "MaxInt256", { enumerable: true, get: function() {
      return index_js_3.MaxInt256;
    } });
    Object.defineProperty(exports, "N", { enumerable: true, get: function() {
      return index_js_3.N;
    } });
    Object.defineProperty(exports, "ZeroHash", { enumerable: true, get: function() {
      return index_js_3.ZeroHash;
    } });
    Object.defineProperty(exports, "EtherSymbol", { enumerable: true, get: function() {
      return index_js_3.EtherSymbol;
    } });
    Object.defineProperty(exports, "MessagePrefix", { enumerable: true, get: function() {
      return index_js_3.MessagePrefix;
    } });
    var index_js_4 = require_contract2();
    Object.defineProperty(exports, "BaseContract", { enumerable: true, get: function() {
      return index_js_4.BaseContract;
    } });
    Object.defineProperty(exports, "Contract", { enumerable: true, get: function() {
      return index_js_4.Contract;
    } });
    Object.defineProperty(exports, "ContractFactory", { enumerable: true, get: function() {
      return index_js_4.ContractFactory;
    } });
    Object.defineProperty(exports, "ContractEventPayload", { enumerable: true, get: function() {
      return index_js_4.ContractEventPayload;
    } });
    Object.defineProperty(exports, "ContractTransactionReceipt", { enumerable: true, get: function() {
      return index_js_4.ContractTransactionReceipt;
    } });
    Object.defineProperty(exports, "ContractTransactionResponse", { enumerable: true, get: function() {
      return index_js_4.ContractTransactionResponse;
    } });
    Object.defineProperty(exports, "ContractUnknownEventPayload", { enumerable: true, get: function() {
      return index_js_4.ContractUnknownEventPayload;
    } });
    Object.defineProperty(exports, "EventLog", { enumerable: true, get: function() {
      return index_js_4.EventLog;
    } });
    Object.defineProperty(exports, "UndecodedEventLog", { enumerable: true, get: function() {
      return index_js_4.UndecodedEventLog;
    } });
    var index_js_5 = require_crypto2();
    Object.defineProperty(exports, "computeHmac", { enumerable: true, get: function() {
      return index_js_5.computeHmac;
    } });
    Object.defineProperty(exports, "randomBytes", { enumerable: true, get: function() {
      return index_js_5.randomBytes;
    } });
    Object.defineProperty(exports, "keccak256", { enumerable: true, get: function() {
      return index_js_5.keccak256;
    } });
    Object.defineProperty(exports, "ripemd160", { enumerable: true, get: function() {
      return index_js_5.ripemd160;
    } });
    Object.defineProperty(exports, "sha256", { enumerable: true, get: function() {
      return index_js_5.sha256;
    } });
    Object.defineProperty(exports, "sha512", { enumerable: true, get: function() {
      return index_js_5.sha512;
    } });
    Object.defineProperty(exports, "pbkdf2", { enumerable: true, get: function() {
      return index_js_5.pbkdf2;
    } });
    Object.defineProperty(exports, "scrypt", { enumerable: true, get: function() {
      return index_js_5.scrypt;
    } });
    Object.defineProperty(exports, "scryptSync", { enumerable: true, get: function() {
      return index_js_5.scryptSync;
    } });
    Object.defineProperty(exports, "lock", { enumerable: true, get: function() {
      return index_js_5.lock;
    } });
    Object.defineProperty(exports, "Signature", { enumerable: true, get: function() {
      return index_js_5.Signature;
    } });
    Object.defineProperty(exports, "SigningKey", { enumerable: true, get: function() {
      return index_js_5.SigningKey;
    } });
    var index_js_6 = require_hash();
    Object.defineProperty(exports, "id", { enumerable: true, get: function() {
      return index_js_6.id;
    } });
    Object.defineProperty(exports, "ensNormalize", { enumerable: true, get: function() {
      return index_js_6.ensNormalize;
    } });
    Object.defineProperty(exports, "isValidName", { enumerable: true, get: function() {
      return index_js_6.isValidName;
    } });
    Object.defineProperty(exports, "namehash", { enumerable: true, get: function() {
      return index_js_6.namehash;
    } });
    Object.defineProperty(exports, "dnsEncode", { enumerable: true, get: function() {
      return index_js_6.dnsEncode;
    } });
    Object.defineProperty(exports, "hashMessage", { enumerable: true, get: function() {
      return index_js_6.hashMessage;
    } });
    Object.defineProperty(exports, "verifyMessage", { enumerable: true, get: function() {
      return index_js_6.verifyMessage;
    } });
    Object.defineProperty(exports, "solidityPacked", { enumerable: true, get: function() {
      return index_js_6.solidityPacked;
    } });
    Object.defineProperty(exports, "solidityPackedKeccak256", { enumerable: true, get: function() {
      return index_js_6.solidityPackedKeccak256;
    } });
    Object.defineProperty(exports, "solidityPackedSha256", { enumerable: true, get: function() {
      return index_js_6.solidityPackedSha256;
    } });
    Object.defineProperty(exports, "TypedDataEncoder", { enumerable: true, get: function() {
      return index_js_6.TypedDataEncoder;
    } });
    Object.defineProperty(exports, "verifyTypedData", { enumerable: true, get: function() {
      return index_js_6.verifyTypedData;
    } });
    var index_js_7 = require_providers();
    Object.defineProperty(exports, "getDefaultProvider", { enumerable: true, get: function() {
      return index_js_7.getDefaultProvider;
    } });
    Object.defineProperty(exports, "Block", { enumerable: true, get: function() {
      return index_js_7.Block;
    } });
    Object.defineProperty(exports, "FeeData", { enumerable: true, get: function() {
      return index_js_7.FeeData;
    } });
    Object.defineProperty(exports, "Log", { enumerable: true, get: function() {
      return index_js_7.Log;
    } });
    Object.defineProperty(exports, "TransactionReceipt", { enumerable: true, get: function() {
      return index_js_7.TransactionReceipt;
    } });
    Object.defineProperty(exports, "TransactionResponse", { enumerable: true, get: function() {
      return index_js_7.TransactionResponse;
    } });
    Object.defineProperty(exports, "AbstractSigner", { enumerable: true, get: function() {
      return index_js_7.AbstractSigner;
    } });
    Object.defineProperty(exports, "NonceManager", { enumerable: true, get: function() {
      return index_js_7.NonceManager;
    } });
    Object.defineProperty(exports, "VoidSigner", { enumerable: true, get: function() {
      return index_js_7.VoidSigner;
    } });
    Object.defineProperty(exports, "AbstractProvider", { enumerable: true, get: function() {
      return index_js_7.AbstractProvider;
    } });
    Object.defineProperty(exports, "FallbackProvider", { enumerable: true, get: function() {
      return index_js_7.FallbackProvider;
    } });
    Object.defineProperty(exports, "JsonRpcApiProvider", { enumerable: true, get: function() {
      return index_js_7.JsonRpcApiProvider;
    } });
    Object.defineProperty(exports, "JsonRpcProvider", { enumerable: true, get: function() {
      return index_js_7.JsonRpcProvider;
    } });
    Object.defineProperty(exports, "JsonRpcSigner", { enumerable: true, get: function() {
      return index_js_7.JsonRpcSigner;
    } });
    Object.defineProperty(exports, "BrowserProvider", { enumerable: true, get: function() {
      return index_js_7.BrowserProvider;
    } });
    Object.defineProperty(exports, "AlchemyProvider", { enumerable: true, get: function() {
      return index_js_7.AlchemyProvider;
    } });
    Object.defineProperty(exports, "AnkrProvider", { enumerable: true, get: function() {
      return index_js_7.AnkrProvider;
    } });
    Object.defineProperty(exports, "ChainstackProvider", { enumerable: true, get: function() {
      return index_js_7.ChainstackProvider;
    } });
    Object.defineProperty(exports, "CloudflareProvider", { enumerable: true, get: function() {
      return index_js_7.CloudflareProvider;
    } });
    Object.defineProperty(exports, "EtherscanProvider", { enumerable: true, get: function() {
      return index_js_7.EtherscanProvider;
    } });
    Object.defineProperty(exports, "InfuraProvider", { enumerable: true, get: function() {
      return index_js_7.InfuraProvider;
    } });
    Object.defineProperty(exports, "InfuraWebSocketProvider", { enumerable: true, get: function() {
      return index_js_7.InfuraWebSocketProvider;
    } });
    Object.defineProperty(exports, "PocketProvider", { enumerable: true, get: function() {
      return index_js_7.PocketProvider;
    } });
    Object.defineProperty(exports, "QuickNodeProvider", { enumerable: true, get: function() {
      return index_js_7.QuickNodeProvider;
    } });
    Object.defineProperty(exports, "IpcSocketProvider", { enumerable: true, get: function() {
      return index_js_7.IpcSocketProvider;
    } });
    Object.defineProperty(exports, "SocketProvider", { enumerable: true, get: function() {
      return index_js_7.SocketProvider;
    } });
    Object.defineProperty(exports, "WebSocketProvider", { enumerable: true, get: function() {
      return index_js_7.WebSocketProvider;
    } });
    Object.defineProperty(exports, "EnsResolver", { enumerable: true, get: function() {
      return index_js_7.EnsResolver;
    } });
    Object.defineProperty(exports, "Network", { enumerable: true, get: function() {
      return index_js_7.Network;
    } });
    Object.defineProperty(exports, "EnsPlugin", { enumerable: true, get: function() {
      return index_js_7.EnsPlugin;
    } });
    Object.defineProperty(exports, "EtherscanPlugin", { enumerable: true, get: function() {
      return index_js_7.EtherscanPlugin;
    } });
    Object.defineProperty(exports, "FeeDataNetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.FeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports, "FetchUrlFeeDataNetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.FetchUrlFeeDataNetworkPlugin;
    } });
    Object.defineProperty(exports, "GasCostPlugin", { enumerable: true, get: function() {
      return index_js_7.GasCostPlugin;
    } });
    Object.defineProperty(exports, "NetworkPlugin", { enumerable: true, get: function() {
      return index_js_7.NetworkPlugin;
    } });
    Object.defineProperty(exports, "MulticoinProviderPlugin", { enumerable: true, get: function() {
      return index_js_7.MulticoinProviderPlugin;
    } });
    Object.defineProperty(exports, "SocketBlockSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketBlockSubscriber;
    } });
    Object.defineProperty(exports, "SocketEventSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketEventSubscriber;
    } });
    Object.defineProperty(exports, "SocketPendingSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketPendingSubscriber;
    } });
    Object.defineProperty(exports, "SocketSubscriber", { enumerable: true, get: function() {
      return index_js_7.SocketSubscriber;
    } });
    Object.defineProperty(exports, "UnmanagedSubscriber", { enumerable: true, get: function() {
      return index_js_7.UnmanagedSubscriber;
    } });
    Object.defineProperty(exports, "copyRequest", { enumerable: true, get: function() {
      return index_js_7.copyRequest;
    } });
    Object.defineProperty(exports, "showThrottleMessage", { enumerable: true, get: function() {
      return index_js_7.showThrottleMessage;
    } });
    var index_js_8 = require_transaction2();
    Object.defineProperty(exports, "accessListify", { enumerable: true, get: function() {
      return index_js_8.accessListify;
    } });
    Object.defineProperty(exports, "computeAddress", { enumerable: true, get: function() {
      return index_js_8.computeAddress;
    } });
    Object.defineProperty(exports, "recoverAddress", { enumerable: true, get: function() {
      return index_js_8.recoverAddress;
    } });
    Object.defineProperty(exports, "Transaction", { enumerable: true, get: function() {
      return index_js_8.Transaction;
    } });
    var index_js_9 = require_utils();
    Object.defineProperty(exports, "decodeBase58", { enumerable: true, get: function() {
      return index_js_9.decodeBase58;
    } });
    Object.defineProperty(exports, "encodeBase58", { enumerable: true, get: function() {
      return index_js_9.encodeBase58;
    } });
    Object.defineProperty(exports, "decodeBase64", { enumerable: true, get: function() {
      return index_js_9.decodeBase64;
    } });
    Object.defineProperty(exports, "encodeBase64", { enumerable: true, get: function() {
      return index_js_9.encodeBase64;
    } });
    Object.defineProperty(exports, "concat", { enumerable: true, get: function() {
      return index_js_9.concat;
    } });
    Object.defineProperty(exports, "dataLength", { enumerable: true, get: function() {
      return index_js_9.dataLength;
    } });
    Object.defineProperty(exports, "dataSlice", { enumerable: true, get: function() {
      return index_js_9.dataSlice;
    } });
    Object.defineProperty(exports, "getBytes", { enumerable: true, get: function() {
      return index_js_9.getBytes;
    } });
    Object.defineProperty(exports, "getBytesCopy", { enumerable: true, get: function() {
      return index_js_9.getBytesCopy;
    } });
    Object.defineProperty(exports, "hexlify", { enumerable: true, get: function() {
      return index_js_9.hexlify;
    } });
    Object.defineProperty(exports, "isHexString", { enumerable: true, get: function() {
      return index_js_9.isHexString;
    } });
    Object.defineProperty(exports, "isBytesLike", { enumerable: true, get: function() {
      return index_js_9.isBytesLike;
    } });
    Object.defineProperty(exports, "stripZerosLeft", { enumerable: true, get: function() {
      return index_js_9.stripZerosLeft;
    } });
    Object.defineProperty(exports, "zeroPadBytes", { enumerable: true, get: function() {
      return index_js_9.zeroPadBytes;
    } });
    Object.defineProperty(exports, "zeroPadValue", { enumerable: true, get: function() {
      return index_js_9.zeroPadValue;
    } });
    Object.defineProperty(exports, "defineProperties", { enumerable: true, get: function() {
      return index_js_9.defineProperties;
    } });
    Object.defineProperty(exports, "resolveProperties", { enumerable: true, get: function() {
      return index_js_9.resolveProperties;
    } });
    Object.defineProperty(exports, "assert", { enumerable: true, get: function() {
      return index_js_9.assert;
    } });
    Object.defineProperty(exports, "assertArgument", { enumerable: true, get: function() {
      return index_js_9.assertArgument;
    } });
    Object.defineProperty(exports, "assertArgumentCount", { enumerable: true, get: function() {
      return index_js_9.assertArgumentCount;
    } });
    Object.defineProperty(exports, "assertNormalize", { enumerable: true, get: function() {
      return index_js_9.assertNormalize;
    } });
    Object.defineProperty(exports, "assertPrivate", { enumerable: true, get: function() {
      return index_js_9.assertPrivate;
    } });
    Object.defineProperty(exports, "makeError", { enumerable: true, get: function() {
      return index_js_9.makeError;
    } });
    Object.defineProperty(exports, "isCallException", { enumerable: true, get: function() {
      return index_js_9.isCallException;
    } });
    Object.defineProperty(exports, "isError", { enumerable: true, get: function() {
      return index_js_9.isError;
    } });
    Object.defineProperty(exports, "EventPayload", { enumerable: true, get: function() {
      return index_js_9.EventPayload;
    } });
    Object.defineProperty(exports, "FetchRequest", { enumerable: true, get: function() {
      return index_js_9.FetchRequest;
    } });
    Object.defineProperty(exports, "FetchResponse", { enumerable: true, get: function() {
      return index_js_9.FetchResponse;
    } });
    Object.defineProperty(exports, "FetchCancelSignal", { enumerable: true, get: function() {
      return index_js_9.FetchCancelSignal;
    } });
    Object.defineProperty(exports, "FixedNumber", { enumerable: true, get: function() {
      return index_js_9.FixedNumber;
    } });
    Object.defineProperty(exports, "getBigInt", { enumerable: true, get: function() {
      return index_js_9.getBigInt;
    } });
    Object.defineProperty(exports, "getNumber", { enumerable: true, get: function() {
      return index_js_9.getNumber;
    } });
    Object.defineProperty(exports, "getUint", { enumerable: true, get: function() {
      return index_js_9.getUint;
    } });
    Object.defineProperty(exports, "toBeArray", { enumerable: true, get: function() {
      return index_js_9.toBeArray;
    } });
    Object.defineProperty(exports, "toBigInt", { enumerable: true, get: function() {
      return index_js_9.toBigInt;
    } });
    Object.defineProperty(exports, "toBeHex", { enumerable: true, get: function() {
      return index_js_9.toBeHex;
    } });
    Object.defineProperty(exports, "toNumber", { enumerable: true, get: function() {
      return index_js_9.toNumber;
    } });
    Object.defineProperty(exports, "toQuantity", { enumerable: true, get: function() {
      return index_js_9.toQuantity;
    } });
    Object.defineProperty(exports, "fromTwos", { enumerable: true, get: function() {
      return index_js_9.fromTwos;
    } });
    Object.defineProperty(exports, "toTwos", { enumerable: true, get: function() {
      return index_js_9.toTwos;
    } });
    Object.defineProperty(exports, "mask", { enumerable: true, get: function() {
      return index_js_9.mask;
    } });
    Object.defineProperty(exports, "formatEther", { enumerable: true, get: function() {
      return index_js_9.formatEther;
    } });
    Object.defineProperty(exports, "parseEther", { enumerable: true, get: function() {
      return index_js_9.parseEther;
    } });
    Object.defineProperty(exports, "formatUnits", { enumerable: true, get: function() {
      return index_js_9.formatUnits;
    } });
    Object.defineProperty(exports, "parseUnits", { enumerable: true, get: function() {
      return index_js_9.parseUnits;
    } });
    Object.defineProperty(exports, "toUtf8Bytes", { enumerable: true, get: function() {
      return index_js_9.toUtf8Bytes;
    } });
    Object.defineProperty(exports, "toUtf8CodePoints", { enumerable: true, get: function() {
      return index_js_9.toUtf8CodePoints;
    } });
    Object.defineProperty(exports, "toUtf8String", { enumerable: true, get: function() {
      return index_js_9.toUtf8String;
    } });
    Object.defineProperty(exports, "Utf8ErrorFuncs", { enumerable: true, get: function() {
      return index_js_9.Utf8ErrorFuncs;
    } });
    Object.defineProperty(exports, "decodeRlp", { enumerable: true, get: function() {
      return index_js_9.decodeRlp;
    } });
    Object.defineProperty(exports, "encodeRlp", { enumerable: true, get: function() {
      return index_js_9.encodeRlp;
    } });
    Object.defineProperty(exports, "uuidV4", { enumerable: true, get: function() {
      return index_js_9.uuidV4;
    } });
    var index_js_10 = require_wallet2();
    Object.defineProperty(exports, "Mnemonic", { enumerable: true, get: function() {
      return index_js_10.Mnemonic;
    } });
    Object.defineProperty(exports, "BaseWallet", { enumerable: true, get: function() {
      return index_js_10.BaseWallet;
    } });
    Object.defineProperty(exports, "HDNodeWallet", { enumerable: true, get: function() {
      return index_js_10.HDNodeWallet;
    } });
    Object.defineProperty(exports, "HDNodeVoidWallet", { enumerable: true, get: function() {
      return index_js_10.HDNodeVoidWallet;
    } });
    Object.defineProperty(exports, "Wallet", { enumerable: true, get: function() {
      return index_js_10.Wallet;
    } });
    Object.defineProperty(exports, "defaultPath", { enumerable: true, get: function() {
      return index_js_10.defaultPath;
    } });
    Object.defineProperty(exports, "getAccountPath", { enumerable: true, get: function() {
      return index_js_10.getAccountPath;
    } });
    Object.defineProperty(exports, "getIndexedAccountPath", { enumerable: true, get: function() {
      return index_js_10.getIndexedAccountPath;
    } });
    Object.defineProperty(exports, "isCrowdsaleJson", { enumerable: true, get: function() {
      return index_js_10.isCrowdsaleJson;
    } });
    Object.defineProperty(exports, "isKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.isKeystoreJson;
    } });
    Object.defineProperty(exports, "decryptCrowdsaleJson", { enumerable: true, get: function() {
      return index_js_10.decryptCrowdsaleJson;
    } });
    Object.defineProperty(exports, "decryptKeystoreJsonSync", { enumerable: true, get: function() {
      return index_js_10.decryptKeystoreJsonSync;
    } });
    Object.defineProperty(exports, "decryptKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.decryptKeystoreJson;
    } });
    Object.defineProperty(exports, "encryptKeystoreJson", { enumerable: true, get: function() {
      return index_js_10.encryptKeystoreJson;
    } });
    Object.defineProperty(exports, "encryptKeystoreJsonSync", { enumerable: true, get: function() {
      return index_js_10.encryptKeystoreJsonSync;
    } });
    var index_js_11 = require_wordlists();
    Object.defineProperty(exports, "Wordlist", { enumerable: true, get: function() {
      return index_js_11.Wordlist;
    } });
    Object.defineProperty(exports, "LangEn", { enumerable: true, get: function() {
      return index_js_11.LangEn;
    } });
    Object.defineProperty(exports, "WordlistOwl", { enumerable: true, get: function() {
      return index_js_11.WordlistOwl;
    } });
    Object.defineProperty(exports, "WordlistOwlA", { enumerable: true, get: function() {
      return index_js_11.WordlistOwlA;
    } });
    Object.defineProperty(exports, "wordlists", { enumerable: true, get: function() {
      return index_js_11.wordlists;
    } });
  }
});

// node_modules/ethers/lib.commonjs/index.js
var require_lib2 = __commonJS({
  "node_modules/ethers/lib.commonjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ethers = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var ethers = tslib_1.__importStar(require_ethers());
    exports.ethers = ethers;
    tslib_1.__exportStar(require_ethers(), exports);
  }
});

// node_modules/has-symbols/shams.js
var require_shams = __commonJS({
  "node_modules/has-symbols/shams.js"(exports, module) {
    "use strict";
    module.exports = function hasSymbols() {
      if (typeof Symbol !== "function" || typeof Object.getOwnPropertySymbols !== "function") {
        return false;
      }
      if (typeof Symbol.iterator === "symbol") {
        return true;
      }
      var obj = {};
      var sym = Symbol("test");
      var symObj = Object(sym);
      if (typeof sym === "string") {
        return false;
      }
      if (Object.prototype.toString.call(sym) !== "[object Symbol]") {
        return false;
      }
      if (Object.prototype.toString.call(symObj) !== "[object Symbol]") {
        return false;
      }
      var symVal = 42;
      obj[sym] = symVal;
      for (sym in obj) {
        return false;
      }
      if (typeof Object.keys === "function" && Object.keys(obj).length !== 0) {
        return false;
      }
      if (typeof Object.getOwnPropertyNames === "function" && Object.getOwnPropertyNames(obj).length !== 0) {
        return false;
      }
      var syms = Object.getOwnPropertySymbols(obj);
      if (syms.length !== 1 || syms[0] !== sym) {
        return false;
      }
      if (!Object.prototype.propertyIsEnumerable.call(obj, sym)) {
        return false;
      }
      if (typeof Object.getOwnPropertyDescriptor === "function") {
        var descriptor = Object.getOwnPropertyDescriptor(obj, sym);
        if (descriptor.value !== symVal || descriptor.enumerable !== true) {
          return false;
        }
      }
      return true;
    };
  }
});

// node_modules/has-tostringtag/shams.js
var require_shams2 = __commonJS({
  "node_modules/has-tostringtag/shams.js"(exports, module) {
    "use strict";
    var hasSymbols = require_shams();
    module.exports = function hasToStringTagShams() {
      return hasSymbols() && !!Symbol.toStringTag;
    };
  }
});

// node_modules/es-errors/index.js
var require_es_errors = __commonJS({
  "node_modules/es-errors/index.js"(exports, module) {
    "use strict";
    module.exports = Error;
  }
});

// node_modules/es-errors/eval.js
var require_eval = __commonJS({
  "node_modules/es-errors/eval.js"(exports, module) {
    "use strict";
    module.exports = EvalError;
  }
});

// node_modules/es-errors/range.js
var require_range = __commonJS({
  "node_modules/es-errors/range.js"(exports, module) {
    "use strict";
    module.exports = RangeError;
  }
});

// node_modules/es-errors/ref.js
var require_ref = __commonJS({
  "node_modules/es-errors/ref.js"(exports, module) {
    "use strict";
    module.exports = ReferenceError;
  }
});

// node_modules/es-errors/syntax.js
var require_syntax = __commonJS({
  "node_modules/es-errors/syntax.js"(exports, module) {
    "use strict";
    module.exports = SyntaxError;
  }
});

// node_modules/es-errors/type.js
var require_type = __commonJS({
  "node_modules/es-errors/type.js"(exports, module) {
    "use strict";
    module.exports = TypeError;
  }
});

// node_modules/es-errors/uri.js
var require_uri = __commonJS({
  "node_modules/es-errors/uri.js"(exports, module) {
    "use strict";
    module.exports = URIError;
  }
});

// node_modules/has-symbols/index.js
var require_has_symbols = __commonJS({
  "node_modules/has-symbols/index.js"(exports, module) {
    "use strict";
    var origSymbol = typeof Symbol !== "undefined" && Symbol;
    var hasSymbolSham = require_shams();
    module.exports = function hasNativeSymbols() {
      if (typeof origSymbol !== "function") {
        return false;
      }
      if (typeof Symbol !== "function") {
        return false;
      }
      if (typeof origSymbol("foo") !== "symbol") {
        return false;
      }
      if (typeof Symbol("bar") !== "symbol") {
        return false;
      }
      return hasSymbolSham();
    };
  }
});

// node_modules/has-proto/index.js
var require_has_proto = __commonJS({
  "node_modules/has-proto/index.js"(exports, module) {
    "use strict";
    var test = {
      __proto__: null,
      foo: {}
    };
    var $Object = Object;
    module.exports = function hasProto() {
      return { __proto__: test }.foo === test.foo && !(test instanceof $Object);
    };
  }
});

// node_modules/function-bind/implementation.js
var require_implementation = __commonJS({
  "node_modules/function-bind/implementation.js"(exports, module) {
    "use strict";
    var ERROR_MESSAGE = "Function.prototype.bind called on incompatible ";
    var toStr2 = Object.prototype.toString;
    var max = Math.max;
    var funcType = "[object Function]";
    var concatty = function concatty2(a, b2) {
      var arr = [];
      for (var i = 0; i < a.length; i += 1) {
        arr[i] = a[i];
      }
      for (var j = 0; j < b2.length; j += 1) {
        arr[j + a.length] = b2[j];
      }
      return arr;
    };
    var slicy = function slicy2(arrLike, offset) {
      var arr = [];
      for (var i = offset || 0, j = 0; i < arrLike.length; i += 1, j += 1) {
        arr[j] = arrLike[i];
      }
      return arr;
    };
    var joiny = function(arr, joiner) {
      var str = "";
      for (var i = 0; i < arr.length; i += 1) {
        str += arr[i];
        if (i + 1 < arr.length) {
          str += joiner;
        }
      }
      return str;
    };
    module.exports = function bind(that) {
      var target = this;
      if (typeof target !== "function" || toStr2.apply(target) !== funcType) {
        throw new TypeError(ERROR_MESSAGE + target);
      }
      var args = slicy(arguments, 1);
      var bound;
      var binder = function() {
        if (this instanceof bound) {
          var result = target.apply(
            this,
            concatty(args, arguments)
          );
          if (Object(result) === result) {
            return result;
          }
          return this;
        }
        return target.apply(
          that,
          concatty(args, arguments)
        );
      };
      var boundLength = max(0, target.length - args.length);
      var boundArgs = [];
      for (var i = 0; i < boundLength; i++) {
        boundArgs[i] = "$" + i;
      }
      bound = Function("binder", "return function (" + joiny(boundArgs, ",") + "){ return binder.apply(this,arguments); }")(binder);
      if (target.prototype) {
        var Empty2 = function Empty3() {
        };
        Empty2.prototype = target.prototype;
        bound.prototype = new Empty2();
        Empty2.prototype = null;
      }
      return bound;
    };
  }
});

// node_modules/function-bind/index.js
var require_function_bind = __commonJS({
  "node_modules/function-bind/index.js"(exports, module) {
    "use strict";
    var implementation = require_implementation();
    module.exports = Function.prototype.bind || implementation;
  }
});

// node_modules/hasown/index.js
var require_hasown = __commonJS({
  "node_modules/hasown/index.js"(exports, module) {
    "use strict";
    var call = Function.prototype.call;
    var $hasOwn = Object.prototype.hasOwnProperty;
    var bind = require_function_bind();
    module.exports = bind.call(call, $hasOwn);
  }
});

// node_modules/get-intrinsic/index.js
var require_get_intrinsic = __commonJS({
  "node_modules/get-intrinsic/index.js"(exports, module) {
    "use strict";
    var undefined2;
    var $Error = require_es_errors();
    var $EvalError = require_eval();
    var $RangeError = require_range();
    var $ReferenceError = require_ref();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var $URIError = require_uri();
    var $Function = Function;
    var getEvalledConstructor = function(expressionSyntax) {
      try {
        return $Function('"use strict"; return (' + expressionSyntax + ").constructor;")();
      } catch (e) {
      }
    };
    var $gOPD = Object.getOwnPropertyDescriptor;
    if ($gOPD) {
      try {
        $gOPD({}, "");
      } catch (e) {
        $gOPD = null;
      }
    }
    var throwTypeError = function() {
      throw new $TypeError();
    };
    var ThrowTypeError = $gOPD ? function() {
      try {
        arguments.callee;
        return throwTypeError;
      } catch (calleeThrows) {
        try {
          return $gOPD(arguments, "callee").get;
        } catch (gOPDthrows) {
          return throwTypeError;
        }
      }
    }() : throwTypeError;
    var hasSymbols = require_has_symbols()();
    var hasProto = require_has_proto()();
    var getProto = Object.getPrototypeOf || (hasProto ? function(x) {
      return x.__proto__;
    } : null);
    var needsEval = {};
    var TypedArray = typeof Uint8Array === "undefined" || !getProto ? undefined2 : getProto(Uint8Array);
    var INTRINSICS = {
      __proto__: null,
      "%AggregateError%": typeof AggregateError === "undefined" ? undefined2 : AggregateError,
      "%Array%": Array,
      "%ArrayBuffer%": typeof ArrayBuffer === "undefined" ? undefined2 : ArrayBuffer,
      "%ArrayIteratorPrototype%": hasSymbols && getProto ? getProto([][Symbol.iterator]()) : undefined2,
      "%AsyncFromSyncIteratorPrototype%": undefined2,
      "%AsyncFunction%": needsEval,
      "%AsyncGenerator%": needsEval,
      "%AsyncGeneratorFunction%": needsEval,
      "%AsyncIteratorPrototype%": needsEval,
      "%Atomics%": typeof Atomics === "undefined" ? undefined2 : Atomics,
      "%BigInt%": typeof BigInt === "undefined" ? undefined2 : BigInt,
      "%BigInt64Array%": typeof BigInt64Array === "undefined" ? undefined2 : BigInt64Array,
      "%BigUint64Array%": typeof BigUint64Array === "undefined" ? undefined2 : BigUint64Array,
      "%Boolean%": Boolean,
      "%DataView%": typeof DataView === "undefined" ? undefined2 : DataView,
      "%Date%": Date,
      "%decodeURI%": decodeURI,
      "%decodeURIComponent%": decodeURIComponent,
      "%encodeURI%": encodeURI,
      "%encodeURIComponent%": encodeURIComponent,
      "%Error%": $Error,
      "%eval%": eval,
      // eslint-disable-line no-eval
      "%EvalError%": $EvalError,
      "%Float32Array%": typeof Float32Array === "undefined" ? undefined2 : Float32Array,
      "%Float64Array%": typeof Float64Array === "undefined" ? undefined2 : Float64Array,
      "%FinalizationRegistry%": typeof FinalizationRegistry === "undefined" ? undefined2 : FinalizationRegistry,
      "%Function%": $Function,
      "%GeneratorFunction%": needsEval,
      "%Int8Array%": typeof Int8Array === "undefined" ? undefined2 : Int8Array,
      "%Int16Array%": typeof Int16Array === "undefined" ? undefined2 : Int16Array,
      "%Int32Array%": typeof Int32Array === "undefined" ? undefined2 : Int32Array,
      "%isFinite%": isFinite,
      "%isNaN%": isNaN,
      "%IteratorPrototype%": hasSymbols && getProto ? getProto(getProto([][Symbol.iterator]())) : undefined2,
      "%JSON%": typeof JSON === "object" ? JSON : undefined2,
      "%Map%": typeof Map === "undefined" ? undefined2 : Map,
      "%MapIteratorPrototype%": typeof Map === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Map())[Symbol.iterator]()),
      "%Math%": Math,
      "%Number%": Number,
      "%Object%": Object,
      "%parseFloat%": parseFloat,
      "%parseInt%": parseInt,
      "%Promise%": typeof Promise === "undefined" ? undefined2 : Promise,
      "%Proxy%": typeof Proxy === "undefined" ? undefined2 : Proxy,
      "%RangeError%": $RangeError,
      "%ReferenceError%": $ReferenceError,
      "%Reflect%": typeof Reflect === "undefined" ? undefined2 : Reflect,
      "%RegExp%": RegExp,
      "%Set%": typeof Set === "undefined" ? undefined2 : Set,
      "%SetIteratorPrototype%": typeof Set === "undefined" || !hasSymbols || !getProto ? undefined2 : getProto((/* @__PURE__ */ new Set())[Symbol.iterator]()),
      "%SharedArrayBuffer%": typeof SharedArrayBuffer === "undefined" ? undefined2 : SharedArrayBuffer,
      "%String%": String,
      "%StringIteratorPrototype%": hasSymbols && getProto ? getProto(""[Symbol.iterator]()) : undefined2,
      "%Symbol%": hasSymbols ? Symbol : undefined2,
      "%SyntaxError%": $SyntaxError,
      "%ThrowTypeError%": ThrowTypeError,
      "%TypedArray%": TypedArray,
      "%TypeError%": $TypeError,
      "%Uint8Array%": typeof Uint8Array === "undefined" ? undefined2 : Uint8Array,
      "%Uint8ClampedArray%": typeof Uint8ClampedArray === "undefined" ? undefined2 : Uint8ClampedArray,
      "%Uint16Array%": typeof Uint16Array === "undefined" ? undefined2 : Uint16Array,
      "%Uint32Array%": typeof Uint32Array === "undefined" ? undefined2 : Uint32Array,
      "%URIError%": $URIError,
      "%WeakMap%": typeof WeakMap === "undefined" ? undefined2 : WeakMap,
      "%WeakRef%": typeof WeakRef === "undefined" ? undefined2 : WeakRef,
      "%WeakSet%": typeof WeakSet === "undefined" ? undefined2 : WeakSet
    };
    if (getProto) {
      try {
        null.error;
      } catch (e) {
        errorProto = getProto(getProto(e));
        INTRINSICS["%Error.prototype%"] = errorProto;
      }
    }
    var errorProto;
    var doEval = function doEval2(name) {
      var value;
      if (name === "%AsyncFunction%") {
        value = getEvalledConstructor("async function () {}");
      } else if (name === "%GeneratorFunction%") {
        value = getEvalledConstructor("function* () {}");
      } else if (name === "%AsyncGeneratorFunction%") {
        value = getEvalledConstructor("async function* () {}");
      } else if (name === "%AsyncGenerator%") {
        var fn = doEval2("%AsyncGeneratorFunction%");
        if (fn) {
          value = fn.prototype;
        }
      } else if (name === "%AsyncIteratorPrototype%") {
        var gen2 = doEval2("%AsyncGenerator%");
        if (gen2 && getProto) {
          value = getProto(gen2.prototype);
        }
      }
      INTRINSICS[name] = value;
      return value;
    };
    var LEGACY_ALIASES = {
      __proto__: null,
      "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
      "%ArrayPrototype%": ["Array", "prototype"],
      "%ArrayProto_entries%": ["Array", "prototype", "entries"],
      "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
      "%ArrayProto_keys%": ["Array", "prototype", "keys"],
      "%ArrayProto_values%": ["Array", "prototype", "values"],
      "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
      "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
      "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
      "%BooleanPrototype%": ["Boolean", "prototype"],
      "%DataViewPrototype%": ["DataView", "prototype"],
      "%DatePrototype%": ["Date", "prototype"],
      "%ErrorPrototype%": ["Error", "prototype"],
      "%EvalErrorPrototype%": ["EvalError", "prototype"],
      "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
      "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
      "%FunctionPrototype%": ["Function", "prototype"],
      "%Generator%": ["GeneratorFunction", "prototype"],
      "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
      "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
      "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
      "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
      "%JSONParse%": ["JSON", "parse"],
      "%JSONStringify%": ["JSON", "stringify"],
      "%MapPrototype%": ["Map", "prototype"],
      "%NumberPrototype%": ["Number", "prototype"],
      "%ObjectPrototype%": ["Object", "prototype"],
      "%ObjProto_toString%": ["Object", "prototype", "toString"],
      "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
      "%PromisePrototype%": ["Promise", "prototype"],
      "%PromiseProto_then%": ["Promise", "prototype", "then"],
      "%Promise_all%": ["Promise", "all"],
      "%Promise_reject%": ["Promise", "reject"],
      "%Promise_resolve%": ["Promise", "resolve"],
      "%RangeErrorPrototype%": ["RangeError", "prototype"],
      "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
      "%RegExpPrototype%": ["RegExp", "prototype"],
      "%SetPrototype%": ["Set", "prototype"],
      "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
      "%StringPrototype%": ["String", "prototype"],
      "%SymbolPrototype%": ["Symbol", "prototype"],
      "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
      "%TypedArrayPrototype%": ["TypedArray", "prototype"],
      "%TypeErrorPrototype%": ["TypeError", "prototype"],
      "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
      "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
      "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
      "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
      "%URIErrorPrototype%": ["URIError", "prototype"],
      "%WeakMapPrototype%": ["WeakMap", "prototype"],
      "%WeakSetPrototype%": ["WeakSet", "prototype"]
    };
    var bind = require_function_bind();
    var hasOwn = require_hasown();
    var $concat = bind.call(Function.call, Array.prototype.concat);
    var $spliceApply = bind.call(Function.apply, Array.prototype.splice);
    var $replace = bind.call(Function.call, String.prototype.replace);
    var $strSlice = bind.call(Function.call, String.prototype.slice);
    var $exec = bind.call(Function.call, RegExp.prototype.exec);
    var rePropName = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g;
    var reEscapeChar = /\\(\\)?/g;
    var stringToPath = function stringToPath2(string) {
      var first = $strSlice(string, 0, 1);
      var last = $strSlice(string, -1);
      if (first === "%" && last !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected closing `%`");
      } else if (last === "%" && first !== "%") {
        throw new $SyntaxError("invalid intrinsic syntax, expected opening `%`");
      }
      var result = [];
      $replace(string, rePropName, function(match, number2, quote, subString) {
        result[result.length] = quote ? $replace(subString, reEscapeChar, "$1") : number2 || match;
      });
      return result;
    };
    var getBaseIntrinsic = function getBaseIntrinsic2(name, allowMissing) {
      var intrinsicName = name;
      var alias;
      if (hasOwn(LEGACY_ALIASES, intrinsicName)) {
        alias = LEGACY_ALIASES[intrinsicName];
        intrinsicName = "%" + alias[0] + "%";
      }
      if (hasOwn(INTRINSICS, intrinsicName)) {
        var value = INTRINSICS[intrinsicName];
        if (value === needsEval) {
          value = doEval(intrinsicName);
        }
        if (typeof value === "undefined" && !allowMissing) {
          throw new $TypeError("intrinsic " + name + " exists, but is not available. Please file an issue!");
        }
        return {
          alias,
          name: intrinsicName,
          value
        };
      }
      throw new $SyntaxError("intrinsic " + name + " does not exist!");
    };
    module.exports = function GetIntrinsic(name, allowMissing) {
      if (typeof name !== "string" || name.length === 0) {
        throw new $TypeError("intrinsic name must be a non-empty string");
      }
      if (arguments.length > 1 && typeof allowMissing !== "boolean") {
        throw new $TypeError('"allowMissing" argument must be a boolean');
      }
      if ($exec(/^%?[^%]*%?$/, name) === null) {
        throw new $SyntaxError("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
      }
      var parts = stringToPath(name);
      var intrinsicBaseName = parts.length > 0 ? parts[0] : "";
      var intrinsic = getBaseIntrinsic("%" + intrinsicBaseName + "%", allowMissing);
      var intrinsicRealName = intrinsic.name;
      var value = intrinsic.value;
      var skipFurtherCaching = false;
      var alias = intrinsic.alias;
      if (alias) {
        intrinsicBaseName = alias[0];
        $spliceApply(parts, $concat([0, 1], alias));
      }
      for (var i = 1, isOwn = true; i < parts.length; i += 1) {
        var part = parts[i];
        var first = $strSlice(part, 0, 1);
        var last = $strSlice(part, -1);
        if ((first === '"' || first === "'" || first === "`" || (last === '"' || last === "'" || last === "`")) && first !== last) {
          throw new $SyntaxError("property names with quotes must have matching quotes");
        }
        if (part === "constructor" || !isOwn) {
          skipFurtherCaching = true;
        }
        intrinsicBaseName += "." + part;
        intrinsicRealName = "%" + intrinsicBaseName + "%";
        if (hasOwn(INTRINSICS, intrinsicRealName)) {
          value = INTRINSICS[intrinsicRealName];
        } else if (value != null) {
          if (!(part in value)) {
            if (!allowMissing) {
              throw new $TypeError("base intrinsic for " + name + " exists, but the property is not available.");
            }
            return void 0;
          }
          if ($gOPD && i + 1 >= parts.length) {
            var desc = $gOPD(value, part);
            isOwn = !!desc;
            if (isOwn && "get" in desc && !("originalValue" in desc.get)) {
              value = desc.get;
            } else {
              value = value[part];
            }
          } else {
            isOwn = hasOwn(value, part);
            value = value[part];
          }
          if (isOwn && !skipFurtherCaching) {
            INTRINSICS[intrinsicRealName] = value;
          }
        }
      }
      return value;
    };
  }
});

// node_modules/es-define-property/index.js
var require_es_define_property = __commonJS({
  "node_modules/es-define-property/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $defineProperty = GetIntrinsic("%Object.defineProperty%", true) || false;
    if ($defineProperty) {
      try {
        $defineProperty({}, "a", { value: 1 });
      } catch (e) {
        $defineProperty = false;
      }
    }
    module.exports = $defineProperty;
  }
});

// node_modules/gopd/index.js
var require_gopd = __commonJS({
  "node_modules/gopd/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var $gOPD = GetIntrinsic("%Object.getOwnPropertyDescriptor%", true);
    if ($gOPD) {
      try {
        $gOPD([], "length");
      } catch (e) {
        $gOPD = null;
      }
    }
    module.exports = $gOPD;
  }
});

// node_modules/define-data-property/index.js
var require_define_data_property = __commonJS({
  "node_modules/define-data-property/index.js"(exports, module) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var $SyntaxError = require_syntax();
    var $TypeError = require_type();
    var gopd = require_gopd();
    module.exports = function defineDataProperty(obj, property, value) {
      if (!obj || typeof obj !== "object" && typeof obj !== "function") {
        throw new $TypeError("`obj` must be an object or a function`");
      }
      if (typeof property !== "string" && typeof property !== "symbol") {
        throw new $TypeError("`property` must be a string or a symbol`");
      }
      if (arguments.length > 3 && typeof arguments[3] !== "boolean" && arguments[3] !== null) {
        throw new $TypeError("`nonEnumerable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 4 && typeof arguments[4] !== "boolean" && arguments[4] !== null) {
        throw new $TypeError("`nonWritable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 5 && typeof arguments[5] !== "boolean" && arguments[5] !== null) {
        throw new $TypeError("`nonConfigurable`, if provided, must be a boolean or null");
      }
      if (arguments.length > 6 && typeof arguments[6] !== "boolean") {
        throw new $TypeError("`loose`, if provided, must be a boolean");
      }
      var nonEnumerable = arguments.length > 3 ? arguments[3] : null;
      var nonWritable = arguments.length > 4 ? arguments[4] : null;
      var nonConfigurable = arguments.length > 5 ? arguments[5] : null;
      var loose = arguments.length > 6 ? arguments[6] : false;
      var desc = !!gopd && gopd(obj, property);
      if ($defineProperty) {
        $defineProperty(obj, property, {
          configurable: nonConfigurable === null && desc ? desc.configurable : !nonConfigurable,
          enumerable: nonEnumerable === null && desc ? desc.enumerable : !nonEnumerable,
          value,
          writable: nonWritable === null && desc ? desc.writable : !nonWritable
        });
      } else if (loose || !nonEnumerable && !nonWritable && !nonConfigurable) {
        obj[property] = value;
      } else {
        throw new $SyntaxError("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
      }
    };
  }
});

// node_modules/has-property-descriptors/index.js
var require_has_property_descriptors = __commonJS({
  "node_modules/has-property-descriptors/index.js"(exports, module) {
    "use strict";
    var $defineProperty = require_es_define_property();
    var hasPropertyDescriptors = function hasPropertyDescriptors2() {
      return !!$defineProperty;
    };
    hasPropertyDescriptors.hasArrayLengthDefineBug = function hasArrayLengthDefineBug() {
      if (!$defineProperty) {
        return null;
      }
      try {
        return $defineProperty([], "length", { value: 1 }).length !== 1;
      } catch (e) {
        return true;
      }
    };
    module.exports = hasPropertyDescriptors;
  }
});

// node_modules/set-function-length/index.js
var require_set_function_length = __commonJS({
  "node_modules/set-function-length/index.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var define2 = require_define_data_property();
    var hasDescriptors = require_has_property_descriptors()();
    var gOPD = require_gopd();
    var $TypeError = require_type();
    var $floor = GetIntrinsic("%Math.floor%");
    module.exports = function setFunctionLength(fn, length) {
      if (typeof fn !== "function") {
        throw new $TypeError("`fn` is not a function");
      }
      if (typeof length !== "number" || length < 0 || length > 4294967295 || $floor(length) !== length) {
        throw new $TypeError("`length` must be a positive 32-bit integer");
      }
      var loose = arguments.length > 2 && !!arguments[2];
      var functionLengthIsConfigurable = true;
      var functionLengthIsWritable = true;
      if ("length" in fn && gOPD) {
        var desc = gOPD(fn, "length");
        if (desc && !desc.configurable) {
          functionLengthIsConfigurable = false;
        }
        if (desc && !desc.writable) {
          functionLengthIsWritable = false;
        }
      }
      if (functionLengthIsConfigurable || functionLengthIsWritable || !loose) {
        if (hasDescriptors) {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length,
            true,
            true
          );
        } else {
          define2(
            /** @type {Parameters<define>[0]} */
            fn,
            "length",
            length
          );
        }
      }
      return fn;
    };
  }
});

// node_modules/call-bind/index.js
var require_call_bind = __commonJS({
  "node_modules/call-bind/index.js"(exports, module) {
    "use strict";
    var bind = require_function_bind();
    var GetIntrinsic = require_get_intrinsic();
    var setFunctionLength = require_set_function_length();
    var $TypeError = require_type();
    var $apply = GetIntrinsic("%Function.prototype.apply%");
    var $call = GetIntrinsic("%Function.prototype.call%");
    var $reflectApply = GetIntrinsic("%Reflect.apply%", true) || bind.call($call, $apply);
    var $defineProperty = require_es_define_property();
    var $max = GetIntrinsic("%Math.max%");
    module.exports = function callBind(originalFunction) {
      if (typeof originalFunction !== "function") {
        throw new $TypeError("a function is required");
      }
      var func = $reflectApply(bind, $call, arguments);
      return setFunctionLength(
        func,
        1 + $max(0, originalFunction.length - (arguments.length - 1)),
        true
      );
    };
    var applyBind = function applyBind2() {
      return $reflectApply(bind, $apply, arguments);
    };
    if ($defineProperty) {
      $defineProperty(module.exports, "apply", { value: applyBind });
    } else {
      module.exports.apply = applyBind;
    }
  }
});

// node_modules/call-bind/callBound.js
var require_callBound = __commonJS({
  "node_modules/call-bind/callBound.js"(exports, module) {
    "use strict";
    var GetIntrinsic = require_get_intrinsic();
    var callBind = require_call_bind();
    var $indexOf = callBind(GetIntrinsic("String.prototype.indexOf"));
    module.exports = function callBoundIntrinsic(name, allowMissing) {
      var intrinsic = GetIntrinsic(name, !!allowMissing);
      if (typeof intrinsic === "function" && $indexOf(name, ".prototype.") > -1) {
        return callBind(intrinsic);
      }
      return intrinsic;
    };
  }
});

// node_modules/is-arguments/index.js
var require_is_arguments = __commonJS({
  "node_modules/is-arguments/index.js"(exports, module) {
    "use strict";
    var hasToStringTag = require_shams2()();
    var callBound = require_callBound();
    var $toString = callBound("Object.prototype.toString");
    var isStandardArguments = function isArguments(value) {
      if (hasToStringTag && value && typeof value === "object" && Symbol.toStringTag in value) {
        return false;
      }
      return $toString(value) === "[object Arguments]";
    };
    var isLegacyArguments = function isArguments(value) {
      if (isStandardArguments(value)) {
        return true;
      }
      return value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && $toString(value) !== "[object Array]" && $toString(value.callee) === "[object Function]";
    };
    var supportsStandardArguments = function() {
      return isStandardArguments(arguments);
    }();
    isStandardArguments.isLegacyArguments = isLegacyArguments;
    module.exports = supportsStandardArguments ? isStandardArguments : isLegacyArguments;
  }
});

// node_modules/is-generator-function/index.js
var require_is_generator_function = __commonJS({
  "node_modules/is-generator-function/index.js"(exports, module) {
    "use strict";
    var toStr2 = Object.prototype.toString;
    var fnToStr = Function.prototype.toString;
    var isFnRegex = /^\s*(?:function)?\*/;
    var hasToStringTag = require_shams2()();
    var getProto = Object.getPrototypeOf;
    var getGeneratorFunc = function() {
      if (!hasToStringTag) {
        return false;
      }
      try {
        return Function("return function*() {}")();
      } catch (e) {
      }
    };
    var GeneratorFunction;
    module.exports = function isGeneratorFunction(fn) {
      if (typeof fn !== "function") {
        return false;
      }
      if (isFnRegex.test(fnToStr.call(fn))) {
        return true;
      }
      if (!hasToStringTag) {
        var str = toStr2.call(fn);
        return str === "[object GeneratorFunction]";
      }
      if (!getProto) {
        return false;
      }
      if (typeof GeneratorFunction === "undefined") {
        var generatorFunc = getGeneratorFunc();
        GeneratorFunction = generatorFunc ? getProto(generatorFunc) : false;
      }
      return getProto(fn) === GeneratorFunction;
    };
  }
});

// node_modules/is-callable/index.js
var require_is_callable = __commonJS({
  "node_modules/is-callable/index.js"(exports, module) {
    "use strict";
    var fnToStr = Function.prototype.toString;
    var reflectApply = typeof Reflect === "object" && Reflect !== null && Reflect.apply;
    var badArrayLike;
    var isCallableMarker;
    if (typeof reflectApply === "function" && typeof Object.defineProperty === "function") {
      try {
        badArrayLike = Object.defineProperty({}, "length", {
          get: function() {
            throw isCallableMarker;
          }
        });
        isCallableMarker = {};
        reflectApply(function() {
          throw 42;
        }, null, badArrayLike);
      } catch (_) {
        if (_ !== isCallableMarker) {
          reflectApply = null;
        }
      }
    } else {
      reflectApply = null;
    }
    var constructorRegex = /^\s*class\b/;
    var isES6ClassFn = function isES6ClassFunction(value) {
      try {
        var fnStr = fnToStr.call(value);
        return constructorRegex.test(fnStr);
      } catch (e) {
        return false;
      }
    };
    var tryFunctionObject = function tryFunctionToStr(value) {
      try {
        if (isES6ClassFn(value)) {
          return false;
        }
        fnToStr.call(value);
        return true;
      } catch (e) {
        return false;
      }
    };
    var toStr2 = Object.prototype.toString;
    var objectClass = "[object Object]";
    var fnClass = "[object Function]";
    var genClass = "[object GeneratorFunction]";
    var ddaClass = "[object HTMLAllCollection]";
    var ddaClass2 = "[object HTML document.all class]";
    var ddaClass3 = "[object HTMLCollection]";
    var hasToStringTag = typeof Symbol === "function" && !!Symbol.toStringTag;
    var isIE68 = !(0 in [,]);
    var isDDA = function isDocumentDotAll() {
      return false;
    };
    if (typeof document === "object") {
      all = document.all;
      if (toStr2.call(all) === toStr2.call(document.all)) {
        isDDA = function isDocumentDotAll(value) {
          if ((isIE68 || !value) && (typeof value === "undefined" || typeof value === "object")) {
            try {
              var str = toStr2.call(value);
              return (str === ddaClass || str === ddaClass2 || str === ddaClass3 || str === objectClass) && value("") == null;
            } catch (e) {
            }
          }
          return false;
        };
      }
    }
    var all;
    module.exports = reflectApply ? function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      try {
        reflectApply(value, null, badArrayLike);
      } catch (e) {
        if (e !== isCallableMarker) {
          return false;
        }
      }
      return !isES6ClassFn(value) && tryFunctionObject(value);
    } : function isCallable(value) {
      if (isDDA(value)) {
        return true;
      }
      if (!value) {
        return false;
      }
      if (typeof value !== "function" && typeof value !== "object") {
        return false;
      }
      if (hasToStringTag) {
        return tryFunctionObject(value);
      }
      if (isES6ClassFn(value)) {
        return false;
      }
      var strClass = toStr2.call(value);
      if (strClass !== fnClass && strClass !== genClass && !/^\[object HTML/.test(strClass)) {
        return false;
      }
      return tryFunctionObject(value);
    };
  }
});

// node_modules/for-each/index.js
var require_for_each = __commonJS({
  "node_modules/for-each/index.js"(exports, module) {
    "use strict";
    var isCallable = require_is_callable();
    var toStr2 = Object.prototype.toString;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var forEachArray = function forEachArray2(array, iterator, receiver) {
      for (var i = 0, len = array.length; i < len; i++) {
        if (hasOwnProperty.call(array, i)) {
          if (receiver == null) {
            iterator(array[i], i, array);
          } else {
            iterator.call(receiver, array[i], i, array);
          }
        }
      }
    };
    var forEachString = function forEachString2(string, iterator, receiver) {
      for (var i = 0, len = string.length; i < len; i++) {
        if (receiver == null) {
          iterator(string.charAt(i), i, string);
        } else {
          iterator.call(receiver, string.charAt(i), i, string);
        }
      }
    };
    var forEachObject = function forEachObject2(object2, iterator, receiver) {
      for (var k in object2) {
        if (hasOwnProperty.call(object2, k)) {
          if (receiver == null) {
            iterator(object2[k], k, object2);
          } else {
            iterator.call(receiver, object2[k], k, object2);
          }
        }
      }
    };
    var forEach = function forEach2(list, iterator, thisArg) {
      if (!isCallable(iterator)) {
        throw new TypeError("iterator must be a function");
      }
      var receiver;
      if (arguments.length >= 3) {
        receiver = thisArg;
      }
      if (toStr2.call(list) === "[object Array]") {
        forEachArray(list, iterator, receiver);
      } else if (typeof list === "string") {
        forEachString(list, iterator, receiver);
      } else {
        forEachObject(list, iterator, receiver);
      }
    };
    module.exports = forEach;
  }
});

// node_modules/possible-typed-array-names/index.js
var require_possible_typed_array_names = __commonJS({
  "node_modules/possible-typed-array-names/index.js"(exports, module) {
    "use strict";
    module.exports = [
      "Float32Array",
      "Float64Array",
      "Int8Array",
      "Int16Array",
      "Int32Array",
      "Uint8Array",
      "Uint8ClampedArray",
      "Uint16Array",
      "Uint32Array",
      "BigInt64Array",
      "BigUint64Array"
    ];
  }
});

// node_modules/available-typed-arrays/index.js
var require_available_typed_arrays = __commonJS({
  "node_modules/available-typed-arrays/index.js"(exports, module) {
    "use strict";
    var possibleNames = require_possible_typed_array_names();
    var g = typeof globalThis === "undefined" ? global : globalThis;
    module.exports = function availableTypedArrays() {
      var out = [];
      for (var i = 0; i < possibleNames.length; i++) {
        if (typeof g[possibleNames[i]] === "function") {
          out[out.length] = possibleNames[i];
        }
      }
      return out;
    };
  }
});

// node_modules/which-typed-array/index.js
var require_which_typed_array = __commonJS({
  "node_modules/which-typed-array/index.js"(exports, module) {
    "use strict";
    var forEach = require_for_each();
    var availableTypedArrays = require_available_typed_arrays();
    var callBind = require_call_bind();
    var callBound = require_callBound();
    var gOPD = require_gopd();
    var $toString = callBound("Object.prototype.toString");
    var hasToStringTag = require_shams2()();
    var g = typeof globalThis === "undefined" ? global : globalThis;
    var typedArrays = availableTypedArrays();
    var $slice = callBound("String.prototype.slice");
    var getPrototypeOf = Object.getPrototypeOf;
    var $indexOf = callBound("Array.prototype.indexOf", true) || function indexOf(array, value) {
      for (var i = 0; i < array.length; i += 1) {
        if (array[i] === value) {
          return i;
        }
      }
      return -1;
    };
    var cache = { __proto__: null };
    if (hasToStringTag && gOPD && getPrototypeOf) {
      forEach(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        if (Symbol.toStringTag in arr) {
          var proto = getPrototypeOf(arr);
          var descriptor = gOPD(proto, Symbol.toStringTag);
          if (!descriptor) {
            var superProto = getPrototypeOf(proto);
            descriptor = gOPD(superProto, Symbol.toStringTag);
          }
          cache["$" + typedArray] = callBind(descriptor.get);
        }
      });
    } else {
      forEach(typedArrays, function(typedArray) {
        var arr = new g[typedArray]();
        var fn = arr.slice || arr.set;
        if (fn) {
          cache["$" + typedArray] = callBind(fn);
        }
      });
    }
    var tryTypedArrays = function tryAllTypedArrays(value) {
      var found = false;
      forEach(
        // eslint-disable-next-line no-extra-parens
        /** @type {Record<`\$${TypedArrayName}`, Getter>} */
        /** @type {any} */
        cache,
        /** @type {(getter: Getter, name: `\$${import('.').TypedArrayName}`) => void} */
        function(getter, typedArray) {
          if (!found) {
            try {
              if ("$" + getter(value) === typedArray) {
                found = $slice(typedArray, 1);
              }
            } catch (e) {
            }
          }
        }
      );
      return found;
    };
    var trySlices = function tryAllSlices(value) {
      var found = false;
      forEach(
        // eslint-disable-next-line no-extra-parens
        /** @type {Record<`\$${TypedArrayName}`, Getter>} */
        /** @type {any} */
        cache,
        /** @type {(getter: typeof cache, name: `\$${import('.').TypedArrayName}`) => void} */
        function(getter, name) {
          if (!found) {
            try {
              getter(value);
              found = $slice(name, 1);
            } catch (e) {
            }
          }
        }
      );
      return found;
    };
    module.exports = function whichTypedArray(value) {
      if (!value || typeof value !== "object") {
        return false;
      }
      if (!hasToStringTag) {
        var tag = $slice($toString(value), 8, -1);
        if ($indexOf(typedArrays, tag) > -1) {
          return tag;
        }
        if (tag !== "Object") {
          return false;
        }
        return trySlices(value);
      }
      if (!gOPD) {
        return null;
      }
      return tryTypedArrays(value);
    };
  }
});

// node_modules/is-typed-array/index.js
var require_is_typed_array = __commonJS({
  "node_modules/is-typed-array/index.js"(exports, module) {
    "use strict";
    var whichTypedArray = require_which_typed_array();
    module.exports = function isTypedArray(value) {
      return !!whichTypedArray(value);
    };
  }
});

// node_modules/util/support/types.js
var require_types = __commonJS({
  "node_modules/util/support/types.js"(exports) {
    "use strict";
    var isArgumentsObject = require_is_arguments();
    var isGeneratorFunction = require_is_generator_function();
    var whichTypedArray = require_which_typed_array();
    var isTypedArray = require_is_typed_array();
    function uncurryThis(f2) {
      return f2.call.bind(f2);
    }
    var BigIntSupported = typeof BigInt !== "undefined";
    var SymbolSupported = typeof Symbol !== "undefined";
    var ObjectToString = uncurryThis(Object.prototype.toString);
    var numberValue = uncurryThis(Number.prototype.valueOf);
    var stringValue = uncurryThis(String.prototype.valueOf);
    var booleanValue = uncurryThis(Boolean.prototype.valueOf);
    if (BigIntSupported) {
      bigIntValue = uncurryThis(BigInt.prototype.valueOf);
    }
    var bigIntValue;
    if (SymbolSupported) {
      symbolValue = uncurryThis(Symbol.prototype.valueOf);
    }
    var symbolValue;
    function checkBoxedPrimitive(value, prototypeValueOf) {
      if (typeof value !== "object") {
        return false;
      }
      try {
        prototypeValueOf(value);
        return true;
      } catch (e) {
        return false;
      }
    }
    exports.isArgumentsObject = isArgumentsObject;
    exports.isGeneratorFunction = isGeneratorFunction;
    exports.isTypedArray = isTypedArray;
    function isPromise(input) {
      return typeof Promise !== "undefined" && input instanceof Promise || input !== null && typeof input === "object" && typeof input.then === "function" && typeof input.catch === "function";
    }
    exports.isPromise = isPromise;
    function isArrayBufferView(value) {
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        return ArrayBuffer.isView(value);
      }
      return isTypedArray(value) || isDataView(value);
    }
    exports.isArrayBufferView = isArrayBufferView;
    function isUint8Array(value) {
      return whichTypedArray(value) === "Uint8Array";
    }
    exports.isUint8Array = isUint8Array;
    function isUint8ClampedArray(value) {
      return whichTypedArray(value) === "Uint8ClampedArray";
    }
    exports.isUint8ClampedArray = isUint8ClampedArray;
    function isUint16Array(value) {
      return whichTypedArray(value) === "Uint16Array";
    }
    exports.isUint16Array = isUint16Array;
    function isUint32Array(value) {
      return whichTypedArray(value) === "Uint32Array";
    }
    exports.isUint32Array = isUint32Array;
    function isInt8Array(value) {
      return whichTypedArray(value) === "Int8Array";
    }
    exports.isInt8Array = isInt8Array;
    function isInt16Array(value) {
      return whichTypedArray(value) === "Int16Array";
    }
    exports.isInt16Array = isInt16Array;
    function isInt32Array(value) {
      return whichTypedArray(value) === "Int32Array";
    }
    exports.isInt32Array = isInt32Array;
    function isFloat32Array(value) {
      return whichTypedArray(value) === "Float32Array";
    }
    exports.isFloat32Array = isFloat32Array;
    function isFloat64Array(value) {
      return whichTypedArray(value) === "Float64Array";
    }
    exports.isFloat64Array = isFloat64Array;
    function isBigInt64Array(value) {
      return whichTypedArray(value) === "BigInt64Array";
    }
    exports.isBigInt64Array = isBigInt64Array;
    function isBigUint64Array(value) {
      return whichTypedArray(value) === "BigUint64Array";
    }
    exports.isBigUint64Array = isBigUint64Array;
    function isMapToString(value) {
      return ObjectToString(value) === "[object Map]";
    }
    isMapToString.working = typeof Map !== "undefined" && isMapToString(/* @__PURE__ */ new Map());
    function isMap(value) {
      if (typeof Map === "undefined") {
        return false;
      }
      return isMapToString.working ? isMapToString(value) : value instanceof Map;
    }
    exports.isMap = isMap;
    function isSetToString(value) {
      return ObjectToString(value) === "[object Set]";
    }
    isSetToString.working = typeof Set !== "undefined" && isSetToString(/* @__PURE__ */ new Set());
    function isSet(value) {
      if (typeof Set === "undefined") {
        return false;
      }
      return isSetToString.working ? isSetToString(value) : value instanceof Set;
    }
    exports.isSet = isSet;
    function isWeakMapToString(value) {
      return ObjectToString(value) === "[object WeakMap]";
    }
    isWeakMapToString.working = typeof WeakMap !== "undefined" && isWeakMapToString(/* @__PURE__ */ new WeakMap());
    function isWeakMap(value) {
      if (typeof WeakMap === "undefined") {
        return false;
      }
      return isWeakMapToString.working ? isWeakMapToString(value) : value instanceof WeakMap;
    }
    exports.isWeakMap = isWeakMap;
    function isWeakSetToString(value) {
      return ObjectToString(value) === "[object WeakSet]";
    }
    isWeakSetToString.working = typeof WeakSet !== "undefined" && isWeakSetToString(/* @__PURE__ */ new WeakSet());
    function isWeakSet(value) {
      return isWeakSetToString(value);
    }
    exports.isWeakSet = isWeakSet;
    function isArrayBufferToString(value) {
      return ObjectToString(value) === "[object ArrayBuffer]";
    }
    isArrayBufferToString.working = typeof ArrayBuffer !== "undefined" && isArrayBufferToString(new ArrayBuffer());
    function isArrayBuffer(value) {
      if (typeof ArrayBuffer === "undefined") {
        return false;
      }
      return isArrayBufferToString.working ? isArrayBufferToString(value) : value instanceof ArrayBuffer;
    }
    exports.isArrayBuffer = isArrayBuffer;
    function isDataViewToString(value) {
      return ObjectToString(value) === "[object DataView]";
    }
    isDataViewToString.working = typeof ArrayBuffer !== "undefined" && typeof DataView !== "undefined" && isDataViewToString(new DataView(new ArrayBuffer(1), 0, 1));
    function isDataView(value) {
      if (typeof DataView === "undefined") {
        return false;
      }
      return isDataViewToString.working ? isDataViewToString(value) : value instanceof DataView;
    }
    exports.isDataView = isDataView;
    var SharedArrayBufferCopy = typeof SharedArrayBuffer !== "undefined" ? SharedArrayBuffer : void 0;
    function isSharedArrayBufferToString(value) {
      return ObjectToString(value) === "[object SharedArrayBuffer]";
    }
    function isSharedArrayBuffer(value) {
      if (typeof SharedArrayBufferCopy === "undefined") {
        return false;
      }
      if (typeof isSharedArrayBufferToString.working === "undefined") {
        isSharedArrayBufferToString.working = isSharedArrayBufferToString(new SharedArrayBufferCopy());
      }
      return isSharedArrayBufferToString.working ? isSharedArrayBufferToString(value) : value instanceof SharedArrayBufferCopy;
    }
    exports.isSharedArrayBuffer = isSharedArrayBuffer;
    function isAsyncFunction(value) {
      return ObjectToString(value) === "[object AsyncFunction]";
    }
    exports.isAsyncFunction = isAsyncFunction;
    function isMapIterator(value) {
      return ObjectToString(value) === "[object Map Iterator]";
    }
    exports.isMapIterator = isMapIterator;
    function isSetIterator(value) {
      return ObjectToString(value) === "[object Set Iterator]";
    }
    exports.isSetIterator = isSetIterator;
    function isGeneratorObject(value) {
      return ObjectToString(value) === "[object Generator]";
    }
    exports.isGeneratorObject = isGeneratorObject;
    function isWebAssemblyCompiledModule(value) {
      return ObjectToString(value) === "[object WebAssembly.Module]";
    }
    exports.isWebAssemblyCompiledModule = isWebAssemblyCompiledModule;
    function isNumberObject(value) {
      return checkBoxedPrimitive(value, numberValue);
    }
    exports.isNumberObject = isNumberObject;
    function isStringObject(value) {
      return checkBoxedPrimitive(value, stringValue);
    }
    exports.isStringObject = isStringObject;
    function isBooleanObject(value) {
      return checkBoxedPrimitive(value, booleanValue);
    }
    exports.isBooleanObject = isBooleanObject;
    function isBigIntObject(value) {
      return BigIntSupported && checkBoxedPrimitive(value, bigIntValue);
    }
    exports.isBigIntObject = isBigIntObject;
    function isSymbolObject(value) {
      return SymbolSupported && checkBoxedPrimitive(value, symbolValue);
    }
    exports.isSymbolObject = isSymbolObject;
    function isBoxedPrimitive(value) {
      return isNumberObject(value) || isStringObject(value) || isBooleanObject(value) || isBigIntObject(value) || isSymbolObject(value);
    }
    exports.isBoxedPrimitive = isBoxedPrimitive;
    function isAnyArrayBuffer(value) {
      return typeof Uint8Array !== "undefined" && (isArrayBuffer(value) || isSharedArrayBuffer(value));
    }
    exports.isAnyArrayBuffer = isAnyArrayBuffer;
    ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(method) {
      Object.defineProperty(exports, method, {
        enumerable: false,
        value: function() {
          throw new Error(method + " is not supported in userland");
        }
      });
    });
  }
});

// node_modules/util/support/isBufferBrowser.js
var require_isBufferBrowser = __commonJS({
  "node_modules/util/support/isBufferBrowser.js"(exports, module) {
    module.exports = function isBuffer(arg) {
      return arg && typeof arg === "object" && typeof arg.copy === "function" && typeof arg.fill === "function" && typeof arg.readUInt8 === "function";
    };
  }
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
  "node_modules/inherits/inherits_browser.js"(exports, module) {
    if (typeof Object.create === "function") {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
              value: ctor,
              enumerable: false,
              writable: true,
              configurable: true
            }
          });
        }
      };
    } else {
      module.exports = function inherits(ctor, superCtor) {
        if (superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
      };
    }
  }
});

// node_modules/util/util.js
var require_util = __commonJS({
  "node_modules/util/util.js"(exports) {
    var getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors || function getOwnPropertyDescriptors2(obj) {
      var keys = Object.keys(obj);
      var descriptors = {};
      for (var i = 0; i < keys.length; i++) {
        descriptors[keys[i]] = Object.getOwnPropertyDescriptor(obj, keys[i]);
      }
      return descriptors;
    };
    var formatRegExp = /%[sdj%]/g;
    exports.format = function(f2) {
      if (!isString(f2)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(" ");
      }
      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f2).replace(formatRegExp, function(x2) {
        if (x2 === "%%") return "%";
        if (i >= len) return x2;
        switch (x2) {
          case "%s":
            return String(args[i++]);
          case "%d":
            return Number(args[i++]);
          case "%j":
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return "[Circular]";
            }
          default:
            return x2;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject(x)) {
          str += " " + x;
        } else {
          str += " " + inspect(x);
        }
      }
      return str;
    };
    exports.deprecate = function(fn, msg) {
      if (typeof process !== "undefined" && process.noDeprecation === true) {
        return fn;
      }
      if (typeof process === "undefined") {
        return function() {
          return exports.deprecate(fn, msg).apply(this, arguments);
        };
      }
      var warned = false;
      function deprecated() {
        if (!warned) {
          if (process.throwDeprecation) {
            throw new Error(msg);
          } else if (process.traceDeprecation) {
            console.trace(msg);
          } else {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }
      return deprecated;
    };
    var debugs = {};
    var debugEnvRegex = /^$/;
    if (process.env.NODE_DEBUG) {
      debugEnv = process.env.NODE_DEBUG;
      debugEnv = debugEnv.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase();
      debugEnvRegex = new RegExp("^" + debugEnv + "$", "i");
    }
    var debugEnv;
    exports.debuglog = function(set) {
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (debugEnvRegex.test(set)) {
          var pid = process.pid;
          debugs[set] = function() {
            var msg = exports.format.apply(exports, arguments);
            console.error("%s %d: %s", set, pid, msg);
          };
        } else {
          debugs[set] = function() {
          };
        }
      }
      return debugs[set];
    };
    function inspect(obj, opts) {
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        ctx.showHidden = opts;
      } else if (opts) {
        exports._extend(ctx, opts);
      }
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }
    exports.inspect = inspect;
    inspect.colors = {
      "bold": [1, 22],
      "italic": [3, 23],
      "underline": [4, 24],
      "inverse": [7, 27],
      "white": [37, 39],
      "grey": [90, 39],
      "black": [30, 39],
      "blue": [34, 39],
      "cyan": [36, 39],
      "green": [32, 39],
      "magenta": [35, 39],
      "red": [31, 39],
      "yellow": [33, 39]
    };
    inspect.styles = {
      "special": "cyan",
      "number": "yellow",
      "boolean": "yellow",
      "undefined": "grey",
      "null": "bold",
      "string": "green",
      "date": "magenta",
      // "name": intentionally not styling
      "regexp": "red"
    };
    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];
      if (style) {
        return "\x1B[" + inspect.colors[style][0] + "m" + str + "\x1B[" + inspect.colors[style][1] + "m";
      } else {
        return str;
      }
    }
    function stylizeNoColor(str, styleType) {
      return str;
    }
    function arrayToHash(array) {
      var hash2 = {};
      array.forEach(function(val, idx) {
        hash2[val] = true;
      });
      return hash2;
    }
    function formatValue(ctx, value, recurseTimes) {
      if (ctx.customInspect && value && isFunction(value.inspect) && // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect && // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);
      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }
      if (isError2(value) && (keys.indexOf("message") >= 0 || keys.indexOf("description") >= 0)) {
        return formatError(value);
      }
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ": " + value.name : "";
          return ctx.stylize("[Function" + name + "]", "special");
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), "date");
        }
        if (isError2(value)) {
          return formatError(value);
        }
      }
      var base = "", array = false, braces = ["{", "}"];
      if (isArray(value)) {
        array = true;
        braces = ["[", "]"];
      }
      if (isFunction(value)) {
        var n2 = value.name ? ": " + value.name : "";
        base = " [Function" + n2 + "]";
      }
      if (isRegExp(value)) {
        base = " " + RegExp.prototype.toString.call(value);
      }
      if (isDate(value)) {
        base = " " + Date.prototype.toUTCString.call(value);
      }
      if (isError2(value)) {
        base = " " + formatError(value);
      }
      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }
      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), "regexp");
        } else {
          return ctx.stylize("[Object]", "special");
        }
      }
      ctx.seen.push(value);
      var output2;
      if (array) {
        output2 = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output2 = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }
      ctx.seen.pop();
      return reduceToSingleString(output2, base, braces);
    }
    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize("undefined", "undefined");
      if (isString(value)) {
        var simple = "'" + JSON.stringify(value).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
        return ctx.stylize(simple, "string");
      }
      if (isNumber(value))
        return ctx.stylize("" + value, "number");
      if (isBoolean(value))
        return ctx.stylize("" + value, "boolean");
      if (isNull(value))
        return ctx.stylize("null", "null");
    }
    function formatError(value) {
      return "[" + Error.prototype.toString.call(value) + "]";
    }
    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output2 = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output2.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            String(i),
            true
          ));
        } else {
          output2.push("");
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output2.push(formatProperty(
            ctx,
            value,
            recurseTimes,
            visibleKeys,
            key,
            true
          ));
        }
      });
      return output2;
    }
    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize("[Getter/Setter]", "special");
        } else {
          str = ctx.stylize("[Getter]", "special");
        }
      } else {
        if (desc.set) {
          str = ctx.stylize("[Setter]", "special");
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = "[" + key + "]";
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf("\n") > -1) {
            if (array) {
              str = str.split("\n").map(function(line) {
                return "  " + line;
              }).join("\n").slice(2);
            } else {
              str = "\n" + str.split("\n").map(function(line) {
                return "   " + line;
              }).join("\n");
            }
          }
        } else {
          str = ctx.stylize("[Circular]", "special");
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify("" + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.slice(1, -1);
          name = ctx.stylize(name, "name");
        } else {
          name = name.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, "string");
        }
      }
      return name + ": " + str;
    }
    function reduceToSingleString(output2, base, braces) {
      var numLinesEst = 0;
      var length = output2.reduce(function(prev, cur) {
        numLinesEst++;
        if (cur.indexOf("\n") >= 0) numLinesEst++;
        return prev + cur.replace(/\u001b\[\d\d?m/g, "").length + 1;
      }, 0);
      if (length > 60) {
        return braces[0] + (base === "" ? "" : base + "\n ") + " " + output2.join(",\n  ") + " " + braces[1];
      }
      return braces[0] + base + " " + output2.join(", ") + " " + braces[1];
    }
    exports.types = require_types();
    function isArray(ar) {
      return Array.isArray(ar);
    }
    exports.isArray = isArray;
    function isBoolean(arg) {
      return typeof arg === "boolean";
    }
    exports.isBoolean = isBoolean;
    function isNull(arg) {
      return arg === null;
    }
    exports.isNull = isNull;
    function isNullOrUndefined(arg) {
      return arg == null;
    }
    exports.isNullOrUndefined = isNullOrUndefined;
    function isNumber(arg) {
      return typeof arg === "number";
    }
    exports.isNumber = isNumber;
    function isString(arg) {
      return typeof arg === "string";
    }
    exports.isString = isString;
    function isSymbol(arg) {
      return typeof arg === "symbol";
    }
    exports.isSymbol = isSymbol;
    function isUndefined(arg) {
      return arg === void 0;
    }
    exports.isUndefined = isUndefined;
    function isRegExp(re) {
      return isObject(re) && objectToString(re) === "[object RegExp]";
    }
    exports.isRegExp = isRegExp;
    exports.types.isRegExp = isRegExp;
    function isObject(arg) {
      return typeof arg === "object" && arg !== null;
    }
    exports.isObject = isObject;
    function isDate(d) {
      return isObject(d) && objectToString(d) === "[object Date]";
    }
    exports.isDate = isDate;
    exports.types.isDate = isDate;
    function isError2(e) {
      return isObject(e) && (objectToString(e) === "[object Error]" || e instanceof Error);
    }
    exports.isError = isError2;
    exports.types.isNativeError = isError2;
    function isFunction(arg) {
      return typeof arg === "function";
    }
    exports.isFunction = isFunction;
    function isPrimitive(arg) {
      return arg === null || typeof arg === "boolean" || typeof arg === "number" || typeof arg === "string" || typeof arg === "symbol" || // ES6 symbol
      typeof arg === "undefined";
    }
    exports.isPrimitive = isPrimitive;
    exports.isBuffer = require_isBufferBrowser();
    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }
    function pad(n2) {
      return n2 < 10 ? "0" + n2.toString(10) : n2.toString(10);
    }
    var months = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    function timestamp() {
      var d = /* @__PURE__ */ new Date();
      var time = [
        pad(d.getHours()),
        pad(d.getMinutes()),
        pad(d.getSeconds())
      ].join(":");
      return [d.getDate(), months[d.getMonth()], time].join(" ");
    }
    exports.log = function() {
      console.log("%s - %s", timestamp(), exports.format.apply(exports, arguments));
    };
    exports.inherits = require_inherits_browser();
    exports._extend = function(origin, add2) {
      if (!add2 || !isObject(add2)) return origin;
      var keys = Object.keys(add2);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add2[keys[i]];
      }
      return origin;
    };
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }
    var kCustomPromisifiedSymbol = typeof Symbol !== "undefined" ? Symbol("util.promisify.custom") : void 0;
    exports.promisify = function promisify(original) {
      if (typeof original !== "function")
        throw new TypeError('The "original" argument must be of type Function');
      if (kCustomPromisifiedSymbol && original[kCustomPromisifiedSymbol]) {
        var fn = original[kCustomPromisifiedSymbol];
        if (typeof fn !== "function") {
          throw new TypeError('The "util.promisify.custom" argument must be of type Function');
        }
        Object.defineProperty(fn, kCustomPromisifiedSymbol, {
          value: fn,
          enumerable: false,
          writable: false,
          configurable: true
        });
        return fn;
      }
      function fn() {
        var promiseResolve, promiseReject;
        var promise = new Promise(function(resolve, reject) {
          promiseResolve = resolve;
          promiseReject = reject;
        });
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        args.push(function(err, value) {
          if (err) {
            promiseReject(err);
          } else {
            promiseResolve(value);
          }
        });
        try {
          original.apply(this, args);
        } catch (err) {
          promiseReject(err);
        }
        return promise;
      }
      Object.setPrototypeOf(fn, Object.getPrototypeOf(original));
      if (kCustomPromisifiedSymbol) Object.defineProperty(fn, kCustomPromisifiedSymbol, {
        value: fn,
        enumerable: false,
        writable: false,
        configurable: true
      });
      return Object.defineProperties(
        fn,
        getOwnPropertyDescriptors(original)
      );
    };
    exports.promisify.custom = kCustomPromisifiedSymbol;
    function callbackifyOnRejected(reason, cb) {
      if (!reason) {
        var newReason = new Error("Promise was rejected with a falsy value");
        newReason.reason = reason;
        reason = newReason;
      }
      return cb(reason);
    }
    function callbackify(original) {
      if (typeof original !== "function") {
        throw new TypeError('The "original" argument must be of type Function');
      }
      function callbackified() {
        var args = [];
        for (var i = 0; i < arguments.length; i++) {
          args.push(arguments[i]);
        }
        var maybeCb = args.pop();
        if (typeof maybeCb !== "function") {
          throw new TypeError("The last argument must be of type Function");
        }
        var self2 = this;
        var cb = function() {
          return maybeCb.apply(self2, arguments);
        };
        original.apply(this, args).then(
          function(ret) {
            process.nextTick(cb.bind(null, null, ret));
          },
          function(rej) {
            process.nextTick(callbackifyOnRejected.bind(null, rej, cb));
          }
        );
      }
      Object.setPrototypeOf(callbackified, Object.getPrototypeOf(original));
      Object.defineProperties(
        callbackified,
        getOwnPropertyDescriptors(original)
      );
      return callbackified;
    }
    exports.callbackify = callbackify;
  }
});

// node_modules/assert/build/internal/errors.js
var require_errors2 = __commonJS({
  "node_modules/assert/build/internal/errors.js"(exports, module) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    var codes = {};
    var assert11;
    var util;
    function createErrorType(code, message, Base) {
      if (!Base) {
        Base = Error;
      }
      function getMessage(arg1, arg2, arg3) {
        if (typeof message === "string") {
          return message;
        } else {
          return message(arg1, arg2, arg3);
        }
      }
      var NodeError = function(_Base) {
        _inherits(NodeError2, _Base);
        var _super = _createSuper(NodeError2);
        function NodeError2(arg1, arg2, arg3) {
          var _this;
          _classCallCheck(this, NodeError2);
          _this = _super.call(this, getMessage(arg1, arg2, arg3));
          _this.code = code;
          return _this;
        }
        return _createClass(NodeError2);
      }(Base);
      codes[code] = NodeError;
    }
    function oneOf(expected, thing) {
      if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
          return String(i);
        });
        if (len > 2) {
          return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(", "), ", or ") + expected[len - 1];
        } else if (len === 2) {
          return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        } else {
          return "of ".concat(thing, " ").concat(expected[0]);
        }
      } else {
        return "of ".concat(thing, " ").concat(String(expected));
      }
    }
    function startsWith(str, search, pos) {
      return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
    }
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function includes(str, search, start) {
      if (typeof start !== "number") {
        start = 0;
      }
      if (start + search.length > str.length) {
        return false;
      } else {
        return str.indexOf(search, start) !== -1;
      }
    }
    createErrorType("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError);
    createErrorType("ERR_INVALID_ARG_TYPE", function(name, expected, actual) {
      if (assert11 === void 0) assert11 = require_assert2();
      assert11(typeof name === "string", "'name' must be a string");
      var determiner;
      if (typeof expected === "string" && startsWith(expected, "not ")) {
        determiner = "must not be";
        expected = expected.replace(/^not /, "");
      } else {
        determiner = "must be";
      }
      var msg;
      if (endsWith(name, " argument")) {
        msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      } else {
        var type = includes(name, ".") ? "property" : "argument";
        msg = 'The "'.concat(name, '" ').concat(type, " ").concat(determiner, " ").concat(oneOf(expected, "type"));
      }
      msg += ". Received type ".concat(_typeof(actual));
      return msg;
    }, TypeError);
    createErrorType("ERR_INVALID_ARG_VALUE", function(name, value) {
      var reason = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "is invalid";
      if (util === void 0) util = require_util();
      var inspected = util.inspect(value);
      if (inspected.length > 128) {
        inspected = "".concat(inspected.slice(0, 128), "...");
      }
      return "The argument '".concat(name, "' ").concat(reason, ". Received ").concat(inspected);
    }, TypeError, RangeError);
    createErrorType("ERR_INVALID_RETURN_VALUE", function(input, name, value) {
      var type;
      if (value && value.constructor && value.constructor.name) {
        type = "instance of ".concat(value.constructor.name);
      } else {
        type = "type ".concat(_typeof(value));
      }
      return "Expected ".concat(input, ' to be returned from the "').concat(name, '"') + " function but got ".concat(type, ".");
    }, TypeError);
    createErrorType("ERR_MISSING_ARGS", function() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      if (assert11 === void 0) assert11 = require_assert2();
      assert11(args.length > 0, "At least one arg needs to be specified");
      var msg = "The ";
      var len = args.length;
      args = args.map(function(a) {
        return '"'.concat(a, '"');
      });
      switch (len) {
        case 1:
          msg += "".concat(args[0], " argument");
          break;
        case 2:
          msg += "".concat(args[0], " and ").concat(args[1], " arguments");
          break;
        default:
          msg += args.slice(0, len - 1).join(", ");
          msg += ", and ".concat(args[len - 1], " arguments");
          break;
      }
      return "".concat(msg, " must be specified");
    }, TypeError);
    module.exports.codes = codes;
  }
});

// node_modules/assert/build/internal/assert/assertion_error.js
var require_assertion_error = __commonJS({
  "node_modules/assert/build/internal/assert/assertion_error.js"(exports, module) {
    "use strict";
    function ownKeys(e, r2) {
      var t = Object.keys(e);
      if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r2 && (o = o.filter(function(r3) {
          return Object.getOwnPropertyDescriptor(e, r3).enumerable;
        })), t.push.apply(t, o);
      }
      return t;
    }
    function _objectSpread(e) {
      for (var r2 = 1; r2 < arguments.length; r2++) {
        var t = null != arguments[r2] ? arguments[r2] : {};
        r2 % 2 ? ownKeys(Object(t), true).forEach(function(r3) {
          _defineProperty(e, r3, t[r3]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r3) {
          Object.defineProperty(e, r3, Object.getOwnPropertyDescriptor(t, r3));
        });
      }
      return e;
    }
    function _defineProperty(obj, key, value) {
      key = _toPropertyKey(key);
      if (key in obj) {
        Object.defineProperty(obj, key, { value, enumerable: true, configurable: true, writable: true });
      } else {
        obj[key] = value;
      }
      return obj;
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _inherits(subClass, superClass) {
      if (typeof superClass !== "function" && superClass !== null) {
        throw new TypeError("Super expression must either be null or a function");
      }
      subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });
      Object.defineProperty(subClass, "prototype", { writable: false });
      if (superClass) _setPrototypeOf(subClass, superClass);
    }
    function _createSuper(Derived) {
      var hasNativeReflectConstruct = _isNativeReflectConstruct();
      return function _createSuperInternal() {
        var Super = _getPrototypeOf(Derived), result;
        if (hasNativeReflectConstruct) {
          var NewTarget = _getPrototypeOf(this).constructor;
          result = Reflect.construct(Super, arguments, NewTarget);
        } else {
          result = Super.apply(this, arguments);
        }
        return _possibleConstructorReturn(this, result);
      };
    }
    function _possibleConstructorReturn(self2, call) {
      if (call && (_typeof(call) === "object" || typeof call === "function")) {
        return call;
      } else if (call !== void 0) {
        throw new TypeError("Derived constructors may only return object or undefined");
      }
      return _assertThisInitialized(self2);
    }
    function _assertThisInitialized(self2) {
      if (self2 === void 0) {
        throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
      }
      return self2;
    }
    function _wrapNativeSuper(Class) {
      var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
      _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
        if (Class2 === null || !_isNativeFunction(Class2)) return Class2;
        if (typeof Class2 !== "function") {
          throw new TypeError("Super expression must either be null or a function");
        }
        if (typeof _cache !== "undefined") {
          if (_cache.has(Class2)) return _cache.get(Class2);
          _cache.set(Class2, Wrapper);
        }
        function Wrapper() {
          return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
        }
        Wrapper.prototype = Object.create(Class2.prototype, { constructor: { value: Wrapper, enumerable: false, writable: true, configurable: true } });
        return _setPrototypeOf(Wrapper, Class2);
      };
      return _wrapNativeSuper(Class);
    }
    function _construct(Parent, args, Class) {
      if (_isNativeReflectConstruct()) {
        _construct = Reflect.construct.bind();
      } else {
        _construct = function _construct2(Parent2, args2, Class2) {
          var a = [null];
          a.push.apply(a, args2);
          var Constructor = Function.bind.apply(Parent2, a);
          var instance = new Constructor();
          if (Class2) _setPrototypeOf(instance, Class2.prototype);
          return instance;
        };
      }
      return _construct.apply(null, arguments);
    }
    function _isNativeReflectConstruct() {
      if (typeof Reflect === "undefined" || !Reflect.construct) return false;
      if (Reflect.construct.sham) return false;
      if (typeof Proxy === "function") return true;
      try {
        Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
        }));
        return true;
      } catch (e) {
        return false;
      }
    }
    function _isNativeFunction(fn) {
      return Function.toString.call(fn).indexOf("[native code]") !== -1;
    }
    function _setPrototypeOf(o, p) {
      _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
        o2.__proto__ = p2;
        return o2;
      };
      return _setPrototypeOf(o, p);
    }
    function _getPrototypeOf(o) {
      _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
        return o2.__proto__ || Object.getPrototypeOf(o2);
      };
      return _getPrototypeOf(o);
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var _require = require_util();
    var inspect = _require.inspect;
    var _require2 = require_errors2();
    var ERR_INVALID_ARG_TYPE = _require2.codes.ERR_INVALID_ARG_TYPE;
    function endsWith(str, search, this_len) {
      if (this_len === void 0 || this_len > str.length) {
        this_len = str.length;
      }
      return str.substring(this_len - search.length, this_len) === search;
    }
    function repeat(str, count) {
      count = Math.floor(count);
      if (str.length == 0 || count == 0) return "";
      var maxCount = str.length * count;
      count = Math.floor(Math.log(count) / Math.log(2));
      while (count) {
        str += str;
        count--;
      }
      str += str.substring(0, maxCount - str.length);
      return str;
    }
    var blue = "";
    var green = "";
    var red = "";
    var white = "";
    var kReadableOperator = {
      deepStrictEqual: "Expected values to be strictly deep-equal:",
      strictEqual: "Expected values to be strictly equal:",
      strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
      deepEqual: "Expected values to be loosely deep-equal:",
      equal: "Expected values to be loosely equal:",
      notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
      notStrictEqual: 'Expected "actual" to be strictly unequal to:',
      notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
      notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
      notEqual: 'Expected "actual" to be loosely unequal to:',
      notIdentical: "Values identical but not reference-equal:"
    };
    var kMaxShortLength = 10;
    function copyError(source) {
      var keys = Object.keys(source);
      var target = Object.create(Object.getPrototypeOf(source));
      keys.forEach(function(key) {
        target[key] = source[key];
      });
      Object.defineProperty(target, "message", {
        value: source.message
      });
      return target;
    }
    function inspectValue(val) {
      return inspect(val, {
        compact: false,
        customInspect: false,
        depth: 1e3,
        maxArrayLength: Infinity,
        // Assert compares only enumerable properties (with a few exceptions).
        showHidden: false,
        // Having a long line as error is better than wrapping the line for
        // comparison for now.
        // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
        // have meta information about the inspected properties (i.e., know where
        // in what line the property starts and ends).
        breakLength: Infinity,
        // Assert does not detect proxies currently.
        showProxy: false,
        sorted: true,
        // Inspect getters as we also check them when comparing entries.
        getters: true
      });
    }
    function createErrDiff(actual, expected, operator) {
      var other = "";
      var res = "";
      var lastPos = 0;
      var end = "";
      var skipped = false;
      var actualInspected = inspectValue(actual);
      var actualLines = actualInspected.split("\n");
      var expectedLines = inspectValue(expected).split("\n");
      var i = 0;
      var indicator = "";
      if (operator === "strictEqual" && _typeof(actual) === "object" && _typeof(expected) === "object" && actual !== null && expected !== null) {
        operator = "strictEqualObject";
      }
      if (actualLines.length === 1 && expectedLines.length === 1 && actualLines[0] !== expectedLines[0]) {
        var inputLength = actualLines[0].length + expectedLines[0].length;
        if (inputLength <= kMaxShortLength) {
          if ((_typeof(actual) !== "object" || actual === null) && (_typeof(expected) !== "object" || expected === null) && (actual !== 0 || expected !== 0)) {
            return "".concat(kReadableOperator[operator], "\n\n") + "".concat(actualLines[0], " !== ").concat(expectedLines[0], "\n");
          }
        } else if (operator !== "strictEqualObject") {
          var maxLength = process.stderr && process.stderr.isTTY ? process.stderr.columns : 80;
          if (inputLength < maxLength) {
            while (actualLines[0][i] === expectedLines[0][i]) {
              i++;
            }
            if (i > 2) {
              indicator = "\n  ".concat(repeat(" ", i), "^");
              i = 0;
            }
          }
        }
      }
      var a = actualLines[actualLines.length - 1];
      var b2 = expectedLines[expectedLines.length - 1];
      while (a === b2) {
        if (i++ < 2) {
          end = "\n  ".concat(a).concat(end);
        } else {
          other = a;
        }
        actualLines.pop();
        expectedLines.pop();
        if (actualLines.length === 0 || expectedLines.length === 0) break;
        a = actualLines[actualLines.length - 1];
        b2 = expectedLines[expectedLines.length - 1];
      }
      var maxLines = Math.max(actualLines.length, expectedLines.length);
      if (maxLines === 0) {
        var _actualLines = actualInspected.split("\n");
        if (_actualLines.length > 30) {
          _actualLines[26] = "".concat(blue, "...").concat(white);
          while (_actualLines.length > 27) {
            _actualLines.pop();
          }
        }
        return "".concat(kReadableOperator.notIdentical, "\n\n").concat(_actualLines.join("\n"), "\n");
      }
      if (i > 3) {
        end = "\n".concat(blue, "...").concat(white).concat(end);
        skipped = true;
      }
      if (other !== "") {
        end = "\n  ".concat(other).concat(end);
        other = "";
      }
      var printedLines = 0;
      var msg = kReadableOperator[operator] + "\n".concat(green, "+ actual").concat(white, " ").concat(red, "- expected").concat(white);
      var skippedMsg = " ".concat(blue, "...").concat(white, " Lines skipped");
      for (i = 0; i < maxLines; i++) {
        var cur = i - lastPos;
        if (actualLines.length < i + 1) {
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(expectedLines[i - 2]);
              printedLines++;
            }
            res += "\n  ".concat(expectedLines[i - 1]);
            printedLines++;
          }
          lastPos = i;
          other += "\n".concat(red, "-").concat(white, " ").concat(expectedLines[i]);
          printedLines++;
        } else if (expectedLines.length < i + 1) {
          if (cur > 1 && i > 2) {
            if (cur > 4) {
              res += "\n".concat(blue, "...").concat(white);
              skipped = true;
            } else if (cur > 3) {
              res += "\n  ".concat(actualLines[i - 2]);
              printedLines++;
            }
            res += "\n  ".concat(actualLines[i - 1]);
            printedLines++;
          }
          lastPos = i;
          res += "\n".concat(green, "+").concat(white, " ").concat(actualLines[i]);
          printedLines++;
        } else {
          var expectedLine = expectedLines[i];
          var actualLine = actualLines[i];
          var divergingLines = actualLine !== expectedLine && (!endsWith(actualLine, ",") || actualLine.slice(0, -1) !== expectedLine);
          if (divergingLines && endsWith(expectedLine, ",") && expectedLine.slice(0, -1) === actualLine) {
            divergingLines = false;
            actualLine += ",";
          }
          if (divergingLines) {
            if (cur > 1 && i > 2) {
              if (cur > 4) {
                res += "\n".concat(blue, "...").concat(white);
                skipped = true;
              } else if (cur > 3) {
                res += "\n  ".concat(actualLines[i - 2]);
                printedLines++;
              }
              res += "\n  ".concat(actualLines[i - 1]);
              printedLines++;
            }
            lastPos = i;
            res += "\n".concat(green, "+").concat(white, " ").concat(actualLine);
            other += "\n".concat(red, "-").concat(white, " ").concat(expectedLine);
            printedLines += 2;
          } else {
            res += other;
            other = "";
            if (cur === 1 || i === 0) {
              res += "\n  ".concat(actualLine);
              printedLines++;
            }
          }
        }
        if (printedLines > 20 && i < maxLines - 2) {
          return "".concat(msg).concat(skippedMsg, "\n").concat(res, "\n").concat(blue, "...").concat(white).concat(other, "\n") + "".concat(blue, "...").concat(white);
        }
      }
      return "".concat(msg).concat(skipped ? skippedMsg : "", "\n").concat(res).concat(other).concat(end).concat(indicator);
    }
    var AssertionError = function(_Error, _inspect$custom) {
      _inherits(AssertionError2, _Error);
      var _super = _createSuper(AssertionError2);
      function AssertionError2(options) {
        var _this;
        _classCallCheck(this, AssertionError2);
        if (_typeof(options) !== "object" || options === null) {
          throw new ERR_INVALID_ARG_TYPE("options", "Object", options);
        }
        var message = options.message, operator = options.operator, stackStartFn = options.stackStartFn;
        var actual = options.actual, expected = options.expected;
        var limit = Error.stackTraceLimit;
        Error.stackTraceLimit = 0;
        if (message != null) {
          _this = _super.call(this, String(message));
        } else {
          if (process.stderr && process.stderr.isTTY) {
            if (process.stderr && process.stderr.getColorDepth && process.stderr.getColorDepth() !== 1) {
              blue = "\x1B[34m";
              green = "\x1B[32m";
              white = "\x1B[39m";
              red = "\x1B[31m";
            } else {
              blue = "";
              green = "";
              white = "";
              red = "";
            }
          }
          if (_typeof(actual) === "object" && actual !== null && _typeof(expected) === "object" && expected !== null && "stack" in actual && actual instanceof Error && "stack" in expected && expected instanceof Error) {
            actual = copyError(actual);
            expected = copyError(expected);
          }
          if (operator === "deepStrictEqual" || operator === "strictEqual") {
            _this = _super.call(this, createErrDiff(actual, expected, operator));
          } else if (operator === "notDeepStrictEqual" || operator === "notStrictEqual") {
            var base = kReadableOperator[operator];
            var res = inspectValue(actual).split("\n");
            if (operator === "notStrictEqual" && _typeof(actual) === "object" && actual !== null) {
              base = kReadableOperator.notStrictEqualObject;
            }
            if (res.length > 30) {
              res[26] = "".concat(blue, "...").concat(white);
              while (res.length > 27) {
                res.pop();
              }
            }
            if (res.length === 1) {
              _this = _super.call(this, "".concat(base, " ").concat(res[0]));
            } else {
              _this = _super.call(this, "".concat(base, "\n\n").concat(res.join("\n"), "\n"));
            }
          } else {
            var _res = inspectValue(actual);
            var other = "";
            var knownOperators = kReadableOperator[operator];
            if (operator === "notDeepEqual" || operator === "notEqual") {
              _res = "".concat(kReadableOperator[operator], "\n\n").concat(_res);
              if (_res.length > 1024) {
                _res = "".concat(_res.slice(0, 1021), "...");
              }
            } else {
              other = "".concat(inspectValue(expected));
              if (_res.length > 512) {
                _res = "".concat(_res.slice(0, 509), "...");
              }
              if (other.length > 512) {
                other = "".concat(other.slice(0, 509), "...");
              }
              if (operator === "deepEqual" || operator === "equal") {
                _res = "".concat(knownOperators, "\n\n").concat(_res, "\n\nshould equal\n\n");
              } else {
                other = " ".concat(operator, " ").concat(other);
              }
            }
            _this = _super.call(this, "".concat(_res).concat(other));
          }
        }
        Error.stackTraceLimit = limit;
        _this.generatedMessage = !message;
        Object.defineProperty(_assertThisInitialized(_this), "name", {
          value: "AssertionError [ERR_ASSERTION]",
          enumerable: false,
          writable: true,
          configurable: true
        });
        _this.code = "ERR_ASSERTION";
        _this.actual = actual;
        _this.expected = expected;
        _this.operator = operator;
        if (Error.captureStackTrace) {
          Error.captureStackTrace(_assertThisInitialized(_this), stackStartFn);
        }
        _this.stack;
        _this.name = "AssertionError";
        return _possibleConstructorReturn(_this);
      }
      _createClass(AssertionError2, [{
        key: "toString",
        value: function toString() {
          return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
        }
      }, {
        key: _inspect$custom,
        value: function value(recurseTimes, ctx) {
          return inspect(this, _objectSpread(_objectSpread({}, ctx), {}, {
            customInspect: false,
            depth: 0
          }));
        }
      }]);
      return AssertionError2;
    }(_wrapNativeSuper(Error), inspect.custom);
    module.exports = AssertionError;
  }
});

// node_modules/object-keys/isArguments.js
var require_isArguments = __commonJS({
  "node_modules/object-keys/isArguments.js"(exports, module) {
    "use strict";
    var toStr2 = Object.prototype.toString;
    module.exports = function isArguments(value) {
      var str = toStr2.call(value);
      var isArgs = str === "[object Arguments]";
      if (!isArgs) {
        isArgs = str !== "[object Array]" && value !== null && typeof value === "object" && typeof value.length === "number" && value.length >= 0 && toStr2.call(value.callee) === "[object Function]";
      }
      return isArgs;
    };
  }
});

// node_modules/object-keys/implementation.js
var require_implementation2 = __commonJS({
  "node_modules/object-keys/implementation.js"(exports, module) {
    "use strict";
    var keysShim;
    if (!Object.keys) {
      has = Object.prototype.hasOwnProperty;
      toStr2 = Object.prototype.toString;
      isArgs = require_isArguments();
      isEnumerable = Object.prototype.propertyIsEnumerable;
      hasDontEnumBug = !isEnumerable.call({ toString: null }, "toString");
      hasProtoEnumBug = isEnumerable.call(function() {
      }, "prototype");
      dontEnums = [
        "toString",
        "toLocaleString",
        "valueOf",
        "hasOwnProperty",
        "isPrototypeOf",
        "propertyIsEnumerable",
        "constructor"
      ];
      equalsConstructorPrototype = function(o) {
        var ctor = o.constructor;
        return ctor && ctor.prototype === o;
      };
      excludedKeys = {
        $applicationCache: true,
        $console: true,
        $external: true,
        $frame: true,
        $frameElement: true,
        $frames: true,
        $innerHeight: true,
        $innerWidth: true,
        $onmozfullscreenchange: true,
        $onmozfullscreenerror: true,
        $outerHeight: true,
        $outerWidth: true,
        $pageXOffset: true,
        $pageYOffset: true,
        $parent: true,
        $scrollLeft: true,
        $scrollTop: true,
        $scrollX: true,
        $scrollY: true,
        $self: true,
        $webkitIndexedDB: true,
        $webkitStorageInfo: true,
        $window: true
      };
      hasAutomationEqualityBug = function() {
        if (typeof window === "undefined") {
          return false;
        }
        for (var k in window) {
          try {
            if (!excludedKeys["$" + k] && has.call(window, k) && window[k] !== null && typeof window[k] === "object") {
              try {
                equalsConstructorPrototype(window[k]);
              } catch (e) {
                return true;
              }
            }
          } catch (e) {
            return true;
          }
        }
        return false;
      }();
      equalsConstructorPrototypeIfNotBuggy = function(o) {
        if (typeof window === "undefined" || !hasAutomationEqualityBug) {
          return equalsConstructorPrototype(o);
        }
        try {
          return equalsConstructorPrototype(o);
        } catch (e) {
          return false;
        }
      };
      keysShim = function keys(object2) {
        var isObject = object2 !== null && typeof object2 === "object";
        var isFunction = toStr2.call(object2) === "[object Function]";
        var isArguments = isArgs(object2);
        var isString = isObject && toStr2.call(object2) === "[object String]";
        var theKeys = [];
        if (!isObject && !isFunction && !isArguments) {
          throw new TypeError("Object.keys called on a non-object");
        }
        var skipProto = hasProtoEnumBug && isFunction;
        if (isString && object2.length > 0 && !has.call(object2, 0)) {
          for (var i = 0; i < object2.length; ++i) {
            theKeys.push(String(i));
          }
        }
        if (isArguments && object2.length > 0) {
          for (var j = 0; j < object2.length; ++j) {
            theKeys.push(String(j));
          }
        } else {
          for (var name in object2) {
            if (!(skipProto && name === "prototype") && has.call(object2, name)) {
              theKeys.push(String(name));
            }
          }
        }
        if (hasDontEnumBug) {
          var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object2);
          for (var k = 0; k < dontEnums.length; ++k) {
            if (!(skipConstructor && dontEnums[k] === "constructor") && has.call(object2, dontEnums[k])) {
              theKeys.push(dontEnums[k]);
            }
          }
        }
        return theKeys;
      };
    }
    var has;
    var toStr2;
    var isArgs;
    var isEnumerable;
    var hasDontEnumBug;
    var hasProtoEnumBug;
    var dontEnums;
    var equalsConstructorPrototype;
    var excludedKeys;
    var hasAutomationEqualityBug;
    var equalsConstructorPrototypeIfNotBuggy;
    module.exports = keysShim;
  }
});

// node_modules/object-keys/index.js
var require_object_keys = __commonJS({
  "node_modules/object-keys/index.js"(exports, module) {
    "use strict";
    var slice = Array.prototype.slice;
    var isArgs = require_isArguments();
    var origKeys = Object.keys;
    var keysShim = origKeys ? function keys(o) {
      return origKeys(o);
    } : require_implementation2();
    var originalKeys = Object.keys;
    keysShim.shim = function shimObjectKeys() {
      if (Object.keys) {
        var keysWorksWithArguments = function() {
          var args = Object.keys(arguments);
          return args && args.length === arguments.length;
        }(1, 2);
        if (!keysWorksWithArguments) {
          Object.keys = function keys(object2) {
            if (isArgs(object2)) {
              return originalKeys(slice.call(object2));
            }
            return originalKeys(object2);
          };
        }
      } else {
        Object.keys = keysShim;
      }
      return Object.keys || keysShim;
    };
    module.exports = keysShim;
  }
});

// node_modules/object.assign/implementation.js
var require_implementation3 = __commonJS({
  "node_modules/object.assign/implementation.js"(exports, module) {
    "use strict";
    var objectKeys = require_object_keys();
    var hasSymbols = require_shams()();
    var callBound = require_callBound();
    var toObject2 = Object;
    var $push = callBound("Array.prototype.push");
    var $propIsEnumerable = callBound("Object.prototype.propertyIsEnumerable");
    var originalGetSymbols = hasSymbols ? Object.getOwnPropertySymbols : null;
    module.exports = function assign(target, source1) {
      if (target == null) {
        throw new TypeError("target must be an object");
      }
      var to = toObject2(target);
      if (arguments.length === 1) {
        return to;
      }
      for (var s = 1; s < arguments.length; ++s) {
        var from = toObject2(arguments[s]);
        var keys = objectKeys(from);
        var getSymbols = hasSymbols && (Object.getOwnPropertySymbols || originalGetSymbols);
        if (getSymbols) {
          var syms = getSymbols(from);
          for (var j = 0; j < syms.length; ++j) {
            var key = syms[j];
            if ($propIsEnumerable(from, key)) {
              $push(keys, key);
            }
          }
        }
        for (var i = 0; i < keys.length; ++i) {
          var nextKey = keys[i];
          if ($propIsEnumerable(from, nextKey)) {
            var propValue = from[nextKey];
            to[nextKey] = propValue;
          }
        }
      }
      return to;
    };
  }
});

// node_modules/object.assign/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/object.assign/polyfill.js"(exports, module) {
    "use strict";
    var implementation = require_implementation3();
    var lacksProperEnumerationOrder = function() {
      if (!Object.assign) {
        return false;
      }
      var str = "abcdefghijklmnopqrst";
      var letters = str.split("");
      var map = {};
      for (var i = 0; i < letters.length; ++i) {
        map[letters[i]] = letters[i];
      }
      var obj = Object.assign({}, map);
      var actual = "";
      for (var k in obj) {
        actual += k;
      }
      return str !== actual;
    };
    var assignHasPendingExceptions = function() {
      if (!Object.assign || !Object.preventExtensions) {
        return false;
      }
      var thrower = Object.preventExtensions({ 1: 2 });
      try {
        Object.assign(thrower, "xy");
      } catch (e) {
        return thrower[1] === "y";
      }
      return false;
    };
    module.exports = function getPolyfill() {
      if (!Object.assign) {
        return implementation;
      }
      if (lacksProperEnumerationOrder()) {
        return implementation;
      }
      if (assignHasPendingExceptions()) {
        return implementation;
      }
      return Object.assign;
    };
  }
});

// node_modules/object-is/implementation.js
var require_implementation4 = __commonJS({
  "node_modules/object-is/implementation.js"(exports, module) {
    "use strict";
    var numberIsNaN = function(value) {
      return value !== value;
    };
    module.exports = function is(a, b2) {
      if (a === 0 && b2 === 0) {
        return 1 / a === 1 / b2;
      }
      if (a === b2) {
        return true;
      }
      if (numberIsNaN(a) && numberIsNaN(b2)) {
        return true;
      }
      return false;
    };
  }
});

// node_modules/object-is/polyfill.js
var require_polyfill2 = __commonJS({
  "node_modules/object-is/polyfill.js"(exports, module) {
    "use strict";
    var implementation = require_implementation4();
    module.exports = function getPolyfill() {
      return typeof Object.is === "function" ? Object.is : implementation;
    };
  }
});

// node_modules/define-properties/index.js
var require_define_properties = __commonJS({
  "node_modules/define-properties/index.js"(exports, module) {
    "use strict";
    var keys = require_object_keys();
    var hasSymbols = typeof Symbol === "function" && typeof Symbol("foo") === "symbol";
    var toStr2 = Object.prototype.toString;
    var concat3 = Array.prototype.concat;
    var defineDataProperty = require_define_data_property();
    var isFunction = function(fn) {
      return typeof fn === "function" && toStr2.call(fn) === "[object Function]";
    };
    var supportsDescriptors = require_has_property_descriptors()();
    var defineProperty = function(object2, name, value, predicate) {
      if (name in object2) {
        if (predicate === true) {
          if (object2[name] === value) {
            return;
          }
        } else if (!isFunction(predicate) || !predicate()) {
          return;
        }
      }
      if (supportsDescriptors) {
        defineDataProperty(object2, name, value, true);
      } else {
        defineDataProperty(object2, name, value);
      }
    };
    var defineProperties2 = function(object2, map) {
      var predicates = arguments.length > 2 ? arguments[2] : {};
      var props = keys(map);
      if (hasSymbols) {
        props = concat3.call(props, Object.getOwnPropertySymbols(map));
      }
      for (var i = 0; i < props.length; i += 1) {
        defineProperty(object2, props[i], map[props[i]], predicates[props[i]]);
      }
    };
    defineProperties2.supportsDescriptors = !!supportsDescriptors;
    module.exports = defineProperties2;
  }
});

// node_modules/object-is/shim.js
var require_shim = __commonJS({
  "node_modules/object-is/shim.js"(exports, module) {
    "use strict";
    var getPolyfill = require_polyfill2();
    var define2 = require_define_properties();
    module.exports = function shimObjectIs() {
      var polyfill = getPolyfill();
      define2(Object, { is: polyfill }, {
        is: function testObjectIs() {
          return Object.is !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// node_modules/object-is/index.js
var require_object_is = __commonJS({
  "node_modules/object-is/index.js"(exports, module) {
    "use strict";
    var define2 = require_define_properties();
    var callBind = require_call_bind();
    var implementation = require_implementation4();
    var getPolyfill = require_polyfill2();
    var shim = require_shim();
    var polyfill = callBind(getPolyfill(), Object);
    define2(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module.exports = polyfill;
  }
});

// node_modules/is-nan/implementation.js
var require_implementation5 = __commonJS({
  "node_modules/is-nan/implementation.js"(exports, module) {
    "use strict";
    module.exports = function isNaN2(value) {
      return value !== value;
    };
  }
});

// node_modules/is-nan/polyfill.js
var require_polyfill3 = __commonJS({
  "node_modules/is-nan/polyfill.js"(exports, module) {
    "use strict";
    var implementation = require_implementation5();
    module.exports = function getPolyfill() {
      if (Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a")) {
        return Number.isNaN;
      }
      return implementation;
    };
  }
});

// node_modules/is-nan/shim.js
var require_shim2 = __commonJS({
  "node_modules/is-nan/shim.js"(exports, module) {
    "use strict";
    var define2 = require_define_properties();
    var getPolyfill = require_polyfill3();
    module.exports = function shimNumberIsNaN() {
      var polyfill = getPolyfill();
      define2(Number, { isNaN: polyfill }, {
        isNaN: function testIsNaN() {
          return Number.isNaN !== polyfill;
        }
      });
      return polyfill;
    };
  }
});

// node_modules/is-nan/index.js
var require_is_nan = __commonJS({
  "node_modules/is-nan/index.js"(exports, module) {
    "use strict";
    var callBind = require_call_bind();
    var define2 = require_define_properties();
    var implementation = require_implementation5();
    var getPolyfill = require_polyfill3();
    var shim = require_shim2();
    var polyfill = callBind(getPolyfill(), Number);
    define2(polyfill, {
      getPolyfill,
      implementation,
      shim
    });
    module.exports = polyfill;
  }
});

// node_modules/assert/build/internal/util/comparisons.js
var require_comparisons = __commonJS({
  "node_modules/assert/build/internal/util/comparisons.js"(exports, module) {
    "use strict";
    function _slicedToArray(arr, i) {
      return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
    }
    function _nonIterableRest() {
      throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    function _unsupportedIterableToArray(o, minLen) {
      if (!o) return;
      if (typeof o === "string") return _arrayLikeToArray(o, minLen);
      var n2 = Object.prototype.toString.call(o).slice(8, -1);
      if (n2 === "Object" && o.constructor) n2 = o.constructor.name;
      if (n2 === "Map" || n2 === "Set") return Array.from(o);
      if (n2 === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n2)) return _arrayLikeToArray(o, minLen);
    }
    function _arrayLikeToArray(arr, len) {
      if (len == null || len > arr.length) len = arr.length;
      for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
      return arr2;
    }
    function _iterableToArrayLimit(r2, l) {
      var t = null == r2 ? null : "undefined" != typeof Symbol && r2[Symbol.iterator] || r2["@@iterator"];
      if (null != t) {
        var e, n2, i, u, a = [], f2 = true, o = false;
        try {
          if (i = (t = t.call(r2)).next, 0 === l) {
            if (Object(t) !== t) return;
            f2 = false;
          } else for (; !(f2 = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f2 = true) ;
        } catch (r3) {
          o = true, n2 = r3;
        } finally {
          try {
            if (!f2 && null != t.return && (u = t.return(), Object(u) !== u)) return;
          } finally {
            if (o) throw n2;
          }
        }
        return a;
      }
    }
    function _arrayWithHoles(arr) {
      if (Array.isArray(arr)) return arr;
    }
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    var regexFlagsSupported = /a/g.flags !== void 0;
    var arrayFromSet = function arrayFromSet2(set) {
      var array = [];
      set.forEach(function(value) {
        return array.push(value);
      });
      return array;
    };
    var arrayFromMap = function arrayFromMap2(map) {
      var array = [];
      map.forEach(function(value, key) {
        return array.push([key, value]);
      });
      return array;
    };
    var objectIs = Object.is ? Object.is : require_object_is();
    var objectGetOwnPropertySymbols = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
      return [];
    };
    var numberIsNaN = Number.isNaN ? Number.isNaN : require_is_nan();
    function uncurryThis(f2) {
      return f2.call.bind(f2);
    }
    var hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
    var propertyIsEnumerable = uncurryThis(Object.prototype.propertyIsEnumerable);
    var objectToString = uncurryThis(Object.prototype.toString);
    var _require$types = require_util().types;
    var isAnyArrayBuffer = _require$types.isAnyArrayBuffer;
    var isArrayBufferView = _require$types.isArrayBufferView;
    var isDate = _require$types.isDate;
    var isMap = _require$types.isMap;
    var isRegExp = _require$types.isRegExp;
    var isSet = _require$types.isSet;
    var isNativeError = _require$types.isNativeError;
    var isBoxedPrimitive = _require$types.isBoxedPrimitive;
    var isNumberObject = _require$types.isNumberObject;
    var isStringObject = _require$types.isStringObject;
    var isBooleanObject = _require$types.isBooleanObject;
    var isBigIntObject = _require$types.isBigIntObject;
    var isSymbolObject = _require$types.isSymbolObject;
    var isFloat32Array = _require$types.isFloat32Array;
    var isFloat64Array = _require$types.isFloat64Array;
    function isNonIndex(key) {
      if (key.length === 0 || key.length > 10) return true;
      for (var i = 0; i < key.length; i++) {
        var code = key.charCodeAt(i);
        if (code < 48 || code > 57) return true;
      }
      return key.length === 10 && key >= Math.pow(2, 32);
    }
    function getOwnNonIndexProperties(value) {
      return Object.keys(value).filter(isNonIndex).concat(objectGetOwnPropertySymbols(value).filter(Object.prototype.propertyIsEnumerable.bind(value)));
    }
    function compare(a, b2) {
      if (a === b2) {
        return 0;
      }
      var x = a.length;
      var y = b2.length;
      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b2[i]) {
          x = a[i];
          y = b2[i];
          break;
        }
      }
      if (x < y) {
        return -1;
      }
      if (y < x) {
        return 1;
      }
      return 0;
    }
    var ONLY_ENUMERABLE = void 0;
    var kStrict = true;
    var kLoose = false;
    var kNoIterator = 0;
    var kIsArray = 1;
    var kIsSet = 2;
    var kIsMap = 3;
    function areSimilarRegExps(a, b2) {
      return regexFlagsSupported ? a.source === b2.source && a.flags === b2.flags : RegExp.prototype.toString.call(a) === RegExp.prototype.toString.call(b2);
    }
    function areSimilarFloatArrays(a, b2) {
      if (a.byteLength !== b2.byteLength) {
        return false;
      }
      for (var offset = 0; offset < a.byteLength; offset++) {
        if (a[offset] !== b2[offset]) {
          return false;
        }
      }
      return true;
    }
    function areSimilarTypedArrays(a, b2) {
      if (a.byteLength !== b2.byteLength) {
        return false;
      }
      return compare(new Uint8Array(a.buffer, a.byteOffset, a.byteLength), new Uint8Array(b2.buffer, b2.byteOffset, b2.byteLength)) === 0;
    }
    function areEqualArrayBuffers(buf1, buf2) {
      return buf1.byteLength === buf2.byteLength && compare(new Uint8Array(buf1), new Uint8Array(buf2)) === 0;
    }
    function isEqualBoxedPrimitive(val1, val2) {
      if (isNumberObject(val1)) {
        return isNumberObject(val2) && objectIs(Number.prototype.valueOf.call(val1), Number.prototype.valueOf.call(val2));
      }
      if (isStringObject(val1)) {
        return isStringObject(val2) && String.prototype.valueOf.call(val1) === String.prototype.valueOf.call(val2);
      }
      if (isBooleanObject(val1)) {
        return isBooleanObject(val2) && Boolean.prototype.valueOf.call(val1) === Boolean.prototype.valueOf.call(val2);
      }
      if (isBigIntObject(val1)) {
        return isBigIntObject(val2) && BigInt.prototype.valueOf.call(val1) === BigInt.prototype.valueOf.call(val2);
      }
      return isSymbolObject(val2) && Symbol.prototype.valueOf.call(val1) === Symbol.prototype.valueOf.call(val2);
    }
    function innerDeepEqual(val1, val2, strict, memos) {
      if (val1 === val2) {
        if (val1 !== 0) return true;
        return strict ? objectIs(val1, val2) : true;
      }
      if (strict) {
        if (_typeof(val1) !== "object") {
          return typeof val1 === "number" && numberIsNaN(val1) && numberIsNaN(val2);
        }
        if (_typeof(val2) !== "object" || val1 === null || val2 === null) {
          return false;
        }
        if (Object.getPrototypeOf(val1) !== Object.getPrototypeOf(val2)) {
          return false;
        }
      } else {
        if (val1 === null || _typeof(val1) !== "object") {
          if (val2 === null || _typeof(val2) !== "object") {
            return val1 == val2;
          }
          return false;
        }
        if (val2 === null || _typeof(val2) !== "object") {
          return false;
        }
      }
      var val1Tag = objectToString(val1);
      var val2Tag = objectToString(val2);
      if (val1Tag !== val2Tag) {
        return false;
      }
      if (Array.isArray(val1)) {
        if (val1.length !== val2.length) {
          return false;
        }
        var keys1 = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (keys1.length !== keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsArray, keys1);
      }
      if (val1Tag === "[object Object]") {
        if (!isMap(val1) && isMap(val2) || !isSet(val1) && isSet(val2)) {
          return false;
        }
      }
      if (isDate(val1)) {
        if (!isDate(val2) || Date.prototype.getTime.call(val1) !== Date.prototype.getTime.call(val2)) {
          return false;
        }
      } else if (isRegExp(val1)) {
        if (!isRegExp(val2) || !areSimilarRegExps(val1, val2)) {
          return false;
        }
      } else if (isNativeError(val1) || val1 instanceof Error) {
        if (val1.message !== val2.message || val1.name !== val2.name) {
          return false;
        }
      } else if (isArrayBufferView(val1)) {
        if (!strict && (isFloat32Array(val1) || isFloat64Array(val1))) {
          if (!areSimilarFloatArrays(val1, val2)) {
            return false;
          }
        } else if (!areSimilarTypedArrays(val1, val2)) {
          return false;
        }
        var _keys = getOwnNonIndexProperties(val1, ONLY_ENUMERABLE);
        var _keys2 = getOwnNonIndexProperties(val2, ONLY_ENUMERABLE);
        if (_keys.length !== _keys2.length) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kNoIterator, _keys);
      } else if (isSet(val1)) {
        if (!isSet(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsSet);
      } else if (isMap(val1)) {
        if (!isMap(val2) || val1.size !== val2.size) {
          return false;
        }
        return keyCheck(val1, val2, strict, memos, kIsMap);
      } else if (isAnyArrayBuffer(val1)) {
        if (!areEqualArrayBuffers(val1, val2)) {
          return false;
        }
      } else if (isBoxedPrimitive(val1) && !isEqualBoxedPrimitive(val1, val2)) {
        return false;
      }
      return keyCheck(val1, val2, strict, memos, kNoIterator);
    }
    function getEnumerables(val, keys) {
      return keys.filter(function(k) {
        return propertyIsEnumerable(val, k);
      });
    }
    function keyCheck(val1, val2, strict, memos, iterationType, aKeys) {
      if (arguments.length === 5) {
        aKeys = Object.keys(val1);
        var bKeys = Object.keys(val2);
        if (aKeys.length !== bKeys.length) {
          return false;
        }
      }
      var i = 0;
      for (; i < aKeys.length; i++) {
        if (!hasOwnProperty(val2, aKeys[i])) {
          return false;
        }
      }
      if (strict && arguments.length === 5) {
        var symbolKeysA = objectGetOwnPropertySymbols(val1);
        if (symbolKeysA.length !== 0) {
          var count = 0;
          for (i = 0; i < symbolKeysA.length; i++) {
            var key = symbolKeysA[i];
            if (propertyIsEnumerable(val1, key)) {
              if (!propertyIsEnumerable(val2, key)) {
                return false;
              }
              aKeys.push(key);
              count++;
            } else if (propertyIsEnumerable(val2, key)) {
              return false;
            }
          }
          var symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (symbolKeysA.length !== symbolKeysB.length && getEnumerables(val2, symbolKeysB).length !== count) {
            return false;
          }
        } else {
          var _symbolKeysB = objectGetOwnPropertySymbols(val2);
          if (_symbolKeysB.length !== 0 && getEnumerables(val2, _symbolKeysB).length !== 0) {
            return false;
          }
        }
      }
      if (aKeys.length === 0 && (iterationType === kNoIterator || iterationType === kIsArray && val1.length === 0 || val1.size === 0)) {
        return true;
      }
      if (memos === void 0) {
        memos = {
          val1: /* @__PURE__ */ new Map(),
          val2: /* @__PURE__ */ new Map(),
          position: 0
        };
      } else {
        var val2MemoA = memos.val1.get(val1);
        if (val2MemoA !== void 0) {
          var val2MemoB = memos.val2.get(val2);
          if (val2MemoB !== void 0) {
            return val2MemoA === val2MemoB;
          }
        }
        memos.position++;
      }
      memos.val1.set(val1, memos.position);
      memos.val2.set(val2, memos.position);
      var areEq = objEquiv(val1, val2, strict, aKeys, memos, iterationType);
      memos.val1.delete(val1);
      memos.val2.delete(val2);
      return areEq;
    }
    function setHasEqualElement(set, val1, strict, memo) {
      var setValues = arrayFromSet(set);
      for (var i = 0; i < setValues.length; i++) {
        var val2 = setValues[i];
        if (innerDeepEqual(val1, val2, strict, memo)) {
          set.delete(val2);
          return true;
        }
      }
      return false;
    }
    function findLooseMatchingPrimitives(prim) {
      switch (_typeof(prim)) {
        case "undefined":
          return null;
        case "object":
          return void 0;
        case "symbol":
          return false;
        case "string":
          prim = +prim;
        case "number":
          if (numberIsNaN(prim)) {
            return false;
          }
      }
      return true;
    }
    function setMightHaveLoosePrim(a, b2, prim) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) return altValue;
      return b2.has(altValue) && !a.has(altValue);
    }
    function mapMightHaveLoosePrim(a, b2, prim, item, memo) {
      var altValue = findLooseMatchingPrimitives(prim);
      if (altValue != null) {
        return altValue;
      }
      var curB = b2.get(altValue);
      if (curB === void 0 && !b2.has(altValue) || !innerDeepEqual(item, curB, false, memo)) {
        return false;
      }
      return !a.has(altValue) && innerDeepEqual(item, curB, false, memo);
    }
    function setEquiv(a, b2, strict, memo) {
      var set = null;
      var aValues = arrayFromSet(a);
      for (var i = 0; i < aValues.length; i++) {
        var val = aValues[i];
        if (_typeof(val) === "object" && val !== null) {
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(val);
        } else if (!b2.has(val)) {
          if (strict) return false;
          if (!setMightHaveLoosePrim(a, b2, val)) {
            return false;
          }
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(val);
        }
      }
      if (set !== null) {
        var bValues = arrayFromSet(b2);
        for (var _i = 0; _i < bValues.length; _i++) {
          var _val = bValues[_i];
          if (_typeof(_val) === "object" && _val !== null) {
            if (!setHasEqualElement(set, _val, strict, memo)) return false;
          } else if (!strict && !a.has(_val) && !setHasEqualElement(set, _val, strict, memo)) {
            return false;
          }
        }
        return set.size === 0;
      }
      return true;
    }
    function mapHasEqualEntry(set, map, key1, item1, strict, memo) {
      var setValues = arrayFromSet(set);
      for (var i = 0; i < setValues.length; i++) {
        var key2 = setValues[i];
        if (innerDeepEqual(key1, key2, strict, memo) && innerDeepEqual(item1, map.get(key2), strict, memo)) {
          set.delete(key2);
          return true;
        }
      }
      return false;
    }
    function mapEquiv(a, b2, strict, memo) {
      var set = null;
      var aEntries = arrayFromMap(a);
      for (var i = 0; i < aEntries.length; i++) {
        var _aEntries$i = _slicedToArray(aEntries[i], 2), key = _aEntries$i[0], item1 = _aEntries$i[1];
        if (_typeof(key) === "object" && key !== null) {
          if (set === null) {
            set = /* @__PURE__ */ new Set();
          }
          set.add(key);
        } else {
          var item2 = b2.get(key);
          if (item2 === void 0 && !b2.has(key) || !innerDeepEqual(item1, item2, strict, memo)) {
            if (strict) return false;
            if (!mapMightHaveLoosePrim(a, b2, key, item1, memo)) return false;
            if (set === null) {
              set = /* @__PURE__ */ new Set();
            }
            set.add(key);
          }
        }
      }
      if (set !== null) {
        var bEntries = arrayFromMap(b2);
        for (var _i2 = 0; _i2 < bEntries.length; _i2++) {
          var _bEntries$_i = _slicedToArray(bEntries[_i2], 2), _key = _bEntries$_i[0], item = _bEntries$_i[1];
          if (_typeof(_key) === "object" && _key !== null) {
            if (!mapHasEqualEntry(set, a, _key, item, strict, memo)) return false;
          } else if (!strict && (!a.has(_key) || !innerDeepEqual(a.get(_key), item, false, memo)) && !mapHasEqualEntry(set, a, _key, item, false, memo)) {
            return false;
          }
        }
        return set.size === 0;
      }
      return true;
    }
    function objEquiv(a, b2, strict, keys, memos, iterationType) {
      var i = 0;
      if (iterationType === kIsSet) {
        if (!setEquiv(a, b2, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsMap) {
        if (!mapEquiv(a, b2, strict, memos)) {
          return false;
        }
      } else if (iterationType === kIsArray) {
        for (; i < a.length; i++) {
          if (hasOwnProperty(a, i)) {
            if (!hasOwnProperty(b2, i) || !innerDeepEqual(a[i], b2[i], strict, memos)) {
              return false;
            }
          } else if (hasOwnProperty(b2, i)) {
            return false;
          } else {
            var keysA = Object.keys(a);
            for (; i < keysA.length; i++) {
              var key = keysA[i];
              if (!hasOwnProperty(b2, key) || !innerDeepEqual(a[key], b2[key], strict, memos)) {
                return false;
              }
            }
            if (keysA.length !== Object.keys(b2).length) {
              return false;
            }
            return true;
          }
        }
      }
      for (i = 0; i < keys.length; i++) {
        var _key2 = keys[i];
        if (!innerDeepEqual(a[_key2], b2[_key2], strict, memos)) {
          return false;
        }
      }
      return true;
    }
    function isDeepEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kLoose);
    }
    function isDeepStrictEqual(val1, val2) {
      return innerDeepEqual(val1, val2, kStrict);
    }
    module.exports = {
      isDeepEqual,
      isDeepStrictEqual
    };
  }
});

// node_modules/assert/build/assert.js
var require_assert2 = __commonJS({
  "node_modules/assert/build/assert.js"(exports, module) {
    "use strict";
    function _typeof(o) {
      "@babel/helpers - typeof";
      return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
        return typeof o2;
      } : function(o2) {
        return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
      }, _typeof(o);
    }
    function _defineProperties(target, props) {
      for (var i = 0; i < props.length; i++) {
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
      }
    }
    function _createClass(Constructor, protoProps, staticProps) {
      if (protoProps) _defineProperties(Constructor.prototype, protoProps);
      if (staticProps) _defineProperties(Constructor, staticProps);
      Object.defineProperty(Constructor, "prototype", { writable: false });
      return Constructor;
    }
    function _toPropertyKey(arg) {
      var key = _toPrimitive(arg, "string");
      return _typeof(key) === "symbol" ? key : String(key);
    }
    function _toPrimitive(input, hint) {
      if (_typeof(input) !== "object" || input === null) return input;
      var prim = input[Symbol.toPrimitive];
      if (prim !== void 0) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
      }
      return (hint === "string" ? String : Number)(input);
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var _require = require_errors2();
    var _require$codes = _require.codes;
    var ERR_AMBIGUOUS_ARGUMENT = _require$codes.ERR_AMBIGUOUS_ARGUMENT;
    var ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE;
    var ERR_INVALID_ARG_VALUE = _require$codes.ERR_INVALID_ARG_VALUE;
    var ERR_INVALID_RETURN_VALUE = _require$codes.ERR_INVALID_RETURN_VALUE;
    var ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS;
    var AssertionError = require_assertion_error();
    var _require2 = require_util();
    var inspect = _require2.inspect;
    var _require$types = require_util().types;
    var isPromise = _require$types.isPromise;
    var isRegExp = _require$types.isRegExp;
    var objectAssign = require_polyfill()();
    var objectIs = require_polyfill2()();
    var RegExpPrototypeTest = require_callBound()("RegExp.prototype.test");
    var isDeepEqual;
    var isDeepStrictEqual;
    function lazyLoadComparison() {
      var comparison = require_comparisons();
      isDeepEqual = comparison.isDeepEqual;
      isDeepStrictEqual = comparison.isDeepStrictEqual;
    }
    var warned = false;
    var assert11 = module.exports = ok;
    var NO_EXCEPTION_SENTINEL = {};
    function innerFail(obj) {
      if (obj.message instanceof Error) throw obj.message;
      throw new AssertionError(obj);
    }
    function fail(actual, expected, message, operator, stackStartFn) {
      var argsLen = arguments.length;
      var internalMessage;
      if (argsLen === 0) {
        internalMessage = "Failed";
      } else if (argsLen === 1) {
        message = actual;
        actual = void 0;
      } else {
        if (warned === false) {
          warned = true;
          var warn = process.emitWarning ? process.emitWarning : console.warn.bind(console);
          warn("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
        }
        if (argsLen === 2) operator = "!=";
      }
      if (message instanceof Error) throw message;
      var errArgs = {
        actual,
        expected,
        operator: operator === void 0 ? "fail" : operator,
        stackStartFn: stackStartFn || fail
      };
      if (message !== void 0) {
        errArgs.message = message;
      }
      var err = new AssertionError(errArgs);
      if (internalMessage) {
        err.message = internalMessage;
        err.generatedMessage = true;
      }
      throw err;
    }
    assert11.fail = fail;
    assert11.AssertionError = AssertionError;
    function innerOk(fn, argLen, value, message) {
      if (!value) {
        var generatedMessage = false;
        if (argLen === 0) {
          generatedMessage = true;
          message = "No value argument passed to `assert.ok()`";
        } else if (message instanceof Error) {
          throw message;
        }
        var err = new AssertionError({
          actual: value,
          expected: true,
          message,
          operator: "==",
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    }
    function ok() {
      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }
      innerOk.apply(void 0, [ok, args.length].concat(args));
    }
    assert11.ok = ok;
    assert11.equal = function equal(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual != expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "==",
          stackStartFn: equal
        });
      }
    };
    assert11.notEqual = function notEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (actual == expected) {
        innerFail({
          actual,
          expected,
          message,
          operator: "!=",
          stackStartFn: notEqual
        });
      }
    };
    assert11.deepEqual = function deepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (!isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepEqual",
          stackStartFn: deepEqual
        });
      }
    };
    assert11.notDeepEqual = function notDeepEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (isDeepEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepEqual",
          stackStartFn: notDeepEqual
        });
      }
    };
    assert11.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (!isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "deepStrictEqual",
          stackStartFn: deepStrictEqual
        });
      }
    };
    assert11.notDeepStrictEqual = notDeepStrictEqual;
    function notDeepStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (isDeepEqual === void 0) lazyLoadComparison();
      if (isDeepStrictEqual(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notDeepStrictEqual",
          stackStartFn: notDeepStrictEqual
        });
      }
    }
    assert11.strictEqual = function strictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (!objectIs(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "strictEqual",
          stackStartFn: strictEqual
        });
      }
    };
    assert11.notStrictEqual = function notStrictEqual(actual, expected, message) {
      if (arguments.length < 2) {
        throw new ERR_MISSING_ARGS("actual", "expected");
      }
      if (objectIs(actual, expected)) {
        innerFail({
          actual,
          expected,
          message,
          operator: "notStrictEqual",
          stackStartFn: notStrictEqual
        });
      }
    };
    var Comparison = _createClass(function Comparison2(obj, keys, actual) {
      var _this = this;
      _classCallCheck(this, Comparison2);
      keys.forEach(function(key) {
        if (key in obj) {
          if (actual !== void 0 && typeof actual[key] === "string" && isRegExp(obj[key]) && RegExpPrototypeTest(obj[key], actual[key])) {
            _this[key] = actual[key];
          } else {
            _this[key] = obj[key];
          }
        }
      });
    });
    function compareExceptionKey(actual, expected, key, message, keys, fn) {
      if (!(key in actual) || !isDeepStrictEqual(actual[key], expected[key])) {
        if (!message) {
          var a = new Comparison(actual, keys);
          var b2 = new Comparison(expected, keys, actual);
          var err = new AssertionError({
            actual: a,
            expected: b2,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.actual = actual;
          err.expected = expected;
          err.operator = fn.name;
          throw err;
        }
        innerFail({
          actual,
          expected,
          message,
          operator: fn.name,
          stackStartFn: fn
        });
      }
    }
    function expectedException(actual, expected, msg, fn) {
      if (typeof expected !== "function") {
        if (isRegExp(expected)) return RegExpPrototypeTest(expected, actual);
        if (arguments.length === 2) {
          throw new ERR_INVALID_ARG_TYPE("expected", ["Function", "RegExp"], expected);
        }
        if (_typeof(actual) !== "object" || actual === null) {
          var err = new AssertionError({
            actual,
            expected,
            message: msg,
            operator: "deepStrictEqual",
            stackStartFn: fn
          });
          err.operator = fn.name;
          throw err;
        }
        var keys = Object.keys(expected);
        if (expected instanceof Error) {
          keys.push("name", "message");
        } else if (keys.length === 0) {
          throw new ERR_INVALID_ARG_VALUE("error", expected, "may not be an empty object");
        }
        if (isDeepEqual === void 0) lazyLoadComparison();
        keys.forEach(function(key) {
          if (typeof actual[key] === "string" && isRegExp(expected[key]) && RegExpPrototypeTest(expected[key], actual[key])) {
            return;
          }
          compareExceptionKey(actual, expected, key, msg, keys, fn);
        });
        return true;
      }
      if (expected.prototype !== void 0 && actual instanceof expected) {
        return true;
      }
      if (Error.isPrototypeOf(expected)) {
        return false;
      }
      return expected.call({}, actual) === true;
    }
    function getActual(fn) {
      if (typeof fn !== "function") {
        throw new ERR_INVALID_ARG_TYPE("fn", "Function", fn);
      }
      try {
        fn();
      } catch (e) {
        return e;
      }
      return NO_EXCEPTION_SENTINEL;
    }
    function checkIsPromise(obj) {
      return isPromise(obj) || obj !== null && _typeof(obj) === "object" && typeof obj.then === "function" && typeof obj.catch === "function";
    }
    function waitForActual(promiseFn) {
      return Promise.resolve().then(function() {
        var resultPromise;
        if (typeof promiseFn === "function") {
          resultPromise = promiseFn();
          if (!checkIsPromise(resultPromise)) {
            throw new ERR_INVALID_RETURN_VALUE("instance of Promise", "promiseFn", resultPromise);
          }
        } else if (checkIsPromise(promiseFn)) {
          resultPromise = promiseFn;
        } else {
          throw new ERR_INVALID_ARG_TYPE("promiseFn", ["Function", "Promise"], promiseFn);
        }
        return Promise.resolve().then(function() {
          return resultPromise;
        }).then(function() {
          return NO_EXCEPTION_SENTINEL;
        }).catch(function(e) {
          return e;
        });
      });
    }
    function expectsError(stackStartFn, actual, error, message) {
      if (typeof error === "string") {
        if (arguments.length === 4) {
          throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
        }
        if (_typeof(actual) === "object" && actual !== null) {
          if (actual.message === error) {
            throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error message "'.concat(actual.message, '" is identical to the message.'));
          }
        } else if (actual === error) {
          throw new ERR_AMBIGUOUS_ARGUMENT("error/message", 'The error "'.concat(actual, '" is identical to the message.'));
        }
        message = error;
        error = void 0;
      } else if (error != null && _typeof(error) !== "object" && typeof error !== "function") {
        throw new ERR_INVALID_ARG_TYPE("error", ["Object", "Error", "Function", "RegExp"], error);
      }
      if (actual === NO_EXCEPTION_SENTINEL) {
        var details = "";
        if (error && error.name) {
          details += " (".concat(error.name, ")");
        }
        details += message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "rejects" ? "rejection" : "exception";
        innerFail({
          actual: void 0,
          expected: error,
          operator: stackStartFn.name,
          message: "Missing expected ".concat(fnType).concat(details),
          stackStartFn
        });
      }
      if (error && !expectedException(actual, error, message, stackStartFn)) {
        throw actual;
      }
    }
    function expectsNoError(stackStartFn, actual, error, message) {
      if (actual === NO_EXCEPTION_SENTINEL) return;
      if (typeof error === "string") {
        message = error;
        error = void 0;
      }
      if (!error || expectedException(actual, error)) {
        var details = message ? ": ".concat(message) : ".";
        var fnType = stackStartFn.name === "doesNotReject" ? "rejection" : "exception";
        innerFail({
          actual,
          expected: error,
          operator: stackStartFn.name,
          message: "Got unwanted ".concat(fnType).concat(details, "\n") + 'Actual message: "'.concat(actual && actual.message, '"'),
          stackStartFn
        });
      }
      throw actual;
    }
    assert11.throws = function throws(promiseFn) {
      for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
        args[_key2 - 1] = arguments[_key2];
      }
      expectsError.apply(void 0, [throws, getActual(promiseFn)].concat(args));
    };
    assert11.rejects = function rejects(promiseFn) {
      for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
        args[_key3 - 1] = arguments[_key3];
      }
      return waitForActual(promiseFn).then(function(result) {
        return expectsError.apply(void 0, [rejects, result].concat(args));
      });
    };
    assert11.doesNotThrow = function doesNotThrow(fn) {
      for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
        args[_key4 - 1] = arguments[_key4];
      }
      expectsNoError.apply(void 0, [doesNotThrow, getActual(fn)].concat(args));
    };
    assert11.doesNotReject = function doesNotReject(fn) {
      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
        args[_key5 - 1] = arguments[_key5];
      }
      return waitForActual(fn).then(function(result) {
        return expectsNoError.apply(void 0, [doesNotReject, result].concat(args));
      });
    };
    assert11.ifError = function ifError(err) {
      if (err !== null && err !== void 0) {
        var message = "ifError got unwanted exception: ";
        if (_typeof(err) === "object" && typeof err.message === "string") {
          if (err.message.length === 0 && err.constructor) {
            message += err.constructor.name;
          } else {
            message += err.message;
          }
        } else {
          message += inspect(err);
        }
        var newErr = new AssertionError({
          actual: err,
          expected: null,
          operator: "ifError",
          message,
          stackStartFn: ifError
        });
        var origStack = err.stack;
        if (typeof origStack === "string") {
          var tmp2 = origStack.split("\n");
          tmp2.shift();
          var tmp1 = newErr.stack.split("\n");
          for (var i = 0; i < tmp2.length; i++) {
            var pos = tmp1.indexOf(tmp2[i]);
            if (pos !== -1) {
              tmp1 = tmp1.slice(0, pos);
              break;
            }
          }
          newErr.stack = "".concat(tmp1.join("\n"), "\n").concat(tmp2.join("\n"));
        }
        throw newErr;
      }
    };
    function internalMatch(string, regexp, message, fn, fnName) {
      if (!isRegExp(regexp)) {
        throw new ERR_INVALID_ARG_TYPE("regexp", "RegExp", regexp);
      }
      var match = fnName === "match";
      if (typeof string !== "string" || RegExpPrototypeTest(regexp, string) !== match) {
        if (message instanceof Error) {
          throw message;
        }
        var generatedMessage = !message;
        message = message || (typeof string !== "string" ? 'The "string" argument must be of type string. Received type ' + "".concat(_typeof(string), " (").concat(inspect(string), ")") : (match ? "The input did not match the regular expression " : "The input was expected to not match the regular expression ") + "".concat(inspect(regexp), ". Input:\n\n").concat(inspect(string), "\n"));
        var err = new AssertionError({
          actual: string,
          expected: regexp,
          message,
          operator: fnName,
          stackStartFn: fn
        });
        err.generatedMessage = generatedMessage;
        throw err;
      }
    }
    assert11.match = function match(string, regexp, message) {
      internalMatch(string, regexp, message, match, "match");
    };
    assert11.doesNotMatch = function doesNotMatch(string, regexp, message) {
      internalMatch(string, regexp, message, doesNotMatch, "doesNotMatch");
    };
    function strict() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      innerOk.apply(void 0, [strict, args.length].concat(args));
    }
    assert11.strict = objectAssign(strict, assert11, {
      equal: assert11.strictEqual,
      deepEqual: assert11.deepStrictEqual,
      notEqual: assert11.notStrictEqual,
      notDeepEqual: assert11.notDeepStrictEqual
    });
    assert11.strict.strict = assert11.strict;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/abi/AggregationRouterV6.abi.json
var require_AggregationRouterV6_abi = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/abi/AggregationRouterV6.abi.json"(exports, module) {
    module.exports = [
      {
        inputs: [
          {
            internalType: "contract IWETH",
            name: "_weth",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        inputs: [],
        name: "AdvanceEpochFailed",
        type: "error"
      },
      {
        inputs: [],
        name: "ArbitraryStaticCallFailed",
        type: "error"
      },
      {
        inputs: [],
        name: "BadSignature",
        type: "error"
      },
      {
        inputs: [],
        name: "BitInvalidatedOrder",
        type: "error"
      },
      {
        inputs: [],
        name: "ETHTransferFailed",
        type: "error"
      },
      {
        inputs: [],
        name: "EpochManagerAndBitInvalidatorsAreIncompatible",
        type: "error"
      },
      {
        inputs: [],
        name: "EthDepositRejected",
        type: "error"
      },
      {
        inputs: [],
        name: "InvalidMsgValue",
        type: "error"
      },
      {
        inputs: [],
        name: "InvalidPermit2Transfer",
        type: "error"
      },
      {
        inputs: [],
        name: "InvalidShortString",
        type: "error"
      },
      {
        inputs: [],
        name: "InvalidatedOrder",
        type: "error"
      },
      {
        inputs: [],
        name: "MakingAmountTooLow",
        type: "error"
      },
      {
        inputs: [],
        name: "MismatchArraysLengths",
        type: "error"
      },
      {
        inputs: [],
        name: "OrderExpired",
        type: "error"
      },
      {
        inputs: [],
        name: "OrderIsNotSuitableForMassInvalidation",
        type: "error"
      },
      {
        inputs: [],
        name: "PartialFillNotAllowed",
        type: "error"
      },
      {
        inputs: [],
        name: "Permit2TransferAmountTooHigh",
        type: "error"
      },
      {
        inputs: [],
        name: "PredicateIsNotTrue",
        type: "error"
      },
      {
        inputs: [],
        name: "PrivateOrder",
        type: "error"
      },
      {
        inputs: [],
        name: "ReentrancyDetected",
        type: "error"
      },
      {
        inputs: [],
        name: "RemainingInvalidatedOrder",
        type: "error"
      },
      {
        inputs: [],
        name: "SafeTransferFailed",
        type: "error"
      },
      {
        inputs: [],
        name: "SafeTransferFromFailed",
        type: "error"
      },
      {
        inputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "res",
            type: "bytes"
          }
        ],
        name: "SimulationResults",
        type: "error"
      },
      {
        inputs: [
          {
            internalType: "string",
            name: "str",
            type: "string"
          }
        ],
        name: "StringTooLong",
        type: "error"
      },
      {
        inputs: [],
        name: "SwapWithZeroAmount",
        type: "error"
      },
      {
        inputs: [],
        name: "TakingAmountExceeded",
        type: "error"
      },
      {
        inputs: [],
        name: "TakingAmountTooHigh",
        type: "error"
      },
      {
        inputs: [],
        name: "TransferFromMakerToTakerFailed",
        type: "error"
      },
      {
        inputs: [],
        name: "TransferFromTakerToMakerFailed",
        type: "error"
      },
      {
        inputs: [],
        name: "WrongSeriesNonce",
        type: "error"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "slotIndex",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "slotValue",
            type: "uint256"
          }
        ],
        name: "BitInvalidatorUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [],
        name: "EIP712DomainChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "series",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "newEpoch",
            type: "uint256"
          }
        ],
        name: "EpochIncreased",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32"
          }
        ],
        name: "OrderCancelled",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "remainingAmount",
            type: "uint256"
          }
        ],
        name: "OrderFilled",
        type: "event"
      },
      {
        inputs: [],
        name: "DOMAIN_SEPARATOR",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint96",
            name: "series",
            type: "uint96"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "advanceEpoch",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "offsets",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "and",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "arbitraryStaticCall",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "slot",
            type: "uint256"
          }
        ],
        name: "bitInvalidatorForOrder",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "MakerTraits",
            name: "makerTraits",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "additionalMask",
            type: "uint256"
          }
        ],
        name: "bitsInvalidateForOrder",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "MakerTraits",
            name: "makerTraits",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32"
          }
        ],
        name: "cancelOrder",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "MakerTraits[]",
            name: "makerTraits",
            type: "uint256[]"
          },
          {
            internalType: "bytes32[]",
            name: "orderHashes",
            type: "bytes32[]"
          }
        ],
        name: "cancelOrders",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "predicate",
            type: "bytes"
          }
        ],
        name: "checkPredicate",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "eip712Domain",
        outputs: [
          {
            internalType: "bytes1",
            name: "fields",
            type: "bytes1"
          },
          {
            internalType: "string",
            name: "name",
            type: "string"
          },
          {
            internalType: "string",
            name: "version",
            type: "string"
          },
          {
            internalType: "uint256",
            name: "chainId",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "verifyingContract",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32"
          },
          {
            internalType: "uint256[]",
            name: "extensions",
            type: "uint256[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            internalType: "uint96",
            name: "series",
            type: "uint96"
          }
        ],
        name: "epoch",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "series",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "makerEpoch",
            type: "uint256"
          }
        ],
        name: "epochEquals",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "eq",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "maker",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "receiver",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "makerAsset",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "takerAsset",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "makingAmount",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "takingAmount",
                type: "uint256"
              },
              {
                internalType: "MakerTraits",
                name: "makerTraits",
                type: "uint256"
              }
            ],
            internalType: "struct IOrderMixin.Order",
            name: "order",
            type: "tuple"
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "TakerTraits",
            name: "takerTraits",
            type: "uint256"
          }
        ],
        name: "fillContractOrder",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "maker",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "receiver",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "makerAsset",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "takerAsset",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "makingAmount",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "takingAmount",
                type: "uint256"
              },
              {
                internalType: "MakerTraits",
                name: "makerTraits",
                type: "uint256"
              }
            ],
            internalType: "struct IOrderMixin.Order",
            name: "order",
            type: "tuple"
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "TakerTraits",
            name: "takerTraits",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "args",
            type: "bytes"
          }
        ],
        name: "fillContractOrderArgs",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "maker",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "receiver",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "makerAsset",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "takerAsset",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "makingAmount",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "takingAmount",
                type: "uint256"
              },
              {
                internalType: "MakerTraits",
                name: "makerTraits",
                type: "uint256"
              }
            ],
            internalType: "struct IOrderMixin.Order",
            name: "order",
            type: "tuple"
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "vs",
            type: "bytes32"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "TakerTraits",
            name: "takerTraits",
            type: "uint256"
          }
        ],
        name: "fillOrder",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "maker",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "receiver",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "makerAsset",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "takerAsset",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "makingAmount",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "takingAmount",
                type: "uint256"
              },
              {
                internalType: "MakerTraits",
                name: "makerTraits",
                type: "uint256"
              }
            ],
            internalType: "struct IOrderMixin.Order",
            name: "order",
            type: "tuple"
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "vs",
            type: "bytes32"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "TakerTraits",
            name: "takerTraits",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "args",
            type: "bytes"
          }
        ],
        name: "fillOrderArgs",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "gt",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "maker",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "receiver",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "makerAsset",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "takerAsset",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "makingAmount",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "takingAmount",
                type: "uint256"
              },
              {
                internalType: "MakerTraits",
                name: "makerTraits",
                type: "uint256"
              }
            ],
            internalType: "struct IOrderMixin.Order",
            name: "order",
            type: "tuple"
          }
        ],
        name: "hashOrder",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint96",
            name: "series",
            type: "uint96"
          }
        ],
        name: "increaseEpoch",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "lt",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "not",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "offsets",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "or",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "action",
            type: "bytes"
          }
        ],
        name: "permitAndCall",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32"
          }
        ],
        name: "rawRemainingInvalidatorForOrder",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32"
          }
        ],
        name: "remainingInvalidatorForOrder",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "simulate",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        stateMutability: "payable",
        type: "receive"
      }
    ];
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/constants.js
var require_constants2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLimitOrderContract = exports.ZX = void 0;
    exports.ZX = "0x";
    var ONE_INCH_LIMIT_ORDER_V4 = "0x111111125421ca6dc452d289314280a0f8842a65";
    var ONE_INCH_LIMIT_ORDER_V4_ZK_SYNC = "0x6fd4383cb451173d5f9304f041c7bcbf27d561ff";
    var getLimitOrderContract = (chainId) => {
      if (chainId === 324) {
        return ONE_INCH_LIMIT_ORDER_V4_ZK_SYNC;
      }
      return ONE_INCH_LIMIT_ORDER_V4;
    };
    exports.getLimitOrderContract = getLimitOrderContract;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order-contract/limit-order-contract.js
var require_limit_order_contract = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order-contract/limit-order-contract.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LimitOrderContract = void 0;
    var ethers_1 = require_lib2();
    var assert_1 = __importDefault2(require_assert2());
    var AggregationRouterV6_abi_json_1 = __importDefault2(require_AggregationRouterV6_abi());
    var constants_1 = require_constants2();
    var lopContract = new ethers_1.Interface(AggregationRouterV6_abi_json_1.default);
    var LimitOrderContract2 = class {
      /**
       *  Fill order WITHOUT an extension and taker interaction
       *
       *  @see getFillOrderArgsCalldata
       *  @see getFillContractOrderCalldata
       */
      static getFillOrderCalldata(order, signature, takerTraits, amount) {
        const { r: r2, yParityAndS: vs } = ethers_1.Signature.from(signature);
        const { args, trait } = takerTraits.encode();
        (0, assert_1.default)(args === constants_1.ZX, "takerTraits contains args data, use LimitOrderContract.getFillOrderArgsCalldata method");
        return lopContract.encodeFunctionData("fillOrder", [
          order,
          r2,
          vs,
          amount,
          trait
        ]);
      }
      /**
       *  Fill contract order (order maker is smart-contract) WITHOUT an extension and taker interaction
       *
       *  @see getFillContractOrderArgsCalldata
       *  @see getFillOrderCalldata
       */
      static getFillContractOrderCalldata(order, signature, takerTraits, amount) {
        const { args, trait } = takerTraits.encode();
        (0, assert_1.default)(args === constants_1.ZX, "takerTraits contains args data, use LimitOrderContract.getFillContractOrderArgsCalldata method");
        return lopContract.encodeFunctionData("fillContractOrder", [
          order,
          signature,
          amount,
          trait,
          args
        ]);
      }
      /**
       *  Fill order WITH an extension or taker interaction
       *
       *  @see getFillOrderCalldata
       *  @see getFillContractOrderArgsCalldata
       */
      static getFillOrderArgsCalldata(order, signature, takerTraits, amount) {
        const { r: r2, yParityAndS: vs } = ethers_1.Signature.from(signature);
        const { args, trait } = takerTraits.encode();
        return lopContract.encodeFunctionData("fillOrderArgs", [
          order,
          r2,
          vs,
          amount,
          trait,
          args
        ]);
      }
      /**
       *  Fill contract order (order maker is smart-contract) WITH an extension or taker interaction
       *
       *  @see getFillOrderArgsCalldata
       *  @see getFillContractOrderCalldata
       */
      static getFillContractOrderArgsCalldata(order, signature, takerTraits, amount) {
        const { args, trait } = takerTraits.encode();
        return lopContract.encodeFunctionData("fillContractOrderArgs", [
          order,
          signature,
          amount,
          trait,
          args
        ]);
      }
    };
    exports.LimitOrderContract = LimitOrderContract2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order-contract/index.js
var require_limit_order_contract2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order-contract/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_limit_order_contract(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/eip712/domain.js
var require_domain = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/eip712/domain.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LimitOrderV4TypeDataVersion = exports.LimitOrderV4TypeDataName = exports.Order = exports.EIP712Domain = void 0;
    exports.EIP712Domain = [
      { name: "name", type: "string" },
      { name: "version", type: "string" },
      { name: "chainId", type: "uint256" },
      { name: "verifyingContract", type: "address" }
    ];
    exports.Order = [
      { name: "salt", type: "uint256" },
      { name: "maker", type: "address" },
      { name: "receiver", type: "address" },
      { name: "makerAsset", type: "address" },
      { name: "takerAsset", type: "address" },
      { name: "makingAmount", type: "uint256" },
      { name: "takingAmount", type: "uint256" },
      { name: "makerTraits", type: "uint256" }
    ];
    exports.LimitOrderV4TypeDataName = "1inch Aggregation Router";
    exports.LimitOrderV4TypeDataVersion = "6";
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/eip712/eip712.types.js
var require_eip712_types = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/eip712/eip712.types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/eip712/order-typed-data-builder.js
var require_order_typed_data_builder = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/eip712/order-typed-data-builder.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLimitOrderV4Domain = exports.getDomainSeparator = exports.buildOrderTypedData = exports.getOrderHash = void 0;
    var ethers_1 = require_lib2();
    var domain_1 = require_domain();
    var constants_1 = require_constants2();
    function getOrderHash(data) {
      return ethers_1.ethers.TypedDataEncoder.hash(data.domain, { Order: data.types.Order }, data.message);
    }
    exports.getOrderHash = getOrderHash;
    function buildOrderTypedData(chainId, verifyingContract, name, version11, order) {
      return {
        primaryType: "Order",
        types: { EIP712Domain: domain_1.EIP712Domain, Order: domain_1.Order },
        domain: { name, version: version11, chainId, verifyingContract },
        message: order
      };
    }
    exports.buildOrderTypedData = buildOrderTypedData;
    function getDomainSeparator(name, version11, chainId, verifyingContract) {
      return ethers_1.ethers.TypedDataEncoder.hashStruct("EIP712Domain", { EIP712Domain: domain_1.EIP712Domain }, { name, version: version11, chainId, verifyingContract });
    }
    exports.getDomainSeparator = getDomainSeparator;
    function getLimitOrderV4Domain(chainId) {
      return {
        name: domain_1.LimitOrderV4TypeDataName,
        version: domain_1.LimitOrderV4TypeDataVersion,
        chainId,
        verifyingContract: (0, constants_1.getLimitOrderContract)(chainId)
      };
    }
    exports.getLimitOrderV4Domain = getLimitOrderV4Domain;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/eip712/index.js
var require_eip712 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/eip712/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_domain(), exports);
    __exportStar2(require_eip712_types(), exports);
    __exportStar2(require_order_typed_data_builder(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/bit-mask/bit-mask.js
var require_bit_mask = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/bit-mask/bit-mask.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BitMask = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var BitMask4 = class {
      /**
       * @example
       * const mask1 = new BitMask(0, 16) // for bits from [0, 16) => 0xffff
       * const mask2 = new BitMask(16, 32) // for bits from [16, 32) => 0xffff0000
       * const singleBit = new BitMask(10) // for 10th bit [10, 11)
       *
       * @param startBit bit position from the lowest bit, starts from zero, inclusive
       * @param endBit bit position from the lowest bit, starts from zero, exclusive. Must be bigger than `startBit`
       */
      constructor(startBit, endBit = startBit + 1n) {
        (0, assert_1.default)(startBit < endBit, "BitMask: startBit must be less than endBit");
        this.offset = startBit;
        this.mask = (1n << endBit - startBit) - 1n;
      }
      toString() {
        return "0x" + this.toBigInt().toString(16);
      }
      toBigInt() {
        return this.mask << this.offset;
      }
    };
    exports.BitMask = BitMask4;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/utils/zero-x-prefix.js
var require_zero_x_prefix = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/utils/zero-x-prefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add0x = exports.trim0x = void 0;
    function trim0x3(data) {
      if (data.startsWith("0x")) {
        return data.substring(2);
      }
      return data;
    }
    exports.trim0x = trim0x3;
    function add0x2(data) {
      if (data.includes("0x")) {
        return data;
      }
      return "0x" + data;
    }
    exports.add0x = add0x2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/utils/get-bytes-count.js
var require_get_bytes_count = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/utils/get-bytes-count.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBytesCount = void 0;
    var zero_x_prefix_1 = require_zero_x_prefix();
    function getBytesCount3(hex) {
      return BigInt((0, zero_x_prefix_1.trim0x)(hex).length / 2);
    }
    exports.getBytesCount = getBytesCount3;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/utils/as-bytes.js
var require_as_bytes = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/utils/as-bytes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.asBytes = void 0;
    function asBytes(val) {
      const hex = val.toString(16);
      if (hex.length % 2) {
        return "0x0" + hex;
      }
      return "0x" + hex;
    }
    exports.asBytes = asBytes;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/utils/index.js
var require_utils5 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/utils/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_zero_x_prefix(), exports);
    __exportStar2(require_get_bytes_count(), exports);
    __exportStar2(require_as_bytes(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/validations.js
var require_validations = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/validations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexBytes = exports.isHexString = void 0;
    var HEX_REGEX = /^(0x)[0-9a-f]+$/i;
    function isHexString4(val) {
      return HEX_REGEX.test(val.toLowerCase());
    }
    exports.isHexString = isHexString4;
    function isHexBytes4(val) {
      return isHexString4(val) && val.length % 2 === 0;
    }
    exports.isHexBytes = isHexBytes4;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/bn/bn.js
var require_bn = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/bn/bn.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BN = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var utils_1 = require_utils5();
    var validations_1 = require_validations();
    var BN5 = class _BN2 {
      constructor(value) {
        this.value = value;
      }
      static fromNumber(n2) {
        return new _BN2(BigInt(n2));
      }
      static fromHex(hex) {
        (0, assert_1.default)((0, validations_1.isHexString)(hex), "Invalid hex");
        return new _BN2(BigInt(hex));
      }
      /**
       * Add value
       */
      add(other) {
        return new _BN2(this.value + other.value);
      }
      /**
       * Subtract value
       */
      sub(other) {
        return new _BN2(this.value - other.value);
      }
      setBit(n2, value) {
        if (value) {
          return new _BN2(this.value | 1n << n2);
        }
        return new _BN2(this.value & ~(1n << n2));
      }
      getBit(n2) {
        return (this.value & 1n << n2) === 0n ? 0 : 1;
      }
      shiftLeft(n2) {
        return new _BN2(this.value << n2);
      }
      shiftRight(n2) {
        return new _BN2(this.value >> n2);
      }
      and(other) {
        const raw = typeof other === "bigint" ? other : other.value;
        return new _BN2(raw & this.value);
      }
      or(other) {
        const raw = typeof other === "bigint" ? other : other.value;
        return new _BN2(raw | this.value);
      }
      xor(other) {
        const raw = typeof other === "bigint" ? other : other.value;
        return new _BN2(raw ^ this.value);
      }
      isZero() {
        return this.value === 0n;
      }
      isOne() {
        return this.value === 1n;
      }
      /**
       * Return bits defined in `mask` as BN
       *
       * @example
       * const mask = new BitMask(4, 8) // bits 4,5,6,7
       * const bn = new BN(0x1234abcd)
       *
       * new BN(0x2).value === bn.getMask(mask)
       */
      getMask(mask2) {
        return this.shiftRight(mask2.offset).and(mask2.mask);
      }
      /**
       * Set bits defined in `mask` to `value`
       * if value is bigger than mask then error will be thrown
       */
      setMask(mask2, value) {
        const raw = typeof value === "bigint" ? value : value.value;
        (0, assert_1.default)(raw <= mask2.mask, `Value 0x${raw.toString(16)} to big for mask ${mask2}`);
        return new _BN2(this.clearMask(mask2).value | raw << mask2.offset);
      }
      /**
       * Set bits defined in `mask` to 0s
       */
      clearMask(mask2) {
        return new _BN2(this.value - (mask2.toBigInt() & this.value));
      }
      /**
       * Return 0x prefixed string with hex representation of BN, padded with '0s' if `padNum` specified
       */
      toHex(padNum = 0) {
        return (0, utils_1.add0x)(this.value.toString(16).padStart(padNum, "0"));
      }
      /**
       * Convert BN to Number
       *
       * Caution: value will be rounded for numbers > `Number.MAX_SAFE_INTEGER`
       */
      toNumber() {
        return Number(this.value);
      }
    };
    exports.BN = BN5;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/bytes-iter/bytes-iter.js
var require_bytes_iter = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/bytes-iter/bytes-iter.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesIter = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var validations_1 = require_validations();
    var utils_1 = require_utils5();
    var Side;
    (function(Side2) {
      Side2[Side2["Front"] = 0] = "Front";
      Side2[Side2["Back"] = 1] = "Back";
    })(Side || (Side = {}));
    var BytesIter = class _BytesIter {
      constructor(bytes3, ResultType) {
        this.ResultType = ResultType;
        (0, assert_1.default)((0, validations_1.isHexBytes)(bytes3), "invalid bytes value");
        this.bytes = bytes3.slice(2);
      }
      static BigInt(bytes3) {
        return new _BytesIter(bytes3, BigInt);
      }
      static String(bytes3) {
        return new _BytesIter(bytes3, String);
      }
      /**
       * Returns all not consumed bytes
       */
      rest() {
        return this.ResultType((0, utils_1.add0x)(this.bytes));
      }
      isEmpty() {
        return this.bytes.length === 0;
      }
      nextByte(side = Side.Front) {
        return this.nextBytes(1, side);
      }
      nextBytes(n2, side = Side.Front) {
        const cnt = n2 * 2;
        if (this.bytes.length < cnt) {
          throw new Error(`Can not consume ${n2} bytes, have only ${this.bytes.length / 2}`);
        }
        const isFront = side === Side.Front;
        const bytes3 = isFront ? this.bytes.slice(0, cnt) : this.bytes.slice(-cnt);
        this.bytes = isFront ? this.bytes.slice(cnt) : this.bytes.slice(0, -cnt);
        return this.ResultType((0, utils_1.add0x)(bytes3));
      }
      nextUint8(side = Side.Front) {
        return this.nextByte(side);
      }
      nextUint16(side = Side.Front) {
        return this.nextBytes(2, side);
      }
      nextUint24(side = Side.Front) {
        return this.nextBytes(3, side);
      }
      nextUint32(side = Side.Front) {
        return this.nextBytes(4, side);
      }
      nextUint128(side = Side.Front) {
        return this.nextBytes(16, side);
      }
      nextUint160(side = Side.Front) {
        return this.nextBytes(20, side);
      }
      nextUint256(side = Side.Front) {
        return this.nextBytes(32, side);
      }
    };
    exports.BytesIter = BytesIter;
    BytesIter.SIDE = Side;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/constants.js
var require_constants3 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UINT_256_MAX = exports.UINT_160_MAX = exports.UINT_80_MAX = exports.UINT_40_MAX = exports.UINT_32_MAX = exports.UINT_24_MAX = exports.UINT_8_MAX = void 0;
    exports.UINT_8_MAX = (1n << 8n) - 1n;
    exports.UINT_24_MAX = (1n << 24n) - 1n;
    exports.UINT_32_MAX = (1n << 32n) - 1n;
    exports.UINT_40_MAX = (1n << 40n) - 1n;
    exports.UINT_80_MAX = (1n << 80n) - 1n;
    exports.UINT_160_MAX = (1n << 160n) - 1n;
    exports.UINT_256_MAX = (1n << 256n) - 1n;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/bytes-builder/bytes-builder.js
var require_bytes_builder = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/bytes-builder/bytes-builder.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesBuilder = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var bn_1 = require_bn();
    var validations_1 = require_validations();
    var constants_1 = require_constants3();
    var utils_1 = require_utils5();
    var BytesBuilder = class {
      constructor(init) {
        if (init === void 0) {
          this.bytes = "0x";
          return;
        }
        if (typeof init === "string") {
          (0, assert_1.default)((0, validations_1.isHexBytes)(init), "Init bytes must be valid hex bytes");
          this.bytes = init;
        } else {
          const initBn = init instanceof bn_1.BN ? init : new bn_1.BN(init);
          this.bytes = initBn.toHex();
        }
      }
      /**
       * Returns current bytes count
       */
      get length() {
        return Number(this.bytes.length / 2 - 1);
      }
      addAddress(address) {
        if (typeof address === "string") {
          (0, assert_1.default)((0, validations_1.isHexBytes)(address) && address.length === 42, "Invalid address");
          this.append(address);
        } else {
          const addressBN = address instanceof bn_1.BN ? address : new bn_1.BN(address);
          (0, assert_1.default)(addressBN.value <= constants_1.UINT_160_MAX, "Invalid address: too big");
          this.append(addressBN.toHex(40));
        }
        return this;
      }
      addBytes(bytes3) {
        (0, assert_1.default)((0, validations_1.isHexBytes)(bytes3), "Invalid bytes");
        this.append(bytes3);
        return this;
      }
      addByte(byte) {
        return this.addNBytes(byte, 1);
      }
      addUint8(val) {
        return this.addNBytes(val, 1);
      }
      addUint16(val) {
        return this.addNBytes(val, 2);
      }
      addUint24(val) {
        return this.addNBytes(val, 3);
      }
      addUint32(val) {
        return this.addNBytes(val, 4);
      }
      addUint64(val) {
        return this.addNBytes(val, 8);
      }
      addUint128(val) {
        return this.addNBytes(val, 16);
      }
      addUint160(val) {
        return this.addNBytes(val, 20);
      }
      addUint256(val) {
        return this.addNBytes(val, 32);
      }
      /**
       * Returns bytes as single bigint value
       */
      asBigInt() {
        return BigInt(this.bytes);
      }
      /**
       * Returns hex string
       *
       * @param prefixed should be string prefixed with 0x or not, true by default
       */
      asHex(prefixed = true) {
        return prefixed ? this.bytes : this.bytes.slice(2);
      }
      append(bytes3) {
        this.bytes += (0, utils_1.trim0x)(bytes3);
      }
      addNBytes(bytes3, n2) {
        if (typeof bytes3 === "string") {
          (0, assert_1.default)((0, validations_1.isHexBytes)(bytes3), "Invalid value: not bytes hex string");
          (0, assert_1.default)(bytes3.length === 2 + n2 * 2, "Invalid value: bad length");
          this.append(bytes3);
        } else {
          const bytesBn = bytes3 instanceof bn_1.BN ? bytes3 : new bn_1.BN(bytes3);
          (0, assert_1.default)(bytesBn.value <= (1n << 8n * BigInt(n2)) - 1n, "Invalid value: too long");
          this.append(bytesBn.toHex(n2 * 2));
        }
        return this;
      }
    };
    exports.BytesBuilder = BytesBuilder;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/node_modules/@1inch/byte-utils/dist/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_bit_mask(), exports);
    __exportStar2(require_bn(), exports);
    __exportStar2(require_bytes_iter(), exports);
    __exportStar2(require_bytes_builder(), exports);
    __exportStar2(require_utils5(), exports);
    __exportStar2(require_validations(), exports);
    __exportStar2(require_constants3(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/maker-traits.js
var require_maker_traits = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/maker-traits.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MakerTraits = void 0;
    var byte_utils_1 = require_dist2();
    var assert_1 = __importDefault2(require_assert2());
    var MakerTraits4 = class _MakerTraits {
      constructor(val) {
        this.value = new byte_utils_1.BN(val);
      }
      static default() {
        return new _MakerTraits(0n);
      }
      /**
       * Last 10bytes of address
       */
      allowedSender() {
        return this.value.getMask(_MakerTraits.ALLOWED_SENDER_MASK).value.toString(16).padStart(20, "0");
      }
      isPrivate() {
        return this.value.getMask(_MakerTraits.ALLOWED_SENDER_MASK).value !== 0n;
      }
      withAllowedSender(sender) {
        (0, assert_1.default)(!sender.isZero(), "Use withAnySender() to remove sender check");
        const lastHalf = (0, byte_utils_1.add0x)(sender.toString().slice(-20));
        this.value = this.value.setMask(_MakerTraits.ALLOWED_SENDER_MASK, BigInt(lastHalf));
        return this;
      }
      /**
       * Removes `sender` check on contract
       */
      withAnySender() {
        this.value = this.value.setMask(_MakerTraits.ALLOWED_SENDER_MASK, BigInt(0));
        return this;
      }
      /**
       * If null is return than order has no expiration
       */
      expiration() {
        const timestampSec = this.value.getMask(_MakerTraits.EXPIRATION_MASK);
        if (timestampSec.isZero()) {
          return null;
        }
        return timestampSec.value;
      }
      /**
       * Set order expiration time
       *
       * @param expiration expiration timestamp in sec
       */
      withExpiration(expiration) {
        const expirationSec = expiration === null ? 0n : expiration;
        this.value = this.value.setMask(_MakerTraits.EXPIRATION_MASK, expirationSec);
        return this;
      }
      /**
       * Returns epoch in case `isEpochManagerEnabled()` and nonce otherwise
       */
      nonceOrEpoch() {
        return this.value.getMask(_MakerTraits.NONCE_OR_EPOCH_MASK).value;
      }
      /**
       * Set nonce
       * Note: nonce and epoch share the same field, so they cant be set together
       */
      withNonce(nonce) {
        this.value = this.value.setMask(_MakerTraits.NONCE_OR_EPOCH_MASK, nonce);
        return this;
      }
      /**
       * Enable epoch manager check
       *
       * If set, the contract will check that order epoch equals to epoch on `SeriesEpochManager` contract
       * Note: epoch manager can be used only when `partialFills` AND `multipleFills` allowed
       * Note: nonce and epoch share the same field, so they cant be set together
       *
       * @param series subgroup for epoch
       * @param epoch unique order id inside series
       * @see https://github.com/1inch/limit-order-protocol/blob/23d655844191dea7960a186652307604a1ed480a/contracts/helpers/SeriesEpochManager.sol#L6
       */
      withEpoch(series, epoch) {
        this.setSeries(series);
        this.enableEpochManagerCheck();
        return this.withNonce(epoch);
      }
      /**
       * Get current series
       */
      series() {
        return this.value.getMask(_MakerTraits.SERIES_MASK).value;
      }
      /**
       * Returns true if order has an extension and false otherwise
       */
      hasExtension() {
        return this.value.getBit(_MakerTraits.HAS_EXTENSION_FLAG) === 1;
      }
      /**
       * Mark that order has an extension
       */
      withExtension() {
        this.value = this.value.setBit(_MakerTraits.HAS_EXTENSION_FLAG, 1);
        return this;
      }
      /**
       * Is partial fills allowed for order
       */
      isPartialFillAllowed() {
        return this.value.getBit(_MakerTraits.NO_PARTIAL_FILLS_FLAG) === 0;
      }
      /**
       * Disable partial fills for order
       */
      disablePartialFills() {
        this.value = this.value.setBit(_MakerTraits.NO_PARTIAL_FILLS_FLAG, 1);
        return this;
      }
      /**
       * Allow partial fills for order
       */
      allowPartialFills() {
        this.value = this.value.setBit(_MakerTraits.NO_PARTIAL_FILLS_FLAG, 0);
        return this;
      }
      /**
       * Set partial fill flag to passed value
       */
      setPartialFills(val) {
        return val ? this.allowPartialFills() : this.disablePartialFills();
      }
      /**
       * Returns true if order allowing more than one fill and false otherwise
       */
      isMultipleFillsAllowed() {
        return this.value.getBit(_MakerTraits.ALLOW_MULTIPLE_FILLS_FLAG) === 1;
      }
      /**
       * Allow many fills for order
       */
      allowMultipleFills() {
        this.value = this.value.setBit(_MakerTraits.ALLOW_MULTIPLE_FILLS_FLAG, 1);
        return this;
      }
      /**
       * Allow at max 1 fill for order
       */
      disableMultipleFills() {
        this.value = this.value.setBit(_MakerTraits.ALLOW_MULTIPLE_FILLS_FLAG, 0);
        return this;
      }
      /**
       * If `val` is true, then multiple fills allowed, otherwise disallowed
       */
      setMultipleFills(val) {
        return val ? this.allowMultipleFills() : this.disableMultipleFills();
      }
      /**
       * Returns true if maker has pre-interaction and false otherwise
       */
      hasPreInteraction() {
        return this.value.getBit(_MakerTraits.PRE_INTERACTION_CALL_FLAG) === 1;
      }
      /**
       * Enable maker pre-interaction
       */
      enablePreInteraction() {
        this.value = this.value.setBit(_MakerTraits.PRE_INTERACTION_CALL_FLAG, 1);
        return this;
      }
      /**
       * Disable maker pre-interaction
       */
      disablePreInteraction() {
        this.value = this.value.setBit(_MakerTraits.PRE_INTERACTION_CALL_FLAG, 0);
        return this;
      }
      /**
       * Returns true if maker has post-interaction and false otherwise
       */
      hasPostInteraction() {
        return this.value.getBit(_MakerTraits.POST_INTERACTION_CALL_FLAG) === 1;
      }
      /**
       * Enable maker post-interaction
       */
      enablePostInteraction() {
        this.value = this.value.setBit(_MakerTraits.POST_INTERACTION_CALL_FLAG, 1);
        return this;
      }
      /**
       * Disable maker post-interaction
       */
      disablePostInteraction() {
        this.value = this.value.setBit(_MakerTraits.POST_INTERACTION_CALL_FLAG, 0);
        return this;
      }
      /**
       * Returns true if epoch manager enabled
       *
       * @see MakerTraits.enableEpochManagerCheck
       */
      isEpochManagerEnabled() {
        return this.value.getBit(_MakerTraits.NEED_CHECK_EPOCH_MANAGER_FLAG) === 1;
      }
      /**
       * Returns true if `permit2` enabled for maker funds transfer
       *
       * @see https://github.com/Uniswap/permit2
       */
      isPermit2() {
        return this.value.getBit(_MakerTraits.USE_PERMIT2_FLAG) === 1;
      }
      /**
       * Use `permit2` to transfer maker funds to contract
       *
       * @see https://github.com/Uniswap/permit2
       */
      enablePermit2() {
        this.value = this.value.setBit(_MakerTraits.USE_PERMIT2_FLAG, 1);
        return this;
      }
      /**
       * Do not use `permit2` to transfer maker funds to contract
       *
       * @see https://github.com/Uniswap/permit2
       */
      disablePermit2() {
        this.value = this.value.setBit(_MakerTraits.USE_PERMIT2_FLAG, 0);
        return this;
      }
      /**
       * Is WRAPPED token will be unwrapped to NATIVE before sending to maker
       */
      isNativeUnwrapEnabled() {
        return this.value.getBit(_MakerTraits.UNWRAP_WETH_FLAG) === 1;
      }
      /**
       * Unwrap WRAPPED token to NATIVE before sending it to maker
       */
      enableNativeUnwrap() {
        this.value = this.value.setBit(_MakerTraits.UNWRAP_WETH_FLAG, 1);
        return this;
      }
      /**
       * Do not unwrap WRAPPED token to NATIVE before sending it to maker
       */
      disableNativeUnwrap() {
        this.value = this.value.setBit(_MakerTraits.UNWRAP_WETH_FLAG, 0);
        return this;
      }
      asBigInt() {
        return this.value.value;
      }
      /**
       * Returns true if bit invalidator mode is used to invalidate order (cancel/mark as filled)
       *
       * Bit invalidator is cheaper in terms of gas, but can be used only when partial fills OR multiple fills are disabled
       *
       * @see https://github.com/1inch/limit-order-protocol/blob/3c9b8ab8bbc4c10ff8d615fc3d33f501993c292d/contracts/libraries/MakerTraitsLib.sol#L142
       */
      isBitInvalidatorMode() {
        return !this.isPartialFillAllowed() || !this.isMultipleFillsAllowed();
      }
      enableEpochManagerCheck() {
        (0, assert_1.default)(!this.isBitInvalidatorMode(), "Epoch manager allowed only when partialFills and multipleFills enabled");
        this.value = this.value.setBit(_MakerTraits.NEED_CHECK_EPOCH_MANAGER_FLAG, 1);
      }
      /**
       * Set series. Only when epoch manager enabled
       * Series is a subgroup for epoch's, it can be useful when you want to cancel a group of orders at once
       *
       * @see MakerTraits.enableEpochManagerCheck
       */
      setSeries(series) {
        this.value = this.value.setMask(_MakerTraits.SERIES_MASK, series);
      }
    };
    exports.MakerTraits = MakerTraits4;
    MakerTraits4.ALLOWED_SENDER_MASK = new byte_utils_1.BitMask(0n, 80n);
    MakerTraits4.EXPIRATION_MASK = new byte_utils_1.BitMask(80n, 120n);
    MakerTraits4.NONCE_OR_EPOCH_MASK = new byte_utils_1.BitMask(120n, 160n);
    MakerTraits4.SERIES_MASK = new byte_utils_1.BitMask(160n, 200n);
    MakerTraits4.NO_PARTIAL_FILLS_FLAG = 255n;
    MakerTraits4.ALLOW_MULTIPLE_FILLS_FLAG = 254n;
    MakerTraits4.PRE_INTERACTION_CALL_FLAG = 252n;
    MakerTraits4.POST_INTERACTION_CALL_FLAG = 251n;
    MakerTraits4.NEED_CHECK_EPOCH_MANAGER_FLAG = 250n;
    MakerTraits4.HAS_EXTENSION_FLAG = 249n;
    MakerTraits4.USE_PERMIT2_FLAG = 248n;
    MakerTraits4.UNWRAP_WETH_FLAG = 247n;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/extension.js
var require_extension = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/extension.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Extension = void 0;
    var ethers_1 = require_lib2();
    var byte_utils_1 = require_dist2();
    var assert_1 = __importDefault2(require_assert2());
    var constants_1 = require_constants2();
    var Extension3 = class _Extension {
      constructor(data = {
        makerAssetSuffix: constants_1.ZX,
        takerAssetSuffix: constants_1.ZX,
        makingAmountData: constants_1.ZX,
        takingAmountData: constants_1.ZX,
        predicate: constants_1.ZX,
        makerPermit: constants_1.ZX,
        preInteraction: constants_1.ZX,
        postInteraction: constants_1.ZX,
        customData: constants_1.ZX
      }) {
        this.makerAssetSuffix = constants_1.ZX;
        this.takerAssetSuffix = constants_1.ZX;
        this.makingAmountData = constants_1.ZX;
        this.takingAmountData = constants_1.ZX;
        this.predicate = constants_1.ZX;
        this.makerPermit = constants_1.ZX;
        this.preInteraction = constants_1.ZX;
        this.postInteraction = constants_1.ZX;
        this.customData = constants_1.ZX;
        Object.entries(data).forEach(([key, val]) => (0, assert_1.default)((0, byte_utils_1.isHexString)(val) || val === constants_1.ZX, `${key} must be valid hex string`));
        this.makerAssetSuffix = data.makerAssetSuffix;
        this.takerAssetSuffix = data.takerAssetSuffix;
        this.makingAmountData = data.makingAmountData;
        this.takingAmountData = data.takingAmountData;
        this.predicate = data.predicate;
        this.makerPermit = data.makerPermit;
        this.preInteraction = data.preInteraction;
        this.postInteraction = data.postInteraction;
        this.customData = data.customData;
      }
      get hasPredicate() {
        return this.predicate !== constants_1.ZX;
      }
      get hasMakerPermit() {
        return this.makerPermit !== constants_1.ZX;
      }
      static decode(bytes3) {
        if (bytes3 === constants_1.ZX) {
          return _Extension.default();
        }
        const iter = byte_utils_1.BytesIter.String(bytes3);
        let offsets = BigInt(iter.nextUint256());
        let consumed = 0;
        const data = {};
        for (const field of _Extension.fields) {
          const offset = Number(offsets & byte_utils_1.UINT_32_MAX);
          const bytesCount = offset - consumed;
          data[field] = iter.nextBytes(bytesCount);
          consumed += bytesCount;
          offsets = offsets >> 32n;
        }
        data.customData = iter.rest();
        return new _Extension(data);
      }
      static default() {
        return new _Extension();
      }
      keccak256() {
        return BigInt((0, ethers_1.keccak256)(this.encode()));
      }
      isEmpty() {
        const allInteractions = this.getAll();
        const allInteractionsConcat = allInteractions.map(byte_utils_1.trim0x).join("") + (0, byte_utils_1.trim0x)(this.customData);
        return allInteractionsConcat.length === 0;
      }
      /**
       * Hex string with 0x
       */
      encode() {
        const allInteractions = this.getAll();
        const allInteractionsConcat = allInteractions.map(byte_utils_1.trim0x).join("") + (0, byte_utils_1.trim0x)(this.customData);
        const cumulativeSum = /* @__PURE__ */ ((sum) => (value) => {
          sum += value;
          return sum;
        })(0);
        const offsets = allInteractions.map((a) => a.length / 2 - 1).map(cumulativeSum).reduce((acc, a, i) => acc + (BigInt(a) << BigInt(32 * i)), 0n);
        let extension = "0x";
        if (allInteractionsConcat.length > 0) {
          extension += offsets.toString(16).padStart(64, "0") + allInteractionsConcat;
        }
        return extension;
      }
      getAll() {
        return _Extension.fields.map((f2) => this[f2]);
      }
    };
    exports.Extension = Extension3;
    Extension3.fields = [
      "makerAssetSuffix",
      "takerAssetSuffix",
      "makingAmountData",
      "takingAmountData",
      "predicate",
      "makerPermit",
      "preInteraction",
      "postInteraction"
    ];
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/address.js
var require_address5 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/address.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Address = void 0;
    var ethers_1 = require_lib2();
    var byte_utils_1 = require_dist2();
    var assert_1 = __importDefault2(require_assert2());
    var Address11 = class _Address {
      constructor(val) {
        (0, assert_1.default)((0, ethers_1.isAddress)(val), `Invalid address ${val}`);
        this.val = val.toLowerCase();
      }
      static fromBigInt(val) {
        return new _Address((0, byte_utils_1.add0x)(val.toString(16).padStart(40, "0")));
      }
      static fromFirstBytes(bytes3) {
        return new _Address(bytes3.slice(0, 42));
      }
      toString() {
        return this.val;
      }
      equal(other) {
        return this.val === other.val;
      }
      isNative() {
        return this.equal(_Address.NATIVE_CURRENCY);
      }
      isZero() {
        return this.equal(_Address.ZERO_ADDRESS);
      }
    };
    exports.Address = Address11;
    Address11.NATIVE_CURRENCY = new Address11("0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee");
    Address11.ZERO_ADDRESS = new Address11("0x0000000000000000000000000000000000000000");
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/utils/rand-bigint.js
var require_rand_bigint = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/utils/rand-bigint.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.randBigInt = void 0;
    var ethers_1 = require_lib2();
    function randBigInt3(max) {
      let bytesCount = 0;
      max = BigInt(max) + 1n;
      let rest = max;
      while (rest) {
        rest = rest >> 8n;
        bytesCount += 1;
      }
      const bytes3 = (0, ethers_1.randomBytes)(bytesCount);
      const val = bytes3.reduce((acc, val2, i) => acc + (BigInt(val2) << BigInt(i * 8)), 0n);
      return val % max;
    }
    exports.randBigInt = randBigInt3;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/limit-order.js
var require_limit_order = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/limit-order.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LimitOrder = void 0;
    var ethers_1 = require_lib2();
    var byte_utils_1 = require_dist2();
    var assert_1 = __importDefault2(require_assert2());
    var eip712_1 = require_eip712();
    var maker_traits_1 = require_maker_traits();
    var extension_1 = require_extension();
    var address_1 = require_address5();
    var rand_bigint_1 = require_rand_bigint();
    var LimitOrder = class _LimitOrder {
      constructor(orderInfo, makerTraits = new maker_traits_1.MakerTraits(0n), extension = extension_1.Extension.default()) {
        var _a2;
        this.extension = extension;
        (0, assert_1.default)(
          !orderInfo.takerAsset.isNative(),
          // eslint-disable-next-line max-len
          `${orderInfo.takerAsset} can not be 'takerAsset'. Use wrapper address as 'takerAsset' and 'makerTraits.enableNativeUnwrap' to swap to NATIVE currency`
        );
        (0, assert_1.default)(!orderInfo.makerAsset.isNative(), "Maker asset can not be NATIVE, use wrapper");
        this.makerAsset = orderInfo.makerAsset;
        this.takerAsset = orderInfo.takerAsset;
        this.makingAmount = orderInfo.makingAmount;
        this.takingAmount = orderInfo.takingAmount;
        this.salt = _LimitOrder.verifySalt(orderInfo.salt || _LimitOrder.buildSalt(extension), extension);
        this.maker = orderInfo.maker;
        this.receiver = ((_a2 = orderInfo.receiver) == null ? void 0 : _a2.equal(orderInfo.maker)) ? address_1.Address.ZERO_ADDRESS : orderInfo.receiver || address_1.Address.ZERO_ADDRESS;
        this.makerTraits = makerTraits;
        (0, assert_1.default)(this.makingAmount <= byte_utils_1.UINT_256_MAX, "makingAmount too big");
        (0, assert_1.default)(this.takingAmount <= byte_utils_1.UINT_256_MAX, "takingAmount too big");
        if (!extension.isEmpty()) {
          this.makerTraits.withExtension();
        }
      }
      /**
       * Build correct salt for order
       *
       * If order has extension - it is crucial to build correct salt
       * otherwise order won't be ever filled
       *
       * @see https://github.com/1inch/limit-order-protocol/blob/7bc5129ae19832338169ca21e4cf6331e8ff44f6/contracts/OrderLib.sol#L153
       *
       */
      static buildSalt(extension, baseSalt = (0, rand_bigint_1.randBigInt)((1n << 96n) - 1n)) {
        if (extension.isEmpty()) {
          return baseSalt;
        }
        return baseSalt << 160n | extension.keccak256() & byte_utils_1.UINT_160_MAX;
      }
      static verifySalt(salt, extension) {
        (0, assert_1.default)(salt <= byte_utils_1.UINT_256_MAX, "salt too big");
        if (extension.isEmpty()) {
          return salt;
        }
        const hash2 = salt & byte_utils_1.UINT_160_MAX;
        const expectedHash = extension.keccak256() & byte_utils_1.UINT_160_MAX;
        (0, assert_1.default)(hash2 === expectedHash, "invalid salt: lowest 160 bits should be extension hash");
        return salt;
      }
      static fromCalldata(bytes3) {
        (0, assert_1.default)((0, byte_utils_1.isHexString)(bytes3), "Bytes should be valid hex string with 0x prefix");
        const info = ethers_1.AbiCoder.defaultAbiCoder().decode([_LimitOrder.Web3Type], bytes3);
        const order = info[0];
        return new _LimitOrder({
          salt: order.salt ? BigInt(order.salt) : void 0,
          maker: new address_1.Address(order.maker),
          receiver: new address_1.Address(order.receiver),
          takingAmount: BigInt(order.takingAmount),
          makingAmount: BigInt(order.makingAmount),
          takerAsset: new address_1.Address(order.takerAsset),
          makerAsset: new address_1.Address(order.makerAsset)
        }, new maker_traits_1.MakerTraits(BigInt(order.makerTraits)));
      }
      static fromDataAndExtension(data, extension) {
        return new _LimitOrder({
          salt: BigInt(data.salt),
          maker: new address_1.Address(data.maker),
          receiver: new address_1.Address(data.receiver),
          takingAmount: BigInt(data.takingAmount),
          makingAmount: BigInt(data.makingAmount),
          takerAsset: new address_1.Address(data.takerAsset),
          makerAsset: new address_1.Address(data.makerAsset)
        }, new maker_traits_1.MakerTraits(BigInt(data.makerTraits)), extension);
      }
      toCalldata() {
        return ethers_1.AbiCoder.defaultAbiCoder().encode([_LimitOrder.Web3Type], [this.build()]);
      }
      build() {
        var _a2;
        return {
          maker: this.maker.toString(),
          makerAsset: this.makerAsset.toString(),
          takerAsset: this.takerAsset.toString(),
          makerTraits: (((_a2 = this.makerTraits) == null ? void 0 : _a2.asBigInt()) || 0n).toString(),
          salt: this.salt.toString(),
          makingAmount: this.makingAmount.toString(),
          takingAmount: this.takingAmount.toString(),
          receiver: this.receiver.toString()
        };
      }
      getTypedData(chainId) {
        const domain = (0, eip712_1.getLimitOrderV4Domain)(chainId);
        return (0, eip712_1.buildOrderTypedData)(domain.chainId, domain.verifyingContract, domain.name, domain.version, this.build());
      }
      getOrderHash(chainId) {
        return (0, eip712_1.getOrderHash)(this.getTypedData(chainId));
      }
      /**
       * Returns true if only a specific address can fill order
       */
      isPrivate() {
        return this.makerTraits.isPrivate();
      }
    };
    exports.LimitOrder = LimitOrder;
    LimitOrder.Web3Type = `tuple(${[
      "uint256 salt",
      "address maker",
      "address receiver",
      "address makerAsset",
      "address takerAsset",
      "uint256 makingAmount",
      "uint256 takingAmount",
      "uint256 makerTraits"
    ]})`;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/taker-traits.js
var require_taker_traits = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/taker-traits.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TakerTraits = exports.AmountMode = void 0;
    var byte_utils_1 = require_dist2();
    var constants_1 = require_constants2();
    var AmountMode2;
    (function(AmountMode3) {
      AmountMode3[AmountMode3["taker"] = 0] = "taker";
      AmountMode3[AmountMode3["maker"] = 1] = "maker";
    })(AmountMode2 = exports.AmountMode || (exports.AmountMode = {}));
    var TakerTraits2 = class _TakerTraits {
      constructor(flag, data) {
        this.flags = new byte_utils_1.BN(flag);
        this.receiver = data.receiver;
        this.extension = data.extension;
        this.interaction = data.interaction;
      }
      static default() {
        return new _TakerTraits(0n, {});
      }
      /**
       * Returns enabled amount mode, it defines how to treat passed amount in `fillContractOrderArgs` function
       *
       * @see AmountMode
       */
      getAmountMode() {
        return this.flags.getBit(_TakerTraits.MAKER_AMOUNT_FLAG);
      }
      setAmountMode(mode) {
        this.flags = this.flags.setBit(_TakerTraits.MAKER_AMOUNT_FLAG, mode);
        return this;
      }
      /**
       * Is the Wrapped native currency will be unwrapped into Native currency before sending to taker
       */
      isNativeUnwrapEnabled() {
        return this.flags.getBit(_TakerTraits.UNWRAP_WETH_FLAG) === 1;
      }
      /**
       * Wrapped native currency will be unwrapped into Native currency before sending to taker
       */
      enableNativeUnwrap() {
        this.flags = this.flags.setBit(_TakerTraits.UNWRAP_WETH_FLAG, 1);
        return this;
      }
      /**
       * Wrapped native currency will NOT be unwrapped into Native currency before sending to taker
       */
      disableNativeUnwrap() {
        this.flags = this.flags.setBit(_TakerTraits.UNWRAP_WETH_FLAG, 0);
        return this;
      }
      /**
       * If true, then maker's permit execution is skipped
       */
      isOrderPermitSkipped() {
        return Boolean(this.flags.getBit(_TakerTraits.SKIP_ORDER_PERMIT_FLAG));
      }
      /**
       * The order skips maker's permit execution
       */
      skipOrderPermit() {
        this.flags = this.flags.setBit(_TakerTraits.SKIP_ORDER_PERMIT_FLAG, 1);
        return this;
      }
      /**
       * Should use permit2 function for authorization or not
       *
       * @see https://github.com/Uniswap/permit2
       */
      isPermit2Enabled() {
        return this.flags.getBit(_TakerTraits.USE_PERMIT2_FLAG) === 1;
      }
      /**
       * Use permit2 function for authorization
       *
       * @see https://github.com/Uniswap/permit2
       */
      enablePermit2() {
        this.flags = this.flags.setBit(_TakerTraits.USE_PERMIT2_FLAG, 1);
        return this;
      }
      /**
       * NOT use permit2 function for authorization
       */
      disablePermit2() {
        this.flags = this.flags.setBit(_TakerTraits.USE_PERMIT2_FLAG, 0);
        return this;
      }
      /**
       * Sets address where order filled to, `msg.sender` used if not set
       *
       * @param receiver
       */
      setReceiver(receiver) {
        this.receiver = receiver;
        return this;
      }
      /**
       * Set order receiver as `msg.sender`
       */
      removeReceiver() {
        this.receiver = void 0;
        return this;
      }
      /**
       * Sets extension, it is required to provide same extension as in order creation (if any)
       */
      setExtension(ext) {
        this.extension = ext;
        return this;
      }
      removeExtension() {
        this.extension = void 0;
        return this;
      }
      /**
       * Set threshold amount
       *
       * In taker amount mode: the minimum amount a taker agrees to receive in exchange for a taking amount.
       * In maker amount mode: the maximum amount a taker agrees to give in exchange for a making amount.
       *
       * @see AmountMode
       */
      setAmountThreshold(threshold) {
        this.flags = this.flags.setMask(_TakerTraits.THRESHOLD_MASK, threshold);
        return this;
      }
      /**
       * @see setAmountThreshold
       */
      removeAmountThreshold() {
        this.flags = this.flags.setMask(_TakerTraits.THRESHOLD_MASK, 0n);
        return this;
      }
      /**
       * Sets taker interaction
       *
       * `interaction.target` should implement `ITakerInteraction` interface
       *
       * @see https://github.com/1inch/limit-order-protocol/blob/1a32e059f78ddcf1fe6294baed6cafb73a04b685/contracts/interfaces/ITakerInteraction.sol#L11
       */
      setInteraction(interaction) {
        this.interaction = interaction;
        return this;
      }
      removeInteraction() {
        this.interaction = void 0;
        return this;
      }
      encode() {
        var _a2, _b, _c;
        const extensionLen = this.extension ? (0, byte_utils_1.getBytesCount)(this.extension.encode()) : 0n;
        const interactionLen = this.interaction ? (0, byte_utils_1.getBytesCount)(this.interaction.encode()) : 0n;
        const flags = this.flags.setBit(_TakerTraits.ARGS_HAS_RECEIVER, this.receiver ? 1 : 0).setMask(_TakerTraits.ARGS_EXTENSION_LENGTH_MASK, extensionLen).setMask(_TakerTraits.ARGS_INTERACTION_LENGTH_MASK, interactionLen);
        const args = (((_a2 = this.receiver) == null ? void 0 : _a2.toString()) || constants_1.ZX) + (0, byte_utils_1.trim0x)(((_b = this.extension) == null ? void 0 : _b.encode()) || "") + (0, byte_utils_1.trim0x)(((_c = this.interaction) == null ? void 0 : _c.encode()) || "");
        return {
          trait: flags.value,
          args
        };
      }
    };
    exports.TakerTraits = TakerTraits2;
    TakerTraits2.MAKER_AMOUNT_FLAG = 255n;
    TakerTraits2.UNWRAP_WETH_FLAG = 254n;
    TakerTraits2.SKIP_ORDER_PERMIT_FLAG = 253n;
    TakerTraits2.USE_PERMIT2_FLAG = 252n;
    TakerTraits2.ARGS_HAS_RECEIVER = 251n;
    TakerTraits2.THRESHOLD_MASK = new byte_utils_1.BitMask(0n, 185n);
    TakerTraits2.ARGS_INTERACTION_LENGTH_MASK = new byte_utils_1.BitMask(200n, 224n);
    TakerTraits2.ARGS_EXTENSION_LENGTH_MASK = new byte_utils_1.BitMask(224n, 248n);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/extension-builder.js
var require_extension_builder = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/extension-builder.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ExtensionBuilder = void 0;
    var byte_utils_1 = require_dist2();
    var assert_1 = __importDefault2(require_assert2());
    var extension_1 = require_extension();
    var constants_1 = require_constants2();
    var ExtensionBuilder = class {
      constructor() {
        this.makerAssetSuffix = constants_1.ZX;
        this.takerAssetSuffix = constants_1.ZX;
        this.makingAmountData = constants_1.ZX;
        this.takingAmountData = constants_1.ZX;
        this.predicate = constants_1.ZX;
        this.makerPermit = constants_1.ZX;
        this.preInteraction = constants_1.ZX;
        this.postInteraction = constants_1.ZX;
        this.customData = constants_1.ZX;
      }
      withMakerAssetSuffix(suffix) {
        (0, assert_1.default)((0, byte_utils_1.isHexString)(suffix), "MakerAssetSuffix must be valid hex string");
        this.makerAssetSuffix = suffix;
        return this;
      }
      withTakerAssetSuffix(suffix) {
        (0, assert_1.default)((0, byte_utils_1.isHexString)(suffix), "TakerAssetSuffix must be valid hex string");
        this.takerAssetSuffix = suffix;
        return this;
      }
      /**
       *
       * @param address Address of contract which will be called with `data` to calculate making amount
       * @param data
       */
      withMakingAmountData(address, data) {
        (0, assert_1.default)((0, byte_utils_1.isHexString)(data), "MakingAmountData must be valid hex string");
        this.makingAmountData = address.toString() + (0, byte_utils_1.trim0x)(data);
        return this;
      }
      /**
       *
       * @param address Address of contract which will be called with `data` to calculate taking amount
       * @param data
       */
      withTakingAmountData(address, data) {
        (0, assert_1.default)((0, byte_utils_1.isHexString)(data), "TakingAmountData must be valid hex string");
        this.takingAmountData = address.toString() + (0, byte_utils_1.trim0x)(data);
        return this;
      }
      withPredicate(predicate) {
        (0, assert_1.default)((0, byte_utils_1.isHexString)(predicate), "Predicate must be valid hex string");
        this.predicate = predicate;
        return this;
      }
      withMakerPermit(tokenFrom, permitData) {
        (0, assert_1.default)((0, byte_utils_1.isHexString)(permitData), "Permit data must be valid hex string");
        this.makerPermit = tokenFrom.toString() + (0, byte_utils_1.trim0x)(permitData);
        return this;
      }
      withPreInteraction(interaction) {
        this.preInteraction = interaction.encode();
        return this;
      }
      withPostInteraction(interaction) {
        this.postInteraction = interaction.encode();
        return this;
      }
      withCustomData(data) {
        (0, assert_1.default)((0, byte_utils_1.isHexString)(data), "Custom data must be valid hex string");
        this.customData = data;
        return this;
      }
      build() {
        return new extension_1.Extension({
          makerAssetSuffix: this.makerAssetSuffix,
          takerAssetSuffix: this.takerAssetSuffix,
          makingAmountData: this.makingAmountData,
          takingAmountData: this.takingAmountData,
          predicate: this.predicate,
          makerPermit: this.makerPermit,
          preInteraction: this.preInteraction,
          postInteraction: this.postInteraction,
          customData: this.customData
        });
      }
    };
    exports.ExtensionBuilder = ExtensionBuilder;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/interaction.js
var require_interaction = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/interaction.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Interaction = void 0;
    var byte_utils_1 = require_dist2();
    var assert_1 = __importDefault2(require_assert2());
    var address_1 = require_address5();
    var Interaction4 = class _Interaction {
      constructor(target, data) {
        this.target = target;
        this.data = data;
        (0, assert_1.default)((0, byte_utils_1.isHexBytes)(data), "Interaction data must be valid hex bytes");
      }
      /**
       * Create `Interaction` from bytes
       *
       * @param bytes Hex string with 0x. First 20 bytes are target, then data
       */
      static decode(bytes3) {
        const iter = byte_utils_1.BytesIter.String(bytes3);
        return new _Interaction(new address_1.Address(iter.nextUint160()), iter.rest());
      }
      /**
       * Hex string with 0x. First 20 bytes are target, then data
       */
      encode() {
        return this.target.toString() + (0, byte_utils_1.trim0x)(this.data);
      }
    };
    exports.Interaction = Interaction4;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/types.js
var require_types2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/amounts.js
var require_amounts = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/amounts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calcMakingAmount = exports.calcTakingAmount = void 0;
    function calcTakingAmount2(swapMakerAmount, orderMakerAmount, orderTakerAmount) {
      return (swapMakerAmount * orderTakerAmount + orderMakerAmount - 1n) / orderMakerAmount;
    }
    exports.calcTakingAmount = calcTakingAmount2;
    function calcMakingAmount2(swapTakerAmount, orderMakerAmount, orderTakerAmount) {
      return swapTakerAmount * orderMakerAmount / orderTakerAmount;
    }
    exports.calcMakingAmount = calcMakingAmount2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/index.js
var require_limit_order2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/limit-order/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_eip712(), exports);
    __exportStar2(require_limit_order(), exports);
    __exportStar2(require_maker_traits(), exports);
    __exportStar2(require_taker_traits(), exports);
    __exportStar2(require_extension(), exports);
    __exportStar2(require_extension_builder(), exports);
    __exportStar2(require_interaction(), exports);
    __exportStar2(require_types2(), exports);
    __exportStar2(require_amounts(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/rfq-order/rfq-order.js
var require_rfq_order = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/rfq-order/rfq-order.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RfqOrder = void 0;
    var limit_order_1 = require_limit_order2();
    var RfqOrder = class extends limit_order_1.LimitOrder {
      constructor(orderInfo, options) {
        const { allowedSender, nonce, expiration, usePermit2 } = options;
        const makerTraits = new limit_order_1.MakerTraits(0n).disableMultipleFills().allowPartialFills().withExpiration(expiration).withNonce(nonce);
        if (allowedSender) {
          makerTraits.withAllowedSender(allowedSender);
        }
        if (usePermit2) {
          makerTraits.enablePermit2();
        }
        super(orderInfo, makerTraits);
      }
    };
    exports.RfqOrder = RfqOrder;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/rfq-order/index.js
var require_rfq_order2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/rfq-order/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_rfq_order(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/constants.js
var require_constants4 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEV_PORTAL_LIMIT_ORDER_BASE_URL = void 0;
    exports.DEV_PORTAL_LIMIT_ORDER_BASE_URL = "https://api.1inch.dev/orderbook/v4.0";
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/api.js
var require_api = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Api = void 0;
    var constants_1 = require_constants4();
    var Api = class {
      constructor(config) {
        this.baseUrl = config.baseUrl || constants_1.DEV_PORTAL_LIMIT_ORDER_BASE_URL;
        this.networkId = config.networkId;
        this.httpClient = config.httpConnector;
        this.authHeader = `Bearer ${config.authKey}`;
      }
      /**
       * Submit order to orderbook
       * @param order
       * @param signature
       */
      async submitOrder(order, signature) {
        await this.httpClient.post(this.url("/"), {
          orderHash: order.getOrderHash(this.networkId),
          signature,
          data: {
            ...order.build(),
            extension: order.extension.encode()
          }
        }, this.headers());
      }
      /**
       * Fetch orders created by `maker`
       */
      async getOrdersByMaker(maker, filters, sort) {
        var _a2, _b, _c, _d, _e;
        const params = {
          limit: (_a2 = filters == null ? void 0 : filters.pager) == null ? void 0 : _a2.limit.toString(),
          page: (_b = filters == null ? void 0 : filters.pager) == null ? void 0 : _b.page.toString(),
          statuses: (_c = filters == null ? void 0 : filters.statuses) == null ? void 0 : _c.join(","),
          makerAsset: (_d = filters == null ? void 0 : filters.makerAsset) == null ? void 0 : _d.toString(),
          takerAsset: (_e = filters == null ? void 0 : filters.takerAsset) == null ? void 0 : _e.toString(),
          sortBy: sort
        };
        return this.httpClient.get(this.url(`/address/${maker}`, params), this.headers());
      }
      /**
       * Get limit order by hash
       *
       * Error will be thrown if order is not found
       */
      async getOrderByHash(hash2) {
        return this.httpClient.get(this.url(`/order/${hash2}`), this.headers());
      }
      url(path, params) {
        const query = params ? `?${new URLSearchParams(Object.entries(params).filter(([_, val]) => val !== void 0))}` : "";
        return `${this.baseUrl}/${this.networkId}${path}${query}`;
      }
      headers(additional) {
        return { Authorization: this.authHeader, ...additional };
      }
    };
    exports.Api = Api;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/errors.js
var require_errors3 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuthError = void 0;
    var AuthError = class extends Error {
      constructor() {
        super("Auth error, please use token from https://portal.1inch.dev/");
      }
    };
    exports.AuthError = AuthError;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/validations.js
var require_validations2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/validations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isInt = void 0;
    function isInt(val) {
      return Math.floor(val) === val;
    }
    exports.isInt = isInt;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/pager.js
var require_pager = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/pager.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Pager = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var validations_1 = require_validations2();
    var Pager = class {
      constructor({ limit, page } = { page: 1, limit: 100 }) {
        (0, assert_1.default)((0, validations_1.isInt)(limit) && limit > 0, "Invalid limit");
        (0, assert_1.default)((0, validations_1.isInt)(page) && page > 0, "Invalid page");
        this.limit = limit;
        this.page = page;
      }
    };
    exports.Pager = Pager;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/types.js
var require_types3 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/connector/http/http-provider.connector.js
var require_http_provider_connector = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/connector/http/http-provider.connector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/index.js
var require_api2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/api/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_api(), exports);
    __exportStar2(require_errors3(), exports);
    __exportStar2(require_pager(), exports);
    __exportStar2(require_types3(), exports);
    __exportStar2(require_http_provider_connector(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/limit-order-sdk/dist/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_limit_order_contract2(), exports);
    __exportStar2(require_limit_order2(), exports);
    __exportStar2(require_rfq_order2(), exports);
    __exportStar2(require_address5(), exports);
    __exportStar2(require_constants2(), exports);
    __exportStar2(require_rand_bigint(), exports);
    __exportStar2(require_api2(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/bit-mask/bit-mask.js
var require_bit_mask2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/bit-mask/bit-mask.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BitMask = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var BitMask4 = class {
      /**
       * @example
       * const mask1 = new BitMask(0, 16) // for bits from [0, 16) => 0xffff
       * const mask2 = new BitMask(16, 32) // for bits from [16, 32) => 0xffff0000
       * const singleBit = new BitMask(10) // for 10th bit [10, 11)
       *
       * @param startBit bit position from the lowest bit, starts from zero, inclusive
       * @param endBit bit position from the lowest bit, starts from zero, exclusive. Must be bigger than `startBit`
       */
      constructor(startBit, endBit = startBit + 1n) {
        (0, assert_1.default)(startBit < endBit, "BitMask: startBit must be less than endBit");
        this.offset = startBit;
        this.mask = (1n << endBit - startBit) - 1n;
      }
      toString() {
        return "0x" + this.toBigInt().toString(16);
      }
      toBigInt() {
        return this.mask << this.offset;
      }
    };
    exports.BitMask = BitMask4;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/utils/zero-x-prefix.js
var require_zero_x_prefix2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/utils/zero-x-prefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add0x = exports.trim0x = void 0;
    function trim0x3(data) {
      if (data.startsWith("0x")) {
        return data.substring(2);
      }
      return data;
    }
    exports.trim0x = trim0x3;
    function add0x2(data) {
      if (data.includes("0x")) {
        return data;
      }
      return "0x" + data;
    }
    exports.add0x = add0x2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/utils/get-bytes-count.js
var require_get_bytes_count2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/utils/get-bytes-count.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBytesCount = void 0;
    var zero_x_prefix_1 = require_zero_x_prefix2();
    function getBytesCount3(hex) {
      return BigInt((0, zero_x_prefix_1.trim0x)(hex).length / 2);
    }
    exports.getBytesCount = getBytesCount3;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/utils/as-bytes.js
var require_as_bytes2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/utils/as-bytes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.asBytes = void 0;
    function asBytes(val) {
      const hex = val.toString(16);
      if (hex.length % 2) {
        return "0x0" + hex;
      }
      return "0x" + hex;
    }
    exports.asBytes = asBytes;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/utils/index.js
var require_utils6 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/utils/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_zero_x_prefix2(), exports);
    __exportStar2(require_get_bytes_count2(), exports);
    __exportStar2(require_as_bytes2(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/validations.js
var require_validations3 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/validations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexBytes = exports.isHexString = void 0;
    var HEX_REGEX = /^(0x)[0-9a-f]+$/i;
    function isHexString4(val) {
      return HEX_REGEX.test(val.toLowerCase());
    }
    exports.isHexString = isHexString4;
    function isHexBytes4(val) {
      return isHexString4(val) && val.length % 2 === 0;
    }
    exports.isHexBytes = isHexBytes4;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/bn/bn.js
var require_bn2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/bn/bn.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BN = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var utils_1 = require_utils6();
    var validations_1 = require_validations3();
    var BN5 = class _BN2 {
      constructor(value) {
        this.value = value;
      }
      static fromNumber(n2) {
        return new _BN2(BigInt(n2));
      }
      static fromHex(hex) {
        (0, assert_1.default)((0, validations_1.isHexString)(hex), "Invalid hex");
        return new _BN2(BigInt(hex));
      }
      /**
       * Add value
       */
      add(other) {
        return new _BN2(this.value + other.value);
      }
      /**
       * Subtract value
       */
      sub(other) {
        return new _BN2(this.value - other.value);
      }
      setBit(n2, value) {
        if (value) {
          return new _BN2(this.value | 1n << n2);
        }
        return new _BN2(this.value & ~(1n << n2));
      }
      getBit(n2) {
        return (this.value & 1n << n2) === 0n ? 0 : 1;
      }
      shiftLeft(n2) {
        return new _BN2(this.value << n2);
      }
      shiftRight(n2) {
        return new _BN2(this.value >> n2);
      }
      and(other) {
        const raw = typeof other === "bigint" ? other : other.value;
        return new _BN2(raw & this.value);
      }
      or(other) {
        const raw = typeof other === "bigint" ? other : other.value;
        return new _BN2(raw | this.value);
      }
      xor(other) {
        const raw = typeof other === "bigint" ? other : other.value;
        return new _BN2(raw ^ this.value);
      }
      isZero() {
        return this.value === 0n;
      }
      isOne() {
        return this.value === 1n;
      }
      /**
       * Return bits defined in `mask` as BN
       *
       * @example
       * const mask = new BitMask(4, 8) // bits 4,5,6,7
       * const bn = new BN(0x1234abcd)
       *
       * new BN(0x2).value === bn.getMask(mask)
       */
      getMask(mask2) {
        return this.shiftRight(mask2.offset).and(mask2.mask);
      }
      /**
       * Set bits defined in `mask` to `value`
       * if value is bigger than mask then error will be thrown
       */
      setMask(mask2, value) {
        const raw = typeof value === "bigint" ? value : value.value;
        (0, assert_1.default)(raw <= mask2.mask, `Value 0x${raw.toString(16)} to big for mask ${mask2}`);
        return new _BN2(this.clearMask(mask2).value | raw << mask2.offset);
      }
      /**
       * Set bits defined in `mask` to 0s
       */
      clearMask(mask2) {
        return new _BN2(this.value - (mask2.toBigInt() & this.value));
      }
      /**
       * Return 0x prefixed string with hex representation of BN, padded with '0s' if `padNum` specified
       */
      toHex(padNum = 0) {
        return (0, utils_1.add0x)(this.value.toString(16).padStart(padNum, "0"));
      }
      /**
       * Convert BN to Number
       *
       * Caution: value will be rounded for numbers > `Number.MAX_SAFE_INTEGER`
       */
      toNumber() {
        return Number(this.value);
      }
    };
    exports.BN = BN5;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/bytes-iter/bytes-iter.js
var require_bytes_iter2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/bytes-iter/bytes-iter.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesIter = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var validations_1 = require_validations3();
    var utils_1 = require_utils6();
    var Side;
    (function(Side2) {
      Side2[Side2["Front"] = 0] = "Front";
      Side2[Side2["Back"] = 1] = "Back";
    })(Side || (Side = {}));
    var BytesIter = class _BytesIter {
      constructor(bytes3, ResultType) {
        this.ResultType = ResultType;
        (0, assert_1.default)((0, validations_1.isHexBytes)(bytes3), "invalid bytes value");
        this.bytes = bytes3.slice(2);
      }
      static BigInt(bytes3) {
        return new _BytesIter(bytes3, BigInt);
      }
      static String(bytes3) {
        return new _BytesIter(bytes3, String);
      }
      /**
       * Returns all not consumed bytes
       */
      rest() {
        return this.ResultType((0, utils_1.add0x)(this.bytes));
      }
      isEmpty() {
        return this.bytes.length === 0;
      }
      nextByte(side = Side.Front) {
        return this.nextBytes(1, side);
      }
      nextBytes(n2, side = Side.Front) {
        const cnt = n2 * 2;
        if (this.bytes.length < cnt) {
          throw new Error(`Can not consume ${n2} bytes, have only ${this.bytes.length / 2}`);
        }
        const isFront = side === Side.Front;
        const bytes3 = isFront ? this.bytes.slice(0, cnt) : this.bytes.slice(-cnt);
        this.bytes = isFront ? this.bytes.slice(cnt) : this.bytes.slice(0, -cnt);
        return this.ResultType((0, utils_1.add0x)(bytes3));
      }
      nextAddress(side = Side.Front) {
        return this.nextBytes(40, side);
      }
      nextUint8(side = Side.Front) {
        return this.nextByte(side);
      }
      nextUint16(side = Side.Front) {
        return this.nextBytes(2, side);
      }
      nextUint24(side = Side.Front) {
        return this.nextBytes(3, side);
      }
      nextUint32(side = Side.Front) {
        return this.nextBytes(4, side);
      }
      nextUint128(side = Side.Front) {
        return this.nextBytes(16, side);
      }
      nextUint160(side = Side.Front) {
        return this.nextBytes(20, side);
      }
      nextUint256(side = Side.Front) {
        return this.nextBytes(32, side);
      }
    };
    exports.BytesIter = BytesIter;
    BytesIter.SIDE = Side;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/constants.js
var require_constants5 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UINT_256_MAX = exports.UINT_128_MAX = exports.UINT_160_MAX = exports.UINT_80_MAX = exports.UINT_40_MAX = exports.UINT_32_MAX = exports.UINT_24_MAX = exports.UINT_8_MAX = void 0;
    exports.UINT_8_MAX = (1n << 8n) - 1n;
    exports.UINT_24_MAX = (1n << 24n) - 1n;
    exports.UINT_32_MAX = (1n << 32n) - 1n;
    exports.UINT_40_MAX = (1n << 40n) - 1n;
    exports.UINT_80_MAX = (1n << 80n) - 1n;
    exports.UINT_160_MAX = (1n << 160n) - 1n;
    exports.UINT_128_MAX = (1n << 128n) - 1n;
    exports.UINT_256_MAX = (1n << 256n) - 1n;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/bytes-builder/bytes-builder.js
var require_bytes_builder2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/bytes-builder/bytes-builder.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesBuilder = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var bn_1 = require_bn2();
    var validations_1 = require_validations3();
    var constants_1 = require_constants5();
    var utils_1 = require_utils6();
    var BytesBuilder = class {
      constructor(init) {
        if (init === void 0) {
          this.bytes = "0x";
          return;
        }
        if (typeof init === "string") {
          (0, assert_1.default)((0, validations_1.isHexBytes)(init), "Init bytes must be valid hex bytes");
          this.bytes = init;
        } else {
          const initBn = init instanceof bn_1.BN ? init : new bn_1.BN(init);
          this.bytes = initBn.toHex();
        }
      }
      /**
       * Returns current bytes count
       */
      get length() {
        return Number(this.bytes.length / 2 - 1);
      }
      addAddress(address) {
        if (typeof address === "string") {
          (0, assert_1.default)((0, validations_1.isHexBytes)(address) && address.length === 42, "Invalid address");
          this.append(address);
        } else {
          const addressBN = address instanceof bn_1.BN ? address : new bn_1.BN(address);
          (0, assert_1.default)(addressBN.value <= constants_1.UINT_160_MAX, "Invalid address: too big");
          this.append(addressBN.toHex(40));
        }
        return this;
      }
      addBytes(bytes3) {
        (0, assert_1.default)((0, validations_1.isHexBytes)(bytes3), "Invalid bytes");
        this.append(bytes3);
        return this;
      }
      addByte(byte) {
        return this.addNBytes(byte, 1);
      }
      addUint8(val) {
        return this.addNBytes(val, 1);
      }
      addUint16(val) {
        return this.addNBytes(val, 2);
      }
      addUint24(val) {
        return this.addNBytes(val, 3);
      }
      addUint32(val) {
        return this.addNBytes(val, 4);
      }
      addUint64(val) {
        return this.addNBytes(val, 8);
      }
      addUint128(val) {
        return this.addNBytes(val, 16);
      }
      addUint160(val) {
        return this.addNBytes(val, 20);
      }
      addUint256(val) {
        return this.addNBytes(val, 32);
      }
      /**
       * Returns bytes as single bigint value
       */
      asBigInt() {
        return BigInt(this.bytes);
      }
      /**
       * Returns hex string
       *
       * @param prefixed should be string prefixed with 0x or not, true by default
       */
      asHex(prefixed = true) {
        return prefixed ? this.bytes : this.bytes.slice(2);
      }
      append(bytes3) {
        this.bytes += (0, utils_1.trim0x)(bytes3);
      }
      addNBytes(bytes3, n2) {
        if (typeof bytes3 === "string") {
          (0, assert_1.default)((0, validations_1.isHexBytes)(bytes3), "Invalid value: not bytes hex string");
          (0, assert_1.default)(bytes3.length === 2 + n2 * 2, "Invalid value: bad length");
          this.append(bytes3);
        } else {
          const bytesBn = bytes3 instanceof bn_1.BN ? bytes3 : new bn_1.BN(bytes3);
          (0, assert_1.default)(bytesBn.value <= (1n << 8n * BigInt(n2)) - 1n, "Invalid value: too long");
          this.append(bytesBn.toHex(n2 * 2));
        }
        return this;
      }
    };
    exports.BytesBuilder = BytesBuilder;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/node_modules/@1inch/byte-utils/dist/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_bit_mask2(), exports);
    __exportStar2(require_bn2(), exports);
    __exportStar2(require_bytes_iter2(), exports);
    __exportStar2(require_bytes_builder2(), exports);
    __exportStar2(require_utils6(), exports);
    __exportStar2(require_validations3(), exports);
    __exportStar2(require_constants5(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/validations.js
var require_validations4 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/validations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexBytes = exports.isHexString = exports.isValidAmount = exports.isValidAddress = void 0;
    var ethers_1 = require_lib2();
    function isValidAddress2(address) {
      return (0, ethers_1.isAddress)(address);
    }
    exports.isValidAddress = isValidAddress2;
    function isValidAmount3(value) {
      try {
        const amount = BigInt(value);
        return amount >= 0n;
      } catch (e) {
        return false;
      }
    }
    exports.isValidAmount = isValidAmount3;
    var HEX_REGEX = /^(0x)[0-9a-f]+$/i;
    function isHexString4(val) {
      return HEX_REGEX.test(val.toLowerCase());
    }
    exports.isHexString = isHexString4;
    function isHexBytes4(val) {
      return isHexString4(val) && val.length % 2 === 0;
    }
    exports.isHexBytes = isHexBytes4;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/utils.js
var require_utils7 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add0x = exports.trim0x = void 0;
    function trim0x3(data) {
      if (data.startsWith("0x")) {
        return data.substring(2);
      }
      return data;
    }
    exports.trim0x = trim0x3;
    function add0x2(data) {
      if (data.includes("0x")) {
        return data;
      }
      return "0x" + data;
    }
    exports.add0x = add0x2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/constants.js
var require_constants6 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UINT_256_MAX = exports.UINT_24_MAX = exports.UINT_32_MAX = exports.UINT_40_MAX = exports.UINT_80_MAX = exports.UINT_16_MAX = exports.UINT_160_MAX = exports.ONE_INCH_LIMIT_ORDER_V4 = exports.NetworkEnum = exports.ZX = void 0;
    exports.ZX = "0x";
    var NetworkEnum4;
    (function(NetworkEnum5) {
      NetworkEnum5[NetworkEnum5["ETHEREUM"] = 1] = "ETHEREUM";
      NetworkEnum5[NetworkEnum5["POLYGON"] = 137] = "POLYGON";
      NetworkEnum5[NetworkEnum5["ZKSYNC"] = 324] = "ZKSYNC";
      NetworkEnum5[NetworkEnum5["BINANCE"] = 56] = "BINANCE";
      NetworkEnum5[NetworkEnum5["ARBITRUM"] = 42161] = "ARBITRUM";
      NetworkEnum5[NetworkEnum5["AVALANCHE"] = 43114] = "AVALANCHE";
      NetworkEnum5[NetworkEnum5["OPTIMISM"] = 10] = "OPTIMISM";
      NetworkEnum5[NetworkEnum5["FANTOM"] = 250] = "FANTOM";
      NetworkEnum5[NetworkEnum5["GNOSIS"] = 100] = "GNOSIS";
      NetworkEnum5[NetworkEnum5["COINBASE"] = 8453] = "COINBASE";
    })(NetworkEnum4 = exports.NetworkEnum || (exports.NetworkEnum = {}));
    exports.ONE_INCH_LIMIT_ORDER_V4 = "0x111111125421ca6dc452d289314280a0f8842a65";
    exports.UINT_160_MAX = (1n << 160n) - 1n;
    exports.UINT_16_MAX = (1n << 16n) - 1n;
    exports.UINT_80_MAX = (1n << 80n) - 1n;
    exports.UINT_40_MAX = (1n << 40n) - 1n;
    exports.UINT_32_MAX = (1n << 32n) - 1n;
    exports.UINT_24_MAX = (1n << 24n) - 1n;
    exports.UINT_256_MAX = (1n << 256n) - 1n;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/auction-details/auction-details.js
var require_auction_details = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/auction-details/auction-details.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuctionDetails = void 0;
    var ethers_1 = require_lib2();
    var byte_utils_1 = require_dist4();
    var assert_1 = __importDefault2(require_assert2());
    var validations_1 = require_validations4();
    var utils_1 = require_utils7();
    var constants_1 = require_constants6();
    var AuctionDetails3 = class _AuctionDetails {
      constructor(auction) {
        this.startTime = BigInt(auction.startTime);
        this.initialRateBump = BigInt(auction.initialRateBump);
        this.duration = auction.duration;
        this.points = auction.points;
        this.gasCost = auction.gasCost || {
          gasBumpEstimate: 0n,
          gasPriceEstimate: 0n
        };
        (0, assert_1.default)(this.gasCost.gasBumpEstimate <= constants_1.UINT_24_MAX);
        (0, assert_1.default)(this.gasCost.gasPriceEstimate <= constants_1.UINT_32_MAX);
        (0, assert_1.default)(this.startTime <= constants_1.UINT_32_MAX);
        (0, assert_1.default)(this.duration <= constants_1.UINT_24_MAX);
        (0, assert_1.default)(this.initialRateBump <= constants_1.UINT_24_MAX);
      }
      /**
       * Construct `AuctionDetails` from bytes
       *
       * @param data bytes with 0x prefix in next format:
       * - uint24 gasBumpEstimate
       * - uint32 gasPriceEstimate
       * - uint32 startTime
       * - uint24 duration
       * - uint24 initialRateBump
       * - [uint24 rate, uint16 delay] * N points
       *
       * All data is tight packed
       *
       * @see AuctionDetails.encode
       */
      static decode(data) {
        (0, assert_1.default)((0, validations_1.isHexBytes)(data), "Invalid auction details data");
        const iter = byte_utils_1.BytesIter.BigInt(data);
        const gasBumpEstimate = iter.nextUint24();
        const gasPriceEstimate = iter.nextUint32();
        const start = iter.nextUint32();
        const duration = iter.nextUint24();
        const rateBump = Number(iter.nextUint24());
        const points = [];
        while (!iter.isEmpty()) {
          points.push({
            coefficient: Number(iter.nextUint24()),
            delay: Number(iter.nextUint16())
          });
        }
        return new _AuctionDetails({
          startTime: start,
          duration,
          initialRateBump: rateBump,
          points,
          gasCost: {
            gasBumpEstimate,
            gasPriceEstimate
          }
        });
      }
      static fromExtension(extension) {
        return _AuctionDetails.decode((0, utils_1.add0x)(extension.makingAmountData.slice(42)));
      }
      /**
       * Serialize auction data to bytes
       */
      encode() {
        let details = ethers_1.ethers.solidityPacked(["uint24", "uint32", "uint32", "uint24", "uint24"], [
          this.gasCost.gasBumpEstimate,
          this.gasCost.gasPriceEstimate,
          this.startTime,
          this.duration,
          this.initialRateBump
        ]);
        for (let i = 0; i < this.points.length; i++) {
          details += (0, utils_1.trim0x)(ethers_1.ethers.solidityPacked(["uint24", "uint16"], [this.points[i].coefficient, this.points[i].delay]));
        }
        return details;
      }
    };
    exports.AuctionDetails = AuctionDetails3;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/auction-details/types.js
var require_types4 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/auction-details/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/auction-details/index.js
var require_auction_details2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/auction-details/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_auction_details(), exports);
    __exportStar2(require_types4(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/utils/time.js
var require_time = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/utils/time.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.now = void 0;
    function now5() {
      return BigInt(Math.floor(Date.now() / 1e3));
    }
    exports.now = now5;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/settlement-post-interaction-data/settlement-post-interaction-data.js
var require_settlement_post_interaction_data = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/settlement-post-interaction-data/settlement-post-interaction-data.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SettlementPostInteractionData = void 0;
    var limit_order_sdk_1 = require_dist3();
    var byte_utils_1 = require_dist4();
    var assert_1 = __importDefault2(require_assert2());
    var validations_1 = require_validations4();
    var utils_1 = require_utils7();
    var constants_1 = require_constants6();
    var time_1 = require_time();
    var SettlementPostInteractionData3 = class _SettlementPostInteractionData {
      constructor(data) {
        var _a2;
        this.whitelist = data.whitelist;
        this.integratorFee = data == null ? void 0 : data.integratorFee;
        this.bankFee = data.bankFee || 0n;
        this.resolvingStartTime = data.resolvingStartTime;
        this.customReceiver = data.customReceiver;
        if ((_a2 = this.integratorFee) == null ? void 0 : _a2.ratio) {
          (0, assert_1.default)(!this.integratorFee.receiver.isZero(), "Fee receiver can not be zero when fee set");
        }
      }
      static new(data) {
        (0, assert_1.default)(data.whitelist.length, "Whitelist can not be empty");
        let sumDelay = 0n;
        const whitelist = data.whitelist.map((d) => ({
          addressHalf: d.address.toString().slice(-20),
          allowFrom: d.allowFrom < data.resolvingStartTime ? data.resolvingStartTime : d.allowFrom
        })).sort((a, b2) => Number(a.allowFrom - b2.allowFrom)).map((val) => {
          const delay = val.allowFrom - data.resolvingStartTime - sumDelay;
          sumDelay += delay;
          (0, assert_1.default)(delay < constants_1.UINT_16_MAX, "Too big diff between timestamps");
          return {
            delay,
            addressHalf: val.addressHalf
          };
        });
        return new _SettlementPostInteractionData({
          ...data,
          whitelist
        });
      }
      /**
       * Construct `SettlementPostInteractionData` from bytes
       * @param data bytes with 0x prefix in next format:
       * - [uint32 feeBank] only when first bit of `bitMask` enabled
       * - [uint16 integratorFeeRation, uint160 integratorFeeReceiver, [uint160 customReceiver]] only when second bit of `bitMask` enabled
       * - uint32 auctionStartTime
       * - (bytes10 last10bytesOfAddress, uint16 auctionDelay) * N whitelist info
       * - uint8 bitMask:
       *                  0b0000_0001 - fee bank mask
       *                  0b0000_0010 - integrator fee mask
       *                  0b0000_0100 - is custom receiver present (only used when integrator fee enabled)
       *                  0b1111_1000 - resolvers count mask
       *
       * All data is tight packed
       * @see SettlementPostInteractionData.encode
       */
      static decode(data) {
        (0, assert_1.default)((0, validations_1.isHexBytes)(data), "Post interaction data must be valid bytes string");
        const iter = byte_utils_1.BytesIter.BigInt(data);
        const flags = new byte_utils_1.BN(iter.nextByte(byte_utils_1.BytesIter.SIDE.Back));
        let bankFee = 0n;
        let integratorFee;
        let customReceiver;
        if (flags.getBit(0n)) {
          bankFee = iter.nextUint32();
        }
        if (flags.getBit(1n)) {
          const integratorFeeRatio = iter.nextUint16();
          const integratorAddress = iter.nextUint160();
          integratorFee = {
            ratio: integratorFeeRatio,
            receiver: limit_order_sdk_1.Address.fromBigInt(integratorAddress)
          };
          if (flags.getBit(2n)) {
            customReceiver = limit_order_sdk_1.Address.fromBigInt(iter.nextUint160());
          }
        }
        const resolvingStartTime = iter.nextUint32();
        const whitelist = [];
        while (!iter.isEmpty()) {
          const addressHalf = iter.nextBytes(10).toString(16).padStart(20, "0");
          const delay = iter.nextUint16();
          whitelist.push({
            addressHalf,
            delay
          });
        }
        return new _SettlementPostInteractionData({
          integratorFee,
          bankFee,
          resolvingStartTime,
          whitelist,
          customReceiver
        });
      }
      static fromExtension(extension) {
        return _SettlementPostInteractionData.decode((0, utils_1.add0x)(extension.postInteraction.slice(42)));
      }
      /**
       * Serialize post-interaction data to bytes
       */
      encode() {
        var _a2;
        let bitMask2 = new byte_utils_1.BN(0n);
        const bytes3 = new byte_utils_1.BytesBuilder();
        if (this.bankFee) {
          bitMask2 = bitMask2.setBit(0n, 1);
          bytes3.addUint32(this.bankFee);
        }
        if ((_a2 = this.integratorFee) == null ? void 0 : _a2.ratio) {
          bitMask2 = bitMask2.setBit(1n, 1);
          bytes3.addUint16(this.integratorFee.ratio).addAddress(this.integratorFee.receiver.toString());
          if (this.customReceiver && !this.customReceiver.isZero()) {
            bitMask2 = bitMask2.setBit(2n, 1);
            bytes3.addAddress(this.customReceiver.toString());
          }
        }
        bytes3.addUint32(this.resolvingStartTime);
        for (const wl of this.whitelist) {
          bytes3.addBytes((0, utils_1.add0x)(wl.addressHalf)).addUint16(wl.delay);
        }
        bitMask2 = bitMask2.setMask(new byte_utils_1.BitMask(3n, 8n), BigInt(this.whitelist.length));
        bytes3.addUint8(bitMask2.value);
        return bytes3.asHex();
      }
      /**
       * Check whether address allowed to execute order at the given time
       *
       * @param executor address of executor
       * @param executionTime timestamp in sec at which order planning to execute
       */
      canExecuteAt(executor, executionTime) {
        const addressHalf = executor.toString().slice(-20);
        let allowedFrom = this.resolvingStartTime;
        for (const whitelist of this.whitelist) {
          allowedFrom += whitelist.delay;
          if (addressHalf === whitelist.addressHalf) {
            return executionTime >= allowedFrom;
          } else if (executionTime < allowedFrom) {
            return false;
          }
        }
        return false;
      }
      isExclusivityPeriod(time = (0, time_1.now)()) {
        if (this.whitelist.length === 1) {
          return true;
        }
        if (this.whitelist[0].delay === this.whitelist[1].delay) {
          return false;
        }
        return time <= this.resolvingStartTime + this.whitelist[1].delay;
      }
      isExclusiveResolver(wallet) {
        const addressHalf = wallet.toString().slice(-20);
        if (this.whitelist.length === 1) {
          return addressHalf === this.whitelist[0].addressHalf;
        }
        if (this.whitelist[0].delay === this.whitelist[1].delay) {
          return false;
        }
        return addressHalf === this.whitelist[0].addressHalf;
      }
    };
    exports.SettlementPostInteractionData = SettlementPostInteractionData3;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/settlement-post-interaction-data/types.js
var require_types5 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/settlement-post-interaction-data/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/settlement-post-interaction-data/index.js
var require_settlement_post_interaction_data2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/settlement-post-interaction-data/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_settlement_post_interaction_data(), exports);
    __exportStar2(require_types5(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/fusion-extension.js
var require_fusion_extension = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/fusion-extension.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FusionExtension = void 0;
    var limit_order_sdk_1 = require_dist3();
    var assert_1 = __importDefault2(require_assert2());
    var auction_details_1 = require_auction_details2();
    var settlement_post_interaction_data_1 = require_settlement_post_interaction_data2();
    var FusionExtension2 = class _FusionExtension {
      constructor(address, auctionDetails, postInteractionData, makerPermit) {
        this.address = address;
        this.auctionDetails = auctionDetails;
        this.postInteractionData = postInteractionData;
        this.makerPermit = makerPermit;
        this.builder = new limit_order_sdk_1.ExtensionBuilder();
        const detailsBytes = this.auctionDetails.encode();
        this.builder.withMakingAmountData(this.address, detailsBytes).withTakingAmountData(this.address, detailsBytes).withPostInteraction(new limit_order_sdk_1.Interaction(this.address, this.postInteractionData.encode()));
        if (makerPermit) {
          this.builder.withMakerPermit(makerPermit.target, makerPermit.data);
        }
      }
      /**
       * Create `FusionExtension` from bytes
       *
       * @param bytes 0x prefixed bytes
       */
      static decode(bytes3) {
        const extension = limit_order_sdk_1.Extension.decode(bytes3);
        return _FusionExtension.fromExtension(extension);
      }
      /**
       * Create `FusionExtension` from `Extension`
       */
      static fromExtension(extension) {
        const settlementContract = limit_order_sdk_1.Address.fromFirstBytes(extension.makingAmountData);
        (0, assert_1.default)(limit_order_sdk_1.Address.fromFirstBytes(extension.takingAmountData).equal(settlementContract) && limit_order_sdk_1.Address.fromFirstBytes(extension.postInteraction).equal(settlementContract), "Invalid extension, all calls should be to the same address");
        const auctionDetails = auction_details_1.AuctionDetails.fromExtension(extension);
        const postInteractionData = settlement_post_interaction_data_1.SettlementPostInteractionData.fromExtension(extension);
        const permit = extension.hasMakerPermit ? limit_order_sdk_1.Interaction.decode(extension.makerPermit) : void 0;
        return new _FusionExtension(settlementContract, auctionDetails, postInteractionData, permit);
      }
      build() {
        return this.builder.build();
      }
    };
    exports.FusionExtension = FusionExtension2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/source-track.js
var require_source_track = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/source-track.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.injectTrackCode = void 0;
    var byte_utils_1 = require_dist4();
    var ethers_1 = require_lib2();
    var utils_1 = require_utils7();
    var validations_1 = require_validations4();
    var TRACK_CODE_MASK = new byte_utils_1.BitMask(224n, 256n);
    function getTrackCodeForSource(source) {
      if (!(0, validations_1.isHexString)(source)) {
        return createId(source);
      }
      if (source.length === 10) {
        return BigInt(source);
      }
      if (source.length === 66) {
        return BigInt(source.substring(0, 10));
      }
      return createId(source);
    }
    function createId(source) {
      return BigInt((0, utils_1.add0x)((0, ethers_1.id)(source).slice(0, 10)));
    }
    function injectTrackCode(salt, source) {
      const track = source ? getTrackCodeForSource(source) : 0n;
      return new byte_utils_1.BN(salt).setMask(TRACK_CODE_MASK, track).value;
    }
    exports.injectTrackCode = injectTrackCode;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/auction-calculator/constants.js
var require_constants7 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/auction-calculator/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RATE_BUMP_DENOMINATOR = void 0;
    exports.RATE_BUMP_DENOMINATOR = 10000000n;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/abi/AggregationRouterV6.abi.json
var require_AggregationRouterV6_abi2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/abi/AggregationRouterV6.abi.json"(exports, module) {
    module.exports = [
      {
        inputs: [
          {
            internalType: "contract IWETH",
            name: "_weth",
            type: "address"
          }
        ],
        stateMutability: "nonpayable",
        type: "constructor"
      },
      {
        inputs: [],
        name: "AdvanceEpochFailed",
        type: "error"
      },
      {
        inputs: [],
        name: "ArbitraryStaticCallFailed",
        type: "error"
      },
      {
        inputs: [],
        name: "BadSignature",
        type: "error"
      },
      {
        inputs: [],
        name: "BitInvalidatedOrder",
        type: "error"
      },
      {
        inputs: [],
        name: "ETHTransferFailed",
        type: "error"
      },
      {
        inputs: [],
        name: "EpochManagerAndBitInvalidatorsAreIncompatible",
        type: "error"
      },
      {
        inputs: [],
        name: "EthDepositRejected",
        type: "error"
      },
      {
        inputs: [],
        name: "InvalidMsgValue",
        type: "error"
      },
      {
        inputs: [],
        name: "InvalidPermit2Transfer",
        type: "error"
      },
      {
        inputs: [],
        name: "InvalidShortString",
        type: "error"
      },
      {
        inputs: [],
        name: "InvalidatedOrder",
        type: "error"
      },
      {
        inputs: [],
        name: "MakingAmountTooLow",
        type: "error"
      },
      {
        inputs: [],
        name: "MismatchArraysLengths",
        type: "error"
      },
      {
        inputs: [],
        name: "OrderExpired",
        type: "error"
      },
      {
        inputs: [],
        name: "OrderIsNotSuitableForMassInvalidation",
        type: "error"
      },
      {
        inputs: [],
        name: "PartialFillNotAllowed",
        type: "error"
      },
      {
        inputs: [],
        name: "Permit2TransferAmountTooHigh",
        type: "error"
      },
      {
        inputs: [],
        name: "PredicateIsNotTrue",
        type: "error"
      },
      {
        inputs: [],
        name: "PrivateOrder",
        type: "error"
      },
      {
        inputs: [],
        name: "ReentrancyDetected",
        type: "error"
      },
      {
        inputs: [],
        name: "RemainingInvalidatedOrder",
        type: "error"
      },
      {
        inputs: [],
        name: "SafeTransferFailed",
        type: "error"
      },
      {
        inputs: [],
        name: "SafeTransferFromFailed",
        type: "error"
      },
      {
        inputs: [
          {
            internalType: "bool",
            name: "success",
            type: "bool"
          },
          {
            internalType: "bytes",
            name: "res",
            type: "bytes"
          }
        ],
        name: "SimulationResults",
        type: "error"
      },
      {
        inputs: [
          {
            internalType: "string",
            name: "str",
            type: "string"
          }
        ],
        name: "StringTooLong",
        type: "error"
      },
      {
        inputs: [],
        name: "SwapWithZeroAmount",
        type: "error"
      },
      {
        inputs: [],
        name: "TakingAmountExceeded",
        type: "error"
      },
      {
        inputs: [],
        name: "TakingAmountTooHigh",
        type: "error"
      },
      {
        inputs: [],
        name: "TransferFromMakerToTakerFailed",
        type: "error"
      },
      {
        inputs: [],
        name: "TransferFromTakerToMakerFailed",
        type: "error"
      },
      {
        inputs: [],
        name: "WrongSeriesNonce",
        type: "error"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "slotIndex",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "slotValue",
            type: "uint256"
          }
        ],
        name: "BitInvalidatorUpdated",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [],
        name: "EIP712DomainChanged",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: true,
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "series",
            type: "uint256"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "newEpoch",
            type: "uint256"
          }
        ],
        name: "EpochIncreased",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32"
          }
        ],
        name: "OrderCancelled",
        type: "event"
      },
      {
        anonymous: false,
        inputs: [
          {
            indexed: false,
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32"
          },
          {
            indexed: false,
            internalType: "uint256",
            name: "remainingAmount",
            type: "uint256"
          }
        ],
        name: "OrderFilled",
        type: "event"
      },
      {
        inputs: [],
        name: "DOMAIN_SEPARATOR",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint96",
            name: "series",
            type: "uint96"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          }
        ],
        name: "advanceEpoch",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "offsets",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "and",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "arbitraryStaticCall",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "slot",
            type: "uint256"
          }
        ],
        name: "bitInvalidatorForOrder",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "MakerTraits",
            name: "makerTraits",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "additionalMask",
            type: "uint256"
          }
        ],
        name: "bitsInvalidateForOrder",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "MakerTraits",
            name: "makerTraits",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32"
          }
        ],
        name: "cancelOrder",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "MakerTraits[]",
            name: "makerTraits",
            type: "uint256[]"
          },
          {
            internalType: "bytes32[]",
            name: "orderHashes",
            type: "bytes32[]"
          }
        ],
        name: "cancelOrders",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "predicate",
            type: "bytes"
          }
        ],
        name: "checkPredicate",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [],
        name: "eip712Domain",
        outputs: [
          {
            internalType: "bytes1",
            name: "fields",
            type: "bytes1"
          },
          {
            internalType: "string",
            name: "name",
            type: "string"
          },
          {
            internalType: "string",
            name: "version",
            type: "string"
          },
          {
            internalType: "uint256",
            name: "chainId",
            type: "uint256"
          },
          {
            internalType: "address",
            name: "verifyingContract",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "salt",
            type: "bytes32"
          },
          {
            internalType: "uint256[]",
            name: "extensions",
            type: "uint256[]"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            internalType: "uint96",
            name: "series",
            type: "uint96"
          }
        ],
        name: "epoch",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            internalType: "uint256",
            name: "series",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "makerEpoch",
            type: "uint256"
          }
        ],
        name: "epochEquals",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "eq",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "maker",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "receiver",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "makerAsset",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "takerAsset",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "makingAmount",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "takingAmount",
                type: "uint256"
              },
              {
                internalType: "MakerTraits",
                name: "makerTraits",
                type: "uint256"
              }
            ],
            internalType: "struct IOrderMixin.Order",
            name: "order",
            type: "tuple"
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "TakerTraits",
            name: "takerTraits",
            type: "uint256"
          }
        ],
        name: "fillContractOrder",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "maker",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "receiver",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "makerAsset",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "takerAsset",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "makingAmount",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "takingAmount",
                type: "uint256"
              },
              {
                internalType: "MakerTraits",
                name: "makerTraits",
                type: "uint256"
              }
            ],
            internalType: "struct IOrderMixin.Order",
            name: "order",
            type: "tuple"
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "TakerTraits",
            name: "takerTraits",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "args",
            type: "bytes"
          }
        ],
        name: "fillContractOrderArgs",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "maker",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "receiver",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "makerAsset",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "takerAsset",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "makingAmount",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "takingAmount",
                type: "uint256"
              },
              {
                internalType: "MakerTraits",
                name: "makerTraits",
                type: "uint256"
              }
            ],
            internalType: "struct IOrderMixin.Order",
            name: "order",
            type: "tuple"
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "vs",
            type: "bytes32"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "TakerTraits",
            name: "takerTraits",
            type: "uint256"
          }
        ],
        name: "fillOrder",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "maker",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "receiver",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "makerAsset",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "takerAsset",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "makingAmount",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "takingAmount",
                type: "uint256"
              },
              {
                internalType: "MakerTraits",
                name: "makerTraits",
                type: "uint256"
              }
            ],
            internalType: "struct IOrderMixin.Order",
            name: "order",
            type: "tuple"
          },
          {
            internalType: "bytes32",
            name: "r",
            type: "bytes32"
          },
          {
            internalType: "bytes32",
            name: "vs",
            type: "bytes32"
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256"
          },
          {
            internalType: "TakerTraits",
            name: "takerTraits",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "args",
            type: "bytes"
          }
        ],
        name: "fillOrderArgs",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          },
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "payable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "gt",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            components: [
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "maker",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "receiver",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "makerAsset",
                type: "uint256"
              },
              {
                internalType: "Address",
                name: "takerAsset",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "makingAmount",
                type: "uint256"
              },
              {
                internalType: "uint256",
                name: "takingAmount",
                type: "uint256"
              },
              {
                internalType: "MakerTraits",
                name: "makerTraits",
                type: "uint256"
              }
            ],
            internalType: "struct IOrderMixin.Order",
            name: "order",
            type: "tuple"
          }
        ],
        name: "hashOrder",
        outputs: [
          {
            internalType: "bytes32",
            name: "",
            type: "bytes32"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint96",
            name: "series",
            type: "uint96"
          }
        ],
        name: "increaseEpoch",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "value",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "lt",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "not",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "uint256",
            name: "offsets",
            type: "uint256"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "or",
        outputs: [
          {
            internalType: "bool",
            name: "",
            type: "bool"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "bytes",
            name: "permit",
            type: "bytes"
          },
          {
            internalType: "bytes",
            name: "action",
            type: "bytes"
          }
        ],
        name: "permitAndCall",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32"
          }
        ],
        name: "rawRemainingInvalidatorForOrder",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "maker",
            type: "address"
          },
          {
            internalType: "bytes32",
            name: "orderHash",
            type: "bytes32"
          }
        ],
        name: "remainingInvalidatorForOrder",
        outputs: [
          {
            internalType: "uint256",
            name: "",
            type: "uint256"
          }
        ],
        stateMutability: "view",
        type: "function"
      },
      {
        inputs: [
          {
            internalType: "address",
            name: "target",
            type: "address"
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes"
          }
        ],
        name: "simulate",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function"
      },
      {
        stateMutability: "payable",
        type: "receive"
      }
    ];
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/sdk/encoders/cancel-order.encoder.js
var require_cancel_order_encoder = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/sdk/encoders/cancel-order.encoder.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodeCancelOrder = void 0;
    var ethers_1 = require_lib2();
    var assert_1 = __importDefault2(require_assert2());
    var AggregationRouterV6_abi_json_1 = __importDefault2(require_AggregationRouterV6_abi2());
    var validations_1 = require_validations4();
    var lopAbi = new ethers_1.Interface(AggregationRouterV6_abi_json_1.default);
    function encodeCancelOrder2(hash2, makerTraits) {
      (0, assert_1.default)((0, validations_1.isHexBytes)(hash2), "Invalid order hash");
      return lopAbi.encodeFunctionData("cancelOrder", [
        makerTraits.asBigInt(),
        hash2
      ]);
    }
    exports.encodeCancelOrder = encodeCancelOrder2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/sdk/encoders/index.js
var require_encoders = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/sdk/encoders/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_cancel_order_encoder(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/params.js
var require_params = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/params.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.concatQueryParams = void 0;
    function concatQueryParams2(params) {
      if (!params) {
        return "";
      }
      const keys = Object.keys(params);
      if (keys.length === 0) {
        return "";
      }
      return "?" + keys.reduce((a, k) => {
        if (!params[k]) {
          return a;
        }
        const value = params[k];
        a.push(k + "=" + encodeURIComponent(Array.isArray(value) ? value.join(",") : value));
        return a;
      }, []).join("&");
    }
    exports.concatQueryParams = concatQueryParams2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/types.js
var require_types6 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PresetEnum = void 0;
    var PresetEnum2;
    (function(PresetEnum3) {
      PresetEnum3["fast"] = "fast";
      PresetEnum3["medium"] = "medium";
      PresetEnum3["slow"] = "slow";
      PresetEnum3["custom"] = "custom";
    })(PresetEnum2 = exports.PresetEnum || (exports.PresetEnum = {}));
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quote/order-params.js
var require_order_params = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quote/order-params.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FusionOrderParams = void 0;
    var limit_order_sdk_1 = require_dist3();
    var types_1 = require_types6();
    var FusionOrderParams = class _FusionOrderParams {
      constructor(params) {
        this.preset = types_1.PresetEnum.fast;
        this.receiver = limit_order_sdk_1.Address.ZERO_ADDRESS;
        if (params.preset) {
          this.preset = params.preset;
        }
        if (params.receiver) {
          this.receiver = params.receiver;
        }
        this.isPermit2 = params.isPermit2;
        this.nonce = params.nonce;
        this.permit = params.permit;
        this.delayAuctionStartTimeBy = params.delayAuctionStartTimeBy || 0n;
      }
      static new(params) {
        return new _FusionOrderParams(params);
      }
    };
    exports.FusionOrderParams = FusionOrderParams;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/preset.js
var require_preset = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/preset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Preset = void 0;
    var limit_order_sdk_1 = require_dist3();
    var fusion_order_1 = require_fusion_order2();
    var Preset2 = class {
      constructor(preset) {
        var _a2, _b;
        this.auctionDuration = BigInt(preset.auctionDuration);
        this.startAuctionIn = BigInt(preset.startAuctionIn);
        this.bankFee = BigInt(preset.bankFee);
        this.initialRateBump = preset.initialRateBump;
        this.auctionStartAmount = BigInt(preset.auctionStartAmount);
        this.auctionEndAmount = BigInt(preset.auctionEndAmount);
        this.tokenFee = BigInt(preset.tokenFee);
        this.points = preset.points;
        this.gasCostInfo = {
          gasPriceEstimate: BigInt(((_a2 = preset.gasCost) == null ? void 0 : _a2.gasPriceEstimate) || 0n),
          gasBumpEstimate: BigInt(((_b = preset.gasCost) == null ? void 0 : _b.gasBumpEstimate) || 0n)
        };
        this.exclusiveResolver = preset.exclusiveResolver ? new limit_order_sdk_1.Address(preset.exclusiveResolver) : void 0;
        this.allowPartialFills = preset.allowPartialFills;
        this.allowMultipleFills = preset.allowMultipleFills;
      }
      createAuctionDetails(additionalWaitPeriod = 0n) {
        return new fusion_order_1.AuctionDetails({
          duration: this.auctionDuration,
          startTime: this.calcAuctionStartTime(additionalWaitPeriod),
          initialRateBump: this.initialRateBump,
          points: this.points,
          gasCost: this.gasCostInfo
        });
      }
      calcAuctionStartTime(additionalWaitPeriod = 0n) {
        return BigInt(Math.floor(Date.now() / 1e3)) + additionalWaitPeriod + this.startAuctionIn;
      }
    };
    exports.Preset = Preset2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/constants.js
var require_constants8 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CHAIN_TO_WRAPPER = void 0;
    var limit_order_sdk_1 = require_dist3();
    var constants_1 = require_constants6();
    exports.CHAIN_TO_WRAPPER = {
      [constants_1.NetworkEnum.ETHEREUM]: new limit_order_sdk_1.Address("0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2"),
      [constants_1.NetworkEnum.BINANCE]: new limit_order_sdk_1.Address("0xbb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c"),
      [constants_1.NetworkEnum.POLYGON]: new limit_order_sdk_1.Address("0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270"),
      [constants_1.NetworkEnum.ARBITRUM]: new limit_order_sdk_1.Address("0x82af49447d8a07e3bd95bd0d56f35241523fbab1"),
      [constants_1.NetworkEnum.AVALANCHE]: new limit_order_sdk_1.Address("0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7"),
      [constants_1.NetworkEnum.GNOSIS]: new limit_order_sdk_1.Address("0xe91d153e0b41518a2ce8dd3d7944fa863463a97d"),
      [constants_1.NetworkEnum.COINBASE]: new limit_order_sdk_1.Address("0x4200000000000000000000000000000000000006"),
      [constants_1.NetworkEnum.OPTIMISM]: new limit_order_sdk_1.Address("0x4200000000000000000000000000000000000006"),
      [constants_1.NetworkEnum.FANTOM]: new limit_order_sdk_1.Address("0x21be370d5312f44cb42ce377bc9b8a0cef1a4c83"),
      [constants_1.NetworkEnum.ZKSYNC]: new limit_order_sdk_1.Address("0x5aea5775959fbc2557cc8789bc1bf90a239d9a91")
    };
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quote/quote.js
var require_quote = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quote/quote.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Quote = void 0;
    var limit_order_sdk_1 = require_dist3();
    var byte_utils_1 = require_dist4();
    var order_params_1 = require_order_params();
    var types_1 = require_types6();
    var preset_1 = require_preset();
    var fusion_order_1 = require_fusion_order2();
    var sdk_1 = require_sdk2();
    var constants_1 = require_constants8();
    var Quote2 = class {
      constructor(params, response) {
        this.params = params;
        this.fromTokenAmount = BigInt(response.fromTokenAmount);
        this.feeToken = response.feeToken;
        this.presets = {
          [types_1.PresetEnum.fast]: new preset_1.Preset(response.presets.fast),
          [types_1.PresetEnum.medium]: new preset_1.Preset(response.presets.medium),
          [types_1.PresetEnum.slow]: new preset_1.Preset(response.presets.slow),
          [types_1.PresetEnum.custom]: response.presets.custom ? new preset_1.Preset(response.presets.custom) : void 0
        };
        this.toTokenAmount = response.toTokenAmount;
        this.prices = response.prices;
        this.volume = response.volume;
        this.quoteId = response.quoteId;
        this.whitelist = response.whitelist.map((a) => new limit_order_sdk_1.Address(a));
        this.recommendedPreset = response.recommended_preset;
        this.settlementAddress = new limit_order_sdk_1.Address(response.settlementAddress);
      }
      createFusionOrder(paramsData) {
        const params = order_params_1.FusionOrderParams.new({
          preset: (paramsData == null ? void 0 : paramsData.preset) || this.recommendedPreset,
          receiver: paramsData == null ? void 0 : paramsData.receiver,
          permit: this.params.permit,
          isPermit2: this.params.isPermit2,
          nonce: paramsData == null ? void 0 : paramsData.nonce,
          network: paramsData.network
        });
        const preset = this.getPreset(params.preset);
        const auctionDetails = preset.createAuctionDetails(params.delayAuctionStartTimeBy);
        const allowPartialFills = (paramsData == null ? void 0 : paramsData.allowPartialFills) ?? preset.allowPartialFills;
        const allowMultipleFills = (paramsData == null ? void 0 : paramsData.allowMultipleFills) ?? preset.allowMultipleFills;
        const isNonceRequired = !allowPartialFills || !allowMultipleFills;
        const nonce = isNonceRequired ? params.nonce ?? (0, limit_order_sdk_1.randBigInt)(byte_utils_1.UINT_40_MAX) : params.nonce;
        const takerAsset = this.params.toTokenAddress.isNative() ? constants_1.CHAIN_TO_WRAPPER[paramsData.network] : this.params.toTokenAddress;
        return fusion_order_1.FusionOrder.new(this.settlementAddress, {
          makerAsset: this.params.fromTokenAddress,
          takerAsset,
          makingAmount: this.fromTokenAmount,
          takingAmount: preset.auctionEndAmount,
          maker: this.params.walletAddress,
          receiver: params.receiver
        }, {
          auction: auctionDetails,
          fees: {
            integratorFee: {
              ratio: (0, sdk_1.bpsToRatioFormat)(this.params.fee) || 0n,
              receiver: (paramsData == null ? void 0 : paramsData.takingFeeReceiver) ? new limit_order_sdk_1.Address(paramsData == null ? void 0 : paramsData.takingFeeReceiver) : limit_order_sdk_1.Address.ZERO_ADDRESS
            },
            bankFee: preset.bankFee
          },
          whitelist: this.getWhitelist(auctionDetails.startTime, preset.exclusiveResolver)
        }, {
          nonce,
          unwrapWETH: this.params.toTokenAddress.isNative(),
          permit: params.permit,
          allowPartialFills,
          allowMultipleFills,
          orderExpirationDelay: paramsData == null ? void 0 : paramsData.orderExpirationDelay,
          source: this.params.source,
          enablePermit2: params.isPermit2
        });
      }
      getPreset(type = types_1.PresetEnum.fast) {
        return this.presets[type];
      }
      getWhitelist(auctionStartTime, exclusiveResolver) {
        if (exclusiveResolver) {
          return this.whitelist.map((resolver) => {
            const isExclusive = resolver.equal(exclusiveResolver);
            return {
              address: resolver,
              allowFrom: isExclusive ? 0n : auctionStartTime
            };
          });
        }
        return this.whitelist.map((resolver) => ({
          address: resolver,
          allowFrom: 0n
        }));
      }
    };
    exports.Quote = Quote2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quote/types.js
var require_types7 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quote/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quote/index.js
var require_quote2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quote/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_order_params(), exports);
    __exportStar2(require_quote(), exports);
    __exportStar2(require_types7(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quoter.request.js
var require_quoter_request = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quoter.request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuoterRequest = void 0;
    var limit_order_sdk_1 = require_dist3();
    var validations_1 = require_validations4();
    var QuoterRequest2 = class _QuoterRequest {
      constructor(params) {
        this.fromTokenAddress = new limit_order_sdk_1.Address(params.fromTokenAddress);
        this.toTokenAddress = new limit_order_sdk_1.Address(params.toTokenAddress);
        this.amount = params.amount;
        this.walletAddress = new limit_order_sdk_1.Address(params.walletAddress);
        this.enableEstimate = params.enableEstimate || false;
        this.permit = params.permit;
        this.fee = params.fee;
        this.source = params.source || "sdk";
        this.isPermit2 = params.isPermit2 ?? false;
        if (this.fromTokenAddress.isNative()) {
          throw new Error(`cannot swap ${limit_order_sdk_1.Address.NATIVE_CURRENCY}: wrap native currency to it's wrapper fist`);
        }
        if (this.fromTokenAddress.isZero() || this.toTokenAddress.isZero()) {
          throw new Error(`replace ${limit_order_sdk_1.Address.ZERO_ADDRESS} with ${limit_order_sdk_1.Address.NATIVE_CURRENCY}`);
        }
        if (this.fromTokenAddress.equal(this.toTokenAddress)) {
          throw new Error("fromTokenAddress and toTokenAddress should be different");
        }
        if (!(0, validations_1.isValidAmount)(this.amount)) {
          throw new Error(`${this.amount} is invalid amount`);
        }
        if (this.fee && this.source === "sdk") {
          throw new Error("cannot use fee without source");
        }
      }
      static new(params) {
        return new _QuoterRequest(params);
      }
      build() {
        return {
          fromTokenAddress: this.fromTokenAddress.toString(),
          toTokenAddress: this.toTokenAddress.toString(),
          amount: this.amount,
          walletAddress: this.walletAddress.toString(),
          enableEstimate: this.enableEstimate,
          permit: this.permit,
          fee: this.fee,
          source: this.source,
          isPermit2: this.isPermit2
        };
      }
    };
    exports.QuoterRequest = QuoterRequest2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/blockchain/blockchain-provider.connector.js
var require_blockchain_provider_connector = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/blockchain/blockchain-provider.connector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/blockchain/private-key-provider.connector.js
var require_private_key_provider_connector = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/blockchain/private-key-provider.connector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PrivateKeyProviderConnector = void 0;
    var ethers_1 = require_lib2();
    var utils_1 = require_utils7();
    var PrivateKeyProviderConnector2 = class {
      constructor(privateKey, web3Provider) {
        this.privateKey = privateKey;
        this.web3Provider = web3Provider;
        this.wallet = new ethers_1.Wallet((0, utils_1.add0x)(privateKey));
      }
      signTypedData(_walletAddress, typedData) {
        const primaryTypes = { ...typedData.types };
        delete primaryTypes["EIP712Domain"];
        return this.wallet.signTypedData(typedData.domain, primaryTypes, typedData.message);
      }
      ethCall(contractAddress, callData) {
        return this.web3Provider.eth.call({
          to: contractAddress,
          data: callData
        });
      }
    };
    exports.PrivateKeyProviderConnector = PrivateKeyProviderConnector2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/blockchain/web3-provider-connector.js
var require_web3_provider_connector = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/blockchain/web3-provider-connector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Web3ProviderConnector = void 0;
    var Web3ProviderConnector2 = class {
      constructor(web3Provider) {
        this.web3Provider = web3Provider;
      }
      signTypedData(walletAddress, typedData) {
        const extendedWeb3 = this.web3Provider.extend({
          methods: [
            {
              name: "signTypedDataV4",
              call: "eth_signTypedData_v4",
              params: 2
            }
          ]
        });
        return extendedWeb3.signTypedDataV4(walletAddress, JSON.stringify(typedData));
      }
      ethCall(contractAddress, callData) {
        return this.web3Provider.eth.call({
          to: contractAddress,
          data: callData
        });
      }
    };
    exports.Web3ProviderConnector = Web3ProviderConnector2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/blockchain/index.js
var require_blockchain = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/blockchain/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_blockchain_provider_connector(), exports);
    __exportStar2(require_private_key_provider_connector(), exports);
    __exportStar2(require_web3_provider_connector(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/http/http-provider.connector.js
var require_http_provider_connector2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/http/http-provider.connector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/axios/dist/browser/axios.cjs
var require_axios = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/axios/dist/browser/axios.cjs"(exports, module) {
    "use strict";
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    var typeOfTest = (type) => (thing) => typeof thing === type;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined") return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }
    var extend = (a, b2, thisArg, { allOwnKeys } = {}) => {
      forEach(b2, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    var stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null) return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing) return null;
      if (isArray(thing)) return thing;
      let i = thing.length;
      if (!isNumber(i)) return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value)) return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define2 = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define2(arrayOrString) : define2(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    var ALPHA = "abcdefghijklmnopqrstuvwxyz";
    var DIGIT = "0123456789";
    var ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction(_global.postMessage)
    );
    var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    var utils$1 = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      response && (this.response = response);
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.response && this.response.status ? this.response.status : null
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var httpAdapter = null;
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path) return key;
      return path.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null) return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils$1.isUndefined(value)) return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode3(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode3;
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id3) {
        if (this.handlers[id3]) {
          this.handlers[id3] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    var FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    var Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    var platform$1 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    var hasStandardBrowserEnv = ((product) => {
      return hasBrowserEnv && ["ReactNative", "NativeScript", "NS"].indexOf(product) < 0;
    })(typeof navigator !== "undefined" && navigator.product);
    var hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var origin = hasBrowserEnv && window.location.href || "http://localhost";
    var utils = Object.freeze({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      hasStandardBrowserEnv,
      origin
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index) {
        let name = path[index++];
        if (name === "__proto__") return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value, target[name], index);
        if (result && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
      if (utils$1.isFunction(filter)) {
        return filter.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value)) return;
      if (utils$1.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }
      if (utils$1.isRegExp(filter)) {
        return filter.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isHeaders(header)) {
          for (const [key, value] of header.entries()) {
            setHeader(value, key, rewrite);
          }
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes3 = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push(chunkLength) {
        const now5 = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now5;
        }
        bytes3[head] = chunkLength;
        timestamps[head] = now5;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes3[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now5 - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now5 - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle(fn, freq) {
      let timestamp = 0;
      let threshold = 1e3 / freq;
      let lastArgs;
      let timer;
      const invoke = (args, now5 = Date.now()) => {
        timestamp = now5;
        lastArgs = null;
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        fn.apply(null, args);
      };
      const throttled = (...args) => {
        const now5 = Date.now();
        const passed = now5 - timestamp;
        if (passed >= threshold) {
          invoke(args, now5);
        } else {
          lastArgs = args;
          if (!timer) {
            timer = setTimeout(() => {
              timer = null;
              invoke(lastArgs);
            }, threshold - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return throttle((e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    var progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    var asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        const msie = /(msie|trident)/i.test(navigator.userAgent);
        const urlParsingNode = document.createElement("a");
        let originURL;
        function resolveURL(url) {
          let href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin2(requestURL) {
          const parsed = utils$1.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return function isURLSameOrigin2() {
          return true;
        };
      }()
    );
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b2, caseless) {
        if (!utils$1.isUndefined(b2)) {
          return getMergedValue(a, b2, caseless);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a, caseless);
        }
      }
      function valueFromConfig2(a, b2) {
        if (!utils$1.isUndefined(b2)) {
          return getMergedValue(void 0, b2);
        }
      }
      function defaultToConfig2(a, b2) {
        if (!utils$1.isUndefined(b2)) {
          return getMergedValue(void 0, b2);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b2, prop) {
        if (prop in config2) {
          return getMergedValue(a, b2);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b2) => mergeDeepProperties(headersToObject(a), headersToObject(b2), true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var resolveConfig = (config) => {
      const newConfig = mergeConfig({}, config);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
          headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
        }
      }
      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config.url);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var composeSignals = (signals, timeout) => {
      let controller = new AbortController();
      let aborted;
      const onabort = function(cancel) {
        if (!aborted) {
          aborted = true;
          unsubscribe();
          const err = cancel instanceof Error ? cancel : this.reason;
          controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
        }
      };
      let timer = timeout && setTimeout(() => {
        onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
      }, timeout);
      const unsubscribe = () => {
        if (signals) {
          timer && clearTimeout(timer);
          timer = null;
          signals.forEach((signal2) => {
            signal2 && (signal2.removeEventListener ? signal2.removeEventListener("abort", onabort) : signal2.unsubscribe(onabort));
          });
          signals = null;
        }
      };
      signals.forEach((signal2) => signal2 && signal2.addEventListener && signal2.addEventListener("abort", onabort));
      const { signal } = controller;
      signal.unsubscribe = unsubscribe;
      return [signal, () => {
        timer && clearTimeout(timer);
        timer = null;
      }];
    };
    var composeSignals$1 = composeSignals;
    var streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    var readBytes = async function* (iterable, chunkSize, encode4) {
      for await (const chunk of iterable) {
        yield* streamChunk(ArrayBuffer.isView(chunk) ? chunk : await encode4(String(chunk)), chunkSize);
      }
    };
    var trackStream = (stream, chunkSize, onProgress, onFinish, encode4) => {
      const iterator = readBytes(stream, chunkSize, encode4);
      let bytes3 = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes3 += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    var test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false;
      }
    };
    var supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    var DEFAULT_CHUNK_SIZE = 64 * 1024;
    var supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
    var resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
        !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
          throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
        });
      });
    })(new Response());
    var getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        return (await new Request(body).arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    var resolveBodyLength = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    var fetchAdapter = isFetchSupported && (async (config) => {
      let {
        url,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let [composedSignal, stopTimeout] = signal || cancelToken || timeout ? composeSignals$1([signal, cancelToken], timeout) : [];
      let finished, request;
      const onFinish = () => {
        !finished && setTimeout(() => {
          composedSignal && composedSignal.unsubscribe();
        });
        finished = true;
      };
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request2 = new Request(url, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request2.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request2.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request2.body, DEFAULT_CHUNK_SIZE, onProgress, flush, encodeText);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        request = new Request(url, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: withCredentials
        });
        let response = await fetch(request);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              isStreamResponse && onFinish();
            }, encodeText),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
        !isStreamResponse && onFinish();
        stopTimeout && stopTimeout();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        });
      } catch (err) {
        onFinish();
        if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError.from(err, err && err.code, config, request);
      }
    });
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason = (reason) => `- ${reason}`;
    var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          let id3;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id3 = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id3}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id3 || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id3, state]) => `adapter ${id3} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var VERSION = "1.7.4";
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version11, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version11 ? " in " + version11 : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version11 && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version11 + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy;
            Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class _CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners) return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index = this._listeners.indexOf(listener);
        if (index !== -1) {
          this._listeners.splice(index, 1);
        }
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new _CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module.exports = axios;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/errors.js
var require_errors4 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuthError = void 0;
    var AuthError = class extends Error {
      constructor() {
        super("Auth error, please use token from https://portal.1inch.dev/");
      }
    };
    exports.AuthError = AuthError;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/http/axios-provider.connector.js
var require_axios_provider_connector = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/http/axios-provider.connector.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar2 = exports && exports.__importStar || function(mod2) {
      if (mod2 && mod2.__esModule) return mod2;
      var result = {};
      if (mod2 != null) {
        for (var k in mod2) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod2, k)) __createBinding2(result, mod2, k);
      }
      __setModuleDefault2(result, mod2);
      return result;
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AxiosProviderConnector = void 0;
    var axios_1 = __importStar2(require_axios());
    var errors_1 = require_errors4();
    var AxiosProviderConnector2 = class {
      constructor(authKey) {
        this.authKey = authKey;
      }
      async get(url) {
        var _a2;
        try {
          const res = await axios_1.default.get(url, this.authKey ? {
            headers: {
              Authorization: `Bearer ${this.authKey}`
            }
          } : void 0);
          return res.data;
        } catch (error) {
          if ((0, axios_1.isAxiosError)(error) && ((_a2 = error.response) == null ? void 0 : _a2.status) === 401) {
            throw new errors_1.AuthError();
          }
          throw error;
        }
      }
      async post(url, data) {
        var _a2;
        try {
          const res = await axios_1.default.post(url, data, this.authKey ? {
            headers: {
              Authorization: `Bearer ${this.authKey}`
            }
          } : void 0);
          return res.data;
        } catch (error) {
          if ((0, axios_1.isAxiosError)(error) && ((_a2 = error.response) == null ? void 0 : _a2.status) === 401) {
            throw new errors_1.AuthError();
          }
          throw error;
        }
      }
    };
    exports.AxiosProviderConnector = AxiosProviderConnector2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/http/index.js
var require_http = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/http/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_http_provider_connector2(), exports);
    __exportStar2(require_axios_provider_connector(), exports);
  }
});

// node_modules/ws/browser.js
var require_browser = __commonJS({
  "node_modules/ws/browser.js"(exports, module) {
    "use strict";
    module.exports = function() {
      throw new Error(
        "ws does not work in the browser. Browser clients must use the native WebSocket object"
      );
    };
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/ws/websocket-client.connector.js
var require_websocket_client_connector = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/ws/websocket-client.connector.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebsocketClient = void 0;
    var ws_1 = __importDefault2(require_browser());
    var WebsocketClient2 = class {
      constructor(config) {
        this.url = config.url;
        this.authKey = config.authKey;
        const lazyInit = config.lazyInit || false;
        if (!lazyInit) {
          this.initialized = true;
          this.ws = new ws_1.default(this.url, this.authKey ? {
            headers: {
              Authorization: `Bearer ${this.authKey}`
            }
          } : void 0);
          return;
        }
        this.initialized = false;
      }
      init() {
        if (this.initialized) {
          throw new Error("WebSocket is already initialized");
        }
        this.initialized = true;
        this.ws = new ws_1.default(this.url, this.authKey ? {
          headers: {
            Authorization: `Bearer ${this.authKey}`
          }
        } : void 0);
      }
      on(event, cb) {
        this.checkInitialized();
        this.ws.on(event, cb);
      }
      off(event, cb) {
        this.checkInitialized();
        this.ws.off(event, cb);
      }
      onOpen(cb) {
        this.on("open", cb);
      }
      send(message) {
        this.checkInitialized();
        const serialized = JSON.stringify(message);
        this.ws.send(serialized);
      }
      onMessage(cb) {
        this.on("message", (data) => {
          const parsedData = JSON.parse(data);
          cb(parsedData);
        });
      }
      onClose(cb) {
        this.on("close", cb);
      }
      onError(cb) {
        this.on("error", cb);
      }
      close() {
        this.checkInitialized();
        this.ws.close();
      }
      checkInitialized() {
        if (!this.initialized) {
          throwInitError();
        }
      }
    };
    exports.WebsocketClient = WebsocketClient2;
    function throwInitError() {
      throw new Error("WebSocket is not initialized. Call init() first.");
    }
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/ws/types.js
var require_types8 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/ws/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/ws/websocket-provider.connector.js
var require_websocket_provider_connector = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/ws/websocket-provider.connector.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/ws/index.js
var require_ws = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/ws/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_websocket_client_connector(), exports);
    __exportStar2(require_types8(), exports);
    __exportStar2(require_websocket_provider_connector(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/index.js
var require_connector = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/connector/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_blockchain(), exports);
    __exportStar2(require_http(), exports);
    __exportStar2(require_ws(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quoter.api.js
var require_quoter_api = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quoter.api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuoterApi = void 0;
    var quote_1 = require_quote2();
    var params_1 = require_params();
    var connector_1 = require_connector();
    var QuoterApi2 = class _QuoterApi {
      constructor(config, httpClient) {
        this.config = config;
        this.httpClient = httpClient;
      }
      static new(config, httpClient = new connector_1.AxiosProviderConnector(config.authKey)) {
        return new _QuoterApi(config, httpClient);
      }
      async getQuote(params) {
        const queryParams = (0, params_1.concatQueryParams)(params.build());
        const url = `${this.config.url}/${_QuoterApi.Version}/${this.config.network}/quote/receive/${queryParams}`;
        const res = await this.httpClient.get(url);
        return new quote_1.Quote(params, res);
      }
      async getQuoteWithCustomPreset(params, body) {
        const bodyErr = body.validate();
        if (bodyErr) {
          throw new Error(bodyErr);
        }
        const queryParams = (0, params_1.concatQueryParams)(params.build());
        const bodyParams = body.build();
        const url = `${this.config.url}/${_QuoterApi.Version}/${this.config.network}/quote/receive/${queryParams}`;
        const res = await this.httpClient.post(url, bodyParams);
        return new quote_1.Quote(params, res);
      }
    };
    exports.QuoterApi = QuoterApi2;
    QuoterApi2.Version = "v2.0";
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quoter-custom-preset.request.js
var require_quoter_custom_preset_request = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/quoter-custom-preset.request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QuoterCustomPresetRequest = void 0;
    var validations_1 = require_validations4();
    var QuoterCustomPresetRequest2 = class _QuoterCustomPresetRequest {
      constructor(params) {
        this.customPreset = params.customPreset;
      }
      static new(params) {
        return new _QuoterCustomPresetRequest(params);
      }
      build() {
        return {
          auctionDuration: this.customPreset.auctionDuration,
          auctionEndAmount: this.customPreset.auctionEndAmount,
          auctionStartAmount: this.customPreset.auctionStartAmount,
          points: this.customPreset.points
        };
      }
      validate() {
        if (!(0, validations_1.isValidAmount)(this.customPreset.auctionStartAmount)) {
          return "Invalid auctionStartAmount";
        }
        if (!(0, validations_1.isValidAmount)(this.customPreset.auctionEndAmount)) {
          return "Invalid auctionEndAmount";
        }
        const durationErr = this.validateAuctionDuration(this.customPreset.auctionDuration);
        if (durationErr) {
          return durationErr;
        }
        const pointsErr = this.validatePoints(this.customPreset.points, this.customPreset.auctionStartAmount, this.customPreset.auctionEndAmount);
        if (pointsErr) {
          return pointsErr;
        }
        return null;
      }
      validateAuctionDuration(duration) {
        if (typeof duration !== "number" || isNaN(duration)) {
          return "auctionDuration should be integer";
        }
        if (!Number.isInteger(duration)) {
          return "auctionDuration should be integer (not float)";
        }
        return null;
      }
      validatePoints(points = [], auctionStartAmount, auctionEndAmount) {
        if (!points) {
          return null;
        }
        try {
          const toTokenAmounts = points.map((p) => BigInt(p.toTokenAmount));
          const isValid = toTokenAmounts.every((amount) => amount <= BigInt(auctionStartAmount) && amount >= BigInt(auctionEndAmount));
          if (!isValid) {
            return "points should be in range of auction";
          }
        } catch (e) {
          return `points should be an array of valid amounts`;
        }
        return null;
      }
    };
    exports.QuoterCustomPresetRequest = QuoterCustomPresetRequest2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/index.js
var require_quoter = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/quoter/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_quote2(), exports);
    __exportStar2(require_quoter_request(), exports);
    __exportStar2(require_quoter_api(), exports);
    __exportStar2(require_types6(), exports);
    __exportStar2(require_preset(), exports);
    __exportStar2(require_quoter_custom_preset_request(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/relayer/relayer.request.js
var require_relayer_request = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/relayer/relayer.request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelayerRequest = void 0;
    var RelayerRequest2 = class _RelayerRequest {
      constructor(params) {
        this.order = params.order;
        this.signature = params.signature;
        this.quoteId = params.quoteId;
        this.extension = params.extension;
      }
      static new(params) {
        return new _RelayerRequest(params);
      }
      build() {
        return {
          order: this.order,
          signature: this.signature,
          quoteId: this.quoteId,
          extension: this.extension
        };
      }
    };
    exports.RelayerRequest = RelayerRequest2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/relayer/relayer.api.js
var require_relayer_api = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/relayer/relayer.api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RelayerApi = void 0;
    var connector_1 = require_connector();
    var RelayerApi2 = class _RelayerApi {
      constructor(config, httpClient) {
        this.config = config;
        this.httpClient = httpClient;
      }
      static new(config, httpClient = new connector_1.AxiosProviderConnector(config.authKey)) {
        return new _RelayerApi(config, httpClient);
      }
      submit(params) {
        const url = `${this.config.url}/${_RelayerApi.Version}/${this.config.network}/order/submit`;
        return this.httpClient.post(url, params);
      }
      submitBatch(params) {
        const url = `${this.config.url}/${_RelayerApi.Version}/${this.config.network}/order/submit/many`;
        return this.httpClient.post(url, params);
      }
    };
    exports.RelayerApi = RelayerApi2;
    RelayerApi2.Version = "v2.0";
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/relayer/types.js
var require_types9 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/relayer/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/relayer/index.js
var require_relayer = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/relayer/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_relayer_request(), exports);
    __exportStar2(require_relayer_api(), exports);
    __exportStar2(require_types9(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/orders/orders.api.js
var require_orders_api = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/orders/orders.api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OrdersApi = void 0;
    var connector_1 = require_connector();
    var params_1 = require_params();
    var OrdersApi2 = class _OrdersApi {
      constructor(config, httpClient) {
        this.config = config;
        this.httpClient = httpClient;
      }
      static new(config, httpClient = new connector_1.AxiosProviderConnector(config.authKey)) {
        return new _OrdersApi(config, httpClient);
      }
      async getActiveOrders(params) {
        const err = params.validate();
        if (err) {
          throw new Error(err);
        }
        const queryParams = (0, params_1.concatQueryParams)(params.build());
        const url = `${this.config.url}/${_OrdersApi.Version}/${this.config.network}/order/active/${queryParams}`;
        return this.httpClient.get(url);
      }
      async getOrderStatus(params) {
        const err = params.validate();
        if (err) {
          throw new Error(err);
        }
        const url = `${this.config.url}/${_OrdersApi.Version}/${this.config.network}/order/status/${params.orderHash}`;
        return this.httpClient.get(url);
      }
      async getOrdersByMaker(params) {
        const err = params.validate();
        if (err) {
          throw new Error(err);
        }
        const qp = (0, params_1.concatQueryParams)(params.buildQueryParams());
        const url = `${this.config.url}/${_OrdersApi.Version}/${this.config.network}/order/maker/${params.address}/${qp}`;
        return this.httpClient.get(url);
      }
    };
    exports.OrdersApi = OrdersApi2;
    OrdersApi2.Version = "v2.0";
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/pagination.js
var require_pagination = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/pagination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PaginationRequest = void 0;
    var PaginationRequest2 = class {
      constructor(page, limit) {
        this.page = page;
        this.limit = limit;
      }
      validate() {
        if (this.limit != null && (this.limit < 1 || this.limit > 500)) {
          return "limit should be in range between 1 and 500";
        }
        if (this.page != null && this.page < 1) {
          return `page should be >= 1`;
        }
        return null;
      }
    };
    exports.PaginationRequest = PaginationRequest2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/orders/orders.request.js
var require_orders_request = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/orders/orders.request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OrdersByMakerRequest = exports.OrderStatusRequest = exports.ActiveOrdersRequest = void 0;
    var validations_1 = require_validations4();
    var pagination_1 = require_pagination();
    var ActiveOrdersRequest2 = class _ActiveOrdersRequest {
      constructor(params = {}) {
        this.pagination = new pagination_1.PaginationRequest(params.page, params.limit);
      }
      static new(params) {
        return new _ActiveOrdersRequest(params);
      }
      validate() {
        const res = this.pagination.validate();
        if (res) {
          return res;
        }
        return null;
      }
      build() {
        return {
          page: this.pagination.page,
          limit: this.pagination.limit
        };
      }
    };
    exports.ActiveOrdersRequest = ActiveOrdersRequest2;
    var OrderStatusRequest2 = class _OrderStatusRequest {
      constructor(params) {
        this.orderHash = params.orderHash;
      }
      static new(params) {
        return new _OrderStatusRequest(params);
      }
      validate() {
        if (this.orderHash.length !== 66) {
          return `orderHash length should be equals 66`;
        }
        if (!(0, validations_1.isHexString)(this.orderHash)) {
          return `orderHash have to be hex`;
        }
        return null;
      }
      build() {
        return {
          orderHash: this.orderHash
        };
      }
    };
    exports.OrderStatusRequest = OrderStatusRequest2;
    var OrdersByMakerRequest2 = class _OrdersByMakerRequest {
      constructor(params) {
        this.address = params.address;
        this.pagination = new pagination_1.PaginationRequest(params.page, params.limit);
      }
      static new(params) {
        return new _OrdersByMakerRequest(params);
      }
      validate() {
        const res = this.pagination.validate();
        if (res) {
          return res;
        }
        if (!(0, validations_1.isValidAddress)(this.address)) {
          return `${this.address} is invalid address`;
        }
        return null;
      }
      buildQueryParams() {
        return {
          limit: this.pagination.limit,
          page: this.pagination.page
        };
      }
    };
    exports.OrdersByMakerRequest = OrdersByMakerRequest2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/orders/types.js
var require_types10 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/orders/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OrderStatus = void 0;
    var OrderStatus2;
    (function(OrderStatus3) {
      OrderStatus3["Pending"] = "pending";
      OrderStatus3["Filled"] = "filled";
      OrderStatus3["FalsePredicate"] = "false-predicate";
      OrderStatus3["NotEnoughBalanceOrAllowance"] = "not-enough-balance-or-allowance";
      OrderStatus3["Expired"] = "expired";
      OrderStatus3["PartiallyFilled"] = "partially-filled";
      OrderStatus3["WrongPermit"] = "wrong-permit";
      OrderStatus3["Cancelled"] = "cancelled";
      OrderStatus3["InvalidSignature"] = "invalid-signature";
    })(OrderStatus2 = exports.OrderStatus || (exports.OrderStatus = {}));
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/orders/index.js
var require_orders = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/orders/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_orders_api(), exports);
    __exportStar2(require_orders_request(), exports);
    __exportStar2(require_types10(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/fusion-api.js
var require_fusion_api = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/fusion-api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FusionApi = void 0;
    var quoter_1 = require_quoter();
    var relayer_1 = require_relayer();
    var orders_1 = require_orders();
    var connector_1 = require_connector();
    var FusionApi2 = class _FusionApi {
      constructor(config) {
        this.quoterApi = quoter_1.QuoterApi.new({
          url: `${config.url}/quoter`,
          network: config.network,
          authKey: config.authKey
        }, config.httpProvider);
        this.relayerApi = relayer_1.RelayerApi.new({
          url: `${config.url}/relayer`,
          network: config.network,
          authKey: config.authKey
        }, config.httpProvider);
        this.ordersApi = orders_1.OrdersApi.new({
          url: `${config.url}/orders`,
          network: config.network,
          authKey: config.authKey
        }, config.httpProvider);
      }
      static new(config) {
        return new _FusionApi({
          network: config.network,
          url: config.url,
          authKey: config.authKey,
          httpProvider: config.httpProvider || new connector_1.AxiosProviderConnector(config.authKey)
        });
      }
      getQuote(params) {
        return this.quoterApi.getQuote(params);
      }
      getQuoteWithCustomPreset(params, body) {
        return this.quoterApi.getQuoteWithCustomPreset(params, body);
      }
      getActiveOrders(params = orders_1.ActiveOrdersRequest.new()) {
        return this.ordersApi.getActiveOrders(params);
      }
      getOrderStatus(params) {
        return this.ordersApi.getOrderStatus(params);
      }
      getOrdersByMaker(params) {
        return this.ordersApi.getOrdersByMaker(params);
      }
      submitOrder(params) {
        return this.relayerApi.submit(params);
      }
      submitOrderBatch(params) {
        return this.relayerApi.submitBatch(params);
      }
    };
    exports.FusionApi = FusionApi2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/types.js
var require_types11 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/index.js
var require_api3 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/api/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_params(), exports);
    __exportStar2(require_quoter(), exports);
    __exportStar2(require_relayer(), exports);
    __exportStar2(require_orders(), exports);
    __exportStar2(require_fusion_api(), exports);
    __exportStar2(require_pagination(), exports);
    __exportStar2(require_types11(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/sdk/sdk.js
var require_sdk = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/sdk/sdk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FusionSDK = void 0;
    var limit_order_sdk_1 = require_dist3();
    var encoders_1 = require_encoders();
    var api_1 = require_api3();
    var orders_1 = require_orders();
    var FusionSDK = class {
      constructor(config) {
        this.config = config;
        this.api = api_1.FusionApi.new({
          url: config.url,
          network: config.network,
          httpProvider: config.httpProvider,
          authKey: config.authKey
        });
      }
      async getActiveOrders({ page, limit } = {}) {
        const request = orders_1.ActiveOrdersRequest.new({ page, limit });
        return this.api.getActiveOrders(request);
      }
      async getOrderStatus(orderHash) {
        const request = orders_1.OrderStatusRequest.new({ orderHash });
        return this.api.getOrderStatus(request);
      }
      async getOrdersByMaker({ limit, page, address }) {
        const request = orders_1.OrdersByMakerRequest.new({ limit, page, address });
        return this.api.getOrdersByMaker(request);
      }
      async getQuote(params) {
        const request = api_1.QuoterRequest.new({
          fromTokenAddress: params.fromTokenAddress,
          toTokenAddress: params.toTokenAddress,
          amount: params.amount,
          walletAddress: params.walletAddress || limit_order_sdk_1.Address.ZERO_ADDRESS.toString(),
          permit: params.permit,
          enableEstimate: !!params.enableEstimate,
          fee: params == null ? void 0 : params.takingFeeBps,
          source: params.source,
          isPermit2: params.isPermit2
        });
        return this.api.getQuote(request);
      }
      async getQuoteWithCustomPreset(params, body) {
        const paramsRequest = api_1.QuoterRequest.new({
          fromTokenAddress: params.fromTokenAddress,
          toTokenAddress: params.toTokenAddress,
          amount: params.amount,
          walletAddress: params.walletAddress || limit_order_sdk_1.Address.ZERO_ADDRESS.toString(),
          permit: params.permit,
          enableEstimate: !!params.enableEstimate,
          fee: params == null ? void 0 : params.takingFeeBps,
          source: params.source,
          isPermit2: params.isPermit2
        });
        const bodyRequest = api_1.QuoterCustomPresetRequest.new({
          customPreset: body.customPreset
        });
        return this.api.getQuoteWithCustomPreset(paramsRequest, bodyRequest);
      }
      async createOrder(params) {
        var _a2;
        const quote = await this.getQuoteResult(params);
        if (!quote.quoteId) {
          throw new Error("quoter has not returned quoteId");
        }
        const order = quote.createFusionOrder({
          receiver: params.receiver ? new limit_order_sdk_1.Address(params.receiver) : void 0,
          preset: params.preset,
          nonce: params.nonce,
          takingFeeReceiver: (_a2 = params.fee) == null ? void 0 : _a2.takingFeeReceiver,
          allowPartialFills: params.allowPartialFills,
          allowMultipleFills: params.allowMultipleFills,
          network: this.config.network
        });
        const hash2 = order.getOrderHash(this.config.network);
        return { order, hash: hash2, quoteId: quote.quoteId };
      }
      async submitOrder(order, quoteId) {
        if (!this.config.blockchainProvider) {
          throw new Error("blockchainProvider has not set to config");
        }
        const orderStruct = order.build();
        const signature = await this.config.blockchainProvider.signTypedData(orderStruct.maker, order.getTypedData(this.config.network));
        const relayerRequest = api_1.RelayerRequest.new({
          order: orderStruct,
          signature,
          quoteId,
          extension: order.extension.encode()
        });
        await this.api.submitOrder(relayerRequest);
        return {
          order: orderStruct,
          signature,
          quoteId,
          orderHash: order.getOrderHash(this.config.network),
          extension: relayerRequest.extension
        };
      }
      async placeOrder(params) {
        const { order, quoteId } = await this.createOrder(params);
        return this.submitOrder(order, quoteId);
      }
      async buildCancelOrderCallData(orderHash) {
        const getOrderRequest = orders_1.OrderStatusRequest.new({ orderHash });
        const orderData = await this.api.getOrderStatus(getOrderRequest);
        if (!orderData) {
          throw new Error(`Can not get order with the specified orderHash ${orderHash}`);
        }
        const { order } = orderData;
        return (0, encoders_1.encodeCancelOrder)(orderHash, new limit_order_sdk_1.MakerTraits(BigInt(order.makerTraits)));
      }
      async getQuoteResult(params) {
        var _a2;
        const quoterRequest = api_1.QuoterRequest.new({
          fromTokenAddress: params.fromTokenAddress,
          toTokenAddress: params.toTokenAddress,
          amount: params.amount,
          walletAddress: params.walletAddress,
          permit: params.permit,
          enableEstimate: true,
          fee: (_a2 = params.fee) == null ? void 0 : _a2.takingFeeBps,
          source: params.source,
          isPermit2: params.isPermit2
        });
        if (!params.customPreset) {
          return this.api.getQuote(quoterRequest);
        }
        const quoterWithCustomPresetBodyRequest = api_1.QuoterCustomPresetRequest.new({
          customPreset: params.customPreset
        });
        return this.api.getQuoteWithCustomPreset(quoterRequest, quoterWithCustomPresetBodyRequest);
      }
    };
    exports.FusionSDK = FusionSDK;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/sdk/types.js
var require_types12 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/sdk/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/sdk/utils.js
var require_utils8 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/sdk/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.addRatioToAmount = exports.bpsToRatioFormat = void 0;
    var FEE_BASE = 100000n;
    var BPS_BASE = 10000n;
    var BPS_TO_RATIO_NUMERATOR = FEE_BASE / BPS_BASE;
    function bpsToRatioFormat2(bps) {
      if (!bps) {
        return 0n;
      }
      return BigInt(bps) * BPS_TO_RATIO_NUMERATOR;
    }
    exports.bpsToRatioFormat = bpsToRatioFormat2;
    function addRatioToAmount(amount, ratio) {
      return amount + amount * ratio / FEE_BASE;
    }
    exports.addRatioToAmount = addRatioToAmount;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/sdk/index.js
var require_sdk2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/sdk/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_sdk(), exports);
    __exportStar2(require_types12(), exports);
    __exportStar2(require_encoders(), exports);
    __exportStar2(require_utils8(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/auction-calculator/auction-calculator.js
var require_auction_calculator = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/auction-calculator/auction-calculator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AuctionCalculator = void 0;
    var constants_1 = require_constants7();
    var sdk_1 = require_sdk2();
    var AuctionCalculator2 = class _AuctionCalculator {
      constructor(startTime, duration, initialRateBump, points, takerFeeRatio, gasCost = {
        gasBumpEstimate: 0n,
        gasPriceEstimate: 0n
      }) {
        this.startTime = startTime;
        this.duration = duration;
        this.initialRateBump = initialRateBump;
        this.points = points;
        this.takerFeeRatio = takerFeeRatio;
        this.gasCost = gasCost;
      }
      get finishTime() {
        return this.startTime + this.duration;
      }
      static fromAuctionData(data, details) {
        var _a2;
        return new _AuctionCalculator(details.startTime, details.duration, details.initialRateBump, details.points, ((_a2 = data.integratorFee) == null ? void 0 : _a2.ratio) || 0n, details.gasCost);
      }
      static calcInitialRateBump(startAmount, endAmount) {
        const bump = constants_1.RATE_BUMP_DENOMINATOR * startAmount / endAmount - constants_1.RATE_BUMP_DENOMINATOR;
        return Number(bump);
      }
      /**
       * Important!: method implementation is different from contract implementation
       * Because of that, sdk amount can be less than contract amount by 1 wad
       *
       * @see https://github.com/1inch/limit-order-settlement/blob/2eef6f86bf0142024f9a8bf054a0256b41d8362a/contracts/extensions/BaseExtension.sol#L66
       */
      static calcAuctionTakingAmount(takingAmount, rate, takerFeeRatio) {
        const auctionTakingAmount = BigInt(takingAmount) * (BigInt(rate) + constants_1.RATE_BUMP_DENOMINATOR) / constants_1.RATE_BUMP_DENOMINATOR;
        if (takerFeeRatio === 0n) {
          return auctionTakingAmount;
        }
        return (0, sdk_1.addRatioToAmount)(auctionTakingAmount, takerFeeRatio);
      }
      /**
       * Encode estimation `baseFee` as `gasPriceEstimate` for `AuctionGasCostInfo`
       */
      static baseFeeToGasPriceEstimate(baseFee) {
        return baseFee / _AuctionCalculator.GAS_PRICE_BASE;
      }
      /**
       * Calculates `gasBumpEstimate` for `AuctionGasCostInfo`
       *
       * @param endTakingAmount min return in destToken
       * @param gasCostInToToken gas cost in destToken
       */
      static calcGasBumpEstimate(endTakingAmount, gasCostInToToken) {
        return gasCostInToToken * constants_1.RATE_BUMP_DENOMINATOR / endTakingAmount;
      }
      calcAuctionTakingAmount(takingAmount, rate) {
        return _AuctionCalculator.calcAuctionTakingAmount(takingAmount, rate, this.takerFeeRatio);
      }
      /**
       * @see https://github.com/1inch/limit-order-settlement/blob/273defdf7b0f1867299dcbc306f32f035579310f/contracts/extensions/BaseExtension.sol#L121
       * @param time auction timestamp in seconds
       * @param blockBaseFee blockBaseFee in Wei, if passed, then rate will be calculated as if order executed in block with `blockBaseFee`
       */
      calcRateBump(time, blockBaseFee = 0n) {
        const gasBump = this.getGasPriceBump(blockBaseFee);
        const auctionBump = this.getAuctionBump(time);
        const final = auctionBump > gasBump ? auctionBump - gasBump : 0n;
        return Number(final);
      }
      getGasPriceBump(blockBaseFee) {
        if (this.gasCost.gasBumpEstimate === 0n || this.gasCost.gasPriceEstimate === 0n || blockBaseFee === 0n) {
          return 0n;
        }
        return this.gasCost.gasBumpEstimate * blockBaseFee / this.gasCost.gasPriceEstimate / _AuctionCalculator.GAS_PRICE_BASE;
      }
      getAuctionBump(blockTime) {
        const auctionFinishTime = this.finishTime;
        if (blockTime <= this.startTime) {
          return this.initialRateBump;
        } else if (blockTime >= auctionFinishTime) {
          return 0n;
        }
        let currentPointTime = this.startTime;
        let currentRateBump = this.initialRateBump;
        for (const { coefficient: nextRateBump, delay } of this.points) {
          const nextPointTime = BigInt(delay) + currentPointTime;
          if (blockTime <= nextPointTime) {
            return ((blockTime - currentPointTime) * BigInt(nextRateBump) + (nextPointTime - blockTime) * currentRateBump) / (nextPointTime - currentPointTime);
          }
          currentPointTime = nextPointTime;
          currentRateBump = BigInt(nextRateBump);
        }
        return (auctionFinishTime - blockTime) * currentRateBump / (auctionFinishTime - currentPointTime);
      }
    };
    exports.AuctionCalculator = AuctionCalculator2;
    AuctionCalculator2.GAS_PRICE_BASE = 1000000n;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/auction-calculator/index.js
var require_auction_calculator2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/auction-calculator/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_auction_calculator(), exports);
    __exportStar2(require_constants7(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/utils/amounts.js
var require_amounts2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/utils/amounts.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.calcMakingAmount = exports.calcTakingAmount = void 0;
    function calcTakingAmount2(swapMakerAmount, orderMakerAmount, orderTakerAmount) {
      return (swapMakerAmount * orderTakerAmount + orderMakerAmount - 1n) / orderMakerAmount;
    }
    exports.calcTakingAmount = calcTakingAmount2;
    function calcMakingAmount2(swapTakerAmount, orderMakerAmount, orderTakerAmount) {
      return swapTakerAmount * orderMakerAmount / orderTakerAmount;
    }
    exports.calcMakingAmount = calcMakingAmount2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/fusion-order.js
var require_fusion_order = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/fusion-order.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FusionOrder = void 0;
    var limit_order_sdk_1 = require_dist3();
    var assert_1 = __importDefault2(require_assert2());
    var fusion_extension_1 = require_fusion_extension();
    var auction_details_1 = require_auction_details2();
    var settlement_post_interaction_data_1 = require_settlement_post_interaction_data2();
    var source_track_1 = require_source_track();
    var auction_calculator_1 = require_auction_calculator2();
    var constants_1 = require_constants6();
    var amounts_1 = require_amounts2();
    var time_1 = require_time();
    var FusionOrder2 = class _FusionOrder {
      constructor(settlementExtensionContract, orderInfo, auctionDetails, postInteractionData, extra = _FusionOrder.defaultExtra, extension = new fusion_extension_1.FusionExtension(settlementExtensionContract, auctionDetails, postInteractionData, extra.permit ? new limit_order_sdk_1.Interaction(orderInfo.makerAsset, extra.permit) : void 0)) {
        var _a2;
        this.settlementExtensionContract = settlementExtensionContract;
        const allowPartialFills = extra.allowPartialFills ?? _FusionOrder.defaultExtra.allowPartialFills;
        const allowMultipleFills = extra.allowMultipleFills ?? _FusionOrder.defaultExtra.allowMultipleFills;
        const unwrapWETH = extra.unwrapWETH ?? _FusionOrder.defaultExtra.unwrapWETH;
        const enablePermit2 = extra.enablePermit2 ?? _FusionOrder.defaultExtra.enablePermit2;
        const orderExpirationDelay = extra.orderExpirationDelay ?? _FusionOrder.defaultExtra.orderExpirationDelay;
        const deadline = auctionDetails.startTime + auctionDetails.duration + orderExpirationDelay;
        const makerTraits = limit_order_sdk_1.MakerTraits.default().withExpiration(deadline).setPartialFills(allowPartialFills).setMultipleFills(allowMultipleFills).enablePostInteraction();
        if (makerTraits.isBitInvalidatorMode()) {
          (0, assert_1.default)(extra.nonce !== void 0, "Nonce required, when partial fill or multiple fill disallowed");
        }
        if (unwrapWETH) {
          makerTraits.enableNativeUnwrap();
        }
        if (enablePermit2) {
          makerTraits.enablePermit2();
        }
        if (extra.nonce !== void 0) {
          makerTraits.withNonce(extra.nonce);
        }
        const receiver = ((_a2 = postInteractionData.integratorFee) == null ? void 0 : _a2.ratio) ? settlementExtensionContract : orderInfo.receiver;
        const builtExtension = extension.build();
        const salt = limit_order_sdk_1.LimitOrder.buildSalt(builtExtension, orderInfo.salt);
        const saltWithInjectedTrackCode = orderInfo.salt ? salt : (0, source_track_1.injectTrackCode)(salt, extra.source);
        this.inner = new limit_order_sdk_1.LimitOrder({
          ...orderInfo,
          receiver,
          salt: saltWithInjectedTrackCode
        }, makerTraits, builtExtension);
        this.fusionExtension = extension;
      }
      get extension() {
        return this.inner.extension;
      }
      get maker() {
        return this.inner.maker;
      }
      get takerAsset() {
        return this.inner.takerAsset;
      }
      get makerAsset() {
        return this.inner.makerAsset;
      }
      get takingAmount() {
        return this.inner.takingAmount;
      }
      get makingAmount() {
        return this.inner.makingAmount;
      }
      get receiver() {
        return this.inner.receiver;
      }
      /**
       * Timestamp in sec
       */
      get deadline() {
        return this.inner.makerTraits.expiration() || 0n;
      }
      /**
       * Timestamp in sec
       */
      get auctionStartTime() {
        return this.fusionExtension.auctionDetails.startTime;
      }
      /**
       * Timestamp in sec
       */
      get auctionEndTime() {
        const { startTime, duration } = this.fusionExtension.auctionDetails;
        return startTime + duration;
      }
      get isBitInvalidatorMode() {
        return this.inner.makerTraits.isBitInvalidatorMode();
      }
      get partialFillAllowed() {
        return this.inner.makerTraits.isPartialFillAllowed();
      }
      get multipleFillsAllowed() {
        return this.inner.makerTraits.isMultipleFillsAllowed();
      }
      get nonce() {
        return this.inner.makerTraits.nonceOrEpoch();
      }
      get salt() {
        return this.inner.salt;
      }
      static new(settlementExtension, orderInfo, details, extra) {
        var _a2, _b;
        return new _FusionOrder(settlementExtension, orderInfo, details.auction, settlement_post_interaction_data_1.SettlementPostInteractionData.new({
          bankFee: ((_a2 = details.fees) == null ? void 0 : _a2.bankFee) || 0n,
          integratorFee: (_b = details.fees) == null ? void 0 : _b.integratorFee,
          whitelist: details.whitelist,
          resolvingStartTime: details.resolvingStartTime ?? (0, time_1.now)(),
          customReceiver: orderInfo.receiver
        }), extra);
      }
      /**
       * Create FusionOrder from order data and extension
       *
       */
      static fromDataAndExtension(order, extension) {
        const settlementContract = limit_order_sdk_1.Address.fromFirstBytes(extension.makingAmountData);
        (0, assert_1.default)(limit_order_sdk_1.Address.fromFirstBytes(extension.takingAmountData).equal(settlementContract) && limit_order_sdk_1.Address.fromFirstBytes(extension.postInteraction).equal(settlementContract), "Invalid extension, all calls should be to the same address");
        const makerTraits = new limit_order_sdk_1.MakerTraits(BigInt(order.makerTraits));
        (0, assert_1.default)(!makerTraits.isPrivate(), "fusion order can not be private");
        (0, assert_1.default)(makerTraits.hasPostInteraction(), "post-interaction must be enabled");
        const auctionDetails = auction_details_1.AuctionDetails.fromExtension(extension);
        const postInteractionData = settlement_post_interaction_data_1.SettlementPostInteractionData.fromExtension(extension);
        const deadline = makerTraits.expiration();
        const orderExpirationDelay = deadline === null ? void 0 : deadline - auctionDetails.startTime - auctionDetails.duration;
        return new _FusionOrder(settlementContract, {
          // shift because of how LimitOrder.buildSalt works
          salt: BigInt(order.salt) >> 160n,
          maker: new limit_order_sdk_1.Address(order.maker),
          receiver: new limit_order_sdk_1.Address(order.receiver),
          makerAsset: new limit_order_sdk_1.Address(order.makerAsset),
          takerAsset: new limit_order_sdk_1.Address(order.takerAsset),
          makingAmount: BigInt(order.makingAmount),
          takingAmount: BigInt(order.takingAmount)
        }, auctionDetails, postInteractionData, {
          allowMultipleFills: makerTraits.isMultipleFillsAllowed(),
          allowPartialFills: makerTraits.isPartialFillAllowed(),
          enablePermit2: makerTraits.isPermit2(),
          nonce: makerTraits.nonceOrEpoch(),
          permit: extension.makerPermit === constants_1.ZX ? void 0 : limit_order_sdk_1.Interaction.decode(extension.makerPermit).data,
          unwrapWETH: makerTraits.isNativeUnwrapEnabled(),
          orderExpirationDelay
        });
      }
      build() {
        return this.inner.build();
      }
      getOrderHash(chainId) {
        return this.inner.getOrderHash(chainId);
      }
      getTypedData(chainId) {
        return this.inner.getTypedData(chainId);
      }
      getCalculator() {
        return auction_calculator_1.AuctionCalculator.fromAuctionData(this.fusionExtension.postInteractionData, this.fusionExtension.auctionDetails);
      }
      /**
       * Calculates required taking amount for passed `makingAmount` at block time `time`
       *
       * @param makingAmount maker swap amount
       * @param time execution time in sec
       * @param blockBaseFee block fee in wei.
       * */
      calcTakingAmount(makingAmount, time, blockBaseFee = 0n) {
        const takingAmount = (0, amounts_1.calcTakingAmount)(makingAmount, this.makingAmount, this.takingAmount);
        const calculator = this.getCalculator();
        const bump = calculator.calcRateBump(time, blockBaseFee);
        return calculator.calcAuctionTakingAmount(takingAmount, bump);
      }
      /**
       * Check whether address allowed to execute order at the given time
       *
       * @param executor address of executor
       * @param executionTime timestamp in sec at which order planning to execute
       */
      canExecuteAt(executor, executionTime) {
        return this.fusionExtension.postInteractionData.canExecuteAt(executor, executionTime);
      }
      /**
       * Check is order expired at a given time
       *
       * @param time timestamp in seconds
       */
      isExpiredAt(time) {
        return time > this.deadline;
      }
      /**
       * Returns how much fee will be credited from a resolver deposit account
       * Token of fee set in Settlement extension constructor
       * Actual deployments can be found at https://github.com/1inch/limit-order-settlement/tree/master/deployments
       *
       * @param filledMakingAmount which resolver fills
       * @see https://github.com/1inch/limit-order-settlement/blob/0e3cae3653092ebb4ea5d2a338c87a54351ad883/contracts/extensions/ResolverFeeExtension.sol#L29
       */
      getResolverFee(filledMakingAmount) {
        return this.fusionExtension.postInteractionData.bankFee * _FusionOrder._ORDER_FEE_BASE_POINTS * filledMakingAmount / this.makingAmount;
      }
      /**
       * Check if `wallet` can fill order before other
       */
      isExclusiveResolver(wallet) {
        return this.fusionExtension.postInteractionData.isExclusiveResolver(wallet);
      }
      /**
       * Check if the auction has exclusive resolver, and it is in the exclusivity period
       */
      isExclusivityPeriod(time = (0, time_1.now)()) {
        return this.fusionExtension.postInteractionData.isExclusivityPeriod(time);
      }
    };
    exports.FusionOrder = FusionOrder2;
    FusionOrder2._ORDER_FEE_BASE_POINTS = 10n ** 15n;
    FusionOrder2.defaultExtra = {
      allowPartialFills: true,
      allowMultipleFills: true,
      unwrapWETH: false,
      enablePermit2: false,
      orderExpirationDelay: 12n
    };
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/index.js
var require_fusion_order2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/fusion-order/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CHAIN_TO_WRAPPER = void 0;
    __exportStar2(require_fusion_order(), exports);
    __exportStar2(require_auction_details2(), exports);
    __exportStar2(require_settlement_post_interaction_data2(), exports);
    __exportStar2(require_fusion_extension(), exports);
    var constants_1 = require_constants8();
    Object.defineProperty(exports, "CHAIN_TO_WRAPPER", { enumerable: true, get: function() {
      return constants_1.CHAIN_TO_WRAPPER;
    } });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/constants.js
var require_constants9 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.orderEvents = void 0;
    exports.orderEvents = [
      "order_created",
      "order_invalid",
      "order_balance_or_allowance_change",
      "order_filled",
      "order_filled_partially",
      "order_cancelled"
    ];
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/active-websocket-orders-api.js
var require_active_websocket_orders_api = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/active-websocket-orders-api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ActiveOrdersWebSocketApi = void 0;
    var constants_1 = require_constants9();
    var ActiveOrdersWebSocketApi2 = class {
      constructor(provider) {
        this.provider = provider;
      }
      onOrder(cb) {
        this.provider.onMessage((data) => {
          if (constants_1.orderEvents.includes(data.event)) {
            cb(data);
          }
        });
      }
      onOrderCreated(cb) {
        this.provider.onMessage((data) => {
          if (data.event === "order_created") {
            cb(data);
          }
        });
      }
      onOrderInvalid(cb) {
        this.provider.onMessage((data) => {
          if (data.event === "order_invalid") {
            cb(data);
          }
        });
      }
      onOrderBalanceOrAllowanceChange(cb) {
        this.provider.onMessage((data) => {
          if (data.event === "order_balance_or_allowance_change") {
            cb(data);
          }
        });
      }
      onOrderFilled(cb) {
        this.provider.onMessage((data) => {
          if (data.event === "order_filled") {
            cb(data);
          }
        });
      }
      onOrderCancelled(cb) {
        this.provider.onMessage((data) => {
          if (data.event === "order_cancelled") {
            cb(data);
          }
        });
      }
      onOrderFilledPartially(cb) {
        this.provider.onMessage((data) => {
          if (data.event === "order_filled_partially") {
            cb(data);
          }
        });
      }
    };
    exports.ActiveOrdersWebSocketApi = ActiveOrdersWebSocketApi2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/rpc-websocket-api.js
var require_rpc_websocket_api = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/rpc-websocket-api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RpcWebsocketApi = void 0;
    var pagination_1 = require_pagination();
    var RpcWebsocketApi2 = class {
      constructor(provider) {
        this.provider = provider;
      }
      onPong(cb) {
        this.provider.onMessage((data) => {
          if (data.method === "ping") {
            cb(data.result);
          }
        });
      }
      ping() {
        this.provider.send({ method: "ping" });
      }
      getActiveOrders({ limit, page } = {}) {
        const paginationRequest = new pagination_1.PaginationRequest(page, limit);
        const err = paginationRequest.validate();
        if (err) {
          throw new Error(err);
        }
        this.provider.send({ method: "getActiveOrders", param: { limit, page } });
      }
      onGetActiveOrders(cb) {
        this.provider.onMessage((data) => {
          if (data.method === "getActiveOrders") {
            cb(data.result);
          }
        });
      }
      getAllowedMethods() {
        this.provider.send({ method: "getAllowedMethods" });
      }
      onGetAllowedMethods(cb) {
        this.provider.onMessage((data) => {
          if (data.method === "getAllowedMethods") {
            cb(data.result);
          }
        });
      }
    };
    exports.RpcWebsocketApi = RpcWebsocketApi2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/url.js
var require_url = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/url.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.castUrl = void 0;
    function castUrl2(url) {
      if (url.startsWith("http")) {
        return url.replace("http", "ws");
      }
      return url;
    }
    exports.castUrl = castUrl2;
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/ws-api.js
var require_ws_api = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/ws-api.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebSocketApi = void 0;
    var active_websocket_orders_api_1 = require_active_websocket_orders_api();
    var rpc_websocket_api_1 = require_rpc_websocket_api();
    var url_1 = require_url();
    var ws_1 = require_ws();
    var WebSocketApi2 = class _WebSocketApi {
      constructor(configOrProvider) {
        if (instanceOfWsApiConfigWithNetwork2(configOrProvider)) {
          const url = (0, url_1.castUrl)(configOrProvider.url);
          const urlWithNetwork = `${url}/${_WebSocketApi.Version}/${configOrProvider.network}`;
          const configWithUrl = { ...configOrProvider, url: urlWithNetwork };
          const provider = new ws_1.WebsocketClient(configWithUrl);
          this.provider = provider;
          this.rpc = new rpc_websocket_api_1.RpcWebsocketApi(provider);
          this.order = new active_websocket_orders_api_1.ActiveOrdersWebSocketApi(provider);
          return;
        }
        this.provider = configOrProvider;
        this.rpc = new rpc_websocket_api_1.RpcWebsocketApi(configOrProvider);
        this.order = new active_websocket_orders_api_1.ActiveOrdersWebSocketApi(configOrProvider);
      }
      static new(configOrProvider) {
        return new _WebSocketApi(configOrProvider);
      }
      init() {
        this.provider.init();
      }
      on(event, cb) {
        this.provider.on(event, cb);
      }
      off(event, cb) {
        this.provider.off(event, cb);
      }
      onOpen(cb) {
        this.provider.onOpen(cb);
      }
      send(message) {
        this.provider.send(message);
      }
      close() {
        this.provider.close();
      }
      onMessage(cb) {
        this.provider.onMessage(cb);
      }
      onClose(cb) {
        this.provider.onClose(cb);
      }
      onError(cb) {
        this.provider.onError(cb);
      }
    };
    exports.WebSocketApi = WebSocketApi2;
    WebSocketApi2.Version = "v2.0";
    function instanceOfWsApiConfigWithNetwork2(val) {
      return "url" in val && "network" in val;
    }
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/types.js
var require_types13 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/index.js
var require_ws_api2 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/ws-api/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_ws_api(), exports);
    __exportStar2(require_types13(), exports);
    __exportStar2(require_active_websocket_orders_api(), exports);
    __exportStar2(require_rpc_websocket_api(), exports);
    __exportStar2(require_constants9(), exports);
  }
});

// node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/@1inch/cross-chain-sdk/node_modules/@1inch/fusion-sdk/dist/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OrderStatus = exports.Quote = exports.Preset = exports.PresetEnum = exports.QuoterCustomPresetRequest = exports.RelayerRequest = exports.QuoterRequest = exports.MakerTraits = exports.LimitOrderContract = exports.getLimitOrderV4Domain = exports.AmountMode = exports.ExtensionBuilder = exports.TakerTraits = exports.Interaction = exports.getLimitOrderContract = exports.randBigInt = exports.Extension = exports.Address = void 0;
    var limit_order_sdk_1 = require_dist3();
    Object.defineProperty(exports, "Address", { enumerable: true, get: function() {
      return limit_order_sdk_1.Address;
    } });
    Object.defineProperty(exports, "Extension", { enumerable: true, get: function() {
      return limit_order_sdk_1.Extension;
    } });
    Object.defineProperty(exports, "randBigInt", { enumerable: true, get: function() {
      return limit_order_sdk_1.randBigInt;
    } });
    Object.defineProperty(exports, "getLimitOrderContract", { enumerable: true, get: function() {
      return limit_order_sdk_1.getLimitOrderContract;
    } });
    Object.defineProperty(exports, "Interaction", { enumerable: true, get: function() {
      return limit_order_sdk_1.Interaction;
    } });
    Object.defineProperty(exports, "TakerTraits", { enumerable: true, get: function() {
      return limit_order_sdk_1.TakerTraits;
    } });
    Object.defineProperty(exports, "ExtensionBuilder", { enumerable: true, get: function() {
      return limit_order_sdk_1.ExtensionBuilder;
    } });
    Object.defineProperty(exports, "AmountMode", { enumerable: true, get: function() {
      return limit_order_sdk_1.AmountMode;
    } });
    Object.defineProperty(exports, "getLimitOrderV4Domain", { enumerable: true, get: function() {
      return limit_order_sdk_1.getLimitOrderV4Domain;
    } });
    Object.defineProperty(exports, "LimitOrderContract", { enumerable: true, get: function() {
      return limit_order_sdk_1.LimitOrderContract;
    } });
    Object.defineProperty(exports, "MakerTraits", { enumerable: true, get: function() {
      return limit_order_sdk_1.MakerTraits;
    } });
    __exportStar2(require_fusion_order2(), exports);
    __exportStar2(require_auction_calculator2(), exports);
    __exportStar2(require_connector(), exports);
    __exportStar2(require_sdk2(), exports);
    __exportStar2(require_constants6(), exports);
    __exportStar2(require_utils7(), exports);
    __exportStar2(require_amounts2(), exports);
    __exportStar2(require_time(), exports);
    __exportStar2(require_validations4(), exports);
    __exportStar2(require_ws_api2(), exports);
    __exportStar2(require_errors4(), exports);
    var api_1 = require_api3();
    Object.defineProperty(exports, "QuoterRequest", { enumerable: true, get: function() {
      return api_1.QuoterRequest;
    } });
    Object.defineProperty(exports, "RelayerRequest", { enumerable: true, get: function() {
      return api_1.RelayerRequest;
    } });
    Object.defineProperty(exports, "QuoterCustomPresetRequest", { enumerable: true, get: function() {
      return api_1.QuoterCustomPresetRequest;
    } });
    Object.defineProperty(exports, "PresetEnum", { enumerable: true, get: function() {
      return api_1.PresetEnum;
    } });
    Object.defineProperty(exports, "Preset", { enumerable: true, get: function() {
      return api_1.Preset;
    } });
    Object.defineProperty(exports, "Quote", { enumerable: true, get: function() {
      return api_1.Quote;
    } });
    Object.defineProperty(exports, "OrderStatus", { enumerable: true, get: function() {
      return api_1.OrderStatus;
    } });
  }
});

// node_modules/@1inch/byte-utils/dist/bit-mask/bit-mask.js
var require_bit_mask3 = __commonJS({
  "node_modules/@1inch/byte-utils/dist/bit-mask/bit-mask.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BitMask = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var BitMask4 = class {
      /**
       * @example
       * const mask1 = new BitMask(0, 16) // for bits from [0, 16) => 0xffff
       * const mask2 = new BitMask(16, 32) // for bits from [16, 32) => 0xffff0000
       * const singleBit = new BitMask(10) // for 10th bit [10, 11)
       *
       * @param startBit bit position from the lowest bit, starts from zero, inclusive
       * @param endBit bit position from the lowest bit, starts from zero, exclusive. Must be bigger than `startBit`
       */
      constructor(startBit, endBit = startBit + 1n) {
        (0, assert_1.default)(startBit < endBit, "BitMask: startBit must be less than endBit");
        this.offset = startBit;
        this.mask = (1n << endBit - startBit) - 1n;
      }
      toString() {
        return "0x" + this.toBigInt().toString(16);
      }
      toBigInt() {
        return this.mask << this.offset;
      }
    };
    exports.BitMask = BitMask4;
  }
});

// node_modules/@1inch/byte-utils/dist/utils/zero-x-prefix.js
var require_zero_x_prefix3 = __commonJS({
  "node_modules/@1inch/byte-utils/dist/utils/zero-x-prefix.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.add0x = exports.trim0x = void 0;
    function trim0x3(data) {
      if (data.startsWith("0x")) {
        return data.substring(2);
      }
      return data;
    }
    exports.trim0x = trim0x3;
    function add0x2(data) {
      if (data.includes("0x")) {
        return data;
      }
      return "0x" + data;
    }
    exports.add0x = add0x2;
  }
});

// node_modules/@1inch/byte-utils/dist/utils/get-bytes-count.js
var require_get_bytes_count3 = __commonJS({
  "node_modules/@1inch/byte-utils/dist/utils/get-bytes-count.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBytesCount = void 0;
    var zero_x_prefix_1 = require_zero_x_prefix3();
    function getBytesCount3(hex) {
      return BigInt((0, zero_x_prefix_1.trim0x)(hex).length / 2);
    }
    exports.getBytesCount = getBytesCount3;
  }
});

// node_modules/@1inch/byte-utils/dist/utils/as-bytes.js
var require_as_bytes3 = __commonJS({
  "node_modules/@1inch/byte-utils/dist/utils/as-bytes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.asBytes = void 0;
    function asBytes(val) {
      const hex = val.toString(16);
      if (hex.length % 2) {
        return "0x0" + hex;
      }
      return "0x" + hex;
    }
    exports.asBytes = asBytes;
  }
});

// node_modules/@1inch/byte-utils/dist/validations.js
var require_validations5 = __commonJS({
  "node_modules/@1inch/byte-utils/dist/validations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isHexBytes = exports.isHexString = void 0;
    var HEX_REGEX = /^(0x)[0-9a-f]+$/i;
    function isHexString4(val) {
      return HEX_REGEX.test(val.toLowerCase());
    }
    exports.isHexString = isHexString4;
    function isHexBytes4(val) {
      return isHexString4(val) && val.length % 2 === 0;
    }
    exports.isHexBytes = isHexBytes4;
  }
});

// node_modules/@1inch/byte-utils/dist/utils/uint8-array.js
var require_uint8_array = __commonJS({
  "node_modules/@1inch/byte-utils/dist/utils/uint8-array.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.uint8ArrayToHex = exports.hexToUint8Array = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var zero_x_prefix_1 = require_zero_x_prefix3();
    var validations_1 = require_validations5();
    var hexToUint8Array = (hex) => {
      (0, assert_1.default)((0, validations_1.isHexBytes)(hex), "invalid hex bytes");
      const trimmed = (0, zero_x_prefix_1.trim0x)(hex);
      const array = new Uint8Array({ length: trimmed.length / 2 });
      for (let i = 0; i < trimmed.length; i += 2) {
        array[i / 2] = parseInt(trimmed.slice(i, i + 2), 16);
      }
      return array;
    };
    exports.hexToUint8Array = hexToUint8Array;
    var uint8ArrayToHex = (arr) => {
      return "0x" + [...arr].map((i) => i.toString(16).padStart(2, "0")).join("");
    };
    exports.uint8ArrayToHex = uint8ArrayToHex;
  }
});

// node_modules/@1inch/byte-utils/dist/utils/index.js
var require_utils9 = __commonJS({
  "node_modules/@1inch/byte-utils/dist/utils/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_zero_x_prefix3(), exports);
    __exportStar2(require_get_bytes_count3(), exports);
    __exportStar2(require_as_bytes3(), exports);
    __exportStar2(require_uint8_array(), exports);
  }
});

// node_modules/@1inch/byte-utils/dist/bn/bn.js
var require_bn3 = __commonJS({
  "node_modules/@1inch/byte-utils/dist/bn/bn.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BN = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var utils_1 = require_utils9();
    var validations_1 = require_validations5();
    var BN5 = class _BN2 {
      constructor(value) {
        this.value = value;
      }
      static fromNumber(n2) {
        return new _BN2(BigInt(n2));
      }
      static fromHex(hex) {
        (0, assert_1.default)((0, validations_1.isHexString)(hex), "Invalid hex");
        return new _BN2(BigInt(hex));
      }
      /**
       * Add value
       */
      add(other) {
        return new _BN2(this.value + other.value);
      }
      /**
       * Subtract value
       */
      sub(other) {
        return new _BN2(this.value - other.value);
      }
      setBit(n2, value) {
        if (value) {
          return new _BN2(this.value | 1n << n2);
        }
        return new _BN2(this.value & ~(1n << n2));
      }
      getBit(n2) {
        return (this.value & 1n << n2) === 0n ? 0 : 1;
      }
      shiftLeft(n2) {
        return new _BN2(this.value << n2);
      }
      shiftRight(n2) {
        return new _BN2(this.value >> n2);
      }
      and(other) {
        const raw = typeof other === "bigint" ? other : other.value;
        return new _BN2(raw & this.value);
      }
      or(other) {
        const raw = typeof other === "bigint" ? other : other.value;
        return new _BN2(raw | this.value);
      }
      xor(other) {
        const raw = typeof other === "bigint" ? other : other.value;
        return new _BN2(raw ^ this.value);
      }
      isZero() {
        return this.value === 0n;
      }
      isOne() {
        return this.value === 1n;
      }
      /**
       * Return bits defined in `mask` as BN
       *
       * @example
       * const mask = new BitMask(4, 8) // bits 4,5,6,7
       * const bn = new BN(0x1234abcd)
       *
       * new BN(0x2).value === bn.getMask(mask)
       */
      getMask(mask2) {
        return this.shiftRight(mask2.offset).and(mask2.mask);
      }
      /**
       * Set bits defined in `mask` to `value`
       * if value is bigger than mask then error will be thrown
       */
      setMask(mask2, value) {
        const raw = typeof value === "bigint" ? value : value.value;
        (0, assert_1.default)(raw <= mask2.mask, `Value 0x${raw.toString(16)} to big for mask ${mask2}`);
        return new _BN2(this.clearMask(mask2).value | raw << mask2.offset);
      }
      /**
       * Set bits defined in `mask` to 0s
       */
      clearMask(mask2) {
        return new _BN2(this.value - (mask2.toBigInt() & this.value));
      }
      /**
       * Return 0x prefixed string with hex representation of BN, padded with '0s' if `padNum` specified
       */
      toHex(padNum = 0) {
        return (0, utils_1.add0x)(this.value.toString(16).padStart(padNum, "0"));
      }
      /**
       * Convert BN to Number
       *
       * Caution: value will be rounded for numbers > `Number.MAX_SAFE_INTEGER`
       */
      toNumber() {
        return Number(this.value);
      }
    };
    exports.BN = BN5;
  }
});

// node_modules/@1inch/byte-utils/dist/bytes-iter/bytes-iter.js
var require_bytes_iter3 = __commonJS({
  "node_modules/@1inch/byte-utils/dist/bytes-iter/bytes-iter.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesIter = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var validations_1 = require_validations5();
    var utils_1 = require_utils9();
    var Side;
    (function(Side2) {
      Side2[Side2["Front"] = 0] = "Front";
      Side2[Side2["Back"] = 1] = "Back";
    })(Side || (Side = {}));
    var BytesIter = class _BytesIter {
      constructor(bytes3, ResultType) {
        this.ResultType = ResultType;
        (0, assert_1.default)((0, validations_1.isHexBytes)(bytes3), "invalid bytes value");
        this.bytes = bytes3.slice(2);
      }
      static BigInt(bytes3) {
        return new _BytesIter(bytes3, BigInt);
      }
      static String(bytes3) {
        return new _BytesIter(bytes3, String);
      }
      /**
       * Returns all not consumed bytes
       */
      rest() {
        return this.ResultType((0, utils_1.add0x)(this.bytes));
      }
      isEmpty() {
        return this.bytes.length === 0;
      }
      nextByte(side = Side.Front) {
        return this.nextBytes(1, side);
      }
      nextBytes(n2, side = Side.Front) {
        const cnt = n2 * 2;
        if (this.bytes.length < cnt) {
          throw new Error(`Can not consume ${n2} bytes, have only ${this.bytes.length / 2}`);
        }
        const isFront = side === Side.Front;
        const bytes3 = isFront ? this.bytes.slice(0, cnt) : this.bytes.slice(-cnt);
        this.bytes = isFront ? this.bytes.slice(cnt) : this.bytes.slice(0, -cnt);
        return this.ResultType((0, utils_1.add0x)(bytes3));
      }
      nextAddress(side = Side.Front) {
        return this.nextBytes(40, side);
      }
      nextUint8(side = Side.Front) {
        return this.nextByte(side);
      }
      nextUint16(side = Side.Front) {
        return this.nextBytes(2, side);
      }
      nextUint24(side = Side.Front) {
        return this.nextBytes(3, side);
      }
      nextUint32(side = Side.Front) {
        return this.nextBytes(4, side);
      }
      nextUint128(side = Side.Front) {
        return this.nextBytes(16, side);
      }
      nextUint160(side = Side.Front) {
        return this.nextBytes(20, side);
      }
      nextUint256(side = Side.Front) {
        return this.nextBytes(32, side);
      }
    };
    exports.BytesIter = BytesIter;
    BytesIter.SIDE = Side;
  }
});

// node_modules/@1inch/byte-utils/dist/constants.js
var require_constants10 = __commonJS({
  "node_modules/@1inch/byte-utils/dist/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UINT_256_MAX = exports.UINT_128_MAX = exports.UINT_160_MAX = exports.UINT_80_MAX = exports.UINT_48_MAX = exports.UINT_40_MAX = exports.UINT_32_MAX = exports.UINT_24_MAX = exports.UINT_8_MAX = void 0;
    exports.UINT_8_MAX = (1n << 8n) - 1n;
    exports.UINT_24_MAX = (1n << 24n) - 1n;
    exports.UINT_32_MAX = (1n << 32n) - 1n;
    exports.UINT_40_MAX = (1n << 40n) - 1n;
    exports.UINT_48_MAX = (1n << 48n) - 1n;
    exports.UINT_80_MAX = (1n << 80n) - 1n;
    exports.UINT_160_MAX = (1n << 160n) - 1n;
    exports.UINT_128_MAX = (1n << 128n) - 1n;
    exports.UINT_256_MAX = (1n << 256n) - 1n;
  }
});

// node_modules/@1inch/byte-utils/dist/bytes-builder/bytes-builder.js
var require_bytes_builder3 = __commonJS({
  "node_modules/@1inch/byte-utils/dist/bytes-builder/bytes-builder.js"(exports) {
    "use strict";
    var __importDefault2 = exports && exports.__importDefault || function(mod2) {
      return mod2 && mod2.__esModule ? mod2 : { "default": mod2 };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BytesBuilder = void 0;
    var assert_1 = __importDefault2(require_assert2());
    var bn_1 = require_bn3();
    var validations_1 = require_validations5();
    var constants_1 = require_constants10();
    var utils_1 = require_utils9();
    var BytesBuilder = class {
      constructor(init) {
        if (init === void 0) {
          this.bytes = "0x";
          return;
        }
        if (typeof init === "string") {
          (0, assert_1.default)((0, validations_1.isHexBytes)(init), "Init bytes must be valid hex bytes");
          this.bytes = init;
        } else {
          const initBn = init instanceof bn_1.BN ? init : new bn_1.BN(init);
          this.bytes = initBn.toHex();
        }
      }
      /**
       * Returns current bytes count
       */
      get length() {
        return Number(this.bytes.length / 2 - 1);
      }
      addAddress(address) {
        if (typeof address === "string") {
          (0, assert_1.default)((0, validations_1.isHexBytes)(address) && address.length === 42, "Invalid address");
          this.append(address);
        } else {
          const addressBN = address instanceof bn_1.BN ? address : new bn_1.BN(address);
          (0, assert_1.default)(addressBN.value <= constants_1.UINT_160_MAX, "Invalid address: too big");
          this.append(addressBN.toHex(40));
        }
        return this;
      }
      addBytes(bytes3) {
        (0, assert_1.default)((0, validations_1.isHexBytes)(bytes3), "Invalid bytes");
        this.append(bytes3);
        return this;
      }
      addByte(byte) {
        return this.addNBytes(byte, 1);
      }
      addUint8(val) {
        return this.addNBytes(val, 1);
      }
      addUint16(val) {
        return this.addNBytes(val, 2);
      }
      addUint24(val) {
        return this.addNBytes(val, 3);
      }
      addUint32(val) {
        return this.addNBytes(val, 4);
      }
      addUint64(val) {
        return this.addNBytes(val, 8);
      }
      addUint128(val) {
        return this.addNBytes(val, 16);
      }
      addUint160(val) {
        return this.addNBytes(val, 20);
      }
      addUint256(val) {
        return this.addNBytes(val, 32);
      }
      /**
       * Returns bytes as single bigint value
       */
      asBigInt() {
        return BigInt(this.bytes);
      }
      /**
       * Returns hex string
       *
       * @param prefixed should be string prefixed with 0x or not, true by default
       */
      asHex(prefixed = true) {
        return prefixed ? this.bytes : this.bytes.slice(2);
      }
      append(bytes3) {
        this.bytes += (0, utils_1.trim0x)(bytes3);
      }
      addNBytes(bytes3, n2) {
        if (typeof bytes3 === "string") {
          (0, assert_1.default)((0, validations_1.isHexBytes)(bytes3), "Invalid value: not bytes hex string");
          (0, assert_1.default)(bytes3.length === 2 + n2 * 2, "Invalid value: bad length");
          this.append(bytes3);
        } else {
          const bytesBn = bytes3 instanceof bn_1.BN ? bytes3 : new bn_1.BN(bytes3);
          (0, assert_1.default)(bytesBn.value <= (1n << 8n * BigInt(n2)) - 1n, "Invalid value: too long");
          this.append(bytesBn.toHex(n2 * 2));
        }
        return this;
      }
    };
    exports.BytesBuilder = BytesBuilder;
  }
});

// node_modules/@1inch/byte-utils/dist/index.js
var require_dist6 = __commonJS({
  "node_modules/@1inch/byte-utils/dist/index.js"(exports) {
    "use strict";
    var __createBinding2 = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar2 = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding2(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar2(require_bit_mask3(), exports);
    __exportStar2(require_bn3(), exports);
    __exportStar2(require_bytes_iter3(), exports);
    __exportStar2(require_bytes_builder3(), exports);
    __exportStar2(require_utils9(), exports);
    __exportStar2(require_validations5(), exports);
    __exportStar2(require_constants10(), exports);
  }
});

// browser-external:buffer
var require_buffer = __commonJS({
  "browser-external:buffer"(exports, module) {
    module.exports = Object.create(new Proxy({}, {
      get(_, key) {
        if (key !== "__esModule" && key !== "__proto__" && key !== "constructor" && key !== "splice") {
          console.warn(`Module "buffer" has been externalized for browser compatibility. Cannot access "buffer.${key}" in client code. See https://vite.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`);
        }
      }
    }));
  }
});

// node_modules/bn.js/lib/bn.js
var require_bn4 = __commonJS({
  "node_modules/bn.js/lib/bn.js"(exports, module) {
    (function(module2, exports2) {
      "use strict";
      function assert11(val, msg) {
        if (!val) throw new Error(msg || "Assertion failed");
      }
      function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      }
      function BN5(number2, base, endian) {
        if (BN5.isBN(number2)) {
          return number2;
        }
        this.negative = 0;
        this.words = null;
        this.length = 0;
        this.red = null;
        if (number2 !== null) {
          if (base === "le" || base === "be") {
            endian = base;
            base = 10;
          }
          this._init(number2 || 0, base || 10, endian || "be");
        }
      }
      if (typeof module2 === "object") {
        module2.exports = BN5;
      } else {
        exports2.BN = BN5;
      }
      BN5.BN = BN5;
      BN5.wordSize = 26;
      var Buffer2;
      try {
        if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
          Buffer2 = window.Buffer;
        } else {
          Buffer2 = require_buffer().Buffer;
        }
      } catch (e) {
      }
      BN5.isBN = function isBN(num) {
        if (num instanceof BN5) {
          return true;
        }
        return num !== null && typeof num === "object" && num.constructor.wordSize === BN5.wordSize && Array.isArray(num.words);
      };
      BN5.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
      };
      BN5.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
      };
      BN5.prototype._init = function init(number2, base, endian) {
        if (typeof number2 === "number") {
          return this._initNumber(number2, base, endian);
        }
        if (typeof number2 === "object") {
          return this._initArray(number2, base, endian);
        }
        if (base === "hex") {
          base = 16;
        }
        assert11(base === (base | 0) && base >= 2 && base <= 36);
        number2 = number2.toString().replace(/\s+/g, "");
        var start = 0;
        if (number2[0] === "-") {
          start++;
          this.negative = 1;
        }
        if (start < number2.length) {
          if (base === 16) {
            this._parseHex(number2, start, endian);
          } else {
            this._parseBase(number2, base, start);
            if (endian === "le") {
              this._initArray(this.toArray(), base, endian);
            }
          }
        }
      };
      BN5.prototype._initNumber = function _initNumber(number2, base, endian) {
        if (number2 < 0) {
          this.negative = 1;
          number2 = -number2;
        }
        if (number2 < 67108864) {
          this.words = [number2 & 67108863];
          this.length = 1;
        } else if (number2 < 4503599627370496) {
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863
          ];
          this.length = 2;
        } else {
          assert11(number2 < 9007199254740992);
          this.words = [
            number2 & 67108863,
            number2 / 67108864 & 67108863,
            1
          ];
          this.length = 3;
        }
        if (endian !== "le") return;
        this._initArray(this.toArray(), base, endian);
      };
      BN5.prototype._initArray = function _initArray(number2, base, endian) {
        assert11(typeof number2.length === "number");
        if (number2.length <= 0) {
          this.words = [0];
          this.length = 1;
          return this;
        }
        this.length = Math.ceil(number2.length / 3);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var j, w;
        var off = 0;
        if (endian === "be") {
          for (i = number2.length - 1, j = 0; i >= 0; i -= 3) {
            w = number2[i] | number2[i - 1] << 8 | number2[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        } else if (endian === "le") {
          for (i = 0, j = 0; i < number2.length; i += 3) {
            w = number2[i] | number2[i + 1] << 8 | number2[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
              off -= 26;
              j++;
            }
          }
        }
        return this._strip();
      };
      function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        if (c >= 48 && c <= 57) {
          return c - 48;
        } else if (c >= 65 && c <= 70) {
          return c - 55;
        } else if (c >= 97 && c <= 102) {
          return c - 87;
        } else {
          assert11(false, "Invalid character in " + string);
        }
      }
      function parseHexByte(string, lowerBound, index) {
        var r2 = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) {
          r2 |= parseHex4Bits(string, index - 1) << 4;
        }
        return r2;
      }
      BN5.prototype._parseHex = function _parseHex(number2, start, endian) {
        this.length = Math.ceil((number2.length - start) / 6);
        this.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          this.words[i] = 0;
        }
        var off = 0;
        var j = 0;
        var w;
        if (endian === "be") {
          for (i = number2.length - 1; i >= start; i -= 2) {
            w = parseHexByte(number2, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        } else {
          var parseLength = number2.length - start;
          for (i = parseLength % 2 === 0 ? start + 1 : start; i < number2.length; i += 2) {
            w = parseHexByte(number2, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
              off -= 18;
              j += 1;
              this.words[j] |= w >>> 26;
            } else {
              off += 8;
            }
          }
        }
        this._strip();
      };
      function parseBase(str, start, end, mul) {
        var r2 = 0;
        var b2 = 0;
        var len = Math.min(str.length, end);
        for (var i = start; i < len; i++) {
          var c = str.charCodeAt(i) - 48;
          r2 *= mul;
          if (c >= 49) {
            b2 = c - 49 + 10;
          } else if (c >= 17) {
            b2 = c - 17 + 10;
          } else {
            b2 = c;
          }
          assert11(c >= 0 && b2 < mul, "Invalid character");
          r2 += b2;
        }
        return r2;
      }
      BN5.prototype._parseBase = function _parseBase(number2, base, start) {
        this.words = [0];
        this.length = 1;
        for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
          limbLen++;
        }
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number2.length - start;
        var mod2 = total % limbLen;
        var end = Math.min(total, total - mod2) + start;
        var word = 0;
        for (var i = start; i < end; i += limbLen) {
          word = parseBase(number2, i, i + limbLen, base);
          this.imuln(limbPow);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        if (mod2 !== 0) {
          var pow3 = 1;
          word = parseBase(number2, i, number2.length, base);
          for (i = 0; i < mod2; i++) {
            pow3 *= base;
          }
          this.imuln(pow3);
          if (this.words[0] + word < 67108864) {
            this.words[0] += word;
          } else {
            this._iaddn(word);
          }
        }
        this._strip();
      };
      BN5.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for (var i = 0; i < this.length; i++) {
          dest.words[i] = this.words[i];
        }
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
      };
      function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
      }
      BN5.prototype._move = function _move(dest) {
        move(dest, this);
      };
      BN5.prototype.clone = function clone() {
        var r2 = new BN5(null);
        this.copy(r2);
        return r2;
      };
      BN5.prototype._expand = function _expand(size) {
        while (this.length < size) {
          this.words[this.length++] = 0;
        }
        return this;
      };
      BN5.prototype._strip = function strip() {
        while (this.length > 1 && this.words[this.length - 1] === 0) {
          this.length--;
        }
        return this._normSign();
      };
      BN5.prototype._normSign = function _normSign() {
        if (this.length === 1 && this.words[0] === 0) {
          this.negative = 0;
        }
        return this;
      };
      if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
        try {
          BN5.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
        } catch (e) {
          BN5.prototype.inspect = inspect;
        }
      } else {
        BN5.prototype.inspect = inspect;
      }
      function inspect() {
        return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
      }
      var zeros2 = [
        "",
        "0",
        "00",
        "000",
        "0000",
        "00000",
        "000000",
        "0000000",
        "00000000",
        "000000000",
        "0000000000",
        "00000000000",
        "000000000000",
        "0000000000000",
        "00000000000000",
        "000000000000000",
        "0000000000000000",
        "00000000000000000",
        "000000000000000000",
        "0000000000000000000",
        "00000000000000000000",
        "000000000000000000000",
        "0000000000000000000000",
        "00000000000000000000000",
        "000000000000000000000000",
        "0000000000000000000000000"
      ];
      var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
      ];
      var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        1e7,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64e6,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        243e5,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
      ];
      BN5.prototype.toString = function toString(base, padding3) {
        base = base || 10;
        padding3 = padding3 | 0 || 1;
        var out;
        if (base === 16 || base === "hex") {
          out = "";
          var off = 0;
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = this.words[i];
            var word = ((w << off | carry) & 16777215).toString(16);
            carry = w >>> 24 - off & 16777215;
            off += 2;
            if (off >= 26) {
              off -= 26;
              i--;
            }
            if (carry !== 0 || i !== this.length - 1) {
              out = zeros2[6 - word.length] + word + out;
            } else {
              out = word + out;
            }
          }
          if (carry !== 0) {
            out = carry.toString(16) + out;
          }
          while (out.length % padding3 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
          var groupSize = groupSizes[base];
          var groupBase = groupBases[base];
          out = "";
          var c = this.clone();
          c.negative = 0;
          while (!c.isZero()) {
            var r2 = c.modrn(groupBase).toString(base);
            c = c.idivn(groupBase);
            if (!c.isZero()) {
              out = zeros2[groupSize - r2.length] + r2 + out;
            } else {
              out = r2 + out;
            }
          }
          if (this.isZero()) {
            out = "0" + out;
          }
          while (out.length % padding3 !== 0) {
            out = "0" + out;
          }
          if (this.negative !== 0) {
            out = "-" + out;
          }
          return out;
        }
        assert11(false, "Base should be between 2 and 36");
      };
      BN5.prototype.toNumber = function toNumber2() {
        var ret = this.words[0];
        if (this.length === 2) {
          ret += this.words[1] * 67108864;
        } else if (this.length === 3 && this.words[2] === 1) {
          ret += 4503599627370496 + this.words[1] * 67108864;
        } else if (this.length > 2) {
          assert11(false, "Number can only safely store up to 53 bits");
        }
        return this.negative !== 0 ? -ret : ret;
      };
      BN5.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
      };
      if (Buffer2) {
        BN5.prototype.toBuffer = function toBuffer(endian, length) {
          return this.toArrayLike(Buffer2, endian, length);
        };
      }
      BN5.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
      };
      var allocate = function allocate2(ArrayType, size) {
        if (ArrayType.allocUnsafe) {
          return ArrayType.allocUnsafe(size);
        }
        return new ArrayType(size);
      };
      BN5.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert11(byteLength <= reqLength, "byte array longer than desired length");
        assert11(reqLength > 0, "Requested array length <= 0");
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === "le" ? "LE" : "BE";
        this["_toArrayLike" + postfix](res, byteLength);
        return res;
      };
      BN5.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position++] = word & 255;
          if (position < res.length) {
            res[position++] = word >> 8 & 255;
          }
          if (position < res.length) {
            res[position++] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position < res.length) {
              res[position++] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position < res.length) {
          res[position++] = carry;
          while (position < res.length) {
            res[position++] = 0;
          }
        }
      };
      BN5.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for (var i = 0, shift = 0; i < this.length; i++) {
          var word = this.words[i] << shift | carry;
          res[position--] = word & 255;
          if (position >= 0) {
            res[position--] = word >> 8 & 255;
          }
          if (position >= 0) {
            res[position--] = word >> 16 & 255;
          }
          if (shift === 6) {
            if (position >= 0) {
              res[position--] = word >> 24 & 255;
            }
            carry = 0;
            shift = 0;
          } else {
            carry = word >>> 24;
            shift += 2;
          }
        }
        if (position >= 0) {
          res[position--] = carry;
          while (position >= 0) {
            res[position--] = 0;
          }
        }
      };
      if (Math.clz32) {
        BN5.prototype._countBits = function _countBits(w) {
          return 32 - Math.clz32(w);
        };
      } else {
        BN5.prototype._countBits = function _countBits(w) {
          var t = w;
          var r2 = 0;
          if (t >= 4096) {
            r2 += 13;
            t >>>= 13;
          }
          if (t >= 64) {
            r2 += 7;
            t >>>= 7;
          }
          if (t >= 8) {
            r2 += 4;
            t >>>= 4;
          }
          if (t >= 2) {
            r2 += 2;
            t >>>= 2;
          }
          return r2 + t;
        };
      }
      BN5.prototype._zeroBits = function _zeroBits(w) {
        if (w === 0) return 26;
        var t = w;
        var r2 = 0;
        if ((t & 8191) === 0) {
          r2 += 13;
          t >>>= 13;
        }
        if ((t & 127) === 0) {
          r2 += 7;
          t >>>= 7;
        }
        if ((t & 15) === 0) {
          r2 += 4;
          t >>>= 4;
        }
        if ((t & 3) === 0) {
          r2 += 2;
          t >>>= 2;
        }
        if ((t & 1) === 0) {
          r2++;
        }
        return r2;
      };
      BN5.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
      };
      function toBitArray(num) {
        var w = new Array(num.bitLength());
        for (var bit = 0; bit < w.length; bit++) {
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
      }
      BN5.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r2 = 0;
        for (var i = 0; i < this.length; i++) {
          var b2 = this._zeroBits(this.words[i]);
          r2 += b2;
          if (b2 !== 26) break;
        }
        return r2;
      };
      BN5.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
      };
      BN5.prototype.toTwos = function toTwos2(width) {
        if (this.negative !== 0) {
          return this.abs().inotn(width).iaddn(1);
        }
        return this.clone();
      };
      BN5.prototype.fromTwos = function fromTwos2(width) {
        if (this.testn(width - 1)) {
          return this.notn(width).iaddn(1).ineg();
        }
        return this.clone();
      };
      BN5.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
      };
      BN5.prototype.neg = function neg() {
        return this.clone().ineg();
      };
      BN5.prototype.ineg = function ineg() {
        if (!this.isZero()) {
          this.negative ^= 1;
        }
        return this;
      };
      BN5.prototype.iuor = function iuor(num) {
        while (this.length < num.length) {
          this.words[this.length++] = 0;
        }
        for (var i = 0; i < num.length; i++) {
          this.words[i] = this.words[i] | num.words[i];
        }
        return this._strip();
      };
      BN5.prototype.ior = function ior(num) {
        assert11((this.negative | num.negative) === 0);
        return this.iuor(num);
      };
      BN5.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
      };
      BN5.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
      };
      BN5.prototype.iuand = function iuand(num) {
        var b2;
        if (this.length > num.length) {
          b2 = num;
        } else {
          b2 = this;
        }
        for (var i = 0; i < b2.length; i++) {
          this.words[i] = this.words[i] & num.words[i];
        }
        this.length = b2.length;
        return this._strip();
      };
      BN5.prototype.iand = function iand(num) {
        assert11((this.negative | num.negative) === 0);
        return this.iuand(num);
      };
      BN5.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
      };
      BN5.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
      };
      BN5.prototype.iuxor = function iuxor(num) {
        var a;
        var b2;
        if (this.length > num.length) {
          a = this;
          b2 = num;
        } else {
          a = num;
          b2 = this;
        }
        for (var i = 0; i < b2.length; i++) {
          this.words[i] = a.words[i] ^ b2.words[i];
        }
        if (this !== a) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = a.length;
        return this._strip();
      };
      BN5.prototype.ixor = function ixor(num) {
        assert11((this.negative | num.negative) === 0);
        return this.iuxor(num);
      };
      BN5.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
      };
      BN5.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
      };
      BN5.prototype.inotn = function inotn(width) {
        assert11(typeof width === "number" && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        this._expand(bytesNeeded);
        if (bitsLeft > 0) {
          bytesNeeded--;
        }
        for (var i = 0; i < bytesNeeded; i++) {
          this.words[i] = ~this.words[i] & 67108863;
        }
        if (bitsLeft > 0) {
          this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        }
        return this._strip();
      };
      BN5.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
      };
      BN5.prototype.setn = function setn(bit, val) {
        assert11(typeof bit === "number" && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) {
          this.words[off] = this.words[off] | 1 << wbit;
        } else {
          this.words[off] = this.words[off] & ~(1 << wbit);
        }
        return this._strip();
      };
      BN5.prototype.iadd = function iadd(num) {
        var r2;
        if (this.negative !== 0 && num.negative === 0) {
          this.negative = 0;
          r2 = this.isub(num);
          this.negative ^= 1;
          return this._normSign();
        } else if (this.negative === 0 && num.negative !== 0) {
          num.negative = 0;
          r2 = this.isub(num);
          num.negative = 1;
          return r2._normSign();
        }
        var a, b2;
        if (this.length > num.length) {
          a = this;
          b2 = num;
        } else {
          a = num;
          b2 = this;
        }
        var carry = 0;
        for (var i = 0; i < b2.length; i++) {
          r2 = (a.words[i] | 0) + (b2.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          this.words[i] = r2 & 67108863;
          carry = r2 >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
          this.words[this.length] = carry;
          this.length++;
        } else if (a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        return this;
      };
      BN5.prototype.add = function add2(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
          num.negative = 0;
          res = this.sub(num);
          num.negative ^= 1;
          return res;
        } else if (num.negative === 0 && this.negative !== 0) {
          this.negative = 0;
          res = num.sub(this);
          this.negative = 1;
          return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
      };
      BN5.prototype.isub = function isub(num) {
        if (num.negative !== 0) {
          num.negative = 0;
          var r2 = this.iadd(num);
          num.negative = 1;
          return r2._normSign();
        } else if (this.negative !== 0) {
          this.negative = 0;
          this.iadd(num);
          this.negative = 1;
          return this._normSign();
        }
        var cmp = this.cmp(num);
        if (cmp === 0) {
          this.negative = 0;
          this.length = 1;
          this.words[0] = 0;
          return this;
        }
        var a, b2;
        if (cmp > 0) {
          a = this;
          b2 = num;
        } else {
          a = num;
          b2 = this;
        }
        var carry = 0;
        for (var i = 0; i < b2.length; i++) {
          r2 = (a.words[i] | 0) - (b2.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        for (; carry !== 0 && i < a.length; i++) {
          r2 = (a.words[i] | 0) + carry;
          carry = r2 >> 26;
          this.words[i] = r2 & 67108863;
        }
        if (carry === 0 && i < a.length && a !== this) {
          for (; i < a.length; i++) {
            this.words[i] = a.words[i];
          }
        }
        this.length = Math.max(this.length, i);
        if (a !== this) {
          this.negative = 1;
        }
        return this._strip();
      };
      BN5.prototype.sub = function sub(num) {
        return this.clone().isub(num);
      };
      function smallMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        var len = self2.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        var a = self2.words[0] | 0;
        var b2 = num.words[0] | 0;
        var r2 = a * b2;
        var lo = r2 & 67108863;
        var carry = r2 / 67108864 | 0;
        out.words[0] = lo;
        for (var k = 1; k < len; k++) {
          var ncarry = carry >>> 26;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j | 0;
            a = self2.words[i] | 0;
            b2 = num.words[j] | 0;
            r2 = a * b2 + rword;
            ncarry += r2 / 67108864 | 0;
            rword = r2 & 67108863;
          }
          out.words[k] = rword | 0;
          carry = ncarry | 0;
        }
        if (carry !== 0) {
          out.words[k] = carry | 0;
        } else {
          out.length--;
        }
        return out._strip();
      }
      var comb10MulTo = function comb10MulTo2(self2, num, out) {
        var a = self2.words;
        var b2 = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b2[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b2[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b22 = b2[2] | 0;
        var bl2 = b22 & 8191;
        var bh2 = b22 >>> 13;
        var b3 = b2[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b2[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b2[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b2[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b2[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b2[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b2[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self2.negative ^ num.negative;
        out.length = 19;
        lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
          o[19] = c;
          out.length++;
        }
        return out;
      };
      if (!Math.imul) {
        comb10MulTo = smallMulTo;
      }
      function bigMulTo(self2, num, out) {
        out.negative = num.negative ^ self2.negative;
        out.length = self2.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for (var k = 0; k < out.length - 1; k++) {
          var ncarry = hncarry;
          hncarry = 0;
          var rword = carry & 67108863;
          var maxJ = Math.min(k, num.length - 1);
          for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
            var i = k - j;
            var a = self2.words[i] | 0;
            var b2 = num.words[j] | 0;
            var r2 = a * b2;
            var lo = r2 & 67108863;
            ncarry = ncarry + (r2 / 67108864 | 0) | 0;
            lo = lo + rword | 0;
            rword = lo & 67108863;
            ncarry = ncarry + (lo >>> 26) | 0;
            hncarry += ncarry >>> 26;
            ncarry &= 67108863;
          }
          out.words[k] = rword;
          carry = ncarry;
          ncarry = hncarry;
        }
        if (carry !== 0) {
          out.words[k] = carry;
        } else {
          out.length--;
        }
        return out._strip();
      }
      function jumboMulTo(self2, num, out) {
        return bigMulTo(self2, num, out);
      }
      BN5.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) {
          res = comb10MulTo(this, num, out);
        } else if (len < 63) {
          res = smallMulTo(this, num, out);
        } else if (len < 1024) {
          res = bigMulTo(this, num, out);
        } else {
          res = jumboMulTo(this, num, out);
        }
        return res;
      };
      function FFTM(x, y) {
        this.x = x;
        this.y = y;
      }
      FFTM.prototype.makeRBT = function makeRBT(N3) {
        var t = new Array(N3);
        var l = BN5.prototype._countBits(N3) - 1;
        for (var i = 0; i < N3; i++) {
          t[i] = this.revBin(i, l, N3);
        }
        return t;
      };
      FFTM.prototype.revBin = function revBin(x, l, N3) {
        if (x === 0 || x === N3 - 1) return x;
        var rb = 0;
        for (var i = 0; i < l; i++) {
          rb |= (x & 1) << l - i - 1;
          x >>= 1;
        }
        return rb;
      };
      FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N3) {
        for (var i = 0; i < N3; i++) {
          rtws[i] = rws[rbt[i]];
          itws[i] = iws[rbt[i]];
        }
      };
      FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N3, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N3);
        for (var s = 1; s < N3; s <<= 1) {
          var l = s << 1;
          var rtwdf = Math.cos(2 * Math.PI / l);
          var itwdf = Math.sin(2 * Math.PI / l);
          for (var p = 0; p < N3; p += l) {
            var rtwdf_ = rtwdf;
            var itwdf_ = itwdf;
            for (var j = 0; j < s; j++) {
              var re = rtws[p + j];
              var ie = itws[p + j];
              var ro = rtws[p + j + s];
              var io = itws[p + j + s];
              var rx = rtwdf_ * ro - itwdf_ * io;
              io = rtwdf_ * io + itwdf_ * ro;
              ro = rx;
              rtws[p + j] = re + ro;
              itws[p + j] = ie + io;
              rtws[p + j + s] = re - ro;
              itws[p + j + s] = ie - io;
              if (j !== l) {
                rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                rtwdf_ = rx;
              }
            }
          }
        }
      };
      FFTM.prototype.guessLen13b = function guessLen13b(n2, m) {
        var N3 = Math.max(m, n2) | 1;
        var odd = N3 & 1;
        var i = 0;
        for (N3 = N3 / 2 | 0; N3; N3 = N3 >>> 1) {
          i++;
        }
        return 1 << i + 1 + odd;
      };
      FFTM.prototype.conjugate = function conjugate(rws, iws, N3) {
        if (N3 <= 1) return;
        for (var i = 0; i < N3 / 2; i++) {
          var t = rws[i];
          rws[i] = rws[N3 - i - 1];
          rws[N3 - i - 1] = t;
          t = iws[i];
          iws[i] = -iws[N3 - i - 1];
          iws[N3 - i - 1] = -t;
        }
      };
      FFTM.prototype.normalize13b = function normalize13b(ws, N3) {
        var carry = 0;
        for (var i = 0; i < N3 / 2; i++) {
          var w = Math.round(ws[2 * i + 1] / N3) * 8192 + Math.round(ws[2 * i] / N3) + carry;
          ws[i] = w & 67108863;
          if (w < 67108864) {
            carry = 0;
          } else {
            carry = w / 67108864 | 0;
          }
        }
        return ws;
      };
      FFTM.prototype.convert13b = function convert13b(ws, len, rws, N3) {
        var carry = 0;
        for (var i = 0; i < len; i++) {
          carry = carry + (ws[i] | 0);
          rws[2 * i] = carry & 8191;
          carry = carry >>> 13;
          rws[2 * i + 1] = carry & 8191;
          carry = carry >>> 13;
        }
        for (i = 2 * len; i < N3; ++i) {
          rws[i] = 0;
        }
        assert11(carry === 0);
        assert11((carry & ~8191) === 0);
      };
      FFTM.prototype.stub = function stub(N3) {
        var ph = new Array(N3);
        for (var i = 0; i < N3; i++) {
          ph[i] = 0;
        }
        return ph;
      };
      FFTM.prototype.mulp = function mulp(x, y, out) {
        var N3 = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N3);
        var _ = this.stub(N3);
        var rws = new Array(N3);
        var rwst = new Array(N3);
        var iwst = new Array(N3);
        var nrws = new Array(N3);
        var nrwst = new Array(N3);
        var niwst = new Array(N3);
        var rmws = out.words;
        rmws.length = N3;
        this.convert13b(x.words, x.length, rws, N3);
        this.convert13b(y.words, y.length, nrws, N3);
        this.transform(rws, _, rwst, iwst, N3, rbt);
        this.transform(nrws, _, nrwst, niwst, N3, rbt);
        for (var i = 0; i < N3; i++) {
          var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
          iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
          rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N3);
        this.transform(rwst, iwst, rmws, _, N3, rbt);
        this.conjugate(rmws, _, N3);
        this.normalize13b(rmws, N3);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
      };
      BN5.prototype.mul = function mul(num) {
        var out = new BN5(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
      };
      BN5.prototype.mulf = function mulf(num) {
        var out = new BN5(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
      };
      BN5.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
      };
      BN5.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert11(typeof num === "number");
        assert11(num < 67108864);
        var carry = 0;
        for (var i = 0; i < this.length; i++) {
          var w = (this.words[i] | 0) * num;
          var lo = (w & 67108863) + (carry & 67108863);
          carry >>= 26;
          carry += w / 67108864 | 0;
          carry += lo >>> 26;
          this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return isNegNum ? this.ineg() : this;
      };
      BN5.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
      };
      BN5.prototype.sqr = function sqr() {
        return this.mul(this);
      };
      BN5.prototype.isqr = function isqr() {
        return this.imul(this.clone());
      };
      BN5.prototype.pow = function pow3(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN5(1);
        var res = this;
        for (var i = 0; i < w.length; i++, res = res.sqr()) {
          if (w[i] !== 0) break;
        }
        if (++i < w.length) {
          for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
            if (w[i] === 0) continue;
            res = res.mul(q);
          }
        }
        return res;
      };
      BN5.prototype.iushln = function iushln(bits) {
        assert11(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        var carryMask = 67108863 >>> 26 - r2 << 26 - r2;
        var i;
        if (r2 !== 0) {
          var carry = 0;
          for (i = 0; i < this.length; i++) {
            var newCarry = this.words[i] & carryMask;
            var c = (this.words[i] | 0) - newCarry << r2;
            this.words[i] = c | carry;
            carry = newCarry >>> 26 - r2;
          }
          if (carry) {
            this.words[i] = carry;
            this.length++;
          }
        }
        if (s !== 0) {
          for (i = this.length - 1; i >= 0; i--) {
            this.words[i + s] = this.words[i];
          }
          for (i = 0; i < s; i++) {
            this.words[i] = 0;
          }
          this.length += s;
        }
        return this._strip();
      };
      BN5.prototype.ishln = function ishln(bits) {
        assert11(this.negative === 0);
        return this.iushln(bits);
      };
      BN5.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert11(typeof bits === "number" && bits >= 0);
        var h;
        if (hint) {
          h = (hint - hint % 26) / 26;
        } else {
          h = 0;
        }
        var r2 = bits % 26;
        var s = Math.min((bits - r2) / 26, this.length);
        var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        if (maskedWords) {
          for (var i = 0; i < s; i++) {
            maskedWords.words[i] = this.words[i];
          }
          maskedWords.length = s;
        }
        if (s === 0) {
        } else if (this.length > s) {
          this.length -= s;
          for (i = 0; i < this.length; i++) {
            this.words[i] = this.words[i + s];
          }
        } else {
          this.words[0] = 0;
          this.length = 1;
        }
        var carry = 0;
        for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
          var word = this.words[i] | 0;
          this.words[i] = carry << 26 - r2 | word >>> r2;
          carry = word & mask2;
        }
        if (maskedWords && carry !== 0) {
          maskedWords.words[maskedWords.length++] = carry;
        }
        if (this.length === 0) {
          this.words[0] = 0;
          this.length = 1;
        }
        return this._strip();
      };
      BN5.prototype.ishrn = function ishrn(bits, hint, extended) {
        assert11(this.negative === 0);
        return this.iushrn(bits, hint, extended);
      };
      BN5.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
      };
      BN5.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
      };
      BN5.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
      };
      BN5.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
      };
      BN5.prototype.testn = function testn(bit) {
        assert11(typeof bit === "number" && bit >= 0);
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) return false;
        var w = this.words[s];
        return !!(w & q);
      };
      BN5.prototype.imaskn = function imaskn(bits) {
        assert11(typeof bits === "number" && bits >= 0);
        var r2 = bits % 26;
        var s = (bits - r2) / 26;
        assert11(this.negative === 0, "imaskn works only with positive numbers");
        if (this.length <= s) {
          return this;
        }
        if (r2 !== 0) {
          s++;
        }
        this.length = Math.min(s, this.length);
        if (r2 !== 0) {
          var mask2 = 67108863 ^ 67108863 >>> r2 << r2;
          this.words[this.length - 1] &= mask2;
        }
        return this._strip();
      };
      BN5.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
      };
      BN5.prototype.iaddn = function iaddn(num) {
        assert11(typeof num === "number");
        assert11(num < 67108864);
        if (num < 0) return this.isubn(-num);
        if (this.negative !== 0) {
          if (this.length === 1 && (this.words[0] | 0) <= num) {
            this.words[0] = num - (this.words[0] | 0);
            this.negative = 0;
            return this;
          }
          this.negative = 0;
          this.isubn(num);
          this.negative = 1;
          return this;
        }
        return this._iaddn(num);
      };
      BN5.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
          this.words[i] -= 67108864;
          if (i === this.length - 1) {
            this.words[i + 1] = 1;
          } else {
            this.words[i + 1]++;
          }
        }
        this.length = Math.max(this.length, i + 1);
        return this;
      };
      BN5.prototype.isubn = function isubn(num) {
        assert11(typeof num === "number");
        assert11(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
          this.negative = 0;
          this.iaddn(num);
          this.negative = 1;
          return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
          this.words[0] = -this.words[0];
          this.negative = 1;
        } else {
          for (var i = 0; i < this.length && this.words[i] < 0; i++) {
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
          }
        }
        return this._strip();
      };
      BN5.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
      };
      BN5.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
      };
      BN5.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
      };
      BN5.prototype.abs = function abs() {
        return this.clone().iabs();
      };
      BN5.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for (i = 0; i < num.length; i++) {
          w = (this.words[i + shift] | 0) + carry;
          var right = (num.words[i] | 0) * mul;
          w -= right & 67108863;
          carry = (w >> 26) - (right / 67108864 | 0);
          this.words[i + shift] = w & 67108863;
        }
        for (; i < this.length - shift; i++) {
          w = (this.words[i + shift] | 0) + carry;
          carry = w >> 26;
          this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        assert11(carry === -1);
        carry = 0;
        for (i = 0; i < this.length; i++) {
          w = -(this.words[i] | 0) + carry;
          carry = w >> 26;
          this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
      };
      BN5.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b2 = num;
        var bhi = b2.words[b2.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
          b2 = b2.ushln(shift);
          a.iushln(shift);
          bhi = b2.words[b2.length - 1] | 0;
        }
        var m = a.length - b2.length;
        var q;
        if (mode !== "mod") {
          q = new BN5(null);
          q.length = m + 1;
          q.words = new Array(q.length);
          for (var i = 0; i < q.length; i++) {
            q.words[i] = 0;
          }
        }
        var diff = a.clone()._ishlnsubmul(b2, 1, m);
        if (diff.negative === 0) {
          a = diff;
          if (q) {
            q.words[m] = 1;
          }
        }
        for (var j = m - 1; j >= 0; j--) {
          var qj = (a.words[b2.length + j] | 0) * 67108864 + (a.words[b2.length + j - 1] | 0);
          qj = Math.min(qj / bhi | 0, 67108863);
          a._ishlnsubmul(b2, qj, j);
          while (a.negative !== 0) {
            qj--;
            a.negative = 0;
            a._ishlnsubmul(b2, 1, j);
            if (!a.isZero()) {
              a.negative ^= 1;
            }
          }
          if (q) {
            q.words[j] = qj;
          }
        }
        if (q) {
          q._strip();
        }
        a._strip();
        if (mode !== "div" && shift !== 0) {
          a.iushrn(shift);
        }
        return {
          div: q || null,
          mod: a
        };
      };
      BN5.prototype.divmod = function divmod(num, mode, positive) {
        assert11(!num.isZero());
        if (this.isZero()) {
          return {
            div: new BN5(0),
            mod: new BN5(0)
          };
        }
        var div, mod2, res;
        if (this.negative !== 0 && num.negative === 0) {
          res = this.neg().divmod(num, mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.iadd(num);
            }
          }
          return {
            div,
            mod: mod2
          };
        }
        if (this.negative === 0 && num.negative !== 0) {
          res = this.divmod(num.neg(), mode);
          if (mode !== "mod") {
            div = res.div.neg();
          }
          return {
            div,
            mod: res.mod
          };
        }
        if ((this.negative & num.negative) !== 0) {
          res = this.neg().divmod(num.neg(), mode);
          if (mode !== "div") {
            mod2 = res.mod.neg();
            if (positive && mod2.negative !== 0) {
              mod2.isub(num);
            }
          }
          return {
            div: res.div,
            mod: mod2
          };
        }
        if (num.length > this.length || this.cmp(num) < 0) {
          return {
            div: new BN5(0),
            mod: this
          };
        }
        if (num.length === 1) {
          if (mode === "div") {
            return {
              div: this.divn(num.words[0]),
              mod: null
            };
          }
          if (mode === "mod") {
            return {
              div: null,
              mod: new BN5(this.modrn(num.words[0]))
            };
          }
          return {
            div: this.divn(num.words[0]),
            mod: new BN5(this.modrn(num.words[0]))
          };
        }
        return this._wordDiv(num, mode);
      };
      BN5.prototype.div = function div(num) {
        return this.divmod(num, "div", false).div;
      };
      BN5.prototype.mod = function mod2(num) {
        return this.divmod(num, "mod", false).mod;
      };
      BN5.prototype.umod = function umod(num) {
        return this.divmod(num, "mod", true).mod;
      };
      BN5.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        if (dm.mod.isZero()) return dm.div;
        var mod2 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod2.cmp(half);
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
      };
      BN5.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert11(num <= 67108863);
        var p = (1 << 26) % num;
        var acc = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          acc = (p * acc + (this.words[i] | 0)) % num;
        }
        return isNegNum ? -acc : acc;
      };
      BN5.prototype.modn = function modn(num) {
        return this.modrn(num);
      };
      BN5.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert11(num <= 67108863);
        var carry = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var w = (this.words[i] | 0) + carry * 67108864;
          this.words[i] = w / num | 0;
          carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
      };
      BN5.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
      };
      BN5.prototype.egcd = function egcd(p) {
        assert11(p.negative === 0);
        assert11(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) {
          x = x.umod(p);
        } else {
          x = x.clone();
        }
        var A = new BN5(1);
        var B = new BN5(0);
        var C = new BN5(0);
        var D = new BN5(1);
        var g = 0;
        while (x.isEven() && y.isEven()) {
          x.iushrn(1);
          y.iushrn(1);
          ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while (!x.isZero()) {
          for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            x.iushrn(i);
            while (i-- > 0) {
              if (A.isOdd() || B.isOdd()) {
                A.iadd(yp);
                B.isub(xp);
              }
              A.iushrn(1);
              B.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            y.iushrn(j);
            while (j-- > 0) {
              if (C.isOdd() || D.isOdd()) {
                C.iadd(yp);
                D.isub(xp);
              }
              C.iushrn(1);
              D.iushrn(1);
            }
          }
          if (x.cmp(y) >= 0) {
            x.isub(y);
            A.isub(C);
            B.isub(D);
          } else {
            y.isub(x);
            C.isub(A);
            D.isub(B);
          }
        }
        return {
          a: C,
          b: D,
          gcd: y.iushln(g)
        };
      };
      BN5.prototype._invmp = function _invmp(p) {
        assert11(p.negative === 0);
        assert11(!p.isZero());
        var a = this;
        var b2 = p.clone();
        if (a.negative !== 0) {
          a = a.umod(p);
        } else {
          a = a.clone();
        }
        var x1 = new BN5(1);
        var x2 = new BN5(0);
        var delta = b2.clone();
        while (a.cmpn(1) > 0 && b2.cmpn(1) > 0) {
          for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1) ;
          if (i > 0) {
            a.iushrn(i);
            while (i-- > 0) {
              if (x1.isOdd()) {
                x1.iadd(delta);
              }
              x1.iushrn(1);
            }
          }
          for (var j = 0, jm = 1; (b2.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1) ;
          if (j > 0) {
            b2.iushrn(j);
            while (j-- > 0) {
              if (x2.isOdd()) {
                x2.iadd(delta);
              }
              x2.iushrn(1);
            }
          }
          if (a.cmp(b2) >= 0) {
            a.isub(b2);
            x1.isub(x2);
          } else {
            b2.isub(a);
            x2.isub(x1);
          }
        }
        var res;
        if (a.cmpn(1) === 0) {
          res = x1;
        } else {
          res = x2;
        }
        if (res.cmpn(0) < 0) {
          res.iadd(p);
        }
        return res;
      };
      BN5.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b2 = num.clone();
        a.negative = 0;
        b2.negative = 0;
        for (var shift = 0; a.isEven() && b2.isEven(); shift++) {
          a.iushrn(1);
          b2.iushrn(1);
        }
        do {
          while (a.isEven()) {
            a.iushrn(1);
          }
          while (b2.isEven()) {
            b2.iushrn(1);
          }
          var r2 = a.cmp(b2);
          if (r2 < 0) {
            var t = a;
            a = b2;
            b2 = t;
          } else if (r2 === 0 || b2.cmpn(1) === 0) {
            break;
          }
          a.isub(b2);
        } while (true);
        return b2.iushln(shift);
      };
      BN5.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
      };
      BN5.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
      };
      BN5.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
      };
      BN5.prototype.andln = function andln(num) {
        return this.words[0] & num;
      };
      BN5.prototype.bincn = function bincn(bit) {
        assert11(typeof bit === "number");
        var r2 = bit % 26;
        var s = (bit - r2) / 26;
        var q = 1 << r2;
        if (this.length <= s) {
          this._expand(s + 1);
          this.words[s] |= q;
          return this;
        }
        var carry = q;
        for (var i = s; carry !== 0 && i < this.length; i++) {
          var w = this.words[i] | 0;
          w += carry;
          carry = w >>> 26;
          w &= 67108863;
          this.words[i] = w;
        }
        if (carry !== 0) {
          this.words[i] = carry;
          this.length++;
        }
        return this;
      };
      BN5.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
      };
      BN5.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) {
          res = 1;
        } else {
          if (negative) {
            num = -num;
          }
          assert11(num <= 67108863, "Number is too big");
          var w = this.words[0] | 0;
          res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN5.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
      };
      BN5.prototype.ucmp = function ucmp(num) {
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for (var i = this.length - 1; i >= 0; i--) {
          var a = this.words[i] | 0;
          var b2 = num.words[i] | 0;
          if (a === b2) continue;
          if (a < b2) {
            res = -1;
          } else if (a > b2) {
            res = 1;
          }
          break;
        }
        return res;
      };
      BN5.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
      };
      BN5.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
      };
      BN5.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
      };
      BN5.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
      };
      BN5.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
      };
      BN5.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
      };
      BN5.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
      };
      BN5.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
      };
      BN5.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
      };
      BN5.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
      };
      BN5.red = function red(num) {
        return new Red(num);
      };
      BN5.prototype.toRed = function toRed(ctx) {
        assert11(!this.red, "Already a number in reduction context");
        assert11(this.negative === 0, "red works only with positives");
        return ctx.convertTo(this)._forceRed(ctx);
      };
      BN5.prototype.fromRed = function fromRed() {
        assert11(this.red, "fromRed works only with numbers in reduction context");
        return this.red.convertFrom(this);
      };
      BN5.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
      };
      BN5.prototype.forceRed = function forceRed(ctx) {
        assert11(!this.red, "Already a number in reduction context");
        return this._forceRed(ctx);
      };
      BN5.prototype.redAdd = function redAdd(num) {
        assert11(this.red, "redAdd works only with red numbers");
        return this.red.add(this, num);
      };
      BN5.prototype.redIAdd = function redIAdd(num) {
        assert11(this.red, "redIAdd works only with red numbers");
        return this.red.iadd(this, num);
      };
      BN5.prototype.redSub = function redSub(num) {
        assert11(this.red, "redSub works only with red numbers");
        return this.red.sub(this, num);
      };
      BN5.prototype.redISub = function redISub(num) {
        assert11(this.red, "redISub works only with red numbers");
        return this.red.isub(this, num);
      };
      BN5.prototype.redShl = function redShl(num) {
        assert11(this.red, "redShl works only with red numbers");
        return this.red.shl(this, num);
      };
      BN5.prototype.redMul = function redMul(num) {
        assert11(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.mul(this, num);
      };
      BN5.prototype.redIMul = function redIMul(num) {
        assert11(this.red, "redMul works only with red numbers");
        this.red._verify2(this, num);
        return this.red.imul(this, num);
      };
      BN5.prototype.redSqr = function redSqr() {
        assert11(this.red, "redSqr works only with red numbers");
        this.red._verify1(this);
        return this.red.sqr(this);
      };
      BN5.prototype.redISqr = function redISqr() {
        assert11(this.red, "redISqr works only with red numbers");
        this.red._verify1(this);
        return this.red.isqr(this);
      };
      BN5.prototype.redSqrt = function redSqrt() {
        assert11(this.red, "redSqrt works only with red numbers");
        this.red._verify1(this);
        return this.red.sqrt(this);
      };
      BN5.prototype.redInvm = function redInvm() {
        assert11(this.red, "redInvm works only with red numbers");
        this.red._verify1(this);
        return this.red.invm(this);
      };
      BN5.prototype.redNeg = function redNeg() {
        assert11(this.red, "redNeg works only with red numbers");
        this.red._verify1(this);
        return this.red.neg(this);
      };
      BN5.prototype.redPow = function redPow(num) {
        assert11(this.red && !num.red, "redPow(normalNum)");
        this.red._verify1(this);
        return this.red.pow(this, num);
      };
      var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
      };
      function MPrime(name, p) {
        this.name = name;
        this.p = new BN5(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN5(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
      }
      MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN5(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
      };
      MPrime.prototype.ireduce = function ireduce(num) {
        var r2 = num;
        var rlen;
        do {
          this.split(r2, this.tmp);
          r2 = this.imulK(r2);
          r2 = r2.iadd(this.tmp);
          rlen = r2.bitLength();
        } while (rlen > this.n);
        var cmp = rlen < this.n ? -1 : r2.ucmp(this.p);
        if (cmp === 0) {
          r2.words[0] = 0;
          r2.length = 1;
        } else if (cmp > 0) {
          r2.isub(this.p);
        } else {
          if (r2.strip !== void 0) {
            r2.strip();
          } else {
            r2._strip();
          }
        }
        return r2;
      };
      MPrime.prototype.split = function split2(input, out) {
        input.iushrn(this.n, 0, out);
      };
      MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
      };
      function K256() {
        MPrime.call(
          this,
          "k256",
          "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
        );
      }
      inherits(K256, MPrime);
      K256.prototype.split = function split2(input, output2) {
        var mask2 = 4194303;
        var outLen = Math.min(input.length, 9);
        for (var i = 0; i < outLen; i++) {
          output2.words[i] = input.words[i];
        }
        output2.length = outLen;
        if (input.length <= 9) {
          input.words[0] = 0;
          input.length = 1;
          return;
        }
        var prev = input.words[9];
        output2.words[output2.length++] = prev & mask2;
        for (i = 10; i < input.length; i++) {
          var next = input.words[i] | 0;
          input.words[i - 10] = (next & mask2) << 4 | prev >>> 22;
          prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) {
          input.length -= 10;
        } else {
          input.length -= 9;
        }
      };
      K256.prototype.imulK = function imulK(num) {
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        var lo = 0;
        for (var i = 0; i < num.length; i++) {
          var w = num.words[i] | 0;
          lo += w * 977;
          num.words[i] = lo & 67108863;
          lo = w * 64 + (lo / 67108864 | 0);
        }
        if (num.words[num.length - 1] === 0) {
          num.length--;
          if (num.words[num.length - 1] === 0) {
            num.length--;
          }
        }
        return num;
      };
      function P224() {
        MPrime.call(
          this,
          "p224",
          "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
        );
      }
      inherits(P224, MPrime);
      function P192() {
        MPrime.call(
          this,
          "p192",
          "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
        );
      }
      inherits(P192, MPrime);
      function P25519() {
        MPrime.call(
          this,
          "25519",
          "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
        );
      }
      inherits(P25519, MPrime);
      P25519.prototype.imulK = function imulK(num) {
        var carry = 0;
        for (var i = 0; i < num.length; i++) {
          var hi = (num.words[i] | 0) * 19 + carry;
          var lo = hi & 67108863;
          hi >>>= 26;
          num.words[i] = lo;
          carry = hi;
        }
        if (carry !== 0) {
          num.words[num.length++] = carry;
        }
        return num;
      };
      BN5._prime = function prime(name) {
        if (primes[name]) return primes[name];
        var prime2;
        if (name === "k256") {
          prime2 = new K256();
        } else if (name === "p224") {
          prime2 = new P224();
        } else if (name === "p192") {
          prime2 = new P192();
        } else if (name === "p25519") {
          prime2 = new P25519();
        } else {
          throw new Error("Unknown prime " + name);
        }
        primes[name] = prime2;
        return prime2;
      };
      function Red(m) {
        if (typeof m === "string") {
          var prime = BN5._prime(m);
          this.m = prime.p;
          this.prime = prime;
        } else {
          assert11(m.gtn(1), "modulus must be greater than 1");
          this.m = m;
          this.prime = null;
        }
      }
      Red.prototype._verify1 = function _verify1(a) {
        assert11(a.negative === 0, "red works only with positives");
        assert11(a.red, "red works only with red numbers");
      };
      Red.prototype._verify2 = function _verify2(a, b2) {
        assert11((a.negative | b2.negative) === 0, "red works only with positives");
        assert11(
          a.red && a.red === b2.red,
          "red works only with red numbers"
        );
      };
      Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
      };
      Red.prototype.neg = function neg(a) {
        if (a.isZero()) {
          return a.clone();
        }
        return this.m.sub(a)._forceRed(this);
      };
      Red.prototype.add = function add2(a, b2) {
        this._verify2(a, b2);
        var res = a.add(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.iadd = function iadd(a, b2) {
        this._verify2(a, b2);
        var res = a.iadd(b2);
        if (res.cmp(this.m) >= 0) {
          res.isub(this.m);
        }
        return res;
      };
      Red.prototype.sub = function sub(a, b2) {
        this._verify2(a, b2);
        var res = a.sub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Red.prototype.isub = function isub(a, b2) {
        this._verify2(a, b2);
        var res = a.isub(b2);
        if (res.cmpn(0) < 0) {
          res.iadd(this.m);
        }
        return res;
      };
      Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
      };
      Red.prototype.imul = function imul(a, b2) {
        this._verify2(a, b2);
        return this.imod(a.imul(b2));
      };
      Red.prototype.mul = function mul(a, b2) {
        this._verify2(a, b2);
        return this.imod(a.mul(b2));
      };
      Red.prototype.isqr = function isqr(a) {
        return this.imul(a, a.clone());
      };
      Red.prototype.sqr = function sqr(a) {
        return this.mul(a, a);
      };
      Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert11(mod3 % 2 === 1);
        if (mod3 === 3) {
          var pow3 = this.m.add(new BN5(1)).iushrn(2);
          return this.pow(a, pow3);
        }
        var q = this.m.subn(1);
        var s = 0;
        while (!q.isZero() && q.andln(1) === 0) {
          s++;
          q.iushrn(1);
        }
        assert11(!q.isZero());
        var one = new BN5(1).toRed(this);
        var nOne = one.redNeg();
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN5(2 * z * z).toRed(this);
        while (this.pow(z, lpow).cmp(nOne) !== 0) {
          z.redIAdd(nOne);
        }
        var c = this.pow(z, q);
        var r2 = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while (t.cmp(one) !== 0) {
          var tmp = t;
          for (var i = 0; tmp.cmp(one) !== 0; i++) {
            tmp = tmp.redSqr();
          }
          assert11(i < m);
          var b2 = this.pow(c, new BN5(1).iushln(m - i - 1));
          r2 = r2.redMul(b2);
          c = b2.redSqr();
          t = t.redMul(c);
          m = i;
        }
        return r2;
      };
      Red.prototype.invm = function invm(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
          inv.negative = 0;
          return this.imod(inv).redNeg();
        } else {
          return this.imod(inv);
        }
      };
      Red.prototype.pow = function pow3(a, num) {
        if (num.isZero()) return new BN5(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN5(1).toRed(this);
        wnd[1] = a;
        for (var i = 2; i < wnd.length; i++) {
          wnd[i] = this.mul(wnd[i - 1], a);
        }
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) {
          start = 26;
        }
        for (i = num.length - 1; i >= 0; i--) {
          var word = num.words[i];
          for (var j = start - 1; j >= 0; j--) {
            var bit = word >> j & 1;
            if (res !== wnd[0]) {
              res = this.sqr(res);
            }
            if (bit === 0 && current === 0) {
              currentLen = 0;
              continue;
            }
            current <<= 1;
            current |= bit;
            currentLen++;
            if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
            res = this.mul(res, wnd[current]);
            currentLen = 0;
            current = 0;
          }
          start = 26;
        }
        return res;
      };
      Red.prototype.convertTo = function convertTo(num) {
        var r2 = num.umod(this.m);
        return r2 === num ? r2.clone() : r2;
      };
      Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
      };
      BN5.mont = function mont(num) {
        return new Mont(num);
      };
      function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) {
          this.shift += 26 - this.shift % 26;
        }
        this.r = new BN5(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
      }
      inherits(Mont, Red);
      Mont.prototype.convertTo = function convertTo(num) {
        return this.imod(num.ushln(this.shift));
      };
      Mont.prototype.convertFrom = function convertFrom(num) {
        var r2 = this.imod(num.mul(this.rinv));
        r2.red = null;
        return r2;
      };
      Mont.prototype.imul = function imul(a, b2) {
        if (a.isZero() || b2.isZero()) {
          a.words[0] = 0;
          a.length = 1;
          return a;
        }
        var t = a.imul(b2);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.mul = function mul(a, b2) {
        if (a.isZero() || b2.isZero()) return new BN5(0)._forceRed(this);
        var t = a.mul(b2);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) {
          res = u.isub(this.m);
        } else if (u.cmpn(0) < 0) {
          res = u.iadd(this.m);
        }
        return res._forceRed(this);
      };
      Mont.prototype.invm = function invm(a) {
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
      };
    })(typeof module === "undefined" || module, exports);
  }
});

// node_modules/@ethersproject/logger/lib.esm/_version.js
var version2;
var init_version = __esm({
  "node_modules/@ethersproject/logger/lib.esm/_version.js"() {
    version2 = "logger/5.7.0";
  }
});

// node_modules/@ethersproject/logger/lib.esm/index.js
function _checkNormalize() {
  try {
    const missing = [];
    ["NFD", "NFC", "NFKD", "NFKC"].forEach((form) => {
      try {
        if ("test".normalize(form) !== "test") {
          throw new Error("bad normalize");
        }
        ;
      } catch (error) {
        missing.push(form);
      }
    });
    if (missing.length) {
      throw new Error("missing " + missing.join(", "));
    }
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769)) {
      throw new Error("broken implementation");
    }
  } catch (error) {
    return error.message;
  }
  return null;
}
var _permanentCensorErrors, _censorErrors, LogLevels, _logLevel, _globalLogger, _normalizeError, LogLevel, ErrorCode, HEX, Logger;
var init_lib = __esm({
  "node_modules/@ethersproject/logger/lib.esm/index.js"() {
    "use strict";
    init_version();
    _permanentCensorErrors = false;
    _censorErrors = false;
    LogLevels = { debug: 1, "default": 2, info: 2, warning: 3, error: 4, off: 5 };
    _logLevel = LogLevels["default"];
    _globalLogger = null;
    _normalizeError = _checkNormalize();
    (function(LogLevel2) {
      LogLevel2["DEBUG"] = "DEBUG";
      LogLevel2["INFO"] = "INFO";
      LogLevel2["WARNING"] = "WARNING";
      LogLevel2["ERROR"] = "ERROR";
      LogLevel2["OFF"] = "OFF";
    })(LogLevel || (LogLevel = {}));
    (function(ErrorCode2) {
      ErrorCode2["UNKNOWN_ERROR"] = "UNKNOWN_ERROR";
      ErrorCode2["NOT_IMPLEMENTED"] = "NOT_IMPLEMENTED";
      ErrorCode2["UNSUPPORTED_OPERATION"] = "UNSUPPORTED_OPERATION";
      ErrorCode2["NETWORK_ERROR"] = "NETWORK_ERROR";
      ErrorCode2["SERVER_ERROR"] = "SERVER_ERROR";
      ErrorCode2["TIMEOUT"] = "TIMEOUT";
      ErrorCode2["BUFFER_OVERRUN"] = "BUFFER_OVERRUN";
      ErrorCode2["NUMERIC_FAULT"] = "NUMERIC_FAULT";
      ErrorCode2["MISSING_NEW"] = "MISSING_NEW";
      ErrorCode2["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
      ErrorCode2["MISSING_ARGUMENT"] = "MISSING_ARGUMENT";
      ErrorCode2["UNEXPECTED_ARGUMENT"] = "UNEXPECTED_ARGUMENT";
      ErrorCode2["CALL_EXCEPTION"] = "CALL_EXCEPTION";
      ErrorCode2["INSUFFICIENT_FUNDS"] = "INSUFFICIENT_FUNDS";
      ErrorCode2["NONCE_EXPIRED"] = "NONCE_EXPIRED";
      ErrorCode2["REPLACEMENT_UNDERPRICED"] = "REPLACEMENT_UNDERPRICED";
      ErrorCode2["UNPREDICTABLE_GAS_LIMIT"] = "UNPREDICTABLE_GAS_LIMIT";
      ErrorCode2["TRANSACTION_REPLACED"] = "TRANSACTION_REPLACED";
      ErrorCode2["ACTION_REJECTED"] = "ACTION_REJECTED";
    })(ErrorCode || (ErrorCode = {}));
    HEX = "0123456789abcdef";
    Logger = class _Logger {
      constructor(version11) {
        Object.defineProperty(this, "version", {
          enumerable: true,
          value: version11,
          writable: false
        });
      }
      _log(logLevel, args) {
        const level = logLevel.toLowerCase();
        if (LogLevels[level] == null) {
          this.throwArgumentError("invalid log level name", "logLevel", logLevel);
        }
        if (_logLevel > LogLevels[level]) {
          return;
        }
        console.log.apply(console, args);
      }
      debug(...args) {
        this._log(_Logger.levels.DEBUG, args);
      }
      info(...args) {
        this._log(_Logger.levels.INFO, args);
      }
      warn(...args) {
        this._log(_Logger.levels.WARNING, args);
      }
      makeError(message, code, params) {
        if (_censorErrors) {
          return this.makeError("censored error", code, {});
        }
        if (!code) {
          code = _Logger.errors.UNKNOWN_ERROR;
        }
        if (!params) {
          params = {};
        }
        const messageDetails = [];
        Object.keys(params).forEach((key) => {
          const value = params[key];
          try {
            if (value instanceof Uint8Array) {
              let hex = "";
              for (let i = 0; i < value.length; i++) {
                hex += HEX[value[i] >> 4];
                hex += HEX[value[i] & 15];
              }
              messageDetails.push(key + "=Uint8Array(0x" + hex + ")");
            } else {
              messageDetails.push(key + "=" + JSON.stringify(value));
            }
          } catch (error2) {
            messageDetails.push(key + "=" + JSON.stringify(params[key].toString()));
          }
        });
        messageDetails.push(`code=${code}`);
        messageDetails.push(`version=${this.version}`);
        const reason = message;
        let url = "";
        switch (code) {
          case ErrorCode.NUMERIC_FAULT: {
            url = "NUMERIC_FAULT";
            const fault = message;
            switch (fault) {
              case "overflow":
              case "underflow":
              case "division-by-zero":
                url += "-" + fault;
                break;
              case "negative-power":
              case "negative-width":
                url += "-unsupported";
                break;
              case "unbound-bitwise-result":
                url += "-unbound-result";
                break;
            }
            break;
          }
          case ErrorCode.CALL_EXCEPTION:
          case ErrorCode.INSUFFICIENT_FUNDS:
          case ErrorCode.MISSING_NEW:
          case ErrorCode.NONCE_EXPIRED:
          case ErrorCode.REPLACEMENT_UNDERPRICED:
          case ErrorCode.TRANSACTION_REPLACED:
          case ErrorCode.UNPREDICTABLE_GAS_LIMIT:
            url = code;
            break;
        }
        if (url) {
          message += " [ See: https://links.ethers.org/v5-errors-" + url + " ]";
        }
        if (messageDetails.length) {
          message += " (" + messageDetails.join(", ") + ")";
        }
        const error = new Error(message);
        error.reason = reason;
        error.code = code;
        Object.keys(params).forEach(function(key) {
          error[key] = params[key];
        });
        return error;
      }
      throwError(message, code, params) {
        throw this.makeError(message, code, params);
      }
      throwArgumentError(message, name, value) {
        return this.throwError(message, _Logger.errors.INVALID_ARGUMENT, {
          argument: name,
          value
        });
      }
      assert(condition, message, code, params) {
        if (!!condition) {
          return;
        }
        this.throwError(message, code, params);
      }
      assertArgument(condition, message, name, value) {
        if (!!condition) {
          return;
        }
        this.throwArgumentError(message, name, value);
      }
      checkNormalize(message) {
        if (message == null) {
          message = "platform missing String.prototype.normalize";
        }
        if (_normalizeError) {
          this.throwError("platform missing String.prototype.normalize", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "String.prototype.normalize",
            form: _normalizeError
          });
        }
      }
      checkSafeUint53(value, message) {
        if (typeof value !== "number") {
          return;
        }
        if (message == null) {
          message = "value not safe";
        }
        if (value < 0 || value >= 9007199254740991) {
          this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "out-of-safe-range",
            value
          });
        }
        if (value % 1) {
          this.throwError(message, _Logger.errors.NUMERIC_FAULT, {
            operation: "checkSafeInteger",
            fault: "non-integer",
            value
          });
        }
      }
      checkArgumentCount(count, expectedCount, message) {
        if (message) {
          message = ": " + message;
        } else {
          message = "";
        }
        if (count < expectedCount) {
          this.throwError("missing argument" + message, _Logger.errors.MISSING_ARGUMENT, {
            count,
            expectedCount
          });
        }
        if (count > expectedCount) {
          this.throwError("too many arguments" + message, _Logger.errors.UNEXPECTED_ARGUMENT, {
            count,
            expectedCount
          });
        }
      }
      checkNew(target, kind) {
        if (target === Object || target == null) {
          this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
        }
      }
      checkAbstract(target, kind) {
        if (target === kind) {
          this.throwError("cannot instantiate abstract class " + JSON.stringify(kind.name) + " directly; use a sub-class", _Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: "new" });
        } else if (target === Object || target == null) {
          this.throwError("missing new", _Logger.errors.MISSING_NEW, { name: kind.name });
        }
      }
      static globalLogger() {
        if (!_globalLogger) {
          _globalLogger = new _Logger(version2);
        }
        return _globalLogger;
      }
      static setCensorship(censorship, permanent) {
        if (!censorship && permanent) {
          this.globalLogger().throwError("cannot permanently disable censorship", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
          });
        }
        if (_permanentCensorErrors) {
          if (!censorship) {
            return;
          }
          this.globalLogger().throwError("error censorship permanent", _Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "setCensorship"
          });
        }
        _censorErrors = !!censorship;
        _permanentCensorErrors = !!permanent;
      }
      static setLogLevel(logLevel) {
        const level = LogLevels[logLevel.toLowerCase()];
        if (level == null) {
          _Logger.globalLogger().warn("invalid log level - " + logLevel);
          return;
        }
        _logLevel = level;
      }
      static from(version11) {
        return new _Logger(version11);
      }
    };
    Logger.errors = ErrorCode;
    Logger.levels = LogLevel;
  }
});

// node_modules/@ethersproject/bytes/lib.esm/_version.js
var version3;
var init_version2 = __esm({
  "node_modules/@ethersproject/bytes/lib.esm/_version.js"() {
    version3 = "bytes/5.7.0";
  }
});

// node_modules/@ethersproject/bytes/lib.esm/index.js
var lib_exports = {};
__export(lib_exports, {
  arrayify: () => arrayify,
  concat: () => concat2,
  hexConcat: () => hexConcat,
  hexDataLength: () => hexDataLength,
  hexDataSlice: () => hexDataSlice,
  hexStripZeros: () => hexStripZeros,
  hexValue: () => hexValue,
  hexZeroPad: () => hexZeroPad,
  hexlify: () => hexlify2,
  isBytes: () => isBytes2,
  isBytesLike: () => isBytesLike2,
  isHexString: () => isHexString2,
  joinSignature: () => joinSignature,
  splitSignature: () => splitSignature,
  stripZeros: () => stripZeros,
  zeroPad: () => zeroPad2
});
function isHexable(value) {
  return !!value.toHexString;
}
function addSlice(array) {
  if (array.slice) {
    return array;
  }
  array.slice = function() {
    const args = Array.prototype.slice.call(arguments);
    return addSlice(new Uint8Array(Array.prototype.slice.apply(array, args)));
  };
  return array;
}
function isBytesLike2(value) {
  return isHexString2(value) && !(value.length % 2) || isBytes2(value);
}
function isInteger(value) {
  return typeof value === "number" && value == value && value % 1 === 0;
}
function isBytes2(value) {
  if (value == null) {
    return false;
  }
  if (value.constructor === Uint8Array) {
    return true;
  }
  if (typeof value === "string") {
    return false;
  }
  if (!isInteger(value.length) || value.length < 0) {
    return false;
  }
  for (let i = 0; i < value.length; i++) {
    const v = value[i];
    if (!isInteger(v) || v < 0 || v >= 256) {
      return false;
    }
  }
  return true;
}
function arrayify(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid arrayify value");
    const result = [];
    while (value) {
      result.unshift(value & 255);
      value = parseInt(String(value / 256));
    }
    if (result.length === 0) {
      result.push(0);
    }
    return addSlice(new Uint8Array(result));
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    value = value.toHexString();
  }
  if (isHexString2(value)) {
    let hex = value.substring(2);
    if (hex.length % 2) {
      if (options.hexPad === "left") {
        hex = "0" + hex;
      } else if (options.hexPad === "right") {
        hex += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    const result = [];
    for (let i = 0; i < hex.length; i += 2) {
      result.push(parseInt(hex.substring(i, i + 2), 16));
    }
    return addSlice(new Uint8Array(result));
  }
  if (isBytes2(value)) {
    return addSlice(new Uint8Array(value));
  }
  return logger.throwArgumentError("invalid arrayify value", "value", value);
}
function concat2(items) {
  const objects = items.map((item) => arrayify(item));
  const length = objects.reduce((accum, item) => accum + item.length, 0);
  const result = new Uint8Array(length);
  objects.reduce((offset, object2) => {
    result.set(object2, offset);
    return offset + object2.length;
  }, 0);
  return addSlice(result);
}
function stripZeros(value) {
  let result = arrayify(value);
  if (result.length === 0) {
    return result;
  }
  let start = 0;
  while (start < result.length && result[start] === 0) {
    start++;
  }
  if (start) {
    result = result.slice(start);
  }
  return result;
}
function zeroPad2(value, length) {
  value = arrayify(value);
  if (value.length > length) {
    logger.throwArgumentError("value out of range", "value", arguments[0]);
  }
  const result = new Uint8Array(length);
  result.set(value, length - value.length);
  return addSlice(result);
}
function isHexString2(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (length && value.length !== 2 + 2 * length) {
    return false;
  }
  return true;
}
function hexlify2(value, options) {
  if (!options) {
    options = {};
  }
  if (typeof value === "number") {
    logger.checkSafeUint53(value, "invalid hexlify value");
    let hex = "";
    while (value) {
      hex = HexCharacters2[value & 15] + hex;
      value = Math.floor(value / 16);
    }
    if (hex.length) {
      if (hex.length % 2) {
        hex = "0" + hex;
      }
      return "0x" + hex;
    }
    return "0x00";
  }
  if (typeof value === "bigint") {
    value = value.toString(16);
    if (value.length % 2) {
      return "0x0" + value;
    }
    return "0x" + value;
  }
  if (options.allowMissingPrefix && typeof value === "string" && value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (isHexable(value)) {
    return value.toHexString();
  }
  if (isHexString2(value)) {
    if (value.length % 2) {
      if (options.hexPad === "left") {
        value = "0x0" + value.substring(2);
      } else if (options.hexPad === "right") {
        value += "0";
      } else {
        logger.throwArgumentError("hex data is odd-length", "value", value);
      }
    }
    return value.toLowerCase();
  }
  if (isBytes2(value)) {
    let result = "0x";
    for (let i = 0; i < value.length; i++) {
      let v = value[i];
      result += HexCharacters2[(v & 240) >> 4] + HexCharacters2[v & 15];
    }
    return result;
  }
  return logger.throwArgumentError("invalid hexlify value", "value", value);
}
function hexDataLength(data) {
  if (typeof data !== "string") {
    data = hexlify2(data);
  } else if (!isHexString2(data) || data.length % 2) {
    return null;
  }
  return (data.length - 2) / 2;
}
function hexDataSlice(data, offset, endOffset) {
  if (typeof data !== "string") {
    data = hexlify2(data);
  } else if (!isHexString2(data) || data.length % 2) {
    logger.throwArgumentError("invalid hexData", "value", data);
  }
  offset = 2 + 2 * offset;
  if (endOffset != null) {
    return "0x" + data.substring(offset, 2 + 2 * endOffset);
  }
  return "0x" + data.substring(offset);
}
function hexConcat(items) {
  let result = "0x";
  items.forEach((item) => {
    result += hexlify2(item).substring(2);
  });
  return result;
}
function hexValue(value) {
  const trimmed = hexStripZeros(hexlify2(value, { hexPad: "left" }));
  if (trimmed === "0x") {
    return "0x0";
  }
  return trimmed;
}
function hexStripZeros(value) {
  if (typeof value !== "string") {
    value = hexlify2(value);
  }
  if (!isHexString2(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  value = value.substring(2);
  let offset = 0;
  while (offset < value.length && value[offset] === "0") {
    offset++;
  }
  return "0x" + value.substring(offset);
}
function hexZeroPad(value, length) {
  if (typeof value !== "string") {
    value = hexlify2(value);
  } else if (!isHexString2(value)) {
    logger.throwArgumentError("invalid hex string", "value", value);
  }
  if (value.length > 2 * length + 2) {
    logger.throwArgumentError("value out of range", "value", arguments[1]);
  }
  while (value.length < 2 * length + 2) {
    value = "0x0" + value.substring(2);
  }
  return value;
}
function splitSignature(signature) {
  const result = {
    r: "0x",
    s: "0x",
    _vs: "0x",
    recoveryParam: 0,
    v: 0,
    yParityAndS: "0x",
    compact: "0x"
  };
  if (isBytesLike2(signature)) {
    let bytes3 = arrayify(signature);
    if (bytes3.length === 64) {
      result.v = 27 + (bytes3[32] >> 7);
      bytes3[32] &= 127;
      result.r = hexlify2(bytes3.slice(0, 32));
      result.s = hexlify2(bytes3.slice(32, 64));
    } else if (bytes3.length === 65) {
      result.r = hexlify2(bytes3.slice(0, 32));
      result.s = hexlify2(bytes3.slice(32, 64));
      result.v = bytes3[64];
    } else {
      logger.throwArgumentError("invalid signature string", "signature", signature);
    }
    if (result.v < 27) {
      if (result.v === 0 || result.v === 1) {
        result.v += 27;
      } else {
        logger.throwArgumentError("signature invalid v byte", "signature", signature);
      }
    }
    result.recoveryParam = 1 - result.v % 2;
    if (result.recoveryParam) {
      bytes3[32] |= 128;
    }
    result._vs = hexlify2(bytes3.slice(32, 64));
  } else {
    result.r = signature.r;
    result.s = signature.s;
    result.v = signature.v;
    result.recoveryParam = signature.recoveryParam;
    result._vs = signature._vs;
    if (result._vs != null) {
      const vs2 = zeroPad2(arrayify(result._vs), 32);
      result._vs = hexlify2(vs2);
      const recoveryParam = vs2[0] >= 128 ? 1 : 0;
      if (result.recoveryParam == null) {
        result.recoveryParam = recoveryParam;
      } else if (result.recoveryParam !== recoveryParam) {
        logger.throwArgumentError("signature recoveryParam mismatch _vs", "signature", signature);
      }
      vs2[0] &= 127;
      const s = hexlify2(vs2);
      if (result.s == null) {
        result.s = s;
      } else if (result.s !== s) {
        logger.throwArgumentError("signature v mismatch _vs", "signature", signature);
      }
    }
    if (result.recoveryParam == null) {
      if (result.v == null) {
        logger.throwArgumentError("signature missing v and recoveryParam", "signature", signature);
      } else if (result.v === 0 || result.v === 1) {
        result.recoveryParam = result.v;
      } else {
        result.recoveryParam = 1 - result.v % 2;
      }
    } else {
      if (result.v == null) {
        result.v = 27 + result.recoveryParam;
      } else {
        const recId = result.v === 0 || result.v === 1 ? result.v : 1 - result.v % 2;
        if (result.recoveryParam !== recId) {
          logger.throwArgumentError("signature recoveryParam mismatch v", "signature", signature);
        }
      }
    }
    if (result.r == null || !isHexString2(result.r)) {
      logger.throwArgumentError("signature missing or invalid r", "signature", signature);
    } else {
      result.r = hexZeroPad(result.r, 32);
    }
    if (result.s == null || !isHexString2(result.s)) {
      logger.throwArgumentError("signature missing or invalid s", "signature", signature);
    } else {
      result.s = hexZeroPad(result.s, 32);
    }
    const vs = arrayify(result.s);
    if (vs[0] >= 128) {
      logger.throwArgumentError("signature s out of range", "signature", signature);
    }
    if (result.recoveryParam) {
      vs[0] |= 128;
    }
    const _vs = hexlify2(vs);
    if (result._vs) {
      if (!isHexString2(result._vs)) {
        logger.throwArgumentError("signature invalid _vs", "signature", signature);
      }
      result._vs = hexZeroPad(result._vs, 32);
    }
    if (result._vs == null) {
      result._vs = _vs;
    } else if (result._vs !== _vs) {
      logger.throwArgumentError("signature _vs mismatch v and s", "signature", signature);
    }
  }
  result.yParityAndS = result._vs;
  result.compact = result.r + result.yParityAndS.substring(2);
  return result;
}
function joinSignature(signature) {
  signature = splitSignature(signature);
  return hexlify2(concat2([
    signature.r,
    signature.s,
    signature.recoveryParam ? "0x1c" : "0x1b"
  ]));
}
var logger, HexCharacters2;
var init_lib2 = __esm({
  "node_modules/@ethersproject/bytes/lib.esm/index.js"() {
    "use strict";
    init_lib();
    init_version2();
    logger = new Logger(version3);
    HexCharacters2 = "0123456789abcdef";
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/_version.js
var version4;
var init_version3 = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/_version.js"() {
    version4 = "bignumber/5.7.0";
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/bignumber.js
function isBigNumberish(value) {
  return value != null && (BigNumber.isBigNumber(value) || typeof value === "number" && value % 1 === 0 || typeof value === "string" && !!value.match(/^-?[0-9]+$/) || isHexString2(value) || typeof value === "bigint" || isBytes2(value));
}
function toHex(value) {
  if (typeof value !== "string") {
    return toHex(value.toString(16));
  }
  if (value[0] === "-") {
    value = value.substring(1);
    if (value[0] === "-") {
      logger2.throwArgumentError("invalid hex", "value", value);
    }
    value = toHex(value);
    if (value === "0x00") {
      return value;
    }
    return "-" + value;
  }
  if (value.substring(0, 2) !== "0x") {
    value = "0x" + value;
  }
  if (value === "0x") {
    return "0x00";
  }
  if (value.length % 2) {
    value = "0x0" + value.substring(2);
  }
  while (value.length > 4 && value.substring(0, 4) === "0x00") {
    value = "0x" + value.substring(4);
  }
  return value;
}
function toBigNumber(value) {
  return BigNumber.from(toHex(value));
}
function toBN(value) {
  const hex = BigNumber.from(value).toHexString();
  if (hex[0] === "-") {
    return new BN2("-" + hex.substring(3), 16);
  }
  return new BN2(hex.substring(2), 16);
}
function throwFault(fault, operation, value) {
  const params = { fault, operation };
  if (value != null) {
    params.value = value;
  }
  return logger2.throwError(fault, Logger.errors.NUMERIC_FAULT, params);
}
function _base36To16(value) {
  return new BN2(value, 36).toString(16);
}
var import_bn, BN2, logger2, _constructorGuard, MAX_SAFE, _warnedToStringRadix, BigNumber;
var init_bignumber = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"() {
    "use strict";
    import_bn = __toESM(require_bn4());
    init_lib2();
    init_lib();
    init_version3();
    BN2 = import_bn.default.BN;
    logger2 = new Logger(version4);
    _constructorGuard = {};
    MAX_SAFE = 9007199254740991;
    _warnedToStringRadix = false;
    BigNumber = class _BigNumber {
      constructor(constructorGuard, hex) {
        if (constructorGuard !== _constructorGuard) {
          logger2.throwError("cannot call constructor directly; use BigNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new (BigNumber)"
          });
        }
        this._hex = hex;
        this._isBigNumber = true;
        Object.freeze(this);
      }
      fromTwos(value) {
        return toBigNumber(toBN(this).fromTwos(value));
      }
      toTwos(value) {
        return toBigNumber(toBN(this).toTwos(value));
      }
      abs() {
        if (this._hex[0] === "-") {
          return _BigNumber.from(this._hex.substring(1));
        }
        return this;
      }
      add(other) {
        return toBigNumber(toBN(this).add(toBN(other)));
      }
      sub(other) {
        return toBigNumber(toBN(this).sub(toBN(other)));
      }
      div(other) {
        const o = _BigNumber.from(other);
        if (o.isZero()) {
          throwFault("division-by-zero", "div");
        }
        return toBigNumber(toBN(this).div(toBN(other)));
      }
      mul(other) {
        return toBigNumber(toBN(this).mul(toBN(other)));
      }
      mod(other) {
        const value = toBN(other);
        if (value.isNeg()) {
          throwFault("division-by-zero", "mod");
        }
        return toBigNumber(toBN(this).umod(value));
      }
      pow(other) {
        const value = toBN(other);
        if (value.isNeg()) {
          throwFault("negative-power", "pow");
        }
        return toBigNumber(toBN(this).pow(value));
      }
      and(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "and");
        }
        return toBigNumber(toBN(this).and(value));
      }
      or(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "or");
        }
        return toBigNumber(toBN(this).or(value));
      }
      xor(other) {
        const value = toBN(other);
        if (this.isNegative() || value.isNeg()) {
          throwFault("unbound-bitwise-result", "xor");
        }
        return toBigNumber(toBN(this).xor(value));
      }
      mask(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "mask");
        }
        return toBigNumber(toBN(this).maskn(value));
      }
      shl(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "shl");
        }
        return toBigNumber(toBN(this).shln(value));
      }
      shr(value) {
        if (this.isNegative() || value < 0) {
          throwFault("negative-width", "shr");
        }
        return toBigNumber(toBN(this).shrn(value));
      }
      eq(other) {
        return toBN(this).eq(toBN(other));
      }
      lt(other) {
        return toBN(this).lt(toBN(other));
      }
      lte(other) {
        return toBN(this).lte(toBN(other));
      }
      gt(other) {
        return toBN(this).gt(toBN(other));
      }
      gte(other) {
        return toBN(this).gte(toBN(other));
      }
      isNegative() {
        return this._hex[0] === "-";
      }
      isZero() {
        return toBN(this).isZero();
      }
      toNumber() {
        try {
          return toBN(this).toNumber();
        } catch (error) {
          throwFault("overflow", "toNumber", this.toString());
        }
        return null;
      }
      toBigInt() {
        try {
          return BigInt(this.toString());
        } catch (e) {
        }
        return logger2.throwError("this platform does not support BigInt", Logger.errors.UNSUPPORTED_OPERATION, {
          value: this.toString()
        });
      }
      toString() {
        if (arguments.length > 0) {
          if (arguments[0] === 10) {
            if (!_warnedToStringRadix) {
              _warnedToStringRadix = true;
              logger2.warn("BigNumber.toString does not accept any parameters; base-10 is assumed");
            }
          } else if (arguments[0] === 16) {
            logger2.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", Logger.errors.UNEXPECTED_ARGUMENT, {});
          } else {
            logger2.throwError("BigNumber.toString does not accept parameters", Logger.errors.UNEXPECTED_ARGUMENT, {});
          }
        }
        return toBN(this).toString(10);
      }
      toHexString() {
        return this._hex;
      }
      toJSON(key) {
        return { type: "BigNumber", hex: this.toHexString() };
      }
      static from(value) {
        if (value instanceof _BigNumber) {
          return value;
        }
        if (typeof value === "string") {
          if (value.match(/^-?0x[0-9a-f]+$/i)) {
            return new _BigNumber(_constructorGuard, toHex(value));
          }
          if (value.match(/^-?[0-9]+$/)) {
            return new _BigNumber(_constructorGuard, toHex(new BN2(value)));
          }
          return logger2.throwArgumentError("invalid BigNumber string", "value", value);
        }
        if (typeof value === "number") {
          if (value % 1) {
            throwFault("underflow", "BigNumber.from", value);
          }
          if (value >= MAX_SAFE || value <= -MAX_SAFE) {
            throwFault("overflow", "BigNumber.from", value);
          }
          return _BigNumber.from(String(value));
        }
        const anyValue = value;
        if (typeof anyValue === "bigint") {
          return _BigNumber.from(anyValue.toString());
        }
        if (isBytes2(anyValue)) {
          return _BigNumber.from(hexlify2(anyValue));
        }
        if (anyValue) {
          if (anyValue.toHexString) {
            const hex = anyValue.toHexString();
            if (typeof hex === "string") {
              return _BigNumber.from(hex);
            }
          } else {
            let hex = anyValue._hex;
            if (hex == null && anyValue.type === "BigNumber") {
              hex = anyValue.hex;
            }
            if (typeof hex === "string") {
              if (isHexString2(hex) || hex[0] === "-" && isHexString2(hex.substring(1))) {
                return _BigNumber.from(hex);
              }
            }
          }
        }
        return logger2.throwArgumentError("invalid BigNumber value", "value", value);
      }
      static isBigNumber(value) {
        return !!(value && value._isBigNumber);
      }
    };
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js
function throwFault2(message, fault, operation, value) {
  const params = { fault, operation };
  if (value !== void 0) {
    params.value = value;
  }
  return logger3.throwError(message, Logger.errors.NUMERIC_FAULT, params);
}
function getMultiplier(decimals) {
  if (typeof decimals !== "number") {
    try {
      decimals = BigNumber.from(decimals).toNumber();
    } catch (e) {
    }
  }
  if (typeof decimals === "number" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {
    return "1" + zeros.substring(0, decimals);
  }
  return logger3.throwArgumentError("invalid decimal size", "decimals", decimals);
}
function formatFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  value = BigNumber.from(value);
  const negative = value.lt(Zero);
  if (negative) {
    value = value.mul(NegativeOne);
  }
  let fraction = value.mod(multiplier).toString();
  while (fraction.length < multiplier.length - 1) {
    fraction = "0" + fraction;
  }
  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];
  const whole = value.div(multiplier).toString();
  if (multiplier.length === 1) {
    value = whole;
  } else {
    value = whole + "." + fraction;
  }
  if (negative) {
    value = "-" + value;
  }
  return value;
}
function parseFixed(value, decimals) {
  if (decimals == null) {
    decimals = 0;
  }
  const multiplier = getMultiplier(decimals);
  if (typeof value !== "string" || !value.match(/^-?[0-9.]+$/)) {
    logger3.throwArgumentError("invalid decimal value", "value", value);
  }
  const negative = value.substring(0, 1) === "-";
  if (negative) {
    value = value.substring(1);
  }
  if (value === ".") {
    logger3.throwArgumentError("missing value", "value", value);
  }
  const comps = value.split(".");
  if (comps.length > 2) {
    logger3.throwArgumentError("too many decimal points", "value", value);
  }
  let whole = comps[0], fraction = comps[1];
  if (!whole) {
    whole = "0";
  }
  if (!fraction) {
    fraction = "0";
  }
  while (fraction[fraction.length - 1] === "0") {
    fraction = fraction.substring(0, fraction.length - 1);
  }
  if (fraction.length > multiplier.length - 1) {
    throwFault2("fractional component exceeds decimals", "underflow", "parseFixed");
  }
  if (fraction === "") {
    fraction = "0";
  }
  while (fraction.length < multiplier.length - 1) {
    fraction += "0";
  }
  const wholeValue = BigNumber.from(whole);
  const fractionValue = BigNumber.from(fraction);
  let wei = wholeValue.mul(multiplier).add(fractionValue);
  if (negative) {
    wei = wei.mul(NegativeOne);
  }
  return wei;
}
var logger3, _constructorGuard2, Zero, NegativeOne, zeros, FixedFormat, FixedNumber2, ONE, BUMP;
var init_fixednumber = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version3();
    init_bignumber();
    logger3 = new Logger(version4);
    _constructorGuard2 = {};
    Zero = BigNumber.from(0);
    NegativeOne = BigNumber.from(-1);
    zeros = "0";
    while (zeros.length < 256) {
      zeros += zeros;
    }
    FixedFormat = class _FixedFormat {
      constructor(constructorGuard, signed2, width, decimals) {
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedFormat constructor; use FixedFormat.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.signed = signed2;
        this.width = width;
        this.decimals = decimals;
        this.name = (signed2 ? "" : "u") + "fixed" + String(width) + "x" + String(decimals);
        this._multiplier = getMultiplier(decimals);
        Object.freeze(this);
      }
      static from(value) {
        if (value instanceof _FixedFormat) {
          return value;
        }
        if (typeof value === "number") {
          value = `fixed128x${value}`;
        }
        let signed2 = true;
        let width = 128;
        let decimals = 18;
        if (typeof value === "string") {
          if (value === "fixed") {
          } else if (value === "ufixed") {
            signed2 = false;
          } else {
            const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);
            if (!match) {
              logger3.throwArgumentError("invalid fixed format", "format", value);
            }
            signed2 = match[1] !== "u";
            width = parseInt(match[2]);
            decimals = parseInt(match[3]);
          }
        } else if (value) {
          const check = (key, type, defaultValue) => {
            if (value[key] == null) {
              return defaultValue;
            }
            if (typeof value[key] !== type) {
              logger3.throwArgumentError("invalid fixed format (" + key + " not " + type + ")", "format." + key, value[key]);
            }
            return value[key];
          };
          signed2 = check("signed", "boolean", signed2);
          width = check("width", "number", width);
          decimals = check("decimals", "number", decimals);
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid fixed format width (not byte aligned)", "format.width", width);
        }
        if (decimals > 80) {
          logger3.throwArgumentError("invalid fixed format (decimals too large)", "format.decimals", decimals);
        }
        return new _FixedFormat(_constructorGuard2, signed2, width, decimals);
      }
    };
    FixedNumber2 = class _FixedNumber {
      constructor(constructorGuard, hex, value, format) {
        if (constructorGuard !== _constructorGuard2) {
          logger3.throwError("cannot use FixedNumber constructor; use FixedNumber.from", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new FixedFormat"
          });
        }
        this.format = format;
        this._hex = hex;
        this._value = value;
        this._isFixedNumber = true;
        Object.freeze(this);
      }
      _checkFormat(other) {
        if (this.format.name !== other.format.name) {
          logger3.throwArgumentError("incompatible format; use fixedNumber.toFormat", "other", other);
        }
      }
      addUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b2 = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.add(b2), this.format.decimals, this.format);
      }
      subUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b2 = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.sub(b2), this.format.decimals, this.format);
      }
      mulUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b2 = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.mul(b2).div(this.format._multiplier), this.format.decimals, this.format);
      }
      divUnsafe(other) {
        this._checkFormat(other);
        const a = parseFixed(this._value, this.format.decimals);
        const b2 = parseFixed(other._value, other.format.decimals);
        return _FixedNumber.fromValue(a.mul(this.format._multiplier).div(b2), this.format.decimals, this.format);
      }
      floor() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = _FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (this.isNegative() && hasFraction) {
          result = result.subUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      ceiling() {
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        let result = _FixedNumber.from(comps[0], this.format);
        const hasFraction = !comps[1].match(/^(0*)$/);
        if (!this.isNegative() && hasFraction) {
          result = result.addUnsafe(ONE.toFormat(result.format));
        }
        return result;
      }
      // @TODO: Support other rounding algorithms
      round(decimals) {
        if (decimals == null) {
          decimals = 0;
        }
        const comps = this.toString().split(".");
        if (comps.length === 1) {
          comps.push("0");
        }
        if (decimals < 0 || decimals > 80 || decimals % 1) {
          logger3.throwArgumentError("invalid decimal count", "decimals", decimals);
        }
        if (comps[1].length <= decimals) {
          return this;
        }
        const factor = _FixedNumber.from("1" + zeros.substring(0, decimals), this.format);
        const bump = BUMP.toFormat(this.format);
        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);
      }
      isZero() {
        return this._value === "0.0" || this._value === "0";
      }
      isNegative() {
        return this._value[0] === "-";
      }
      toString() {
        return this._value;
      }
      toHexString(width) {
        if (width == null) {
          return this._hex;
        }
        if (width % 8) {
          logger3.throwArgumentError("invalid byte width", "width", width);
        }
        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();
        return hexZeroPad(hex, width / 8);
      }
      toUnsafeFloat() {
        return parseFloat(this.toString());
      }
      toFormat(format) {
        return _FixedNumber.fromString(this._value, format);
      }
      static fromValue(value, decimals, format) {
        if (format == null && decimals != null && !isBigNumberish(decimals)) {
          format = decimals;
          decimals = null;
        }
        if (decimals == null) {
          decimals = 0;
        }
        if (format == null) {
          format = "fixed";
        }
        return _FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));
      }
      static fromString(value, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        const numeric = parseFixed(value, fixedFormat.decimals);
        if (!fixedFormat.signed && numeric.lt(Zero)) {
          throwFault2("unsigned value cannot be negative", "overflow", "value", value);
        }
        let hex = null;
        if (fixedFormat.signed) {
          hex = numeric.toTwos(fixedFormat.width).toHexString();
        } else {
          hex = numeric.toHexString();
          hex = hexZeroPad(hex, fixedFormat.width / 8);
        }
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static fromBytes(value, format) {
        if (format == null) {
          format = "fixed";
        }
        const fixedFormat = FixedFormat.from(format);
        if (arrayify(value).length > fixedFormat.width / 8) {
          throw new Error("overflow");
        }
        let numeric = BigNumber.from(value);
        if (fixedFormat.signed) {
          numeric = numeric.fromTwos(fixedFormat.width);
        }
        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();
        const decimal = formatFixed(numeric, fixedFormat.decimals);
        return new _FixedNumber(_constructorGuard2, hex, decimal, fixedFormat);
      }
      static from(value, format) {
        if (typeof value === "string") {
          return _FixedNumber.fromString(value, format);
        }
        if (isBytes2(value)) {
          return _FixedNumber.fromBytes(value, format);
        }
        try {
          return _FixedNumber.fromValue(value, 0, format);
        } catch (error) {
          if (error.code !== Logger.errors.INVALID_ARGUMENT) {
            throw error;
          }
        }
        return logger3.throwArgumentError("invalid FixedNumber value", "value", value);
      }
      static isFixedNumber(value) {
        return !!(value && value._isFixedNumber);
      }
    };
    ONE = FixedNumber2.from(1);
    BUMP = FixedNumber2.from("0.5");
  }
});

// node_modules/@ethersproject/bignumber/lib.esm/index.js
var init_lib3 = __esm({
  "node_modules/@ethersproject/bignumber/lib.esm/index.js"() {
    init_bignumber();
    init_fixednumber();
    init_bignumber();
  }
});

// node_modules/@ethersproject/properties/lib.esm/_version.js
var version5;
var init_version4 = __esm({
  "node_modules/@ethersproject/properties/lib.esm/_version.js"() {
    version5 = "properties/5.7.0";
  }
});

// node_modules/@ethersproject/properties/lib.esm/index.js
function defineReadOnly(object2, name, value) {
  Object.defineProperty(object2, name, {
    enumerable: true,
    value,
    writable: false
  });
}
function getStatic(ctor, key) {
  for (let i = 0; i < 32; i++) {
    if (ctor[key]) {
      return ctor[key];
    }
    if (!ctor.prototype || typeof ctor.prototype !== "object") {
      break;
    }
    ctor = Object.getPrototypeOf(ctor.prototype).constructor;
  }
  return null;
}
function _isFrozen(object2) {
  if (object2 === void 0 || object2 === null || opaque[typeof object2]) {
    return true;
  }
  if (Array.isArray(object2) || typeof object2 === "object") {
    if (!Object.isFrozen(object2)) {
      return false;
    }
    const keys = Object.keys(object2);
    for (let i = 0; i < keys.length; i++) {
      let value = null;
      try {
        value = object2[keys[i]];
      } catch (error) {
        continue;
      }
      if (!_isFrozen(value)) {
        return false;
      }
    }
    return true;
  }
  return logger4.throwArgumentError(`Cannot deepCopy ${typeof object2}`, "object", object2);
}
function _deepCopy(object2) {
  if (_isFrozen(object2)) {
    return object2;
  }
  if (Array.isArray(object2)) {
    return Object.freeze(object2.map((item) => deepCopy(item)));
  }
  if (typeof object2 === "object") {
    const result = {};
    for (const key in object2) {
      const value = object2[key];
      if (value === void 0) {
        continue;
      }
      defineReadOnly(result, key, deepCopy(value));
    }
    return result;
  }
  return logger4.throwArgumentError(`Cannot deepCopy ${typeof object2}`, "object", object2);
}
function deepCopy(object2) {
  return _deepCopy(object2);
}
var logger4, opaque, Description;
var init_lib4 = __esm({
  "node_modules/@ethersproject/properties/lib.esm/index.js"() {
    "use strict";
    init_lib();
    init_version4();
    logger4 = new Logger(version5);
    opaque = { bigint: true, boolean: true, "function": true, number: true, string: true };
    Description = class {
      constructor(info) {
        for (const key in info) {
          this[key] = deepCopy(info[key]);
        }
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/_version.js
var version6;
var init_version5 = __esm({
  "node_modules/@ethersproject/abi/lib.esm/_version.js"() {
    version6 = "abi/5.7.0";
  }
});

// node_modules/@ethersproject/abi/lib.esm/fragments.js
function checkModifier(type, name) {
  if (type === "bytes" || type === "string") {
    if (ModifiersBytes[name]) {
      return true;
    }
  } else if (type === "address") {
    if (name === "payable") {
      return true;
    }
  } else if (type.indexOf("[") >= 0 || type === "tuple") {
    if (ModifiersNest[name]) {
      return true;
    }
  }
  if (ModifiersBytes[name] || name === "payable") {
    logger5.throwArgumentError("invalid modifier", "name", name);
  }
  return false;
}
function parseParamType(param, allowIndexed) {
  let originalParam = param;
  function throwError2(i) {
    logger5.throwArgumentError(`unexpected character at position ${i}`, "param", param);
  }
  param = param.replace(/\s/g, " ");
  function newNode(parent2) {
    let node2 = { type: "", name: "", parent: parent2, state: { allowType: true } };
    if (allowIndexed) {
      node2.indexed = false;
    }
    return node2;
  }
  let parent = { type: "", name: "", state: { allowType: true } };
  let node = parent;
  for (let i = 0; i < param.length; i++) {
    let c = param[i];
    switch (c) {
      case "(":
        if (node.state.allowType && node.type === "") {
          node.type = "tuple";
        } else if (!node.state.allowParams) {
          throwError2(i);
        }
        node.state.allowType = false;
        node.type = verifyType(node.type);
        node.components = [newNode(node)];
        node = node.components[0];
        break;
      case ")":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError2(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let child = node;
        node = node.parent;
        if (!node) {
          throwError2(i);
        }
        delete child.parent;
        node.state.allowParams = false;
        node.state.allowName = true;
        node.state.allowArray = true;
        break;
      case ",":
        delete node.state;
        if (node.name === "indexed") {
          if (!allowIndexed) {
            throwError2(i);
          }
          node.indexed = true;
          node.name = "";
        }
        if (checkModifier(node.type, node.name)) {
          node.name = "";
        }
        node.type = verifyType(node.type);
        let sibling = newNode(node.parent);
        node.parent.components.push(sibling);
        delete node.parent;
        node = sibling;
        break;
      case " ":
        if (node.state.allowType) {
          if (node.type !== "") {
            node.type = verifyType(node.type);
            delete node.state.allowType;
            node.state.allowName = true;
            node.state.allowParams = true;
          }
        }
        if (node.state.allowName) {
          if (node.name !== "") {
            if (node.name === "indexed") {
              if (!allowIndexed) {
                throwError2(i);
              }
              if (node.indexed) {
                throwError2(i);
              }
              node.indexed = true;
              node.name = "";
            } else if (checkModifier(node.type, node.name)) {
              node.name = "";
            } else {
              node.state.allowName = false;
            }
          }
        }
        break;
      case "[":
        if (!node.state.allowArray) {
          throwError2(i);
        }
        node.type += c;
        node.state.allowArray = false;
        node.state.allowName = false;
        node.state.readArray = true;
        break;
      case "]":
        if (!node.state.readArray) {
          throwError2(i);
        }
        node.type += c;
        node.state.readArray = false;
        node.state.allowArray = true;
        node.state.allowName = true;
        break;
      default:
        if (node.state.allowType) {
          node.type += c;
          node.state.allowParams = true;
          node.state.allowArray = true;
        } else if (node.state.allowName) {
          node.name += c;
          delete node.state.allowArray;
        } else if (node.state.readArray) {
          node.type += c;
        } else {
          throwError2(i);
        }
    }
  }
  if (node.parent) {
    logger5.throwArgumentError("unexpected eof", "param", param);
  }
  delete parent.state;
  if (node.name === "indexed") {
    if (!allowIndexed) {
      throwError2(originalParam.length - 7);
    }
    if (node.indexed) {
      throwError2(originalParam.length - 7);
    }
    node.indexed = true;
    node.name = "";
  } else if (checkModifier(node.type, node.name)) {
    node.name = "";
  }
  parent.type = verifyType(parent.type);
  return parent;
}
function populate(object2, params) {
  for (let key in params) {
    defineReadOnly(object2, key, params[key]);
  }
}
function parseParams(value, allowIndex) {
  return splitNesting(value).map((param) => ParamType2.fromString(param, allowIndex));
}
function parseGas(value, params) {
  params.gas = null;
  let comps = value.split("@");
  if (comps.length !== 1) {
    if (comps.length > 2) {
      logger5.throwArgumentError("invalid human-readable ABI signature", "value", value);
    }
    if (!comps[1].match(/^[0-9]+$/)) {
      logger5.throwArgumentError("invalid human-readable ABI signature gas", "value", value);
    }
    params.gas = BigNumber.from(comps[1]);
    return comps[0];
  }
  return value;
}
function parseModifiers(value, params) {
  params.constant = false;
  params.payable = false;
  params.stateMutability = "nonpayable";
  value.split(" ").forEach((modifier) => {
    switch (modifier.trim()) {
      case "constant":
        params.constant = true;
        break;
      case "payable":
        params.payable = true;
        params.stateMutability = "payable";
        break;
      case "nonpayable":
        params.payable = false;
        params.stateMutability = "nonpayable";
        break;
      case "pure":
        params.constant = true;
        params.stateMutability = "pure";
        break;
      case "view":
        params.constant = true;
        params.stateMutability = "view";
        break;
      case "external":
      case "public":
      case "":
        break;
      default:
        console.log("unknown modifier: " + modifier);
    }
  });
}
function verifyState(value) {
  let result = {
    constant: false,
    payable: true,
    stateMutability: "payable"
  };
  if (value.stateMutability != null) {
    result.stateMutability = value.stateMutability;
    result.constant = result.stateMutability === "view" || result.stateMutability === "pure";
    if (value.constant != null) {
      if (!!value.constant !== result.constant) {
        logger5.throwArgumentError("cannot have constant function with mutability " + result.stateMutability, "value", value);
      }
    }
    result.payable = result.stateMutability === "payable";
    if (value.payable != null) {
      if (!!value.payable !== result.payable) {
        logger5.throwArgumentError("cannot have payable function with mutability " + result.stateMutability, "value", value);
      }
    }
  } else if (value.payable != null) {
    result.payable = !!value.payable;
    if (value.constant == null && !result.payable && value.type !== "constructor") {
      logger5.throwArgumentError("unable to determine stateMutability", "value", value);
    }
    result.constant = !!value.constant;
    if (result.constant) {
      result.stateMutability = "view";
    } else {
      result.stateMutability = result.payable ? "payable" : "nonpayable";
    }
    if (result.payable && result.constant) {
      logger5.throwArgumentError("cannot have constant payable function", "value", value);
    }
  } else if (value.constant != null) {
    result.constant = !!value.constant;
    result.payable = !result.constant;
    result.stateMutability = result.constant ? "view" : "payable";
  } else if (value.type !== "constructor") {
    logger5.throwArgumentError("unable to determine stateMutability", "value", value);
  }
  return result;
}
function checkForbidden(fragment) {
  const sig = fragment.format();
  if (sig === "Error(string)" || sig === "Panic(uint256)") {
    logger5.throwArgumentError(`cannot specify user defined ${sig} error`, "fragment", fragment);
  }
  return fragment;
}
function verifyType(type) {
  if (type.match(/^uint($|[^1-9])/)) {
    type = "uint256" + type.substring(4);
  } else if (type.match(/^int($|[^1-9])/)) {
    type = "int256" + type.substring(3);
  }
  return type;
}
function verifyIdentifier(value) {
  if (!value || !value.match(regexIdentifier)) {
    logger5.throwArgumentError(`invalid identifier "${value}"`, "value", value);
  }
  return value;
}
function splitNesting(value) {
  value = value.trim();
  let result = [];
  let accum = "";
  let depth = 0;
  for (let offset = 0; offset < value.length; offset++) {
    let c = value[offset];
    if (c === "," && depth === 0) {
      result.push(accum);
      accum = "";
    } else {
      accum += c;
      if (c === "(") {
        depth++;
      } else if (c === ")") {
        depth--;
        if (depth === -1) {
          logger5.throwArgumentError("unbalanced parenthesis", "value", value);
        }
      }
    }
  }
  if (accum) {
    result.push(accum);
  }
  return result;
}
var logger5, _constructorGuard3, ModifiersBytes, ModifiersNest, FormatTypes, paramTypeArray, ParamType2, Fragment2, EventFragment2, ConstructorFragment2, FunctionFragment2, ErrorFragment2, regexIdentifier, regexParen;
var init_fragments = __esm({
  "node_modules/@ethersproject/abi/lib.esm/fragments.js"() {
    "use strict";
    init_lib3();
    init_lib4();
    init_lib();
    init_version5();
    logger5 = new Logger(version6);
    _constructorGuard3 = {};
    ModifiersBytes = { calldata: true, memory: true, storage: true };
    ModifiersNest = { calldata: true, memory: true };
    FormatTypes = Object.freeze({
      // Bare formatting, as is needed for computing a sighash of an event or function
      sighash: "sighash",
      // Human-Readable with Minimal spacing and without names (compact human-readable)
      minimal: "minimal",
      // Human-Readable with nice spacing, including all names
      full: "full",
      // JSON-format a la Solidity
      json: "json"
    });
    paramTypeArray = new RegExp(/^(.*)\[([0-9]*)\]$/);
    ParamType2 = class _ParamType2 {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard3) {
          logger5.throwError("use fromString", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new ParamType()"
          });
        }
        populate(this, params);
        let match = this.type.match(paramTypeArray);
        if (match) {
          populate(this, {
            arrayLength: parseInt(match[2] || "-1"),
            arrayChildren: _ParamType2.fromObject({
              type: match[1],
              components: this.components
            }),
            baseType: "array"
          });
        } else {
          populate(this, {
            arrayLength: null,
            arrayChildren: null,
            baseType: this.components != null ? "tuple" : this.type
          });
        }
        this._isParamType = true;
        Object.freeze(this);
      }
      // Format the parameter fragment
      //   - sighash: "(uint256,address)"
      //   - minimal: "tuple(uint256,address) indexed"
      //   - full:    "tuple(uint256 foo, address bar) indexed baz"
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          let result2 = {
            type: this.baseType === "tuple" ? "tuple" : this.type,
            name: this.name || void 0
          };
          if (typeof this.indexed === "boolean") {
            result2.indexed = this.indexed;
          }
          if (this.components) {
            result2.components = this.components.map((comp) => JSON.parse(comp.format(format)));
          }
          return JSON.stringify(result2);
        }
        let result = "";
        if (this.baseType === "array") {
          result += this.arrayChildren.format(format);
          result += "[" + (this.arrayLength < 0 ? "" : String(this.arrayLength)) + "]";
        } else {
          if (this.baseType === "tuple") {
            if (format !== FormatTypes.sighash) {
              result += this.type;
            }
            result += "(" + this.components.map((comp) => comp.format(format)).join(format === FormatTypes.full ? ", " : ",") + ")";
          } else {
            result += this.type;
          }
        }
        if (format !== FormatTypes.sighash) {
          if (this.indexed === true) {
            result += " indexed";
          }
          if (format === FormatTypes.full && this.name) {
            result += " " + this.name;
          }
        }
        return result;
      }
      static from(value, allowIndexed) {
        if (typeof value === "string") {
          return _ParamType2.fromString(value, allowIndexed);
        }
        return _ParamType2.fromObject(value);
      }
      static fromObject(value) {
        if (_ParamType2.isParamType(value)) {
          return value;
        }
        return new _ParamType2(_constructorGuard3, {
          name: value.name || null,
          type: verifyType(value.type),
          indexed: value.indexed == null ? null : !!value.indexed,
          components: value.components ? value.components.map(_ParamType2.fromObject) : null
        });
      }
      static fromString(value, allowIndexed) {
        function ParamTypify(node) {
          return _ParamType2.fromObject({
            name: node.name,
            type: node.type,
            indexed: node.indexed,
            components: node.components
          });
        }
        return ParamTypify(parseParamType(value, !!allowIndexed));
      }
      static isParamType(value) {
        return !!(value != null && value._isParamType);
      }
    };
    Fragment2 = class _Fragment {
      constructor(constructorGuard, params) {
        if (constructorGuard !== _constructorGuard3) {
          logger5.throwError("use a static from method", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "new Fragment()"
          });
        }
        populate(this, params);
        this._isFragment = true;
        Object.freeze(this);
      }
      static from(value) {
        if (_Fragment.isFragment(value)) {
          return value;
        }
        if (typeof value === "string") {
          return _Fragment.fromString(value);
        }
        return _Fragment.fromObject(value);
      }
      static fromObject(value) {
        if (_Fragment.isFragment(value)) {
          return value;
        }
        switch (value.type) {
          case "function":
            return FunctionFragment2.fromObject(value);
          case "event":
            return EventFragment2.fromObject(value);
          case "constructor":
            return ConstructorFragment2.fromObject(value);
          case "error":
            return ErrorFragment2.fromObject(value);
          case "fallback":
          case "receive":
            return null;
        }
        return logger5.throwArgumentError("invalid fragment object", "value", value);
      }
      static fromString(value) {
        value = value.replace(/\s/g, " ");
        value = value.replace(/\(/g, " (").replace(/\)/g, ") ").replace(/\s+/g, " ");
        value = value.trim();
        if (value.split(" ")[0] === "event") {
          return EventFragment2.fromString(value.substring(5).trim());
        } else if (value.split(" ")[0] === "function") {
          return FunctionFragment2.fromString(value.substring(8).trim());
        } else if (value.split("(")[0].trim() === "constructor") {
          return ConstructorFragment2.fromString(value.trim());
        } else if (value.split(" ")[0] === "error") {
          return ErrorFragment2.fromString(value.substring(5).trim());
        }
        return logger5.throwArgumentError("unsupported fragment", "value", value);
      }
      static isFragment(value) {
        return !!(value && value._isFragment);
      }
    };
    EventFragment2 = class _EventFragment extends Fragment2 {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "event",
            anonymous: this.anonymous,
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "event ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.anonymous) {
            result += "anonymous ";
          }
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _EventFragment.fromString(value);
        }
        return _EventFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_EventFragment.isEventFragment(value)) {
          return value;
        }
        if (value.type !== "event") {
          logger5.throwArgumentError("invalid event object", "value", value);
        }
        const params = {
          name: verifyIdentifier(value.name),
          anonymous: value.anonymous,
          inputs: value.inputs ? value.inputs.map(ParamType2.fromObject) : [],
          type: "event"
        };
        return new _EventFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let match = value.match(regexParen);
        if (!match) {
          logger5.throwArgumentError("invalid event string", "value", value);
        }
        let anonymous = false;
        match[3].split(" ").forEach((modifier) => {
          switch (modifier.trim()) {
            case "anonymous":
              anonymous = true;
              break;
            case "":
              break;
            default:
              logger5.warn("unknown modifier: " + modifier);
          }
        });
        return _EventFragment.fromObject({
          name: match[1].trim(),
          anonymous,
          inputs: parseParams(match[2], true),
          type: "event"
        });
      }
      static isEventFragment(value) {
        return value && value._isFragment && value.type === "event";
      }
    };
    ConstructorFragment2 = class _ConstructorFragment extends Fragment2 {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "constructor",
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        if (format === FormatTypes.sighash) {
          logger5.throwError("cannot format a constructor for sighash", Logger.errors.UNSUPPORTED_OPERATION, {
            operation: "format(sighash)"
          });
        }
        let result = "constructor(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (this.stateMutability && this.stateMutability !== "nonpayable") {
          result += this.stateMutability + " ";
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _ConstructorFragment.fromString(value);
        }
        return _ConstructorFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_ConstructorFragment.isConstructorFragment(value)) {
          return value;
        }
        if (value.type !== "constructor") {
          logger5.throwArgumentError("invalid constructor object", "value", value);
        }
        let state = verifyState(value);
        if (state.constant) {
          logger5.throwArgumentError("constructor cannot be constant", "value", value);
        }
        const params = {
          name: null,
          type: value.type,
          inputs: value.inputs ? value.inputs.map(ParamType2.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new _ConstructorFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let params = { type: "constructor" };
        value = parseGas(value, params);
        let parens = value.match(regexParen);
        if (!parens || parens[1].trim() !== "constructor") {
          logger5.throwArgumentError("invalid constructor string", "value", value);
        }
        params.inputs = parseParams(parens[2].trim(), false);
        parseModifiers(parens[3].trim(), params);
        return _ConstructorFragment.fromObject(params);
      }
      static isConstructorFragment(value) {
        return value && value._isFragment && value.type === "constructor";
      }
    };
    FunctionFragment2 = class _FunctionFragment extends ConstructorFragment2 {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "function",
            name: this.name,
            constant: this.constant,
            stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
            payable: this.payable,
            gas: this.gas ? this.gas.toNumber() : void 0,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format))),
            outputs: this.outputs.map((output2) => JSON.parse(output2.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "function ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        if (format !== FormatTypes.sighash) {
          if (this.stateMutability) {
            if (this.stateMutability !== "nonpayable") {
              result += this.stateMutability + " ";
            }
          } else if (this.constant) {
            result += "view ";
          }
          if (this.outputs && this.outputs.length) {
            result += "returns (" + this.outputs.map((output2) => output2.format(format)).join(", ") + ") ";
          }
          if (this.gas != null) {
            result += "@" + this.gas.toString() + " ";
          }
        }
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _FunctionFragment.fromString(value);
        }
        return _FunctionFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_FunctionFragment.isFunctionFragment(value)) {
          return value;
        }
        if (value.type !== "function") {
          logger5.throwArgumentError("invalid function object", "value", value);
        }
        let state = verifyState(value);
        const params = {
          type: value.type,
          name: verifyIdentifier(value.name),
          constant: state.constant,
          inputs: value.inputs ? value.inputs.map(ParamType2.fromObject) : [],
          outputs: value.outputs ? value.outputs.map(ParamType2.fromObject) : [],
          payable: state.payable,
          stateMutability: state.stateMutability,
          gas: value.gas ? BigNumber.from(value.gas) : null
        };
        return new _FunctionFragment(_constructorGuard3, params);
      }
      static fromString(value) {
        let params = { type: "function" };
        value = parseGas(value, params);
        let comps = value.split(" returns ");
        if (comps.length > 2) {
          logger5.throwArgumentError("invalid function string", "value", value);
        }
        let parens = comps[0].match(regexParen);
        if (!parens) {
          logger5.throwArgumentError("invalid function signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        parseModifiers(parens[3].trim(), params);
        if (comps.length > 1) {
          let returns = comps[1].match(regexParen);
          if (returns[1].trim() != "" || returns[3].trim() != "") {
            logger5.throwArgumentError("unexpected tokens", "value", value);
          }
          params.outputs = parseParams(returns[2], false);
        } else {
          params.outputs = [];
        }
        return _FunctionFragment.fromObject(params);
      }
      static isFunctionFragment(value) {
        return value && value._isFragment && value.type === "function";
      }
    };
    ErrorFragment2 = class _ErrorFragment extends Fragment2 {
      format(format) {
        if (!format) {
          format = FormatTypes.sighash;
        }
        if (!FormatTypes[format]) {
          logger5.throwArgumentError("invalid format type", "format", format);
        }
        if (format === FormatTypes.json) {
          return JSON.stringify({
            type: "error",
            name: this.name,
            inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
          });
        }
        let result = "";
        if (format !== FormatTypes.sighash) {
          result += "error ";
        }
        result += this.name + "(" + this.inputs.map((input) => input.format(format)).join(format === FormatTypes.full ? ", " : ",") + ") ";
        return result.trim();
      }
      static from(value) {
        if (typeof value === "string") {
          return _ErrorFragment.fromString(value);
        }
        return _ErrorFragment.fromObject(value);
      }
      static fromObject(value) {
        if (_ErrorFragment.isErrorFragment(value)) {
          return value;
        }
        if (value.type !== "error") {
          logger5.throwArgumentError("invalid error object", "value", value);
        }
        const params = {
          type: value.type,
          name: verifyIdentifier(value.name),
          inputs: value.inputs ? value.inputs.map(ParamType2.fromObject) : []
        };
        return checkForbidden(new _ErrorFragment(_constructorGuard3, params));
      }
      static fromString(value) {
        let params = { type: "error" };
        let parens = value.match(regexParen);
        if (!parens) {
          logger5.throwArgumentError("invalid error signature", "value", value);
        }
        params.name = parens[1].trim();
        if (params.name) {
          verifyIdentifier(params.name);
        }
        params.inputs = parseParams(parens[2], false);
        return checkForbidden(_ErrorFragment.fromObject(params));
      }
      static isErrorFragment(value) {
        return value && value._isFragment && value.type === "error";
      }
    };
    regexIdentifier = new RegExp("^[a-zA-Z$_][a-zA-Z0-9$_]*$");
    regexParen = new RegExp("^([^)(]*)\\((.*)\\)([^)(]*)$");
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js
function checkResultErrors2(result) {
  const errors = [];
  const checkErrors = function(path, object2) {
    if (!Array.isArray(object2)) {
      return;
    }
    for (let key in object2) {
      const childPath = path.slice();
      childPath.push(key);
      try {
        checkErrors(childPath, object2[key]);
      } catch (error) {
        errors.push({ path: childPath, error });
      }
    }
  };
  checkErrors([], result);
  return errors;
}
var logger6, Coder2, Writer2, Reader2;
var init_abstract_coder = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/abstract-coder.js"() {
    "use strict";
    init_lib2();
    init_lib3();
    init_lib4();
    init_lib();
    init_version5();
    logger6 = new Logger(version6);
    Coder2 = class {
      constructor(name, type, localName, dynamic) {
        this.name = name;
        this.type = type;
        this.localName = localName;
        this.dynamic = dynamic;
      }
      _throwError(message, value) {
        logger6.throwArgumentError(message, this.localName, value);
      }
    };
    Writer2 = class {
      constructor(wordSize) {
        defineReadOnly(this, "wordSize", wordSize || 32);
        this._data = [];
        this._dataLength = 0;
        this._padding = new Uint8Array(wordSize);
      }
      get data() {
        return hexConcat(this._data);
      }
      get length() {
        return this._dataLength;
      }
      _writeData(data) {
        this._data.push(data);
        this._dataLength += data.length;
        return data.length;
      }
      appendWriter(writer) {
        return this._writeData(concat2(writer._data));
      }
      // Arrayish items; padded on the right to wordSize
      writeBytes(value) {
        let bytes3 = arrayify(value);
        const paddingOffset = bytes3.length % this.wordSize;
        if (paddingOffset) {
          bytes3 = concat2([bytes3, this._padding.slice(paddingOffset)]);
        }
        return this._writeData(bytes3);
      }
      _getValue(value) {
        let bytes3 = arrayify(BigNumber.from(value));
        if (bytes3.length > this.wordSize) {
          logger6.throwError("value out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
            length: this.wordSize,
            offset: bytes3.length
          });
        }
        if (bytes3.length % this.wordSize) {
          bytes3 = concat2([this._padding.slice(bytes3.length % this.wordSize), bytes3]);
        }
        return bytes3;
      }
      // BigNumberish items; padded on the left to wordSize
      writeValue(value) {
        return this._writeData(this._getValue(value));
      }
      writeUpdatableValue() {
        const offset = this._data.length;
        this._data.push(this._padding);
        this._dataLength += this.wordSize;
        return (value) => {
          this._data[offset] = this._getValue(value);
        };
      }
    };
    Reader2 = class _Reader2 {
      constructor(data, wordSize, coerceFunc, allowLoose) {
        defineReadOnly(this, "_data", arrayify(data));
        defineReadOnly(this, "wordSize", wordSize || 32);
        defineReadOnly(this, "_coerceFunc", coerceFunc);
        defineReadOnly(this, "allowLoose", allowLoose);
        this._offset = 0;
      }
      get data() {
        return hexlify2(this._data);
      }
      get consumed() {
        return this._offset;
      }
      // The default Coerce function
      static coerce(name, value) {
        let match = name.match("^u?int([0-9]+)$");
        if (match && parseInt(match[1]) <= 48) {
          value = value.toNumber();
        }
        return value;
      }
      coerce(name, value) {
        if (this._coerceFunc) {
          return this._coerceFunc(name, value);
        }
        return _Reader2.coerce(name, value);
      }
      _peekBytes(offset, length, loose) {
        let alignedLength = Math.ceil(length / this.wordSize) * this.wordSize;
        if (this._offset + alignedLength > this._data.length) {
          if (this.allowLoose && loose && this._offset + length <= this._data.length) {
            alignedLength = length;
          } else {
            logger6.throwError("data out-of-bounds", Logger.errors.BUFFER_OVERRUN, {
              length: this._data.length,
              offset: this._offset + alignedLength
            });
          }
        }
        return this._data.slice(this._offset, this._offset + alignedLength);
      }
      subReader(offset) {
        return new _Reader2(this._data.slice(this._offset + offset), this.wordSize, this._coerceFunc, this.allowLoose);
      }
      readBytes(length, loose) {
        let bytes3 = this._peekBytes(0, length, !!loose);
        this._offset += bytes3.length;
        return bytes3.slice(0, length);
      }
      readValue() {
        return BigNumber.from(this.readBytes(this.wordSize));
      }
    };
  }
});

// node_modules/js-sha3/src/sha3.js
var require_sha32 = __commonJS({
  "node_modules/js-sha3/src/sha3.js"(exports, module) {
    (function() {
      "use strict";
      var INPUT_ERROR = "input is invalid type";
      var FINALIZE_ERROR = "finalize already called";
      var WINDOW = typeof window === "object";
      var root = WINDOW ? window : {};
      if (root.JS_SHA3_NO_WINDOW) {
        WINDOW = false;
      }
      var WEB_WORKER = !WINDOW && typeof self === "object";
      var NODE_JS = !root.JS_SHA3_NO_NODE_JS && typeof process === "object" && process.versions && process.versions.node;
      if (NODE_JS) {
        root = global;
      } else if (WEB_WORKER) {
        root = self;
      }
      var COMMON_JS = !root.JS_SHA3_NO_COMMON_JS && typeof module === "object" && module.exports;
      var AMD = typeof define === "function" && define.amd;
      var ARRAY_BUFFER = !root.JS_SHA3_NO_ARRAY_BUFFER && typeof ArrayBuffer !== "undefined";
      var HEX_CHARS = "0123456789abcdef".split("");
      var SHAKE_PADDING = [31, 7936, 2031616, 520093696];
      var CSHAKE_PADDING = [4, 1024, 262144, 67108864];
      var KECCAK_PADDING = [1, 256, 65536, 16777216];
      var PADDING = [6, 1536, 393216, 100663296];
      var SHIFT = [0, 8, 16, 24];
      var RC = [
        1,
        0,
        32898,
        0,
        32906,
        2147483648,
        2147516416,
        2147483648,
        32907,
        0,
        2147483649,
        0,
        2147516545,
        2147483648,
        32777,
        2147483648,
        138,
        0,
        136,
        0,
        2147516425,
        0,
        2147483658,
        0,
        2147516555,
        0,
        139,
        2147483648,
        32905,
        2147483648,
        32771,
        2147483648,
        32770,
        2147483648,
        128,
        2147483648,
        32778,
        0,
        2147483658,
        2147483648,
        2147516545,
        2147483648,
        32896,
        2147483648,
        2147483649,
        0,
        2147516424,
        2147483648
      ];
      var BITS = [224, 256, 384, 512];
      var SHAKE_BITS = [128, 256];
      var OUTPUT_TYPES = ["hex", "buffer", "arrayBuffer", "array", "digest"];
      var CSHAKE_BYTEPAD = {
        "128": 168,
        "256": 136
      };
      if (root.JS_SHA3_NO_NODE_JS || !Array.isArray) {
        Array.isArray = function(obj) {
          return Object.prototype.toString.call(obj) === "[object Array]";
        };
      }
      if (ARRAY_BUFFER && (root.JS_SHA3_NO_ARRAY_BUFFER_IS_VIEW || !ArrayBuffer.isView)) {
        ArrayBuffer.isView = function(obj) {
          return typeof obj === "object" && obj.buffer && obj.buffer.constructor === ArrayBuffer;
        };
      }
      var createOutputMethod = function(bits2, padding3, outputType) {
        return function(message) {
          return new Keccak2(bits2, padding3, bits2).update(message)[outputType]();
        };
      };
      var createShakeOutputMethod = function(bits2, padding3, outputType) {
        return function(message, outputBits) {
          return new Keccak2(bits2, padding3, outputBits).update(message)[outputType]();
        };
      };
      var createCshakeOutputMethod = function(bits2, padding3, outputType) {
        return function(message, outputBits, n2, s) {
          return methods["cshake" + bits2].update(message, outputBits, n2, s)[outputType]();
        };
      };
      var createKmacOutputMethod = function(bits2, padding3, outputType) {
        return function(key, message, outputBits, s) {
          return methods["kmac" + bits2].update(key, message, outputBits, s)[outputType]();
        };
      };
      var createOutputMethods = function(method, createMethod2, bits2, padding3) {
        for (var i2 = 0; i2 < OUTPUT_TYPES.length; ++i2) {
          var type = OUTPUT_TYPES[i2];
          method[type] = createMethod2(bits2, padding3, type);
        }
        return method;
      };
      var createMethod = function(bits2, padding3) {
        var method = createOutputMethod(bits2, padding3, "hex");
        method.create = function() {
          return new Keccak2(bits2, padding3, bits2);
        };
        method.update = function(message) {
          return method.create().update(message);
        };
        return createOutputMethods(method, createOutputMethod, bits2, padding3);
      };
      var createShakeMethod = function(bits2, padding3) {
        var method = createShakeOutputMethod(bits2, padding3, "hex");
        method.create = function(outputBits) {
          return new Keccak2(bits2, padding3, outputBits);
        };
        method.update = function(message, outputBits) {
          return method.create(outputBits).update(message);
        };
        return createOutputMethods(method, createShakeOutputMethod, bits2, padding3);
      };
      var createCshakeMethod = function(bits2, padding3) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createCshakeOutputMethod(bits2, padding3, "hex");
        method.create = function(outputBits, n2, s) {
          if (!n2 && !s) {
            return methods["shake" + bits2].create(outputBits);
          } else {
            return new Keccak2(bits2, padding3, outputBits).bytepad([n2, s], w);
          }
        };
        method.update = function(message, outputBits, n2, s) {
          return method.create(outputBits, n2, s).update(message);
        };
        return createOutputMethods(method, createCshakeOutputMethod, bits2, padding3);
      };
      var createKmacMethod = function(bits2, padding3) {
        var w = CSHAKE_BYTEPAD[bits2];
        var method = createKmacOutputMethod(bits2, padding3, "hex");
        method.create = function(key, outputBits, s) {
          return new Kmac(bits2, padding3, outputBits).bytepad(["KMAC", s], w).bytepad([key], w);
        };
        method.update = function(key, message, outputBits, s) {
          return method.create(key, outputBits, s).update(message);
        };
        return createOutputMethods(method, createKmacOutputMethod, bits2, padding3);
      };
      var algorithms = [
        { name: "keccak", padding: KECCAK_PADDING, bits: BITS, createMethod },
        { name: "sha3", padding: PADDING, bits: BITS, createMethod },
        { name: "shake", padding: SHAKE_PADDING, bits: SHAKE_BITS, createMethod: createShakeMethod },
        { name: "cshake", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createCshakeMethod },
        { name: "kmac", padding: CSHAKE_PADDING, bits: SHAKE_BITS, createMethod: createKmacMethod }
      ];
      var methods = {}, methodNames = [];
      for (var i = 0; i < algorithms.length; ++i) {
        var algorithm = algorithms[i];
        var bits = algorithm.bits;
        for (var j = 0; j < bits.length; ++j) {
          var methodName = algorithm.name + "_" + bits[j];
          methodNames.push(methodName);
          methods[methodName] = algorithm.createMethod(bits[j], algorithm.padding);
          if (algorithm.name !== "sha3") {
            var newMethodName = algorithm.name + bits[j];
            methodNames.push(newMethodName);
            methods[newMethodName] = methods[methodName];
          }
        }
      }
      function Keccak2(bits2, padding3, outputBits) {
        this.blocks = [];
        this.s = [];
        this.padding = padding3;
        this.outputBits = outputBits;
        this.reset = true;
        this.finalized = false;
        this.block = 0;
        this.start = 0;
        this.blockCount = 1600 - (bits2 << 1) >> 5;
        this.byteCount = this.blockCount << 2;
        this.outputBlocks = outputBits >> 5;
        this.extraBytes = (outputBits & 31) >> 3;
        for (var i2 = 0; i2 < 50; ++i2) {
          this.s[i2] = 0;
        }
      }
      Keccak2.prototype.update = function(message) {
        if (this.finalized) {
          throw new Error(FINALIZE_ERROR);
        }
        var notString, type = typeof message;
        if (type !== "string") {
          if (type === "object") {
            if (message === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && message.constructor === ArrayBuffer) {
              message = new Uint8Array(message);
            } else if (!Array.isArray(message)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(message)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var blocks = this.blocks, byteCount = this.byteCount, length = message.length, blockCount = this.blockCount, index = 0, s = this.s, i2, code;
        while (index < length) {
          if (this.reset) {
            this.reset = false;
            blocks[0] = this.block;
            for (i2 = 1; i2 < blockCount + 1; ++i2) {
              blocks[i2] = 0;
            }
          }
          if (notString) {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              blocks[i2 >> 2] |= message[index] << SHIFT[i2++ & 3];
            }
          } else {
            for (i2 = this.start; index < length && i2 < byteCount; ++index) {
              code = message.charCodeAt(index);
              if (code < 128) {
                blocks[i2 >> 2] |= code << SHIFT[i2++ & 3];
              } else if (code < 2048) {
                blocks[i2 >> 2] |= (192 | code >> 6) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else if (code < 55296 || code >= 57344) {
                blocks[i2 >> 2] |= (224 | code >> 12) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              } else {
                code = 65536 + ((code & 1023) << 10 | message.charCodeAt(++index) & 1023);
                blocks[i2 >> 2] |= (240 | code >> 18) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 12 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code >> 6 & 63) << SHIFT[i2++ & 3];
                blocks[i2 >> 2] |= (128 | code & 63) << SHIFT[i2++ & 3];
              }
            }
          }
          this.lastByteIndex = i2;
          if (i2 >= byteCount) {
            this.start = i2 - byteCount;
            this.block = blocks[blockCount];
            for (i2 = 0; i2 < blockCount; ++i2) {
              s[i2] ^= blocks[i2];
            }
            f2(s);
            this.reset = true;
          } else {
            this.start = i2;
          }
        }
        return this;
      };
      Keccak2.prototype.encode = function(x, right) {
        var o = x & 255, n2 = 1;
        var bytes3 = [o];
        x = x >> 8;
        o = x & 255;
        while (o > 0) {
          bytes3.unshift(o);
          x = x >> 8;
          o = x & 255;
          ++n2;
        }
        if (right) {
          bytes3.push(n2);
        } else {
          bytes3.unshift(n2);
        }
        this.update(bytes3);
        return bytes3.length;
      };
      Keccak2.prototype.encodeString = function(str) {
        var notString, type = typeof str;
        if (type !== "string") {
          if (type === "object") {
            if (str === null) {
              throw new Error(INPUT_ERROR);
            } else if (ARRAY_BUFFER && str.constructor === ArrayBuffer) {
              str = new Uint8Array(str);
            } else if (!Array.isArray(str)) {
              if (!ARRAY_BUFFER || !ArrayBuffer.isView(str)) {
                throw new Error(INPUT_ERROR);
              }
            }
          } else {
            throw new Error(INPUT_ERROR);
          }
          notString = true;
        }
        var bytes3 = 0, length = str.length;
        if (notString) {
          bytes3 = length;
        } else {
          for (var i2 = 0; i2 < str.length; ++i2) {
            var code = str.charCodeAt(i2);
            if (code < 128) {
              bytes3 += 1;
            } else if (code < 2048) {
              bytes3 += 2;
            } else if (code < 55296 || code >= 57344) {
              bytes3 += 3;
            } else {
              code = 65536 + ((code & 1023) << 10 | str.charCodeAt(++i2) & 1023);
              bytes3 += 4;
            }
          }
        }
        bytes3 += this.encode(bytes3 * 8);
        this.update(str);
        return bytes3;
      };
      Keccak2.prototype.bytepad = function(strs, w) {
        var bytes3 = this.encode(w);
        for (var i2 = 0; i2 < strs.length; ++i2) {
          bytes3 += this.encodeString(strs[i2]);
        }
        var paddingBytes = w - bytes3 % w;
        var zeros2 = [];
        zeros2.length = paddingBytes;
        this.update(zeros2);
        return this;
      };
      Keccak2.prototype.finalize = function() {
        if (this.finalized) {
          return;
        }
        this.finalized = true;
        var blocks = this.blocks, i2 = this.lastByteIndex, blockCount = this.blockCount, s = this.s;
        blocks[i2 >> 2] |= this.padding[i2 & 3];
        if (this.lastByteIndex === this.byteCount) {
          blocks[0] = blocks[blockCount];
          for (i2 = 1; i2 < blockCount + 1; ++i2) {
            blocks[i2] = 0;
          }
        }
        blocks[blockCount - 1] |= 2147483648;
        for (i2 = 0; i2 < blockCount; ++i2) {
          s[i2] ^= blocks[i2];
        }
        f2(s);
      };
      Keccak2.prototype.toString = Keccak2.prototype.hex = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var hex = "", block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            block = s[i2];
            hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15] + HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15] + HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15] + HEX_CHARS[block >> 28 & 15] + HEX_CHARS[block >> 24 & 15];
          }
          if (j2 % blockCount === 0) {
            f2(s);
            i2 = 0;
          }
        }
        if (extraBytes) {
          block = s[i2];
          hex += HEX_CHARS[block >> 4 & 15] + HEX_CHARS[block & 15];
          if (extraBytes > 1) {
            hex += HEX_CHARS[block >> 12 & 15] + HEX_CHARS[block >> 8 & 15];
          }
          if (extraBytes > 2) {
            hex += HEX_CHARS[block >> 20 & 15] + HEX_CHARS[block >> 16 & 15];
          }
        }
        return hex;
      };
      Keccak2.prototype.arrayBuffer = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var bytes3 = this.outputBits >> 3;
        var buffer;
        if (extraBytes) {
          buffer = new ArrayBuffer(outputBlocks + 1 << 2);
        } else {
          buffer = new ArrayBuffer(bytes3);
        }
        var array = new Uint32Array(buffer);
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            array[j2] = s[i2];
          }
          if (j2 % blockCount === 0) {
            f2(s);
          }
        }
        if (extraBytes) {
          array[i2] = s[i2];
          buffer = buffer.slice(0, bytes3);
        }
        return buffer;
      };
      Keccak2.prototype.buffer = Keccak2.prototype.arrayBuffer;
      Keccak2.prototype.digest = Keccak2.prototype.array = function() {
        this.finalize();
        var blockCount = this.blockCount, s = this.s, outputBlocks = this.outputBlocks, extraBytes = this.extraBytes, i2 = 0, j2 = 0;
        var array = [], offset, block;
        while (j2 < outputBlocks) {
          for (i2 = 0; i2 < blockCount && j2 < outputBlocks; ++i2, ++j2) {
            offset = j2 << 2;
            block = s[i2];
            array[offset] = block & 255;
            array[offset + 1] = block >> 8 & 255;
            array[offset + 2] = block >> 16 & 255;
            array[offset + 3] = block >> 24 & 255;
          }
          if (j2 % blockCount === 0) {
            f2(s);
          }
        }
        if (extraBytes) {
          offset = j2 << 2;
          block = s[i2];
          array[offset] = block & 255;
          if (extraBytes > 1) {
            array[offset + 1] = block >> 8 & 255;
          }
          if (extraBytes > 2) {
            array[offset + 2] = block >> 16 & 255;
          }
        }
        return array;
      };
      function Kmac(bits2, padding3, outputBits) {
        Keccak2.call(this, bits2, padding3, outputBits);
      }
      Kmac.prototype = new Keccak2();
      Kmac.prototype.finalize = function() {
        this.encode(this.outputBits, true);
        return Keccak2.prototype.finalize.call(this);
      };
      var f2 = function(s) {
        var h, l, n2, c0, c1, c2, c3, c4, c5, c6, c7, c8, c9, b0, b1, b2, b3, b4, b5, b6, b7, b8, b9, b10, b11, b12, b13, b14, b15, b16, b17, b18, b19, b20, b21, b22, b23, b24, b25, b26, b27, b28, b29, b30, b31, b32, b33, b34, b35, b36, b37, b38, b39, b40, b41, b42, b43, b44, b45, b46, b47, b48, b49;
        for (n2 = 0; n2 < 48; n2 += 2) {
          c0 = s[0] ^ s[10] ^ s[20] ^ s[30] ^ s[40];
          c1 = s[1] ^ s[11] ^ s[21] ^ s[31] ^ s[41];
          c2 = s[2] ^ s[12] ^ s[22] ^ s[32] ^ s[42];
          c3 = s[3] ^ s[13] ^ s[23] ^ s[33] ^ s[43];
          c4 = s[4] ^ s[14] ^ s[24] ^ s[34] ^ s[44];
          c5 = s[5] ^ s[15] ^ s[25] ^ s[35] ^ s[45];
          c6 = s[6] ^ s[16] ^ s[26] ^ s[36] ^ s[46];
          c7 = s[7] ^ s[17] ^ s[27] ^ s[37] ^ s[47];
          c8 = s[8] ^ s[18] ^ s[28] ^ s[38] ^ s[48];
          c9 = s[9] ^ s[19] ^ s[29] ^ s[39] ^ s[49];
          h = c8 ^ (c2 << 1 | c3 >>> 31);
          l = c9 ^ (c3 << 1 | c2 >>> 31);
          s[0] ^= h;
          s[1] ^= l;
          s[10] ^= h;
          s[11] ^= l;
          s[20] ^= h;
          s[21] ^= l;
          s[30] ^= h;
          s[31] ^= l;
          s[40] ^= h;
          s[41] ^= l;
          h = c0 ^ (c4 << 1 | c5 >>> 31);
          l = c1 ^ (c5 << 1 | c4 >>> 31);
          s[2] ^= h;
          s[3] ^= l;
          s[12] ^= h;
          s[13] ^= l;
          s[22] ^= h;
          s[23] ^= l;
          s[32] ^= h;
          s[33] ^= l;
          s[42] ^= h;
          s[43] ^= l;
          h = c2 ^ (c6 << 1 | c7 >>> 31);
          l = c3 ^ (c7 << 1 | c6 >>> 31);
          s[4] ^= h;
          s[5] ^= l;
          s[14] ^= h;
          s[15] ^= l;
          s[24] ^= h;
          s[25] ^= l;
          s[34] ^= h;
          s[35] ^= l;
          s[44] ^= h;
          s[45] ^= l;
          h = c4 ^ (c8 << 1 | c9 >>> 31);
          l = c5 ^ (c9 << 1 | c8 >>> 31);
          s[6] ^= h;
          s[7] ^= l;
          s[16] ^= h;
          s[17] ^= l;
          s[26] ^= h;
          s[27] ^= l;
          s[36] ^= h;
          s[37] ^= l;
          s[46] ^= h;
          s[47] ^= l;
          h = c6 ^ (c0 << 1 | c1 >>> 31);
          l = c7 ^ (c1 << 1 | c0 >>> 31);
          s[8] ^= h;
          s[9] ^= l;
          s[18] ^= h;
          s[19] ^= l;
          s[28] ^= h;
          s[29] ^= l;
          s[38] ^= h;
          s[39] ^= l;
          s[48] ^= h;
          s[49] ^= l;
          b0 = s[0];
          b1 = s[1];
          b32 = s[11] << 4 | s[10] >>> 28;
          b33 = s[10] << 4 | s[11] >>> 28;
          b14 = s[20] << 3 | s[21] >>> 29;
          b15 = s[21] << 3 | s[20] >>> 29;
          b46 = s[31] << 9 | s[30] >>> 23;
          b47 = s[30] << 9 | s[31] >>> 23;
          b28 = s[40] << 18 | s[41] >>> 14;
          b29 = s[41] << 18 | s[40] >>> 14;
          b20 = s[2] << 1 | s[3] >>> 31;
          b21 = s[3] << 1 | s[2] >>> 31;
          b2 = s[13] << 12 | s[12] >>> 20;
          b3 = s[12] << 12 | s[13] >>> 20;
          b34 = s[22] << 10 | s[23] >>> 22;
          b35 = s[23] << 10 | s[22] >>> 22;
          b16 = s[33] << 13 | s[32] >>> 19;
          b17 = s[32] << 13 | s[33] >>> 19;
          b48 = s[42] << 2 | s[43] >>> 30;
          b49 = s[43] << 2 | s[42] >>> 30;
          b40 = s[5] << 30 | s[4] >>> 2;
          b41 = s[4] << 30 | s[5] >>> 2;
          b22 = s[14] << 6 | s[15] >>> 26;
          b23 = s[15] << 6 | s[14] >>> 26;
          b4 = s[25] << 11 | s[24] >>> 21;
          b5 = s[24] << 11 | s[25] >>> 21;
          b36 = s[34] << 15 | s[35] >>> 17;
          b37 = s[35] << 15 | s[34] >>> 17;
          b18 = s[45] << 29 | s[44] >>> 3;
          b19 = s[44] << 29 | s[45] >>> 3;
          b10 = s[6] << 28 | s[7] >>> 4;
          b11 = s[7] << 28 | s[6] >>> 4;
          b42 = s[17] << 23 | s[16] >>> 9;
          b43 = s[16] << 23 | s[17] >>> 9;
          b24 = s[26] << 25 | s[27] >>> 7;
          b25 = s[27] << 25 | s[26] >>> 7;
          b6 = s[36] << 21 | s[37] >>> 11;
          b7 = s[37] << 21 | s[36] >>> 11;
          b38 = s[47] << 24 | s[46] >>> 8;
          b39 = s[46] << 24 | s[47] >>> 8;
          b30 = s[8] << 27 | s[9] >>> 5;
          b31 = s[9] << 27 | s[8] >>> 5;
          b12 = s[18] << 20 | s[19] >>> 12;
          b13 = s[19] << 20 | s[18] >>> 12;
          b44 = s[29] << 7 | s[28] >>> 25;
          b45 = s[28] << 7 | s[29] >>> 25;
          b26 = s[38] << 8 | s[39] >>> 24;
          b27 = s[39] << 8 | s[38] >>> 24;
          b8 = s[48] << 14 | s[49] >>> 18;
          b9 = s[49] << 14 | s[48] >>> 18;
          s[0] = b0 ^ ~b2 & b4;
          s[1] = b1 ^ ~b3 & b5;
          s[10] = b10 ^ ~b12 & b14;
          s[11] = b11 ^ ~b13 & b15;
          s[20] = b20 ^ ~b22 & b24;
          s[21] = b21 ^ ~b23 & b25;
          s[30] = b30 ^ ~b32 & b34;
          s[31] = b31 ^ ~b33 & b35;
          s[40] = b40 ^ ~b42 & b44;
          s[41] = b41 ^ ~b43 & b45;
          s[2] = b2 ^ ~b4 & b6;
          s[3] = b3 ^ ~b5 & b7;
          s[12] = b12 ^ ~b14 & b16;
          s[13] = b13 ^ ~b15 & b17;
          s[22] = b22 ^ ~b24 & b26;
          s[23] = b23 ^ ~b25 & b27;
          s[32] = b32 ^ ~b34 & b36;
          s[33] = b33 ^ ~b35 & b37;
          s[42] = b42 ^ ~b44 & b46;
          s[43] = b43 ^ ~b45 & b47;
          s[4] = b4 ^ ~b6 & b8;
          s[5] = b5 ^ ~b7 & b9;
          s[14] = b14 ^ ~b16 & b18;
          s[15] = b15 ^ ~b17 & b19;
          s[24] = b24 ^ ~b26 & b28;
          s[25] = b25 ^ ~b27 & b29;
          s[34] = b34 ^ ~b36 & b38;
          s[35] = b35 ^ ~b37 & b39;
          s[44] = b44 ^ ~b46 & b48;
          s[45] = b45 ^ ~b47 & b49;
          s[6] = b6 ^ ~b8 & b0;
          s[7] = b7 ^ ~b9 & b1;
          s[16] = b16 ^ ~b18 & b10;
          s[17] = b17 ^ ~b19 & b11;
          s[26] = b26 ^ ~b28 & b20;
          s[27] = b27 ^ ~b29 & b21;
          s[36] = b36 ^ ~b38 & b30;
          s[37] = b37 ^ ~b39 & b31;
          s[46] = b46 ^ ~b48 & b40;
          s[47] = b47 ^ ~b49 & b41;
          s[8] = b8 ^ ~b0 & b2;
          s[9] = b9 ^ ~b1 & b3;
          s[18] = b18 ^ ~b10 & b12;
          s[19] = b19 ^ ~b11 & b13;
          s[28] = b28 ^ ~b20 & b22;
          s[29] = b29 ^ ~b21 & b23;
          s[38] = b38 ^ ~b30 & b32;
          s[39] = b39 ^ ~b31 & b33;
          s[48] = b48 ^ ~b40 & b42;
          s[49] = b49 ^ ~b41 & b43;
          s[0] ^= RC[n2];
          s[1] ^= RC[n2 + 1];
        }
      };
      if (COMMON_JS) {
        module.exports = methods;
      } else {
        for (i = 0; i < methodNames.length; ++i) {
          root[methodNames[i]] = methods[methodNames[i]];
        }
        if (AMD) {
          define(function() {
            return methods;
          });
        }
      }
    })();
  }
});

// node_modules/@ethersproject/keccak256/lib.esm/index.js
var lib_exports2 = {};
__export(lib_exports2, {
  keccak256: () => keccak2562
});
function keccak2562(data) {
  return "0x" + import_js_sha3.default.keccak_256(arrayify(data));
}
var import_js_sha3;
var init_lib5 = __esm({
  "node_modules/@ethersproject/keccak256/lib.esm/index.js"() {
    "use strict";
    import_js_sha3 = __toESM(require_sha32());
    init_lib2();
  }
});

// node_modules/@ethersproject/rlp/lib.esm/_version.js
var version7;
var init_version6 = __esm({
  "node_modules/@ethersproject/rlp/lib.esm/_version.js"() {
    version7 = "rlp/5.7.0";
  }
});

// node_modules/@ethersproject/rlp/lib.esm/index.js
var logger7;
var init_lib6 = __esm({
  "node_modules/@ethersproject/rlp/lib.esm/index.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version6();
    logger7 = new Logger(version7);
  }
});

// node_modules/@ethersproject/address/lib.esm/_version.js
var version8;
var init_version7 = __esm({
  "node_modules/@ethersproject/address/lib.esm/_version.js"() {
    version8 = "address/5.7.0";
  }
});

// node_modules/@ethersproject/address/lib.esm/index.js
function getChecksumAddress2(address) {
  if (!isHexString2(address, 20)) {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i = 0; i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  const hashed = arrayify(keccak2562(expanded));
  for (let i = 0; i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }
    if ((hashed[i >> 1] & 15) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
function log10(x) {
  if (Math.log10) {
    return Math.log10(x);
  }
  return Math.log(x) / Math.LN10;
}
function ibanChecksum2(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c) => {
    return ibanLookup2[c];
  }).join("");
  while (expanded.length >= safeDigits2) {
    let block = expanded.substring(0, safeDigits2);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum2 = String(98 - parseInt(expanded, 10) % 97);
  while (checksum2.length < 2) {
    checksum2 = "0" + checksum2;
  }
  return checksum2;
}
function getAddress2(address) {
  let result = null;
  if (typeof address !== "string") {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (address.substring(0, 2) !== "0x") {
      address = "0x" + address;
    }
    result = getChecksumAddress2(address);
    if (address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) && result !== address) {
      logger8.throwArgumentError("bad address checksum", "address", address);
    }
  } else if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    if (address.substring(2, 4) !== ibanChecksum2(address)) {
      logger8.throwArgumentError("bad icap checksum", "address", address);
    }
    result = _base36To16(address.substring(4));
    while (result.length < 40) {
      result = "0" + result;
    }
    result = getChecksumAddress2("0x" + result);
  } else {
    logger8.throwArgumentError("invalid address", "address", address);
  }
  return result;
}
var logger8, MAX_SAFE_INTEGER, ibanLookup2, safeDigits2;
var init_lib7 = __esm({
  "node_modules/@ethersproject/address/lib.esm/index.js"() {
    "use strict";
    init_lib2();
    init_lib3();
    init_lib5();
    init_lib6();
    init_lib();
    init_version7();
    logger8 = new Logger(version8);
    MAX_SAFE_INTEGER = 9007199254740991;
    ibanLookup2 = {};
    for (let i = 0; i < 10; i++) {
      ibanLookup2[String(i)] = String(i);
    }
    for (let i = 0; i < 26; i++) {
      ibanLookup2[String.fromCharCode(65 + i)] = String(10 + i);
    }
    safeDigits2 = Math.floor(log10(MAX_SAFE_INTEGER));
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/address.js
var AddressCoder2;
var init_address = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/address.js"() {
    "use strict";
    init_lib7();
    init_lib2();
    init_abstract_coder();
    AddressCoder2 = class extends Coder2 {
      constructor(localName) {
        super("address", "address", localName, false);
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000";
      }
      encode(writer, value) {
        try {
          value = getAddress2(value);
        } catch (error) {
          this._throwError(error.message, value);
        }
        return writer.writeValue(value);
      }
      decode(reader) {
        return getAddress2(hexZeroPad(reader.readValue().toHexString(), 20));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js
var AnonymousCoder2;
var init_anonymous = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/anonymous.js"() {
    "use strict";
    init_abstract_coder();
    AnonymousCoder2 = class extends Coder2 {
      constructor(coder) {
        super(coder.name, coder.type, void 0, coder.dynamic);
        this.coder = coder;
      }
      defaultValue() {
        return this.coder.defaultValue();
      }
      encode(writer, value) {
        return this.coder.encode(writer, value);
      }
      decode(reader) {
        return this.coder.decode(reader);
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/array.js
function pack2(writer, coders, values) {
  let arrayValues = null;
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name = coder.localName;
      if (!name) {
        logger9.throwError("cannot encode object for signature with missing names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      if (unique[name]) {
        logger9.throwError("cannot encode object for signature with duplicate names", Logger.errors.INVALID_ARGUMENT, {
          argument: "values",
          coder,
          value: values
        });
      }
      unique[name] = true;
      return values[name];
    });
  } else {
    logger9.throwArgumentError("invalid tuple value", "tuple", values);
  }
  if (coders.length !== arrayValues.length) {
    logger9.throwArgumentError("types/value length mismatch", "tuple", values);
  }
  let staticWriter = new Writer2(writer.wordSize);
  let dynamicWriter = new Writer2(writer.wordSize);
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack2(reader, coders) {
  let values = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readValue();
      let offsetReader = baseReader.subReader(offset.toNumber());
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (error.code === Logger.errors.BUFFER_OVERRUN) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value != void 0) {
      values.push(value);
    }
  });
  const uniqueNames = coders.reduce((accum, coder) => {
    const name = coder.localName;
    if (name) {
      if (!accum[name]) {
        accum[name] = 0;
      }
      accum[name]++;
    }
    return accum;
  }, {});
  coders.forEach((coder, index) => {
    let name = coder.localName;
    if (!name || uniqueNames[name] !== 1) {
      return;
    }
    if (name === "length") {
      name = "_length";
    }
    if (values[name] != null) {
      return;
    }
    const value = values[index];
    if (value instanceof Error) {
      Object.defineProperty(values, name, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    } else {
      values[name] = value;
    }
  });
  for (let i = 0; i < values.length; i++) {
    const value = values[i];
    if (value instanceof Error) {
      Object.defineProperty(values, i, {
        enumerable: true,
        get: () => {
          throw value;
        }
      });
    }
  }
  return Object.freeze(values);
}
var logger9, ArrayCoder2;
var init_array = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/array.js"() {
    "use strict";
    init_lib();
    init_version5();
    init_abstract_coder();
    init_anonymous();
    logger9 = new Logger(version6);
    ArrayCoder2 = class extends Coder2 {
      constructor(coder, length, localName) {
        const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
        const dynamic = length === -1 || coder.dynamic;
        super("array", type, localName, dynamic);
        this.coder = coder;
        this.length = length;
      }
      defaultValue() {
        const defaultChild = this.coder.defaultValue();
        const result = [];
        for (let i = 0; i < this.length; i++) {
          result.push(defaultChild);
        }
        return result;
      }
      encode(writer, value) {
        if (!Array.isArray(value)) {
          this._throwError("expected array value", value);
        }
        let count = this.length;
        if (count === -1) {
          count = value.length;
          writer.writeValue(value.length);
        }
        logger9.checkArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
        let coders = [];
        for (let i = 0; i < value.length; i++) {
          coders.push(this.coder);
        }
        return pack2(writer, coders, value);
      }
      decode(reader) {
        let count = this.length;
        if (count === -1) {
          count = reader.readValue().toNumber();
          if (count * 32 > reader._data.length) {
            logger9.throwError("insufficient data length", Logger.errors.BUFFER_OVERRUN, {
              length: reader._data.length,
              count
            });
          }
        }
        let coders = [];
        for (let i = 0; i < count; i++) {
          coders.push(new AnonymousCoder2(this.coder));
        }
        return reader.coerce(this.name, unpack2(reader, coders));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/boolean.js
var BooleanCoder2;
var init_boolean = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/boolean.js"() {
    "use strict";
    init_abstract_coder();
    BooleanCoder2 = class extends Coder2 {
      constructor(localName) {
        super("bool", "bool", localName, false);
      }
      defaultValue() {
        return false;
      }
      encode(writer, value) {
        return writer.writeValue(value ? 1 : 0);
      }
      decode(reader) {
        return reader.coerce(this.type, !reader.readValue().isZero());
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/bytes.js
var DynamicBytesCoder2, BytesCoder2;
var init_bytes = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/bytes.js"() {
    "use strict";
    init_lib2();
    init_abstract_coder();
    DynamicBytesCoder2 = class extends Coder2 {
      constructor(type, localName) {
        super(type, type, localName, true);
      }
      defaultValue() {
        return "0x";
      }
      encode(writer, value) {
        value = arrayify(value);
        let length = writer.writeValue(value.length);
        length += writer.writeBytes(value);
        return length;
      }
      decode(reader) {
        return reader.readBytes(reader.readValue().toNumber(), true);
      }
    };
    BytesCoder2 = class extends DynamicBytesCoder2 {
      constructor(localName) {
        super("bytes", localName);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify2(super.decode(reader)));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js
var FixedBytesCoder2;
var init_fixed_bytes = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/fixed-bytes.js"() {
    "use strict";
    init_lib2();
    init_abstract_coder();
    FixedBytesCoder2 = class extends Coder2 {
      constructor(size, localName) {
        let name = "bytes" + String(size);
        super(name, name, localName, false);
        this.size = size;
      }
      defaultValue() {
        return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
      }
      encode(writer, value) {
        let data = arrayify(value);
        if (data.length !== this.size) {
          this._throwError("incorrect data length", value);
        }
        return writer.writeBytes(data);
      }
      decode(reader) {
        return reader.coerce(this.name, hexlify2(reader.readBytes(this.size)));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/null.js
var NullCoder2;
var init_null = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/null.js"() {
    "use strict";
    init_abstract_coder();
    NullCoder2 = class extends Coder2 {
      constructor(localName) {
        super("null", "", localName, false);
      }
      defaultValue() {
        return null;
      }
      encode(writer, value) {
        if (value != null) {
          this._throwError("not null", value);
        }
        return writer.writeBytes([]);
      }
      decode(reader) {
        reader.readBytes(0);
        return reader.coerce(this.name, null);
      }
    };
  }
});

// node_modules/@ethersproject/constants/lib.esm/addresses.js
var init_addresses = __esm({
  "node_modules/@ethersproject/constants/lib.esm/addresses.js"() {
  }
});

// node_modules/@ethersproject/constants/lib.esm/bignumbers.js
var NegativeOne2, Zero2, One, Two, WeiPerEther2, MaxUint2562, MinInt2562, MaxInt2562;
var init_bignumbers = __esm({
  "node_modules/@ethersproject/constants/lib.esm/bignumbers.js"() {
    init_lib3();
    NegativeOne2 = BigNumber.from(-1);
    Zero2 = BigNumber.from(0);
    One = BigNumber.from(1);
    Two = BigNumber.from(2);
    WeiPerEther2 = BigNumber.from("1000000000000000000");
    MaxUint2562 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    MinInt2562 = BigNumber.from("-0x8000000000000000000000000000000000000000000000000000000000000000");
    MaxInt2562 = BigNumber.from("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
  }
});

// node_modules/@ethersproject/constants/lib.esm/hashes.js
var init_hashes = __esm({
  "node_modules/@ethersproject/constants/lib.esm/hashes.js"() {
  }
});

// node_modules/@ethersproject/constants/lib.esm/strings.js
var init_strings = __esm({
  "node_modules/@ethersproject/constants/lib.esm/strings.js"() {
  }
});

// node_modules/@ethersproject/constants/lib.esm/index.js
var init_lib8 = __esm({
  "node_modules/@ethersproject/constants/lib.esm/index.js"() {
    "use strict";
    init_addresses();
    init_bignumbers();
    init_hashes();
    init_strings();
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/number.js
var NumberCoder2;
var init_number = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/number.js"() {
    "use strict";
    init_lib3();
    init_lib8();
    init_abstract_coder();
    NumberCoder2 = class extends Coder2 {
      constructor(size, signed2, localName) {
        const name = (signed2 ? "int" : "uint") + size * 8;
        super(name, name, localName, false);
        this.size = size;
        this.signed = signed2;
      }
      defaultValue() {
        return 0;
      }
      encode(writer, value) {
        let v = BigNumber.from(value);
        let maxUintValue = MaxUint2562.mask(writer.wordSize * 8);
        if (this.signed) {
          let bounds = maxUintValue.mask(this.size * 8 - 1);
          if (v.gt(bounds) || v.lt(bounds.add(One).mul(NegativeOne2))) {
            this._throwError("value out-of-bounds", value);
          }
        } else if (v.lt(Zero2) || v.gt(maxUintValue.mask(this.size * 8))) {
          this._throwError("value out-of-bounds", value);
        }
        v = v.toTwos(this.size * 8).mask(this.size * 8);
        if (this.signed) {
          v = v.fromTwos(this.size * 8).toTwos(8 * writer.wordSize);
        }
        return writer.writeValue(v);
      }
      decode(reader) {
        let value = reader.readValue().mask(this.size * 8);
        if (this.signed) {
          value = value.fromTwos(this.size * 8);
        }
        return reader.coerce(this.name, value);
      }
    };
  }
});

// node_modules/@ethersproject/strings/lib.esm/_version.js
var version9;
var init_version8 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/_version.js"() {
    version9 = "strings/5.7.0";
  }
});

// node_modules/@ethersproject/strings/lib.esm/utf8.js
function errorFunc2(reason, offset, bytes3, output2, badCodepoint) {
  return logger10.throwArgumentError(`invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes3);
}
function ignoreFunc2(reason, offset, bytes3, output2, badCodepoint) {
  if (reason === Utf8ErrorReason.BAD_PREFIX || reason === Utf8ErrorReason.UNEXPECTED_CONTINUE) {
    let i = 0;
    for (let o = offset + 1; o < bytes3.length; o++) {
      if (bytes3[o] >> 6 !== 2) {
        break;
      }
      i++;
    }
    return i;
  }
  if (reason === Utf8ErrorReason.OVERRUN) {
    return bytes3.length - offset - 1;
  }
  return 0;
}
function replaceFunc2(reason, offset, bytes3, output2, badCodepoint) {
  if (reason === Utf8ErrorReason.OVERLONG) {
    output2.push(badCodepoint);
    return 0;
  }
  output2.push(65533);
  return ignoreFunc2(reason, offset, bytes3, output2, badCodepoint);
}
function getUtf8CodePoints2(bytes3, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs2.error;
  }
  bytes3 = arrayify(bytes3);
  const result = [];
  let i = 0;
  while (i < bytes3.length) {
    const c = bytes3[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError(Utf8ErrorReason.UNEXPECTED_CONTINUE, i - 1, bytes3, result);
      } else {
        i += onError(Utf8ErrorReason.BAD_PREFIX, i - 1, bytes3, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes3.length) {
      i += onError(Utf8ErrorReason.OVERRUN, i - 1, bytes3, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j = 0; j < extraLength; j++) {
      let nextChar = bytes3[i];
      if ((nextChar & 192) != 128) {
        i += onError(Utf8ErrorReason.MISSING_CONTINUE, i, bytes3, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError(Utf8ErrorReason.OUT_OF_RANGE, i - 1 - extraLength, bytes3, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError(Utf8ErrorReason.UTF16_SURROGATE, i - 1 - extraLength, bytes3, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError(Utf8ErrorReason.OVERLONG, i - 1 - extraLength, bytes3, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes2(str, form = UnicodeNormalizationForm.current) {
  if (form != UnicodeNormalizationForm.current) {
    logger10.checkNormalize();
    str = str.normalize(form);
  }
  let result = [];
  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) == 55296) {
      i++;
      const c2 = str.charCodeAt(i);
      if (i >= str.length || (c2 & 64512) !== 56320) {
        throw new Error("invalid utf-8 string");
      }
      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return arrayify(result);
}
function _toUtf8String2(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String2(bytes3, onError) {
  return _toUtf8String2(getUtf8CodePoints2(bytes3, onError));
}
var logger10, UnicodeNormalizationForm, Utf8ErrorReason, Utf8ErrorFuncs2;
var init_utf8 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/utf8.js"() {
    "use strict";
    init_lib2();
    init_lib();
    init_version8();
    logger10 = new Logger(version9);
    (function(UnicodeNormalizationForm2) {
      UnicodeNormalizationForm2["current"] = "";
      UnicodeNormalizationForm2["NFC"] = "NFC";
      UnicodeNormalizationForm2["NFD"] = "NFD";
      UnicodeNormalizationForm2["NFKC"] = "NFKC";
      UnicodeNormalizationForm2["NFKD"] = "NFKD";
    })(UnicodeNormalizationForm || (UnicodeNormalizationForm = {}));
    (function(Utf8ErrorReason2) {
      Utf8ErrorReason2["UNEXPECTED_CONTINUE"] = "unexpected continuation byte";
      Utf8ErrorReason2["BAD_PREFIX"] = "bad codepoint prefix";
      Utf8ErrorReason2["OVERRUN"] = "string overrun";
      Utf8ErrorReason2["MISSING_CONTINUE"] = "missing continuation byte";
      Utf8ErrorReason2["OUT_OF_RANGE"] = "out of UTF-8 range";
      Utf8ErrorReason2["UTF16_SURROGATE"] = "UTF-16 surrogate";
      Utf8ErrorReason2["OVERLONG"] = "overlong representation";
    })(Utf8ErrorReason || (Utf8ErrorReason = {}));
    Utf8ErrorFuncs2 = Object.freeze({
      error: errorFunc2,
      ignore: ignoreFunc2,
      replace: replaceFunc2
    });
  }
});

// node_modules/@ethersproject/strings/lib.esm/bytes32.js
var init_bytes32 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/bytes32.js"() {
    "use strict";
    init_lib8();
    init_lib2();
    init_utf8();
  }
});

// node_modules/@ethersproject/strings/lib.esm/idna.js
function bytes2(data) {
  if (data.length % 4 !== 0) {
    throw new Error("bad data");
  }
  let result = [];
  for (let i = 0; i < data.length; i += 4) {
    result.push(parseInt(data.substring(i, i + 4), 16));
  }
  return result;
}
function createTable(data, func) {
  if (!func) {
    func = function(value) {
      return [parseInt(value, 16)];
    };
  }
  let lo = 0;
  let result = {};
  data.split(",").forEach((pair) => {
    let comps = pair.split(":");
    lo += parseInt(comps[0], 16);
    result[lo] = func(comps[1]);
  });
  return result;
}
function createRangeTable(data) {
  let hi = 0;
  return data.split(",").map((v) => {
    let comps = v.split("-");
    if (comps.length === 1) {
      comps[1] = "0";
    } else if (comps[1] === "") {
      comps[1] = "1";
    }
    let lo = hi + parseInt(comps[0], 16);
    hi = parseInt(comps[1], 16);
    return { l: lo, h: hi };
  });
}
var Table_A_1_ranges, Table_B_1_flags, Table_B_2_lut_abs, Table_B_2_lut_rel, Table_B_2_complex, Table_C_ranges;
var init_idna = __esm({
  "node_modules/@ethersproject/strings/lib.esm/idna.js"() {
    "use strict";
    init_utf8();
    Table_A_1_ranges = createRangeTable("221,13-1b,5f-,40-10,51-f,11-3,3-3,2-2,2-4,8,2,15,2d,28-8,88,48,27-,3-5,11-20,27-,8,28,3-5,12,18,b-a,1c-4,6-16,2-d,2-2,2,1b-4,17-9,8f-,10,f,1f-2,1c-34,33-14e,4,36-,13-,6-2,1a-f,4,9-,3-,17,8,2-2,5-,2,8-,3-,4-8,2-3,3,6-,16-6,2-,7-3,3-,17,8,3,3,3-,2,6-3,3-,4-a,5,2-6,10-b,4,8,2,4,17,8,3,6-,b,4,4-,2-e,2-4,b-10,4,9-,3-,17,8,3-,5-,9-2,3-,4-7,3-3,3,4-3,c-10,3,7-2,4,5-2,3,2,3-2,3-2,4-2,9,4-3,6-2,4,5-8,2-e,d-d,4,9,4,18,b,6-3,8,4,5-6,3-8,3-3,b-11,3,9,4,18,b,6-3,8,4,5-6,3-6,2,3-3,b-11,3,9,4,18,11-3,7-,4,5-8,2-7,3-3,b-11,3,13-2,19,a,2-,8-2,2-3,7,2,9-11,4-b,3b-3,1e-24,3,2-,3,2-,2-5,5,8,4,2,2-,3,e,4-,6,2,7-,b-,3-21,49,23-5,1c-3,9,25,10-,2-2f,23,6,3,8-2,5-5,1b-45,27-9,2a-,2-3,5b-4,45-4,53-5,8,40,2,5-,8,2,5-,28,2,5-,20,2,5-,8,2,5-,8,8,18,20,2,5-,8,28,14-5,1d-22,56-b,277-8,1e-2,52-e,e,8-a,18-8,15-b,e,4,3-b,5e-2,b-15,10,b-5,59-7,2b-555,9d-3,5b-5,17-,7-,27-,7-,9,2,2,2,20-,36,10,f-,7,14-,4,a,54-3,2-6,6-5,9-,1c-10,13-1d,1c-14,3c-,10-6,32-b,240-30,28-18,c-14,a0,115-,3,66-,b-76,5,5-,1d,24,2,5-2,2,8-,35-2,19,f-10,1d-3,311-37f,1b,5a-b,d7-19,d-3,41,57-,68-4,29-3,5f,29-37,2e-2,25-c,2c-2,4e-3,30,78-3,64-,20,19b7-49,51a7-59,48e-2,38-738,2ba5-5b,222f-,3c-94,8-b,6-4,1b,6,2,3,3,6d-20,16e-f,41-,37-7,2e-2,11-f,5-b,18-,b,14,5-3,6,88-,2,bf-2,7-,7-,7-,4-2,8,8-9,8-2ff,20,5-b,1c-b4,27-,27-cbb1,f7-9,28-2,b5-221,56,48,3-,2-,3-,5,d,2,5,3,42,5-,9,8,1d,5,6,2-2,8,153-3,123-3,33-27fd,a6da-5128,21f-5df,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3-fffd,3,2-1d,61-ff7d");
    Table_B_1_flags = "ad,34f,1806,180b,180c,180d,200b,200c,200d,2060,feff".split(",").map((v) => parseInt(v, 16));
    Table_B_2_lut_abs = createTable("b5:3bc,c3:ff,7:73,2:253,5:254,3:256,1:257,5:259,1:25b,3:260,1:263,2:269,1:268,5:26f,1:272,2:275,7:280,3:283,5:288,3:28a,1:28b,5:292,3f:195,1:1bf,29:19e,125:3b9,8b:3b2,1:3b8,1:3c5,3:3c6,1:3c0,1a:3ba,1:3c1,1:3c3,2:3b8,1:3b5,1bc9:3b9,1c:1f76,1:1f77,f:1f7a,1:1f7b,d:1f78,1:1f79,1:1f7c,1:1f7d,107:63,5:25b,4:68,1:68,1:68,3:69,1:69,1:6c,3:6e,4:70,1:71,1:72,1:72,1:72,7:7a,2:3c9,2:7a,2:6b,1:e5,1:62,1:63,3:65,1:66,2:6d,b:3b3,1:3c0,6:64,1b574:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3,20:3b8,1a:3c3");
    Table_B_2_lut_rel = createTable("179:1,2:1,2:1,5:1,2:1,a:4f,a:1,8:1,2:1,2:1,3:1,5:1,3:1,4:1,2:1,3:1,4:1,8:2,1:1,2:2,1:1,2:2,27:2,195:26,2:25,1:25,1:25,2:40,2:3f,1:3f,33:1,11:-6,1:-9,1ac7:-3a,6d:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,b:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,c:-8,2:-8,2:-8,2:-8,9:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,1:-8,49:-8,1:-8,1:-4a,1:-4a,d:-56,1:-56,1:-56,1:-56,d:-8,1:-8,f:-8,1:-8,3:-7");
    Table_B_2_complex = createTable("df:00730073,51:00690307,19:02BC006E,a7:006A030C,18a:002003B9,16:03B903080301,20:03C503080301,1d7:05650582,190f:00680331,1:00740308,1:0077030A,1:0079030A,1:006102BE,b6:03C50313,2:03C503130300,2:03C503130301,2:03C503130342,2a:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F0003B9,1:1F0103B9,1:1F0203B9,1:1F0303B9,1:1F0403B9,1:1F0503B9,1:1F0603B9,1:1F0703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F2003B9,1:1F2103B9,1:1F2203B9,1:1F2303B9,1:1F2403B9,1:1F2503B9,1:1F2603B9,1:1F2703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,1:1F6003B9,1:1F6103B9,1:1F6203B9,1:1F6303B9,1:1F6403B9,1:1F6503B9,1:1F6603B9,1:1F6703B9,3:1F7003B9,1:03B103B9,1:03AC03B9,2:03B10342,1:03B1034203B9,5:03B103B9,6:1F7403B9,1:03B703B9,1:03AE03B9,2:03B70342,1:03B7034203B9,5:03B703B9,6:03B903080300,1:03B903080301,3:03B90342,1:03B903080342,b:03C503080300,1:03C503080301,1:03C10313,2:03C50342,1:03C503080342,b:1F7C03B9,1:03C903B9,1:03CE03B9,2:03C90342,1:03C9034203B9,5:03C903B9,ac:00720073,5b:00B00063,6:00B00066,d:006E006F,a:0073006D,1:00740065006C,1:0074006D,124f:006800700061,2:00610075,2:006F0076,b:00700061,1:006E0061,1:03BC0061,1:006D0061,1:006B0061,1:006B0062,1:006D0062,1:00670062,3:00700066,1:006E0066,1:03BC0066,4:0068007A,1:006B0068007A,1:006D0068007A,1:00670068007A,1:00740068007A,15:00700061,1:006B00700061,1:006D00700061,1:006700700061,8:00700076,1:006E0076,1:03BC0076,1:006D0076,1:006B0076,1:006D0076,1:00700077,1:006E0077,1:03BC0077,1:006D0077,1:006B0077,1:006D0077,1:006B03C9,1:006D03C9,2:00620071,3:00632215006B0067,1:0063006F002E,1:00640062,1:00670079,2:00680070,2:006B006B,1:006B006D,9:00700068,2:00700070006D,1:00700072,2:00730076,1:00770062,c723:00660066,1:00660069,1:0066006C,1:006600660069,1:00660066006C,1:00730074,1:00730074,d:05740576,1:05740565,1:0574056B,1:057E0576,1:0574056D", bytes2);
    Table_C_ranges = createRangeTable("80-20,2a0-,39c,32,f71,18e,7f2-f,19-7,30-4,7-5,f81-b,5,a800-20ff,4d1-1f,110,fa-6,d174-7,2e84-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,ffff-,2,1f-5f,ff7f-20001");
  }
});

// node_modules/@ethersproject/strings/lib.esm/index.js
var init_lib9 = __esm({
  "node_modules/@ethersproject/strings/lib.esm/index.js"() {
    "use strict";
    init_bytes32();
    init_idna();
    init_utf8();
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/string.js
var StringCoder2;
var init_string = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/string.js"() {
    "use strict";
    init_lib9();
    init_bytes();
    StringCoder2 = class extends DynamicBytesCoder2 {
      constructor(localName) {
        super("string", localName);
      }
      defaultValue() {
        return "";
      }
      encode(writer, value) {
        return super.encode(writer, toUtf8Bytes2(value));
      }
      decode(reader) {
        return toUtf8String2(super.decode(reader));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/coders/tuple.js
var TupleCoder2;
var init_tuple = __esm({
  "node_modules/@ethersproject/abi/lib.esm/coders/tuple.js"() {
    "use strict";
    init_abstract_coder();
    init_array();
    TupleCoder2 = class extends Coder2 {
      constructor(coders, localName) {
        let dynamic = false;
        const types = [];
        coders.forEach((coder) => {
          if (coder.dynamic) {
            dynamic = true;
          }
          types.push(coder.type);
        });
        const type = "tuple(" + types.join(",") + ")";
        super("tuple", type, localName, dynamic);
        this.coders = coders;
      }
      defaultValue() {
        const values = [];
        this.coders.forEach((coder) => {
          values.push(coder.defaultValue());
        });
        const uniqueNames = this.coders.reduce((accum, coder) => {
          const name = coder.localName;
          if (name) {
            if (!accum[name]) {
              accum[name] = 0;
            }
            accum[name]++;
          }
          return accum;
        }, {});
        this.coders.forEach((coder, index) => {
          let name = coder.localName;
          if (!name || uniqueNames[name] !== 1) {
            return;
          }
          if (name === "length") {
            name = "_length";
          }
          if (values[name] != null) {
            return;
          }
          values[name] = values[index];
        });
        return Object.freeze(values);
      }
      encode(writer, value) {
        return pack2(writer, this.coders, value);
      }
      decode(reader) {
        return reader.coerce(this.name, unpack2(reader, this.coders));
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/abi-coder.js
var logger11, paramTypeBytes2, paramTypeNumber2, AbiCoder2, defaultAbiCoder;
var init_abi_coder = __esm({
  "node_modules/@ethersproject/abi/lib.esm/abi-coder.js"() {
    "use strict";
    init_lib2();
    init_lib4();
    init_lib();
    init_version5();
    init_abstract_coder();
    init_address();
    init_array();
    init_boolean();
    init_bytes();
    init_fixed_bytes();
    init_null();
    init_number();
    init_string();
    init_tuple();
    init_fragments();
    logger11 = new Logger(version6);
    paramTypeBytes2 = new RegExp(/^bytes([0-9]*)$/);
    paramTypeNumber2 = new RegExp(/^(u?int)([0-9]*)$/);
    AbiCoder2 = class {
      constructor(coerceFunc) {
        defineReadOnly(this, "coerceFunc", coerceFunc || null);
      }
      _getCoder(param) {
        switch (param.baseType) {
          case "address":
            return new AddressCoder2(param.name);
          case "bool":
            return new BooleanCoder2(param.name);
          case "string":
            return new StringCoder2(param.name);
          case "bytes":
            return new BytesCoder2(param.name);
          case "array":
            return new ArrayCoder2(this._getCoder(param.arrayChildren), param.arrayLength, param.name);
          case "tuple":
            return new TupleCoder2((param.components || []).map((component) => {
              return this._getCoder(component);
            }), param.name);
          case "":
            return new NullCoder2(param.name);
        }
        let match = param.type.match(paramTypeNumber2);
        if (match) {
          let size = parseInt(match[2] || "256");
          if (size === 0 || size > 256 || size % 8 !== 0) {
            logger11.throwArgumentError("invalid " + match[1] + " bit length", "param", param);
          }
          return new NumberCoder2(size / 8, match[1] === "int", param.name);
        }
        match = param.type.match(paramTypeBytes2);
        if (match) {
          let size = parseInt(match[1]);
          if (size === 0 || size > 32) {
            logger11.throwArgumentError("invalid bytes length", "param", param);
          }
          return new FixedBytesCoder2(size, param.name);
        }
        return logger11.throwArgumentError("invalid type", "type", param.type);
      }
      _getWordSize() {
        return 32;
      }
      _getReader(data, allowLoose) {
        return new Reader2(data, this._getWordSize(), this.coerceFunc, allowLoose);
      }
      _getWriter() {
        return new Writer2(this._getWordSize());
      }
      getDefaultValue(types) {
        const coders = types.map((type) => this._getCoder(ParamType2.from(type)));
        const coder = new TupleCoder2(coders, "_");
        return coder.defaultValue();
      }
      encode(types, values) {
        if (types.length !== values.length) {
          logger11.throwError("types/values length mismatch", Logger.errors.INVALID_ARGUMENT, {
            count: { types: types.length, values: values.length },
            value: { types, values }
          });
        }
        const coders = types.map((type) => this._getCoder(ParamType2.from(type)));
        const coder = new TupleCoder2(coders, "_");
        const writer = this._getWriter();
        coder.encode(writer, values);
        return writer.data;
      }
      decode(types, data, loose) {
        const coders = types.map((type) => this._getCoder(ParamType2.from(type)));
        const coder = new TupleCoder2(coders, "_");
        return coder.decode(this._getReader(arrayify(data), loose));
      }
    };
    defaultAbiCoder = new AbiCoder2();
  }
});

// node_modules/@ethersproject/hash/lib.esm/id.js
function id2(text) {
  return keccak2562(toUtf8Bytes2(text));
}
var init_id = __esm({
  "node_modules/@ethersproject/hash/lib.esm/id.js"() {
    init_lib5();
    init_lib9();
  }
});

// node_modules/@ethersproject/hash/lib.esm/_version.js
var version10;
var init_version9 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/_version.js"() {
    version10 = "hash/5.7.0";
  }
});

// node_modules/@ethersproject/base64/lib.esm/base64.js
function decode2(textData) {
  textData = atob(textData);
  const data = [];
  for (let i = 0; i < textData.length; i++) {
    data.push(textData.charCodeAt(i));
  }
  return arrayify(data);
}
var init_base64 = __esm({
  "node_modules/@ethersproject/base64/lib.esm/base64.js"() {
    "use strict";
    init_lib2();
  }
});

// node_modules/@ethersproject/base64/lib.esm/index.js
var init_lib10 = __esm({
  "node_modules/@ethersproject/base64/lib.esm/index.js"() {
    "use strict";
    init_base64();
  }
});

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js
function flat(array, depth) {
  if (depth == null) {
    depth = 1;
  }
  const result = [];
  const forEach = result.forEach;
  const flatDeep = function(arr, depth2) {
    forEach.call(arr, function(val) {
      if (depth2 > 0 && Array.isArray(val)) {
        flatDeep(val, depth2 - 1);
      } else {
        result.push(val);
      }
    });
  };
  flatDeep(array, depth);
  return result;
}
function fromEntries(array) {
  const result = {};
  for (let i = 0; i < array.length; i++) {
    const value = array[i];
    result[value[0]] = value[1];
  }
  return result;
}
function decode_arithmetic(bytes3) {
  let pos = 0;
  function u16() {
    return bytes3[pos++] << 8 | bytes3[pos++];
  }
  let symbol_count = u16();
  let total = 1;
  let acc = [0, 1];
  for (let i = 1; i < symbol_count; i++) {
    acc.push(total += u16());
  }
  let skip = u16();
  let pos_payload = pos;
  pos += skip;
  let read_width = 0;
  let read_buffer = 0;
  function read_bit() {
    if (read_width == 0) {
      read_buffer = read_buffer << 8 | bytes3[pos++];
      read_width = 8;
    }
    return read_buffer >> --read_width & 1;
  }
  const N3 = 31;
  const FULL = Math.pow(2, N3);
  const HALF = FULL >>> 1;
  const QRTR = HALF >> 1;
  const MASK = FULL - 1;
  let register = 0;
  for (let i = 0; i < N3; i++)
    register = register << 1 | read_bit();
  let symbols = [];
  let low = 0;
  let range = FULL;
  while (true) {
    let value = Math.floor(((register - low + 1) * total - 1) / range);
    let start = 0;
    let end = symbol_count;
    while (end - start > 1) {
      let mid = start + end >>> 1;
      if (value < acc[mid]) {
        end = mid;
      } else {
        start = mid;
      }
    }
    if (start == 0)
      break;
    symbols.push(start);
    let a = low + Math.floor(range * acc[start] / total);
    let b2 = low + Math.floor(range * acc[start + 1] / total) - 1;
    while (((a ^ b2) & HALF) == 0) {
      register = register << 1 & MASK | read_bit();
      a = a << 1 & MASK;
      b2 = b2 << 1 & MASK | 1;
    }
    while (a & ~b2 & QRTR) {
      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();
      a = a << 1 ^ HALF;
      b2 = (b2 ^ HALF) << 1 | HALF | 1;
    }
    low = a;
    range = 1 + b2 - a;
  }
  let offset = symbol_count - 4;
  return symbols.map((x) => {
    switch (x - offset) {
      case 3:
        return offset + 65792 + (bytes3[pos_payload++] << 16 | bytes3[pos_payload++] << 8 | bytes3[pos_payload++]);
      case 2:
        return offset + 256 + (bytes3[pos_payload++] << 8 | bytes3[pos_payload++]);
      case 1:
        return offset + bytes3[pos_payload++];
      default:
        return x - 1;
    }
  });
}
function read_payload(v) {
  let pos = 0;
  return () => v[pos++];
}
function read_compressed_payload(bytes3) {
  return read_payload(decode_arithmetic(bytes3));
}
function signed(i) {
  return i & 1 ? ~i >> 1 : i >> 1;
}
function read_counts(n2, next) {
  let v = Array(n2);
  for (let i = 0; i < n2; i++)
    v[i] = 1 + next();
  return v;
}
function read_ascending(n2, next) {
  let v = Array(n2);
  for (let i = 0, x = -1; i < n2; i++)
    v[i] = x += 1 + next();
  return v;
}
function read_deltas(n2, next) {
  let v = Array(n2);
  for (let i = 0, x = 0; i < n2; i++)
    v[i] = x += signed(next());
  return v;
}
function read_member_array(next, lookup) {
  let v = read_ascending(next(), next);
  let n2 = next();
  let vX = read_ascending(n2, next);
  let vN = read_counts(n2, next);
  for (let i = 0; i < n2; i++) {
    for (let j = 0; j < vN[i]; j++) {
      v.push(vX[i] + j);
    }
  }
  return lookup ? v.map((x) => lookup[x]) : v;
}
function read_mapped_map(next) {
  let ret = [];
  while (true) {
    let w = next();
    if (w == 0)
      break;
    ret.push(read_linear_table(w, next));
  }
  while (true) {
    let w = next() - 1;
    if (w < 0)
      break;
    ret.push(read_replacement_table(w, next));
  }
  return fromEntries(flat(ret));
}
function read_zero_terminated_array(next) {
  let v = [];
  while (true) {
    let i = next();
    if (i == 0)
      break;
    v.push(i);
  }
  return v;
}
function read_transposed(n2, w, next) {
  let m = Array(n2).fill(void 0).map(() => []);
  for (let i = 0; i < w; i++) {
    read_deltas(n2, next).forEach((x, j) => m[j].push(x));
  }
  return m;
}
function read_linear_table(w, next) {
  let dx = 1 + next();
  let dy = next();
  let vN = read_zero_terminated_array(next);
  let m = read_transposed(vN.length, 1 + w, next);
  return flat(m.map((v, i) => {
    const x = v[0], ys = v.slice(1);
    return Array(vN[i]).fill(void 0).map((_, j) => {
      let j_dy = j * dy;
      return [x + j * dx, ys.map((y) => y + j_dy)];
    });
  }));
}
function read_replacement_table(w, next) {
  let n2 = 1 + next();
  let m = read_transposed(n2, 1 + w, next);
  return m.map((v) => [v[0], v.slice(1)]);
}
function read_emoji_trie(next) {
  let sorted = read_member_array(next).sort((a, b2) => a - b2);
  return read();
  function read() {
    let branches = [];
    while (true) {
      let keys = read_member_array(next, sorted);
      if (keys.length == 0)
        break;
      branches.push({ set: new Set(keys), node: read() });
    }
    branches.sort((a, b2) => b2.set.size - a.set.size);
    let temp = next();
    let valid = temp % 3;
    temp = temp / 3 | 0;
    let fe0f = !!(temp & 1);
    temp >>= 1;
    let save = temp == 1;
    let check = temp == 2;
    return { branches, valid, fe0f, save, check };
  }
}
var init_decoder = __esm({
  "node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js"() {
  }
});

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js
function getData() {
  return read_compressed_payload(decode2(""));
}
var init_include = __esm({
  "node_modules/@ethersproject/hash/lib.esm/ens-normalize/include.js"() {
    init_lib10();
    init_decoder();
  }
});

// node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js
var r, VALID, IGNORED, MAPPED, EMOJI_ROOT;
var init_lib11 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js"() {
    init_lib9();
    init_include();
    init_decoder();
    r = getData();
    VALID = new Set(read_member_array(r));
    IGNORED = new Set(read_member_array(r));
    MAPPED = read_mapped_map(r);
    EMOJI_ROOT = read_emoji_trie(r);
  }
});

// node_modules/@ethersproject/hash/lib.esm/namehash.js
var logger12, Zeros3;
var init_namehash = __esm({
  "node_modules/@ethersproject/hash/lib.esm/namehash.js"() {
    init_lib2();
    init_lib9();
    init_lib5();
    init_lib();
    init_version9();
    init_lib11();
    logger12 = new Logger(version10);
    Zeros3 = new Uint8Array(32);
    Zeros3.fill(0);
  }
});

// node_modules/@ethersproject/hash/lib.esm/message.js
var init_message = __esm({
  "node_modules/@ethersproject/hash/lib.esm/message.js"() {
    init_lib2();
    init_lib5();
    init_lib9();
  }
});

// node_modules/@ethersproject/hash/lib.esm/typed-data.js
function checkString2(key) {
  return function(value) {
    if (typeof value !== "string") {
      logger13.throwArgumentError(`invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
    }
    return value;
  };
}
var logger13, padding2, NegativeOne3, Zero3, One2, MaxUint2563, hexTrue2, hexFalse2, domainChecks2;
var init_typed_data = __esm({
  "node_modules/@ethersproject/hash/lib.esm/typed-data.js"() {
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib5();
    init_lib4();
    init_lib();
    init_version9();
    init_id();
    logger13 = new Logger(version10);
    padding2 = new Uint8Array(32);
    padding2.fill(0);
    NegativeOne3 = BigNumber.from(-1);
    Zero3 = BigNumber.from(0);
    One2 = BigNumber.from(1);
    MaxUint2563 = BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
    hexTrue2 = hexZeroPad(One2.toHexString(), 32);
    hexFalse2 = hexZeroPad(Zero3.toHexString(), 32);
    domainChecks2 = {
      name: checkString2("name"),
      version: checkString2("version"),
      chainId: function(value) {
        try {
          return BigNumber.from(value).toString();
        } catch (error) {
        }
        return logger13.throwArgumentError(`invalid domain value for "chainId"`, "domain.chainId", value);
      },
      verifyingContract: function(value) {
        try {
          return getAddress2(value).toLowerCase();
        } catch (error) {
        }
        return logger13.throwArgumentError(`invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
      },
      salt: function(value) {
        try {
          const bytes3 = arrayify(value);
          if (bytes3.length !== 32) {
            throw new Error("bad length");
          }
          return hexlify2(bytes3);
        } catch (error) {
        }
        return logger13.throwArgumentError(`invalid domain value "salt"`, "domain.salt", value);
      }
    };
  }
});

// node_modules/@ethersproject/hash/lib.esm/index.js
var init_lib12 = __esm({
  "node_modules/@ethersproject/hash/lib.esm/index.js"() {
    "use strict";
    init_id();
    init_namehash();
    init_message();
    init_namehash();
    init_typed_data();
  }
});

// node_modules/@ethersproject/abi/lib.esm/interface.js
function wrapAccessError(property, error) {
  const wrap = new Error(`deferred error during ABI decoding triggered accessing ${property}`);
  wrap.error = error;
  return wrap;
}
var logger14, LogDescription2, TransactionDescription2, ErrorDescription2, Indexed2, BuiltinErrors2, Interface2;
var init_interface = __esm({
  "node_modules/@ethersproject/abi/lib.esm/interface.js"() {
    "use strict";
    init_lib7();
    init_lib3();
    init_lib2();
    init_lib12();
    init_lib5();
    init_lib4();
    init_abi_coder();
    init_abstract_coder();
    init_fragments();
    init_lib();
    init_version5();
    logger14 = new Logger(version6);
    LogDescription2 = class extends Description {
    };
    TransactionDescription2 = class extends Description {
    };
    ErrorDescription2 = class extends Description {
    };
    Indexed2 = class extends Description {
      static isIndexed(value) {
        return !!(value && value._isIndexed);
      }
    };
    BuiltinErrors2 = {
      "0x08c379a0": { signature: "Error(string)", name: "Error", inputs: ["string"], reason: true },
      "0x4e487b71": { signature: "Panic(uint256)", name: "Panic", inputs: ["uint256"] }
    };
    Interface2 = class {
      constructor(fragments) {
        let abi = [];
        if (typeof fragments === "string") {
          abi = JSON.parse(fragments);
        } else {
          abi = fragments;
        }
        defineReadOnly(this, "fragments", abi.map((fragment) => {
          return Fragment2.from(fragment);
        }).filter((fragment) => fragment != null));
        defineReadOnly(this, "_abiCoder", getStatic(new.target, "getAbiCoder")());
        defineReadOnly(this, "functions", {});
        defineReadOnly(this, "errors", {});
        defineReadOnly(this, "events", {});
        defineReadOnly(this, "structs", {});
        this.fragments.forEach((fragment) => {
          let bucket = null;
          switch (fragment.type) {
            case "constructor":
              if (this.deploy) {
                logger14.warn("duplicate definition - constructor");
                return;
              }
              defineReadOnly(this, "deploy", fragment);
              return;
            case "function":
              bucket = this.functions;
              break;
            case "event":
              bucket = this.events;
              break;
            case "error":
              bucket = this.errors;
              break;
            default:
              return;
          }
          let signature = fragment.format();
          if (bucket[signature]) {
            logger14.warn("duplicate definition - " + signature);
            return;
          }
          bucket[signature] = fragment;
        });
        if (!this.deploy) {
          defineReadOnly(this, "deploy", ConstructorFragment2.from({
            payable: false,
            type: "constructor"
          }));
        }
        defineReadOnly(this, "_isInterface", true);
      }
      format(format) {
        if (!format) {
          format = FormatTypes.full;
        }
        if (format === FormatTypes.sighash) {
          logger14.throwArgumentError("interface does not support formatting sighash", "format", format);
        }
        const abi = this.fragments.map((fragment) => fragment.format(format));
        if (format === FormatTypes.json) {
          return JSON.stringify(abi.map((j) => JSON.parse(j)));
        }
        return abi;
      }
      // Sub-classes can override these to handle other blockchains
      static getAbiCoder() {
        return defaultAbiCoder;
      }
      static getAddress(address) {
        return getAddress2(address);
      }
      static getSighash(fragment) {
        return hexDataSlice(id2(fragment.format()), 0, 4);
      }
      static getEventTopic(eventFragment) {
        return id2(eventFragment.format());
      }
      // Find a function definition by any means necessary (unless it is ambiguous)
      getFunction(nameOrSignatureOrSighash) {
        if (isHexString2(nameOrSignatureOrSighash)) {
          for (const name in this.functions) {
            if (nameOrSignatureOrSighash === this.getSighash(name)) {
              return this.functions[name];
            }
          }
          logger14.throwArgumentError("no matching function", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.functions).filter((f2) => f2.split(
            "("
            /* fix:) */
          )[0] === name);
          if (matching.length === 0) {
            logger14.throwArgumentError("no matching function", "name", name);
          } else if (matching.length > 1) {
            logger14.throwArgumentError("multiple matching functions", "name", name);
          }
          return this.functions[matching[0]];
        }
        const result = this.functions[FunctionFragment2.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger14.throwArgumentError("no matching function", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      // Find an event definition by any means necessary (unless it is ambiguous)
      getEvent(nameOrSignatureOrTopic) {
        if (isHexString2(nameOrSignatureOrTopic)) {
          const topichash = nameOrSignatureOrTopic.toLowerCase();
          for (const name in this.events) {
            if (topichash === this.getEventTopic(name)) {
              return this.events[name];
            }
          }
          logger14.throwArgumentError("no matching event", "topichash", topichash);
        }
        if (nameOrSignatureOrTopic.indexOf("(") === -1) {
          const name = nameOrSignatureOrTopic.trim();
          const matching = Object.keys(this.events).filter((f2) => f2.split(
            "("
            /* fix:) */
          )[0] === name);
          if (matching.length === 0) {
            logger14.throwArgumentError("no matching event", "name", name);
          } else if (matching.length > 1) {
            logger14.throwArgumentError("multiple matching events", "name", name);
          }
          return this.events[matching[0]];
        }
        const result = this.events[EventFragment2.fromString(nameOrSignatureOrTopic).format()];
        if (!result) {
          logger14.throwArgumentError("no matching event", "signature", nameOrSignatureOrTopic);
        }
        return result;
      }
      // Find a function definition by any means necessary (unless it is ambiguous)
      getError(nameOrSignatureOrSighash) {
        if (isHexString2(nameOrSignatureOrSighash)) {
          const getSighash = getStatic(this.constructor, "getSighash");
          for (const name in this.errors) {
            const error = this.errors[name];
            if (nameOrSignatureOrSighash === getSighash(error)) {
              return this.errors[name];
            }
          }
          logger14.throwArgumentError("no matching error", "sighash", nameOrSignatureOrSighash);
        }
        if (nameOrSignatureOrSighash.indexOf("(") === -1) {
          const name = nameOrSignatureOrSighash.trim();
          const matching = Object.keys(this.errors).filter((f2) => f2.split(
            "("
            /* fix:) */
          )[0] === name);
          if (matching.length === 0) {
            logger14.throwArgumentError("no matching error", "name", name);
          } else if (matching.length > 1) {
            logger14.throwArgumentError("multiple matching errors", "name", name);
          }
          return this.errors[matching[0]];
        }
        const result = this.errors[FunctionFragment2.fromString(nameOrSignatureOrSighash).format()];
        if (!result) {
          logger14.throwArgumentError("no matching error", "signature", nameOrSignatureOrSighash);
        }
        return result;
      }
      // Get the sighash (the bytes4 selector) used by Solidity to identify a function
      getSighash(fragment) {
        if (typeof fragment === "string") {
          try {
            fragment = this.getFunction(fragment);
          } catch (error) {
            try {
              fragment = this.getError(fragment);
            } catch (_) {
              throw error;
            }
          }
        }
        return getStatic(this.constructor, "getSighash")(fragment);
      }
      // Get the topic (the bytes32 hash) used by Solidity to identify an event
      getEventTopic(eventFragment) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        return getStatic(this.constructor, "getEventTopic")(eventFragment);
      }
      _decodeParams(params, data) {
        return this._abiCoder.decode(params, data);
      }
      _encodeParams(params, values) {
        return this._abiCoder.encode(params, values);
      }
      encodeDeploy(values) {
        return this._encodeParams(this.deploy.inputs, values || []);
      }
      decodeErrorResult(fragment, data) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        const bytes3 = arrayify(data);
        if (hexlify2(bytes3.slice(0, 4)) !== this.getSighash(fragment)) {
          logger14.throwArgumentError(`data signature does not match error ${fragment.name}.`, "data", hexlify2(bytes3));
        }
        return this._decodeParams(fragment.inputs, bytes3.slice(4));
      }
      encodeErrorResult(fragment, values) {
        if (typeof fragment === "string") {
          fragment = this.getError(fragment);
        }
        return hexlify2(concat2([
          this.getSighash(fragment),
          this._encodeParams(fragment.inputs, values || [])
        ]));
      }
      // Decode the data for a function call (e.g. tx.data)
      decodeFunctionData(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        const bytes3 = arrayify(data);
        if (hexlify2(bytes3.slice(0, 4)) !== this.getSighash(functionFragment)) {
          logger14.throwArgumentError(`data signature does not match function ${functionFragment.name}.`, "data", hexlify2(bytes3));
        }
        return this._decodeParams(functionFragment.inputs, bytes3.slice(4));
      }
      // Encode the data for a function call (e.g. tx.data)
      encodeFunctionData(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify2(concat2([
          this.getSighash(functionFragment),
          this._encodeParams(functionFragment.inputs, values || [])
        ]));
      }
      // Decode the result from a function call (e.g. from eth_call)
      decodeFunctionResult(functionFragment, data) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        let bytes3 = arrayify(data);
        let reason = null;
        let message = "";
        let errorArgs = null;
        let errorName = null;
        let errorSignature = null;
        switch (bytes3.length % this._abiCoder._getWordSize()) {
          case 0:
            try {
              return this._abiCoder.decode(functionFragment.outputs, bytes3);
            } catch (error) {
            }
            break;
          case 4: {
            const selector = hexlify2(bytes3.slice(0, 4));
            const builtin = BuiltinErrors2[selector];
            if (builtin) {
              errorArgs = this._abiCoder.decode(builtin.inputs, bytes3.slice(4));
              errorName = builtin.name;
              errorSignature = builtin.signature;
              if (builtin.reason) {
                reason = errorArgs[0];
              }
              if (errorName === "Error") {
                message = `; VM Exception while processing transaction: reverted with reason string ${JSON.stringify(errorArgs[0])}`;
              } else if (errorName === "Panic") {
                message = `; VM Exception while processing transaction: reverted with panic code ${errorArgs[0]}`;
              }
            } else {
              try {
                const error = this.getError(selector);
                errorArgs = this._abiCoder.decode(error.inputs, bytes3.slice(4));
                errorName = error.name;
                errorSignature = error.format();
              } catch (error) {
              }
            }
            break;
          }
        }
        return logger14.throwError("call revert exception" + message, Logger.errors.CALL_EXCEPTION, {
          method: functionFragment.format(),
          data: hexlify2(data),
          errorArgs,
          errorName,
          errorSignature,
          reason
        });
      }
      // Encode the result for a function call (e.g. for eth_call)
      encodeFunctionResult(functionFragment, values) {
        if (typeof functionFragment === "string") {
          functionFragment = this.getFunction(functionFragment);
        }
        return hexlify2(this._abiCoder.encode(functionFragment.outputs, values || []));
      }
      // Create the filter for the event with search criteria (e.g. for eth_filterLog)
      encodeFilterTopics(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (values.length > eventFragment.inputs.length) {
          logger14.throwError("too many arguments for " + eventFragment.format(), Logger.errors.UNEXPECTED_ARGUMENT, {
            argument: "values",
            value: values
          });
        }
        let topics = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        const encodeTopic = (param, value) => {
          if (param.type === "string") {
            return id2(value);
          } else if (param.type === "bytes") {
            return keccak2562(hexlify2(value));
          }
          if (param.type === "bool" && typeof value === "boolean") {
            value = value ? "0x01" : "0x00";
          }
          if (param.type.match(/^u?int/)) {
            value = BigNumber.from(value).toHexString();
          }
          if (param.type === "address") {
            this._abiCoder.encode(["address"], [value]);
          }
          return hexZeroPad(hexlify2(value), 32);
        };
        values.forEach((value, index) => {
          let param = eventFragment.inputs[index];
          if (!param.indexed) {
            if (value != null) {
              logger14.throwArgumentError("cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
            }
            return;
          }
          if (value == null) {
            topics.push(null);
          } else if (param.baseType === "array" || param.baseType === "tuple") {
            logger14.throwArgumentError("filtering with tuples or arrays not supported", "contract." + param.name, value);
          } else if (Array.isArray(value)) {
            topics.push(value.map((value2) => encodeTopic(param, value2)));
          } else {
            topics.push(encodeTopic(param, value));
          }
        });
        while (topics.length && topics[topics.length - 1] === null) {
          topics.pop();
        }
        return topics;
      }
      encodeEventLog(eventFragment, values) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        const topics = [];
        const dataTypes = [];
        const dataValues = [];
        if (!eventFragment.anonymous) {
          topics.push(this.getEventTopic(eventFragment));
        }
        if (values.length !== eventFragment.inputs.length) {
          logger14.throwArgumentError("event arguments/values mismatch", "values", values);
        }
        eventFragment.inputs.forEach((param, index) => {
          const value = values[index];
          if (param.indexed) {
            if (param.type === "string") {
              topics.push(id2(value));
            } else if (param.type === "bytes") {
              topics.push(keccak2562(value));
            } else if (param.baseType === "tuple" || param.baseType === "array") {
              throw new Error("not implemented");
            } else {
              topics.push(this._abiCoder.encode([param.type], [value]));
            }
          } else {
            dataTypes.push(param);
            dataValues.push(value);
          }
        });
        return {
          data: this._abiCoder.encode(dataTypes, dataValues),
          topics
        };
      }
      // Decode a filter for the event and the search criteria
      decodeEventLog(eventFragment, data, topics) {
        if (typeof eventFragment === "string") {
          eventFragment = this.getEvent(eventFragment);
        }
        if (topics != null && !eventFragment.anonymous) {
          let topicHash = this.getEventTopic(eventFragment);
          if (!isHexString2(topics[0], 32) || topics[0].toLowerCase() !== topicHash) {
            logger14.throwError("fragment/topic mismatch", Logger.errors.INVALID_ARGUMENT, { argument: "topics[0]", expected: topicHash, value: topics[0] });
          }
          topics = topics.slice(1);
        }
        let indexed = [];
        let nonIndexed = [];
        let dynamic = [];
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
              indexed.push(ParamType2.fromObject({ type: "bytes32", name: param.name }));
              dynamic.push(true);
            } else {
              indexed.push(param);
              dynamic.push(false);
            }
          } else {
            nonIndexed.push(param);
            dynamic.push(false);
          }
        });
        let resultIndexed = topics != null ? this._abiCoder.decode(indexed, concat2(topics)) : null;
        let resultNonIndexed = this._abiCoder.decode(nonIndexed, data, true);
        let result = [];
        let nonIndexedIndex = 0, indexedIndex = 0;
        eventFragment.inputs.forEach((param, index) => {
          if (param.indexed) {
            if (resultIndexed == null) {
              result[index] = new Indexed2({ _isIndexed: true, hash: null });
            } else if (dynamic[index]) {
              result[index] = new Indexed2({ _isIndexed: true, hash: resultIndexed[indexedIndex++] });
            } else {
              try {
                result[index] = resultIndexed[indexedIndex++];
              } catch (error) {
                result[index] = error;
              }
            }
          } else {
            try {
              result[index] = resultNonIndexed[nonIndexedIndex++];
            } catch (error) {
              result[index] = error;
            }
          }
          if (param.name && result[param.name] == null) {
            const value = result[index];
            if (value instanceof Error) {
              Object.defineProperty(result, param.name, {
                enumerable: true,
                get: () => {
                  throw wrapAccessError(`property ${JSON.stringify(param.name)}`, value);
                }
              });
            } else {
              result[param.name] = value;
            }
          }
        });
        for (let i = 0; i < result.length; i++) {
          const value = result[i];
          if (value instanceof Error) {
            Object.defineProperty(result, i, {
              enumerable: true,
              get: () => {
                throw wrapAccessError(`index ${i}`, value);
              }
            });
          }
        }
        return Object.freeze(result);
      }
      // Given a transaction, find the matching function fragment (if any) and
      // determine all its properties and call parameters
      parseTransaction(tx) {
        let fragment = this.getFunction(tx.data.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new TransactionDescription2({
          args: this._abiCoder.decode(fragment.inputs, "0x" + tx.data.substring(10)),
          functionFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment),
          value: BigNumber.from(tx.value || "0")
        });
      }
      // @TODO
      //parseCallResult(data: BytesLike): ??
      // Given an event log, find the matching event fragment (if any) and
      // determine all its properties and values
      parseLog(log) {
        let fragment = this.getEvent(log.topics[0]);
        if (!fragment || fragment.anonymous) {
          return null;
        }
        return new LogDescription2({
          eventFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          topic: this.getEventTopic(fragment),
          args: this.decodeEventLog(fragment, log.data, log.topics)
        });
      }
      parseError(data) {
        const hexData = hexlify2(data);
        let fragment = this.getError(hexData.substring(0, 10).toLowerCase());
        if (!fragment) {
          return null;
        }
        return new ErrorDescription2({
          args: this._abiCoder.decode(fragment.inputs, "0x" + hexData.substring(10)),
          errorFragment: fragment,
          name: fragment.name,
          signature: fragment.format(),
          sighash: this.getSighash(fragment)
        });
      }
      /*
      static from(value: Array<Fragment | string | JsonAbi> | string | Interface) {
          if (Interface.isInterface(value)) {
              return value;
          }
          if (typeof(value) === "string") {
              return new Interface(JSON.parse(value));
          }
          return new Interface(value);
      }
      */
      static isInterface(value) {
        return !!(value && value._isInterface);
      }
    };
  }
});

// node_modules/@ethersproject/abi/lib.esm/index.js
var lib_exports3 = {};
__export(lib_exports3, {
  AbiCoder: () => AbiCoder2,
  ConstructorFragment: () => ConstructorFragment2,
  ErrorFragment: () => ErrorFragment2,
  EventFragment: () => EventFragment2,
  FormatTypes: () => FormatTypes,
  Fragment: () => Fragment2,
  FunctionFragment: () => FunctionFragment2,
  Indexed: () => Indexed2,
  Interface: () => Interface2,
  LogDescription: () => LogDescription2,
  ParamType: () => ParamType2,
  TransactionDescription: () => TransactionDescription2,
  checkResultErrors: () => checkResultErrors2,
  defaultAbiCoder: () => defaultAbiCoder
});
var init_lib13 = __esm({
  "node_modules/@ethersproject/abi/lib.esm/index.js"() {
    "use strict";
    init_fragments();
    init_abi_coder();
    init_interface();
  }
});

// node_modules/@openzeppelin/merkle-tree/dist/bytes.js
var require_bytes2 = __commonJS({
  "node_modules/@openzeppelin/merkle-tree/dist/bytes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.compare = exports.concat = exports.toHex = exports.toBytes = void 0;
    var bytes_1 = (init_lib2(), __toCommonJS(lib_exports));
    Object.defineProperty(exports, "toBytes", { enumerable: true, get: function() {
      return bytes_1.arrayify;
    } });
    Object.defineProperty(exports, "toHex", { enumerable: true, get: function() {
      return bytes_1.hexlify;
    } });
    Object.defineProperty(exports, "concat", { enumerable: true, get: function() {
      return bytes_1.concat;
    } });
    function compare(a, b2) {
      const diff = BigInt((0, bytes_1.hexlify)(a)) - BigInt((0, bytes_1.hexlify)(b2));
      return diff > 0 ? 1 : diff < 0 ? -1 : 0;
    }
    exports.compare = compare;
  }
});

// node_modules/@openzeppelin/merkle-tree/dist/hashes.js
var require_hashes2 = __commonJS({
  "node_modules/@openzeppelin/merkle-tree/dist/hashes.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.standardNodeHash = exports.standardLeafHash = void 0;
    var abi_1 = (init_lib13(), __toCommonJS(lib_exports3));
    var keccak256_1 = (init_lib5(), __toCommonJS(lib_exports2));
    var bytes_1 = require_bytes2();
    function standardLeafHash(types, value) {
      return (0, keccak256_1.keccak256)((0, keccak256_1.keccak256)(abi_1.defaultAbiCoder.encode(types, value)));
    }
    exports.standardLeafHash = standardLeafHash;
    function standardNodeHash(a, b2) {
      return (0, keccak256_1.keccak256)((0, bytes_1.concat)([a, b2].sort(bytes_1.compare)));
    }
    exports.standardNodeHash = standardNodeHash;
  }
});

// node_modules/@openzeppelin/merkle-tree/dist/utils/errors.js
var require_errors5 = __commonJS({
  "node_modules/@openzeppelin/merkle-tree/dist/utils/errors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.invariant = exports.validateArgument = exports.InvalidArgumentError = exports.InvariantError = exports.throwError = void 0;
    function throwError2(message) {
      throw new Error(message);
    }
    exports.throwError = throwError2;
    var InvariantError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "InvariantError";
      }
    };
    exports.InvariantError = InvariantError;
    var InvalidArgumentError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "InvalidArgumentError";
      }
    };
    exports.InvalidArgumentError = InvalidArgumentError;
    function validateArgument(condition, message) {
      if (!condition) {
        throw new InvalidArgumentError(message);
      }
    }
    exports.validateArgument = validateArgument;
    function invariant(condition, message) {
      if (!condition) {
        throw new InvariantError(message);
      }
    }
    exports.invariant = invariant;
  }
});

// node_modules/@openzeppelin/merkle-tree/dist/core.js
var require_core = __commonJS({
  "node_modules/@openzeppelin/merkle-tree/dist/core.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.renderMerkleTree = exports.isValidMerkleTree = exports.processMultiProof = exports.getMultiProof = exports.processProof = exports.getProof = exports.makeMerkleTree = void 0;
    var bytes_1 = require_bytes2();
    var hashes_1 = require_hashes2();
    var errors_1 = require_errors5();
    var leftChildIndex = (i) => 2 * i + 1;
    var rightChildIndex = (i) => 2 * i + 2;
    var parentIndex = (i) => i > 0 ? Math.floor((i - 1) / 2) : (0, errors_1.throwError)("Root has no parent");
    var siblingIndex = (i) => i > 0 ? i - (-1) ** (i % 2) : (0, errors_1.throwError)("Root has no siblings");
    var isTreeNode = (tree, i) => i >= 0 && i < tree.length;
    var isInternalNode = (tree, i) => isTreeNode(tree, leftChildIndex(i));
    var isLeafNode = (tree, i) => isTreeNode(tree, i) && !isInternalNode(tree, i);
    var isValidMerkleNode = (node) => (0, bytes_1.toBytes)(node).length === 32;
    var checkLeafNode = (tree, i) => void (isLeafNode(tree, i) || (0, errors_1.throwError)("Index is not a leaf"));
    var checkValidMerkleNode = (node) => void (isValidMerkleNode(node) || (0, errors_1.throwError)("Merkle tree nodes must be Uint8Array of length 32"));
    function makeMerkleTree(leaves, nodeHash = hashes_1.standardNodeHash) {
      leaves.forEach(checkValidMerkleNode);
      (0, errors_1.validateArgument)(leaves.length !== 0, "Expected non-zero number of leaves");
      const tree = new Array(2 * leaves.length - 1);
      for (const [i, leaf] of leaves.entries()) {
        tree[tree.length - 1 - i] = (0, bytes_1.toHex)(leaf);
      }
      for (let i = tree.length - 1 - leaves.length; i >= 0; i--) {
        tree[i] = nodeHash(tree[leftChildIndex(i)], tree[rightChildIndex(i)]);
      }
      return tree;
    }
    exports.makeMerkleTree = makeMerkleTree;
    function getProof(tree, index) {
      checkLeafNode(tree, index);
      const proof = [];
      while (index > 0) {
        proof.push((0, bytes_1.toHex)(tree[siblingIndex(index)]));
        index = parentIndex(index);
      }
      return proof;
    }
    exports.getProof = getProof;
    function processProof(leaf, proof, nodeHash = hashes_1.standardNodeHash) {
      checkValidMerkleNode(leaf);
      proof.forEach(checkValidMerkleNode);
      return (0, bytes_1.toHex)(proof.reduce(nodeHash, leaf));
    }
    exports.processProof = processProof;
    function getMultiProof(tree, indices) {
      indices.forEach((i) => checkLeafNode(tree, i));
      indices.sort((a, b2) => b2 - a);
      (0, errors_1.validateArgument)(indices.slice(1).every((i, p) => i !== indices[p]), "Cannot prove duplicated index");
      const stack = Array.from(indices);
      const proof = [];
      const proofFlags = [];
      while (stack.length > 0 && stack[0] > 0) {
        const j = stack.shift();
        const s = siblingIndex(j);
        const p = parentIndex(j);
        if (s === stack[0]) {
          proofFlags.push(true);
          stack.shift();
        } else {
          proofFlags.push(false);
          proof.push((0, bytes_1.toHex)(tree[s]));
        }
        stack.push(p);
      }
      if (indices.length === 0) {
        proof.push((0, bytes_1.toHex)(tree[0]));
      }
      return {
        leaves: indices.map((i) => (0, bytes_1.toHex)(tree[i])),
        proof,
        proofFlags
      };
    }
    exports.getMultiProof = getMultiProof;
    function processMultiProof(multiproof, nodeHash = hashes_1.standardNodeHash) {
      multiproof.leaves.forEach(checkValidMerkleNode);
      multiproof.proof.forEach(checkValidMerkleNode);
      (0, errors_1.validateArgument)(multiproof.proof.length >= multiproof.proofFlags.filter((b2) => !b2).length, "Invalid multiproof format");
      (0, errors_1.validateArgument)(multiproof.leaves.length + multiproof.proof.length === multiproof.proofFlags.length + 1, "Provided leaves and multiproof are not compatible");
      const stack = Array.from(multiproof.leaves);
      const proof = Array.from(multiproof.proof);
      for (const flag of multiproof.proofFlags) {
        const a = stack.shift();
        const b2 = flag ? stack.shift() : proof.shift();
        (0, errors_1.invariant)(a !== void 0 && b2 !== void 0);
        stack.push(nodeHash(a, b2));
      }
      (0, errors_1.invariant)(stack.length + proof.length === 1);
      return (0, bytes_1.toHex)(stack.pop() ?? proof.shift());
    }
    exports.processMultiProof = processMultiProof;
    function isValidMerkleTree(tree, nodeHash = hashes_1.standardNodeHash) {
      for (const [i, node] of tree.entries()) {
        if (!isValidMerkleNode(node)) {
          return false;
        }
        const l = leftChildIndex(i);
        const r2 = rightChildIndex(i);
        if (r2 >= tree.length) {
          if (l < tree.length) {
            return false;
          }
        } else if ((0, bytes_1.compare)(node, nodeHash(tree[l], tree[r2]))) {
          return false;
        }
      }
      return tree.length > 0;
    }
    exports.isValidMerkleTree = isValidMerkleTree;
    function renderMerkleTree(tree) {
      (0, errors_1.validateArgument)(tree.length !== 0, "Expected non-zero number of nodes");
      const stack = [[0, []]];
      const lines = [];
      while (stack.length > 0) {
        const [i, path] = stack.pop();
        lines.push(path.slice(0, -1).map((p) => ["   ", "│  "][p]).join("") + path.slice(-1).map((p) => ["└─ ", "├─ "][p]).join("") + i + ") " + (0, bytes_1.toHex)(tree[i]));
        if (rightChildIndex(i) < tree.length) {
          stack.push([rightChildIndex(i), path.concat(0)]);
          stack.push([leftChildIndex(i), path.concat(1)]);
        }
      }
      return lines.join("\n");
    }
    exports.renderMerkleTree = renderMerkleTree;
  }
});

// node_modules/@openzeppelin/merkle-tree/dist/options.js
var require_options = __commonJS({
  "node_modules/@openzeppelin/merkle-tree/dist/options.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultOptions = void 0;
    exports.defaultOptions = {
      sortLeaves: true
    };
  }
});

// node_modules/@openzeppelin/merkle-tree/dist/merkletree.js
var require_merkletree = __commonJS({
  "node_modules/@openzeppelin/merkle-tree/dist/merkletree.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MerkleTreeImpl = void 0;
    var bytes_1 = require_bytes2();
    var core_1 = require_core();
    var options_1 = require_options();
    var errors_1 = require_errors5();
    var MerkleTreeImpl = class {
      constructor(tree, values, leafHash, nodeHash) {
        this.tree = tree;
        this.values = values;
        this.leafHash = leafHash;
        this.nodeHash = nodeHash;
        (0, errors_1.validateArgument)(values.every(({ value }) => typeof value != "number"), "Leaf values cannot be numbers");
        this.hashLookup = Object.fromEntries(values.map(({ treeIndex }, valueIndex) => [tree[treeIndex], valueIndex]));
      }
      static prepare(values, options = {}, leafHash, nodeHash) {
        const sortLeaves = options.sortLeaves ?? options_1.defaultOptions.sortLeaves;
        const hashedValues = values.map((value, valueIndex) => ({
          value,
          valueIndex,
          hash: leafHash(value)
        }));
        if (sortLeaves) {
          hashedValues.sort((a, b2) => (0, bytes_1.compare)(a.hash, b2.hash));
        }
        const tree = (0, core_1.makeMerkleTree)(hashedValues.map((v) => v.hash), nodeHash);
        const indexedValues = values.map((value) => ({ value, treeIndex: 0 }));
        for (const [leafIndex, { valueIndex }] of hashedValues.entries()) {
          indexedValues[valueIndex].treeIndex = tree.length - leafIndex - 1;
        }
        return [tree, indexedValues];
      }
      get root() {
        return this.tree[0];
      }
      get length() {
        return this.values.length;
      }
      at(index) {
        var _a2;
        return (_a2 = this.values.at(index)) == null ? void 0 : _a2.value;
      }
      render() {
        return (0, core_1.renderMerkleTree)(this.tree);
      }
      *entries() {
        for (const [i, { value }] of this.values.entries()) {
          yield [i, value];
        }
      }
      validate() {
        this.values.forEach((_, i) => this._validateValueAt(i));
        (0, errors_1.invariant)((0, core_1.isValidMerkleTree)(this.tree, this.nodeHash), "Merkle tree is invalid");
      }
      leafLookup(leaf) {
        const lookup = this.hashLookup[this.leafHash(leaf)];
        (0, errors_1.validateArgument)(typeof lookup !== "undefined", "Leaf is not in tree");
        return lookup;
      }
      getProof(leaf) {
        const valueIndex = typeof leaf === "number" ? leaf : this.leafLookup(leaf);
        this._validateValueAt(valueIndex);
        const { treeIndex } = this.values[valueIndex];
        const proof = (0, core_1.getProof)(this.tree, treeIndex);
        (0, errors_1.invariant)(this._verify(this.tree[treeIndex], proof), "Unable to prove value");
        return proof;
      }
      getMultiProof(leaves) {
        const valueIndices = leaves.map((leaf) => typeof leaf === "number" ? leaf : this.leafLookup(leaf));
        for (const valueIndex of valueIndices) {
          this._validateValueAt(valueIndex);
        }
        const indices = valueIndices.map((i) => this.values[i].treeIndex);
        const proof = (0, core_1.getMultiProof)(this.tree, indices);
        (0, errors_1.invariant)(this._verifyMultiProof(proof), "Unable to prove values");
        return {
          leaves: proof.leaves.map((hash2) => this.values[this.hashLookup[hash2]].value),
          proof: proof.proof,
          proofFlags: proof.proofFlags
        };
      }
      verify(leaf, proof) {
        return this._verify(this._leafHash(leaf), proof);
      }
      verifyMultiProof(multiproof) {
        return this._verifyMultiProof({
          leaves: multiproof.leaves.map((l) => this._leafHash(l)),
          proof: multiproof.proof,
          proofFlags: multiproof.proofFlags
        });
      }
      _validateValueAt(index) {
        const value = this.values[index];
        (0, errors_1.validateArgument)(value !== void 0, "Index out of bounds");
        (0, errors_1.invariant)(this.tree[value.treeIndex] === this.leafHash(value.value), "Merkle tree does not contain the expected value");
      }
      _leafHash(leaf) {
        if (typeof leaf === "number") {
          const lookup = this.values[leaf];
          (0, errors_1.validateArgument)(lookup !== void 0, "Index out of bounds");
          leaf = lookup.value;
        }
        return this.leafHash(leaf);
      }
      _verify(leafHash, proof) {
        return this.root === (0, core_1.processProof)(leafHash, proof, this.nodeHash);
      }
      _verifyMultiProof(multiproof) {
        return this.root === (0, core_1.processMultiProof)(multiproof, this.nodeHash);
      }
    };
    exports.MerkleTreeImpl = MerkleTreeImpl;
  }
});

// node_modules/@openzeppelin/merkle-tree/dist/simple.js
var require_simple = __commonJS({
  "node_modules/@openzeppelin/merkle-tree/dist/simple.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SimpleMerkleTree = exports.formatLeaf = void 0;
    var abi_1 = (init_lib13(), __toCommonJS(lib_exports3));
    var bytes_1 = require_bytes2();
    var core_1 = require_core();
    var merkletree_1 = require_merkletree();
    var errors_1 = require_errors5();
    function formatLeaf(value) {
      return abi_1.defaultAbiCoder.encode(["bytes32"], [value]);
    }
    exports.formatLeaf = formatLeaf;
    var SimpleMerkleTree2 = class _SimpleMerkleTree extends merkletree_1.MerkleTreeImpl {
      static of(values, options = {}) {
        const [tree, indexedValues] = merkletree_1.MerkleTreeImpl.prepare(values, options, formatLeaf, options.nodeHash);
        return new _SimpleMerkleTree(tree, indexedValues, formatLeaf, options.nodeHash);
      }
      static load(data, nodeHash) {
        (0, errors_1.validateArgument)(data.format === "simple-v1", `Unknown format '${data.format}'`);
        (0, errors_1.validateArgument)(nodeHash == void 0 !== (data.hash == "custom"), nodeHash ? "Data does not expect a custom node hashing function" : "Data expects a custom node hashing function");
        const tree = new _SimpleMerkleTree(data.tree, data.values, formatLeaf, nodeHash);
        tree.validate();
        return tree;
      }
      static verify(root, leaf, proof, nodeHash) {
        return (0, bytes_1.toHex)(root) === (0, core_1.processProof)(formatLeaf(leaf), proof, nodeHash);
      }
      static verifyMultiProof(root, multiproof, nodeHash) {
        return (0, bytes_1.toHex)(root) === (0, core_1.processMultiProof)(multiproof, nodeHash);
      }
      dump() {
        return {
          format: "simple-v1",
          tree: this.tree,
          values: this.values.map(({ value, treeIndex }) => ({ value: (0, bytes_1.toHex)(value), treeIndex })),
          ...this.nodeHash ? { hash: "custom" } : {}
        };
      }
    };
    exports.SimpleMerkleTree = SimpleMerkleTree2;
  }
});

// node_modules/@openzeppelin/merkle-tree/dist/standard.js
var require_standard = __commonJS({
  "node_modules/@openzeppelin/merkle-tree/dist/standard.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardMerkleTree = void 0;
    var bytes_1 = require_bytes2();
    var core_1 = require_core();
    var merkletree_1 = require_merkletree();
    var hashes_1 = require_hashes2();
    var errors_1 = require_errors5();
    var StandardMerkleTree = class _StandardMerkleTree extends merkletree_1.MerkleTreeImpl {
      constructor(tree, values, leafEncoding) {
        super(tree, values, (leaf) => (0, hashes_1.standardLeafHash)(leafEncoding, leaf));
        this.tree = tree;
        this.values = values;
        this.leafEncoding = leafEncoding;
      }
      static of(values, leafEncoding, options = {}) {
        const [tree, indexedValues] = merkletree_1.MerkleTreeImpl.prepare(values, options, (leaf) => (0, hashes_1.standardLeafHash)(leafEncoding, leaf));
        return new _StandardMerkleTree(tree, indexedValues, leafEncoding);
      }
      static load(data) {
        (0, errors_1.validateArgument)(data.format === "standard-v1", `Unknown format '${data.format}'`);
        (0, errors_1.validateArgument)(data.leafEncoding !== void 0, "Expected leaf encoding");
        const tree = new _StandardMerkleTree(data.tree, data.values, data.leafEncoding);
        tree.validate();
        return tree;
      }
      static verify(root, leafEncoding, leaf, proof) {
        return (0, bytes_1.toHex)(root) === (0, core_1.processProof)((0, hashes_1.standardLeafHash)(leafEncoding, leaf), proof);
      }
      static verifyMultiProof(root, leafEncoding, multiproof) {
        return (0, bytes_1.toHex)(root) === (0, core_1.processMultiProof)({
          leaves: multiproof.leaves.map((leaf) => (0, hashes_1.standardLeafHash)(leafEncoding, leaf)),
          proof: multiproof.proof,
          proofFlags: multiproof.proofFlags
        });
      }
      dump() {
        return {
          format: "standard-v1",
          leafEncoding: this.leafEncoding,
          tree: this.tree,
          values: this.values
        };
      }
    };
    exports.StandardMerkleTree = StandardMerkleTree;
  }
});

// node_modules/@openzeppelin/merkle-tree/dist/index.js
var require_dist7 = __commonJS({
  "node_modules/@openzeppelin/merkle-tree/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StandardMerkleTree = exports.SimpleMerkleTree = void 0;
    var simple_1 = require_simple();
    Object.defineProperty(exports, "SimpleMerkleTree", { enumerable: true, get: function() {
      return simple_1.SimpleMerkleTree;
    } });
    var standard_1 = require_standard();
    Object.defineProperty(exports, "StandardMerkleTree", { enumerable: true, get: function() {
      return standard_1.StandardMerkleTree;
    } });
  }
});

// node_modules/@1inch/cross-chain-sdk/dist/esm/index.js
var import_fusion_sdk18 = __toESM(require_dist5());

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/cross-chain-order.js
var import_fusion_sdk8 = __toESM(require_dist5());
var import_assert13 = __toESM(require_assert2());

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/inner-order.js
var import_fusion_sdk = __toESM(require_dist5());
var InnerOrder = class extends import_fusion_sdk.FusionOrder {
  constructor(extension, orderInfo, extra) {
    super(extension.address, orderInfo, extension.auctionDetails, extension.postInteractionData, extra, extension);
    this.escrowExtension = extension;
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/escrow-extension.js
var import_fusion_sdk4 = __toESM(require_dist5());

// node_modules/ethers/lib.esm/_version.js
var version = "6.13.1";

// node_modules/ethers/lib.esm/utils/properties.js
function checkType(value, type, name) {
  const types = type.split("|").map((t) => t.trim());
  for (let i = 0; i < types.length; i++) {
    switch (type) {
      case "any":
        return;
      case "bigint":
      case "boolean":
      case "number":
      case "string":
        if (typeof value === type) {
          return;
        }
    }
  }
  const error = new Error(`invalid value for type ${type}`);
  error.code = "INVALID_ARGUMENT";
  error.argument = `value.${name}`;
  error.value = value;
  throw error;
}
async function resolveProperties(value) {
  const keys = Object.keys(value);
  const results = await Promise.all(keys.map((k) => Promise.resolve(value[k])));
  return results.reduce((accum, v, index) => {
    accum[keys[index]] = v;
    return accum;
  }, {});
}
function defineProperties(target, values, types) {
  for (let key in values) {
    let value = values[key];
    const type = types ? types[key] : null;
    if (type) {
      checkType(value, type, key);
    }
    Object.defineProperty(target, key, { enumerable: true, value, writable: false });
  }
}

// node_modules/ethers/lib.esm/utils/errors.js
function stringify(value) {
  if (value == null) {
    return "null";
  }
  if (Array.isArray(value)) {
    return "[ " + value.map(stringify).join(", ") + " ]";
  }
  if (value instanceof Uint8Array) {
    const HEX2 = "0123456789abcdef";
    let result = "0x";
    for (let i = 0; i < value.length; i++) {
      result += HEX2[value[i] >> 4];
      result += HEX2[value[i] & 15];
    }
    return result;
  }
  if (typeof value === "object" && typeof value.toJSON === "function") {
    return stringify(value.toJSON());
  }
  switch (typeof value) {
    case "boolean":
    case "symbol":
      return value.toString();
    case "bigint":
      return BigInt(value).toString();
    case "number":
      return value.toString();
    case "string":
      return JSON.stringify(value);
    case "object": {
      const keys = Object.keys(value);
      keys.sort();
      return "{ " + keys.map((k) => `${stringify(k)}: ${stringify(value[k])}`).join(", ") + " }";
    }
  }
  return `[ COULD NOT SERIALIZE ]`;
}
function isError(error, code) {
  return error && error.code === code;
}
function isCallException(error) {
  return isError(error, "CALL_EXCEPTION");
}
function makeError(message, code, info) {
  let shortMessage = message;
  {
    const details = [];
    if (info) {
      if ("message" in info || "code" in info || "name" in info) {
        throw new Error(`value will overwrite populated values: ${stringify(info)}`);
      }
      for (const key in info) {
        if (key === "shortMessage") {
          continue;
        }
        const value = info[key];
        details.push(key + "=" + stringify(value));
      }
    }
    details.push(`code=${code}`);
    details.push(`version=${version}`);
    if (details.length) {
      message += " (" + details.join(", ") + ")";
    }
  }
  let error;
  switch (code) {
    case "INVALID_ARGUMENT":
      error = new TypeError(message);
      break;
    case "NUMERIC_FAULT":
    case "BUFFER_OVERRUN":
      error = new RangeError(message);
      break;
    default:
      error = new Error(message);
  }
  defineProperties(error, { code });
  if (info) {
    Object.assign(error, info);
  }
  if (error.shortMessage == null) {
    defineProperties(error, { shortMessage });
  }
  return error;
}
function assert(check, message, code, info) {
  if (!check) {
    throw makeError(message, code, info);
  }
}
function assertArgument(check, message, name, value) {
  assert(check, message, "INVALID_ARGUMENT", { argument: name, value });
}
function assertArgumentCount(count, expectedCount, message) {
  if (message == null) {
    message = "";
  }
  if (message) {
    message = ": " + message;
  }
  assert(count >= expectedCount, "missing arguemnt" + message, "MISSING_ARGUMENT", {
    count,
    expectedCount
  });
  assert(count <= expectedCount, "too many arguments" + message, "UNEXPECTED_ARGUMENT", {
    count,
    expectedCount
  });
}
var _normalizeForms = ["NFD", "NFC", "NFKD", "NFKC"].reduce((accum, form) => {
  try {
    if ("test".normalize(form) !== "test") {
      throw new Error("bad");
    }
    ;
    if (form === "NFD") {
      const check = String.fromCharCode(233).normalize("NFD");
      const expected = String.fromCharCode(101, 769);
      if (check !== expected) {
        throw new Error("broken");
      }
    }
    accum.push(form);
  } catch (error) {
  }
  return accum;
}, []);
function assertNormalize(form) {
  assert(_normalizeForms.indexOf(form) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
    operation: "String.prototype.normalize",
    info: { form }
  });
}
function assertPrivate(givenGuard, guard, className) {
  if (className == null) {
    className = "";
  }
  if (givenGuard !== guard) {
    let method = className, operation = "new";
    if (className) {
      method += ".";
      operation += " " + className;
    }
    assert(false, `private constructor; use ${method}from* methods`, "UNSUPPORTED_OPERATION", {
      operation
    });
  }
}

// node_modules/ethers/lib.esm/utils/data.js
function _getBytes(value, name, copy) {
  if (value instanceof Uint8Array) {
    if (copy) {
      return new Uint8Array(value);
    }
    return value;
  }
  if (typeof value === "string" && value.match(/^0x(?:[0-9a-f][0-9a-f])*$/i)) {
    const result = new Uint8Array((value.length - 2) / 2);
    let offset = 2;
    for (let i = 0; i < result.length; i++) {
      result[i] = parseInt(value.substring(offset, offset + 2), 16);
      offset += 2;
    }
    return result;
  }
  assertArgument(false, "invalid BytesLike value", name || "value", value);
}
function getBytes(value, name) {
  return _getBytes(value, name, false);
}
function getBytesCopy(value, name) {
  return _getBytes(value, name, true);
}
function isHexString(value, length) {
  if (typeof value !== "string" || !value.match(/^0x[0-9A-Fa-f]*$/)) {
    return false;
  }
  if (typeof length === "number" && value.length !== 2 + 2 * length) {
    return false;
  }
  if (length === true && value.length % 2 !== 0) {
    return false;
  }
  return true;
}
function isBytesLike(value) {
  return isHexString(value, true) || value instanceof Uint8Array;
}
var HexCharacters = "0123456789abcdef";
function hexlify(data) {
  const bytes3 = getBytes(data);
  let result = "0x";
  for (let i = 0; i < bytes3.length; i++) {
    const v = bytes3[i];
    result += HexCharacters[(v & 240) >> 4] + HexCharacters[v & 15];
  }
  return result;
}
function concat(datas) {
  return "0x" + datas.map((d) => hexlify(d).substring(2)).join("");
}
function dataLength(data) {
  if (isHexString(data, true)) {
    return (data.length - 2) / 2;
  }
  return getBytes(data).length;
}
function dataSlice(data, start, end) {
  const bytes3 = getBytes(data);
  if (end != null && end > bytes3.length) {
    assert(false, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
      buffer: bytes3,
      length: bytes3.length,
      offset: end
    });
  }
  return hexlify(bytes3.slice(start == null ? 0 : start, end == null ? bytes3.length : end));
}
function zeroPad(data, length, left) {
  const bytes3 = getBytes(data);
  assert(length >= bytes3.length, "padding exceeds data length", "BUFFER_OVERRUN", {
    buffer: new Uint8Array(bytes3),
    length,
    offset: length + 1
  });
  const result = new Uint8Array(length);
  result.fill(0);
  if (left) {
    result.set(bytes3, length - bytes3.length);
  } else {
    result.set(bytes3, 0);
  }
  return hexlify(result);
}
function zeroPadValue(data, length) {
  return zeroPad(data, length, true);
}
function zeroPadBytes(data, length) {
  return zeroPad(data, length, false);
}

// node_modules/ethers/lib.esm/utils/maths.js
var BN_0 = BigInt(0);
var BN_1 = BigInt(1);
var maxValue = 9007199254740991;
function fromTwos(_value, _width) {
  const value = getUint(_value, "value");
  const width = BigInt(getNumber(_width, "width"));
  assert(value >> width === BN_0, "overflow", "NUMERIC_FAULT", {
    operation: "fromTwos",
    fault: "overflow",
    value: _value
  });
  if (value >> width - BN_1) {
    const mask2 = (BN_1 << width) - BN_1;
    return -((~value & mask2) + BN_1);
  }
  return value;
}
function toTwos(_value, _width) {
  let value = getBigInt(_value, "value");
  const width = BigInt(getNumber(_width, "width"));
  const limit = BN_1 << width - BN_1;
  if (value < BN_0) {
    value = -value;
    assert(value <= limit, "too low", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: _value
    });
    const mask2 = (BN_1 << width) - BN_1;
    return (~value & mask2) + BN_1;
  } else {
    assert(value < limit, "too high", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: _value
    });
  }
  return value;
}
function mask(_value, _bits) {
  const value = getUint(_value, "value");
  const bits = BigInt(getNumber(_bits, "bits"));
  return value & (BN_1 << bits) - BN_1;
}
function getBigInt(value, name) {
  switch (typeof value) {
    case "bigint":
      return value;
    case "number":
      assertArgument(Number.isInteger(value), "underflow", name || "value", value);
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return BigInt(value);
    case "string":
      try {
        if (value === "") {
          throw new Error("empty string");
        }
        if (value[0] === "-" && value[1] !== "-") {
          return -BigInt(value.substring(1));
        }
        return BigInt(value);
      } catch (e) {
        assertArgument(false, `invalid BigNumberish string: ${e.message}`, name || "value", value);
      }
  }
  assertArgument(false, "invalid BigNumberish value", name || "value", value);
}
function getUint(value, name) {
  const result = getBigInt(value, name);
  assert(result >= BN_0, "unsigned value cannot be negative", "NUMERIC_FAULT", {
    fault: "overflow",
    operation: "getUint",
    value
  });
  return result;
}
var Nibbles = "0123456789abcdef";
function toBigInt(value) {
  if (value instanceof Uint8Array) {
    let result = "0x0";
    for (const v of value) {
      result += Nibbles[v >> 4];
      result += Nibbles[v & 15];
    }
    return BigInt(result);
  }
  return getBigInt(value);
}
function getNumber(value, name) {
  switch (typeof value) {
    case "bigint":
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return Number(value);
    case "number":
      assertArgument(Number.isInteger(value), "underflow", name || "value", value);
      assertArgument(value >= -maxValue && value <= maxValue, "overflow", name || "value", value);
      return value;
    case "string":
      try {
        if (value === "") {
          throw new Error("empty string");
        }
        return getNumber(BigInt(value), name);
      } catch (e) {
        assertArgument(false, `invalid numeric string: ${e.message}`, name || "value", value);
      }
  }
  assertArgument(false, "invalid numeric value", name || "value", value);
}
function toNumber(value) {
  return getNumber(toBigInt(value));
}
function toBeHex(_value, _width) {
  const value = getUint(_value, "value");
  let result = value.toString(16);
  if (_width == null) {
    if (result.length % 2) {
      result = "0" + result;
    }
  } else {
    const width = getNumber(_width, "width");
    assert(width * 2 >= result.length, `value exceeds width (${width} bytes)`, "NUMERIC_FAULT", {
      operation: "toBeHex",
      fault: "overflow",
      value: _value
    });
    while (result.length < width * 2) {
      result = "0" + result;
    }
  }
  return "0x" + result;
}
function toBeArray(_value) {
  const value = getUint(_value, "value");
  if (value === BN_0) {
    return new Uint8Array([]);
  }
  let hex = value.toString(16);
  if (hex.length % 2) {
    hex = "0" + hex;
  }
  const result = new Uint8Array(hex.length / 2);
  for (let i = 0; i < result.length; i++) {
    const offset = i * 2;
    result[i] = parseInt(hex.substring(offset, offset + 2), 16);
  }
  return result;
}
function toQuantity(value) {
  let result = hexlify(isBytesLike(value) ? value : toBeArray(value)).substring(2);
  while (result.startsWith("0")) {
    result = result.substring(1);
  }
  if (result === "") {
    result = "0";
  }
  return "0x" + result;
}

// node_modules/ethers/lib.esm/utils/base58.js
var BN_02 = BigInt(0);
var BN_58 = BigInt(58);

// node_modules/ethers/lib.esm/utils/base64-browser.js
function decodeBase64(textData) {
  textData = atob(textData);
  const data = new Uint8Array(textData.length);
  for (let i = 0; i < textData.length; i++) {
    data[i] = textData.charCodeAt(i);
  }
  return getBytes(data);
}
function encodeBase64(_data4) {
  const data = getBytes(_data4);
  let textData = "";
  for (let i = 0; i < data.length; i++) {
    textData += String.fromCharCode(data[i]);
  }
  return btoa(textData);
}

// node_modules/ethers/lib.esm/utils/events.js
var _listener;
var EventPayload = class {
  /**
   *  Create a new **EventPayload** for %%emitter%% with
   *  the %%listener%% and for %%filter%%.
   */
  constructor(emitter, listener, filter) {
    /**
     *  The event filter.
     */
    __publicField(this, "filter");
    /**
     *  The **EventEmitterable**.
     */
    __publicField(this, "emitter");
    __privateAdd(this, _listener);
    __privateSet(this, _listener, listener);
    defineProperties(this, { emitter, filter });
  }
  /**
   *  Unregister the triggered listener for future events.
   */
  async removeListener() {
    if (__privateGet(this, _listener) == null) {
      return;
    }
    await this.emitter.off(this.filter, __privateGet(this, _listener));
  }
};
_listener = new WeakMap();

// node_modules/ethers/lib.esm/utils/utf8.js
function errorFunc(reason, offset, bytes3, output2, badCodepoint) {
  assertArgument(false, `invalid codepoint at offset ${offset}; ${reason}`, "bytes", bytes3);
}
function ignoreFunc(reason, offset, bytes3, output2, badCodepoint) {
  if (reason === "BAD_PREFIX" || reason === "UNEXPECTED_CONTINUE") {
    let i = 0;
    for (let o = offset + 1; o < bytes3.length; o++) {
      if (bytes3[o] >> 6 !== 2) {
        break;
      }
      i++;
    }
    return i;
  }
  if (reason === "OVERRUN") {
    return bytes3.length - offset - 1;
  }
  return 0;
}
function replaceFunc(reason, offset, bytes3, output2, badCodepoint) {
  if (reason === "OVERLONG") {
    assertArgument(typeof badCodepoint === "number", "invalid bad code point for replacement", "badCodepoint", badCodepoint);
    output2.push(badCodepoint);
    return 0;
  }
  output2.push(65533);
  return ignoreFunc(reason, offset, bytes3, output2, badCodepoint);
}
var Utf8ErrorFuncs = Object.freeze({
  error: errorFunc,
  ignore: ignoreFunc,
  replace: replaceFunc
});
function getUtf8CodePoints(_bytes, onError) {
  if (onError == null) {
    onError = Utf8ErrorFuncs.error;
  }
  const bytes3 = getBytes(_bytes, "bytes");
  const result = [];
  let i = 0;
  while (i < bytes3.length) {
    const c = bytes3[i++];
    if (c >> 7 === 0) {
      result.push(c);
      continue;
    }
    let extraLength = null;
    let overlongMask = null;
    if ((c & 224) === 192) {
      extraLength = 1;
      overlongMask = 127;
    } else if ((c & 240) === 224) {
      extraLength = 2;
      overlongMask = 2047;
    } else if ((c & 248) === 240) {
      extraLength = 3;
      overlongMask = 65535;
    } else {
      if ((c & 192) === 128) {
        i += onError("UNEXPECTED_CONTINUE", i - 1, bytes3, result);
      } else {
        i += onError("BAD_PREFIX", i - 1, bytes3, result);
      }
      continue;
    }
    if (i - 1 + extraLength >= bytes3.length) {
      i += onError("OVERRUN", i - 1, bytes3, result);
      continue;
    }
    let res = c & (1 << 8 - extraLength - 1) - 1;
    for (let j = 0; j < extraLength; j++) {
      let nextChar = bytes3[i];
      if ((nextChar & 192) != 128) {
        i += onError("MISSING_CONTINUE", i, bytes3, result);
        res = null;
        break;
      }
      ;
      res = res << 6 | nextChar & 63;
      i++;
    }
    if (res === null) {
      continue;
    }
    if (res > 1114111) {
      i += onError("OUT_OF_RANGE", i - 1 - extraLength, bytes3, result, res);
      continue;
    }
    if (res >= 55296 && res <= 57343) {
      i += onError("UTF16_SURROGATE", i - 1 - extraLength, bytes3, result, res);
      continue;
    }
    if (res <= overlongMask) {
      i += onError("OVERLONG", i - 1 - extraLength, bytes3, result, res);
      continue;
    }
    result.push(res);
  }
  return result;
}
function toUtf8Bytes(str, form) {
  assertArgument(typeof str === "string", "invalid string value", "str", str);
  if (form != null) {
    assertNormalize(form);
    str = str.normalize(form);
  }
  let result = [];
  for (let i = 0; i < str.length; i++) {
    const c = str.charCodeAt(i);
    if (c < 128) {
      result.push(c);
    } else if (c < 2048) {
      result.push(c >> 6 | 192);
      result.push(c & 63 | 128);
    } else if ((c & 64512) == 55296) {
      i++;
      const c2 = str.charCodeAt(i);
      assertArgument(i < str.length && (c2 & 64512) === 56320, "invalid surrogate pair", "str", str);
      const pair = 65536 + ((c & 1023) << 10) + (c2 & 1023);
      result.push(pair >> 18 | 240);
      result.push(pair >> 12 & 63 | 128);
      result.push(pair >> 6 & 63 | 128);
      result.push(pair & 63 | 128);
    } else {
      result.push(c >> 12 | 224);
      result.push(c >> 6 & 63 | 128);
      result.push(c & 63 | 128);
    }
  }
  return new Uint8Array(result);
}
function _toUtf8String(codePoints) {
  return codePoints.map((codePoint) => {
    if (codePoint <= 65535) {
      return String.fromCharCode(codePoint);
    }
    codePoint -= 65536;
    return String.fromCharCode((codePoint >> 10 & 1023) + 55296, (codePoint & 1023) + 56320);
  }).join("");
}
function toUtf8String(bytes3, onError) {
  return _toUtf8String(getUtf8CodePoints(bytes3, onError));
}

// node_modules/ethers/lib.esm/utils/geturl-browser.js
function createGetUrl(options) {
  async function getUrl(req, _signal2) {
    assert(_signal2 == null || !_signal2.cancelled, "request cancelled before sending", "CANCELLED");
    const protocol = req.url.split(":")[0].toLowerCase();
    assert(protocol === "http" || protocol === "https", `unsupported protocol ${protocol}`, "UNSUPPORTED_OPERATION", {
      info: { protocol },
      operation: "request"
    });
    assert(protocol === "https" || !req.credentials || req.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
      operation: "request"
    });
    let error = null;
    const controller = new AbortController();
    const timer = setTimeout(() => {
      error = makeError("request timeout", "TIMEOUT");
      controller.abort();
    }, req.timeout);
    if (_signal2) {
      _signal2.addListener(() => {
        error = makeError("request cancelled", "CANCELLED");
        controller.abort();
      });
    }
    const init = {
      method: req.method,
      headers: new Headers(Array.from(req)),
      body: req.body || void 0,
      signal: controller.signal
    };
    let resp;
    try {
      resp = await fetch(req.url, init);
    } catch (_error2) {
      clearTimeout(timer);
      if (error) {
        throw error;
      }
      throw _error2;
    }
    clearTimeout(timer);
    const headers = {};
    resp.headers.forEach((value, key) => {
      headers[key.toLowerCase()] = value;
    });
    const respBody = await resp.arrayBuffer();
    const body = respBody == null ? null : new Uint8Array(respBody);
    return {
      statusCode: resp.status,
      statusMessage: resp.statusText,
      headers,
      body
    };
  }
  return getUrl;
}
var defaultGetUrl = createGetUrl({});

// node_modules/ethers/lib.esm/utils/fetch.js
var MAX_ATTEMPTS = 12;
var SLOT_INTERVAL = 250;
var defaultGetUrlFunc = createGetUrl();
var reData = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i");
var reIpfs = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
var locked = false;
async function dataGatewayFunc(url, signal) {
  try {
    const match = url.match(reData);
    if (!match) {
      throw new Error("invalid data");
    }
    return new FetchResponse(200, "OK", {
      "content-type": match[1] || "text/plain"
    }, match[2] ? decodeBase64(match[3]) : unpercent(match[3]));
  } catch (error) {
    return new FetchResponse(599, "BAD REQUEST (invalid data: URI)", {}, null, new FetchRequest(url));
  }
}
function getIpfsGatewayFunc(baseUrl) {
  async function gatewayIpfs(url, signal) {
    try {
      const match = url.match(reIpfs);
      if (!match) {
        throw new Error("invalid link");
      }
      return new FetchRequest(`${baseUrl}${match[2]}`);
    } catch (error) {
      return new FetchResponse(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new FetchRequest(url));
    }
  }
  return gatewayIpfs;
}
var Gateways = {
  "data": dataGatewayFunc,
  "ipfs": getIpfsGatewayFunc("https://gateway.ipfs.io/ipfs/")
};
var fetchSignals = /* @__PURE__ */ new WeakMap();
var _listeners, _cancelled;
var FetchCancelSignal = class {
  constructor(request) {
    __privateAdd(this, _listeners);
    __privateAdd(this, _cancelled);
    __privateSet(this, _listeners, []);
    __privateSet(this, _cancelled, false);
    fetchSignals.set(request, () => {
      if (__privateGet(this, _cancelled)) {
        return;
      }
      __privateSet(this, _cancelled, true);
      for (const listener of __privateGet(this, _listeners)) {
        setTimeout(() => {
          listener();
        }, 0);
      }
      __privateSet(this, _listeners, []);
    });
  }
  addListener(listener) {
    assert(!__privateGet(this, _cancelled), "singal already cancelled", "UNSUPPORTED_OPERATION", {
      operation: "fetchCancelSignal.addCancelListener"
    });
    __privateGet(this, _listeners).push(listener);
  }
  get cancelled() {
    return __privateGet(this, _cancelled);
  }
  checkSignal() {
    assert(!this.cancelled, "cancelled", "CANCELLED", {});
  }
};
_listeners = new WeakMap();
_cancelled = new WeakMap();
function checkSignal(signal) {
  if (signal == null) {
    throw new Error("missing signal; should not happen");
  }
  signal.checkSignal();
  return signal;
}
var _allowInsecure, _gzip, _headers, _method, _timeout, _url, _body, _bodyType, _creds, _preflight, _process, _retry, _signal, _throttle, _getUrlFunc, _FetchRequest_instances, send_fn;
var _FetchRequest = class _FetchRequest {
  /**
   *  Create a new FetchRequest instance with default values.
   *
   *  Once created, each property may be set before issuing a
   *  ``.send()`` to make the request.
   */
  constructor(url) {
    __privateAdd(this, _FetchRequest_instances);
    __privateAdd(this, _allowInsecure);
    __privateAdd(this, _gzip);
    __privateAdd(this, _headers);
    __privateAdd(this, _method);
    __privateAdd(this, _timeout);
    __privateAdd(this, _url);
    __privateAdd(this, _body);
    __privateAdd(this, _bodyType);
    __privateAdd(this, _creds);
    // Hooks
    __privateAdd(this, _preflight);
    __privateAdd(this, _process);
    __privateAdd(this, _retry);
    __privateAdd(this, _signal);
    __privateAdd(this, _throttle);
    __privateAdd(this, _getUrlFunc);
    __privateSet(this, _url, String(url));
    __privateSet(this, _allowInsecure, false);
    __privateSet(this, _gzip, true);
    __privateSet(this, _headers, {});
    __privateSet(this, _method, "");
    __privateSet(this, _timeout, 3e5);
    __privateSet(this, _throttle, {
      slotInterval: SLOT_INTERVAL,
      maxAttempts: MAX_ATTEMPTS
    });
    __privateSet(this, _getUrlFunc, null);
  }
  /**
   *  The fetch URL to request.
   */
  get url() {
    return __privateGet(this, _url);
  }
  set url(url) {
    __privateSet(this, _url, String(url));
  }
  /**
   *  The fetch body, if any, to send as the request body. //(default: null)//
   *
   *  When setting a body, the intrinsic ``Content-Type`` is automatically
   *  set and will be used if **not overridden** by setting a custom
   *  header.
   *
   *  If %%body%% is null, the body is cleared (along with the
   *  intrinsic ``Content-Type``).
   *
   *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
   *  ``text/plain``.
   *
   *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
   *  ``application/octet-stream``.
   *
   *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
   *  set to ``application/json``.
   */
  get body() {
    if (__privateGet(this, _body) == null) {
      return null;
    }
    return new Uint8Array(__privateGet(this, _body));
  }
  set body(body) {
    if (body == null) {
      __privateSet(this, _body, void 0);
      __privateSet(this, _bodyType, void 0);
    } else if (typeof body === "string") {
      __privateSet(this, _body, toUtf8Bytes(body));
      __privateSet(this, _bodyType, "text/plain");
    } else if (body instanceof Uint8Array) {
      __privateSet(this, _body, body);
      __privateSet(this, _bodyType, "application/octet-stream");
    } else if (typeof body === "object") {
      __privateSet(this, _body, toUtf8Bytes(JSON.stringify(body)));
      __privateSet(this, _bodyType, "application/json");
    } else {
      throw new Error("invalid body");
    }
  }
  /**
   *  Returns true if the request has a body.
   */
  hasBody() {
    return __privateGet(this, _body) != null;
  }
  /**
   *  The HTTP method to use when requesting the URI. If no method
   *  has been explicitly set, then ``GET`` is used if the body is
   *  null and ``POST`` otherwise.
   */
  get method() {
    if (__privateGet(this, _method)) {
      return __privateGet(this, _method);
    }
    if (this.hasBody()) {
      return "POST";
    }
    return "GET";
  }
  set method(method) {
    if (method == null) {
      method = "";
    }
    __privateSet(this, _method, String(method).toUpperCase());
  }
  /**
   *  The headers that will be used when requesting the URI. All
   *  keys are lower-case.
   *
   *  This object is a copy, so any changes will **NOT** be reflected
   *  in the ``FetchRequest``.
   *
   *  To set a header entry, use the ``setHeader`` method.
   */
  get headers() {
    const headers = Object.assign({}, __privateGet(this, _headers));
    if (__privateGet(this, _creds)) {
      headers["authorization"] = `Basic ${encodeBase64(toUtf8Bytes(__privateGet(this, _creds)))}`;
    }
    ;
    if (this.allowGzip) {
      headers["accept-encoding"] = "gzip";
    }
    if (headers["content-type"] == null && __privateGet(this, _bodyType)) {
      headers["content-type"] = __privateGet(this, _bodyType);
    }
    if (this.body) {
      headers["content-length"] = String(this.body.length);
    }
    return headers;
  }
  /**
   *  Get the header for %%key%%, ignoring case.
   */
  getHeader(key) {
    return this.headers[key.toLowerCase()];
  }
  /**
   *  Set the header for %%key%% to %%value%%. All values are coerced
   *  to a string.
   */
  setHeader(key, value) {
    __privateGet(this, _headers)[String(key).toLowerCase()] = String(value);
  }
  /**
   *  Clear all headers, resetting all intrinsic headers.
   */
  clearHeaders() {
    __privateSet(this, _headers, {});
  }
  [Symbol.iterator]() {
    const headers = this.headers;
    const keys = Object.keys(headers);
    let index = 0;
    return {
      next: () => {
        if (index < keys.length) {
          const key = keys[index++];
          return {
            value: [key, headers[key]],
            done: false
          };
        }
        return { value: void 0, done: true };
      }
    };
  }
  /**
   *  The value that will be sent for the ``Authorization`` header.
   *
   *  To set the credentials, use the ``setCredentials`` method.
   */
  get credentials() {
    return __privateGet(this, _creds) || null;
  }
  /**
   *  Sets an ``Authorization`` for %%username%% with %%password%%.
   */
  setCredentials(username, password) {
    assertArgument(!username.match(/:/), "invalid basic authentication username", "username", "[REDACTED]");
    __privateSet(this, _creds, `${username}:${password}`);
  }
  /**
   *  Enable and request gzip-encoded responses. The response will
   *  automatically be decompressed. //(default: true)//
   */
  get allowGzip() {
    return __privateGet(this, _gzip);
  }
  set allowGzip(value) {
    __privateSet(this, _gzip, !!value);
  }
  /**
   *  Allow ``Authentication`` credentials to be sent over insecure
   *  channels. //(default: false)//
   */
  get allowInsecureAuthentication() {
    return !!__privateGet(this, _allowInsecure);
  }
  set allowInsecureAuthentication(value) {
    __privateSet(this, _allowInsecure, !!value);
  }
  /**
   *  The timeout (in milliseconds) to wait for a complete response.
   *  //(default: 5 minutes)//
   */
  get timeout() {
    return __privateGet(this, _timeout);
  }
  set timeout(timeout) {
    assertArgument(timeout >= 0, "timeout must be non-zero", "timeout", timeout);
    __privateSet(this, _timeout, timeout);
  }
  /**
   *  This function is called prior to each request, for example
   *  during a redirection or retry in case of server throttling.
   *
   *  This offers an opportunity to populate headers or update
   *  content before sending a request.
   */
  get preflightFunc() {
    return __privateGet(this, _preflight) || null;
  }
  set preflightFunc(preflight) {
    __privateSet(this, _preflight, preflight);
  }
  /**
   *  This function is called after each response, offering an
   *  opportunity to provide client-level throttling or updating
   *  response data.
   *
   *  Any error thrown in this causes the ``send()`` to throw.
   *
   *  To schedule a retry attempt (assuming the maximum retry limit
   *  has not been reached), use [[response.throwThrottleError]].
   */
  get processFunc() {
    return __privateGet(this, _process) || null;
  }
  set processFunc(process2) {
    __privateSet(this, _process, process2);
  }
  /**
   *  This function is called on each retry attempt.
   */
  get retryFunc() {
    return __privateGet(this, _retry) || null;
  }
  set retryFunc(retry) {
    __privateSet(this, _retry, retry);
  }
  /**
   *  This function is called to fetch content from HTTP and
   *  HTTPS URLs and is platform specific (e.g. nodejs vs
   *  browsers).
   *
   *  This is by default the currently registered global getUrl
   *  function, which can be changed using [[registerGetUrl]].
   *  If this has been set, setting is to ``null`` will cause
   *  this FetchRequest (and any future clones) to revert back to
   *  using the currently registered global getUrl function.
   *
   *  Setting this is generally not necessary, but may be useful
   *  for developers that wish to intercept requests or to
   *  configurege a proxy or other agent.
   */
  get getUrlFunc() {
    return __privateGet(this, _getUrlFunc) || defaultGetUrlFunc;
  }
  set getUrlFunc(value) {
    __privateSet(this, _getUrlFunc, value);
  }
  toString() {
    return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${__privateGet(this, _body) ? hexlify(__privateGet(this, _body)) : "null"}>`;
  }
  /**
   *  Update the throttle parameters used to determine maximum
   *  attempts and exponential-backoff properties.
   */
  setThrottleParams(params) {
    if (params.slotInterval != null) {
      __privateGet(this, _throttle).slotInterval = params.slotInterval;
    }
    if (params.maxAttempts != null) {
      __privateGet(this, _throttle).maxAttempts = params.maxAttempts;
    }
  }
  /**
   *  Resolves to the response by sending the request.
   */
  send() {
    assert(__privateGet(this, _signal) == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" });
    __privateSet(this, _signal, new FetchCancelSignal(this));
    return __privateMethod(this, _FetchRequest_instances, send_fn).call(this, 0, getTime() + this.timeout, 0, this, new FetchResponse(0, "", {}, null, this));
  }
  /**
   *  Cancels the inflight response, causing a ``CANCELLED``
   *  error to be rejected from the [[send]].
   */
  cancel() {
    assert(__privateGet(this, _signal) != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
    const signal = fetchSignals.get(this);
    if (!signal) {
      throw new Error("missing signal; should not happen");
    }
    signal();
  }
  /**
   *  Returns a new [[FetchRequest]] that represents the redirection
   *  to %%location%%.
   */
  redirect(location) {
    const current = this.url.split(":")[0].toLowerCase();
    const target = location.split(":")[0].toLowerCase();
    assert(this.method === "GET" && (current !== "https" || target !== "http") && location.match(/^https?:/), `unsupported redirect`, "UNSUPPORTED_OPERATION", {
      operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(location)})`
    });
    const req = new _FetchRequest(location);
    req.method = "GET";
    req.allowGzip = this.allowGzip;
    req.timeout = this.timeout;
    __privateSet(req, _headers, Object.assign({}, __privateGet(this, _headers)));
    if (__privateGet(this, _body)) {
      __privateSet(req, _body, new Uint8Array(__privateGet(this, _body)));
    }
    __privateSet(req, _bodyType, __privateGet(this, _bodyType));
    return req;
  }
  /**
   *  Create a new copy of this request.
   */
  clone() {
    const clone = new _FetchRequest(this.url);
    __privateSet(clone, _method, __privateGet(this, _method));
    if (__privateGet(this, _body)) {
      __privateSet(clone, _body, __privateGet(this, _body));
    }
    __privateSet(clone, _bodyType, __privateGet(this, _bodyType));
    __privateSet(clone, _headers, Object.assign({}, __privateGet(this, _headers)));
    __privateSet(clone, _creds, __privateGet(this, _creds));
    if (this.allowGzip) {
      clone.allowGzip = true;
    }
    clone.timeout = this.timeout;
    if (this.allowInsecureAuthentication) {
      clone.allowInsecureAuthentication = true;
    }
    __privateSet(clone, _preflight, __privateGet(this, _preflight));
    __privateSet(clone, _process, __privateGet(this, _process));
    __privateSet(clone, _retry, __privateGet(this, _retry));
    __privateSet(clone, _throttle, Object.assign({}, __privateGet(this, _throttle)));
    __privateSet(clone, _getUrlFunc, __privateGet(this, _getUrlFunc));
    return clone;
  }
  /**
   *  Locks all static configuration for gateways and FetchGetUrlFunc
   *  registration.
   */
  static lockConfig() {
    locked = true;
  }
  /**
   *  Get the current Gateway function for %%scheme%%.
   */
  static getGateway(scheme) {
    return Gateways[scheme.toLowerCase()] || null;
  }
  /**
   *  Use the %%func%% when fetching URIs using %%scheme%%.
   *
   *  This method affects all requests globally.
   *
   *  If [[lockConfig]] has been called, no change is made and this
   *  throws.
   */
  static registerGateway(scheme, func) {
    scheme = scheme.toLowerCase();
    if (scheme === "http" || scheme === "https") {
      throw new Error(`cannot intercept ${scheme}; use registerGetUrl`);
    }
    if (locked) {
      throw new Error("gateways locked");
    }
    Gateways[scheme] = func;
  }
  /**
   *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
   *
   *  This method affects all requests globally.
   *
   *  If [[lockConfig]] has been called, no change is made and this
   *  throws.
   */
  static registerGetUrl(getUrl) {
    if (locked) {
      throw new Error("gateways locked");
    }
    defaultGetUrlFunc = getUrl;
  }
  /**
   *  Creates a getUrl function that fetches content from HTTP and
   *  HTTPS URLs.
   *
   *  The available %%options%% are dependent on the platform
   *  implementation of the default getUrl function.
   *
   *  This is not generally something that is needed, but is useful
   *  when trying to customize simple behaviour when fetching HTTP
   *  content.
   */
  static createGetUrlFunc(options) {
    return createGetUrl(options);
  }
  /**
   *  Creates a function that can "fetch" data URIs.
   *
   *  Note that this is automatically done internally to support
   *  data URIs, so it is not necessary to register it.
   *
   *  This is not generally something that is needed, but may
   *  be useful in a wrapper to perfom custom data URI functionality.
   */
  static createDataGateway() {
    return dataGatewayFunc;
  }
  /**
   *  Creates a function that will fetch IPFS (unvalidated) from
   *  a custom gateway baseUrl.
   *
   *  The default IPFS gateway used internally is
   *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
   */
  static createIpfsGatewayFunc(baseUrl) {
    return getIpfsGatewayFunc(baseUrl);
  }
};
_allowInsecure = new WeakMap();
_gzip = new WeakMap();
_headers = new WeakMap();
_method = new WeakMap();
_timeout = new WeakMap();
_url = new WeakMap();
_body = new WeakMap();
_bodyType = new WeakMap();
_creds = new WeakMap();
_preflight = new WeakMap();
_process = new WeakMap();
_retry = new WeakMap();
_signal = new WeakMap();
_throttle = new WeakMap();
_getUrlFunc = new WeakMap();
_FetchRequest_instances = new WeakSet();
send_fn = async function(attempt, expires, delay, _request2, _response) {
  var _a2, _b, _c;
  if (attempt >= __privateGet(this, _throttle).maxAttempts) {
    return _response.makeServerError("exceeded maximum retry limit");
  }
  assert(getTime() <= expires, "timeout", "TIMEOUT", {
    operation: "request.send",
    reason: "timeout",
    request: _request2
  });
  if (delay > 0) {
    await wait(delay);
  }
  let req = this.clone();
  const scheme = (req.url.split(":")[0] || "").toLowerCase();
  if (scheme in Gateways) {
    const result = await Gateways[scheme](req.url, checkSignal(__privateGet(_request2, _signal)));
    if (result instanceof FetchResponse) {
      let response2 = result;
      if (this.processFunc) {
        checkSignal(__privateGet(_request2, _signal));
        try {
          response2 = await this.processFunc(req, response2);
        } catch (error) {
          if (error.throttle == null || typeof error.stall !== "number") {
            response2.makeServerError("error in post-processing function", error).assertOk();
          }
        }
      }
      return response2;
    }
    req = result;
  }
  if (this.preflightFunc) {
    req = await this.preflightFunc(req);
  }
  const resp = await this.getUrlFunc(req, checkSignal(__privateGet(_request2, _signal)));
  let response = new FetchResponse(resp.statusCode, resp.statusMessage, resp.headers, resp.body, _request2);
  if (response.statusCode === 301 || response.statusCode === 302) {
    try {
      const location = response.headers.location || "";
      return __privateMethod(_a2 = req.redirect(location), _FetchRequest_instances, send_fn).call(_a2, attempt + 1, expires, 0, _request2, response);
    } catch (error) {
    }
    return response;
  } else if (response.statusCode === 429) {
    if (this.retryFunc == null || await this.retryFunc(req, response, attempt)) {
      const retryAfter = response.headers["retry-after"];
      let delay2 = __privateGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
      if (typeof retryAfter === "string" && retryAfter.match(/^[1-9][0-9]*$/)) {
        delay2 = parseInt(retryAfter);
      }
      return __privateMethod(_b = req.clone(), _FetchRequest_instances, send_fn).call(_b, attempt + 1, expires, delay2, _request2, response);
    }
  }
  if (this.processFunc) {
    checkSignal(__privateGet(_request2, _signal));
    try {
      response = await this.processFunc(req, response);
    } catch (error) {
      if (error.throttle == null || typeof error.stall !== "number") {
        response.makeServerError("error in post-processing function", error).assertOk();
      }
      let delay2 = __privateGet(this, _throttle).slotInterval * Math.trunc(Math.random() * Math.pow(2, attempt));
      ;
      if (error.stall >= 0) {
        delay2 = error.stall;
      }
      return __privateMethod(_c = req.clone(), _FetchRequest_instances, send_fn).call(_c, attempt + 1, expires, delay2, _request2, response);
    }
  }
  return response;
};
var FetchRequest = _FetchRequest;
var _statusCode, _statusMessage, _headers2, _body2, _request, _error;
var _FetchResponse = class _FetchResponse {
  constructor(statusCode, statusMessage, headers, body, request) {
    __privateAdd(this, _statusCode);
    __privateAdd(this, _statusMessage);
    __privateAdd(this, _headers2);
    __privateAdd(this, _body2);
    __privateAdd(this, _request);
    __privateAdd(this, _error);
    __privateSet(this, _statusCode, statusCode);
    __privateSet(this, _statusMessage, statusMessage);
    __privateSet(this, _headers2, Object.keys(headers).reduce((accum, k) => {
      accum[k.toLowerCase()] = String(headers[k]);
      return accum;
    }, {}));
    __privateSet(this, _body2, body == null ? null : new Uint8Array(body));
    __privateSet(this, _request, request || null);
    __privateSet(this, _error, { message: "" });
  }
  toString() {
    return `<FetchResponse status=${this.statusCode} body=${__privateGet(this, _body2) ? hexlify(__privateGet(this, _body2)) : "null"}>`;
  }
  /**
   *  The response status code.
   */
  get statusCode() {
    return __privateGet(this, _statusCode);
  }
  /**
   *  The response status message.
   */
  get statusMessage() {
    return __privateGet(this, _statusMessage);
  }
  /**
   *  The response headers. All keys are lower-case.
   */
  get headers() {
    return Object.assign({}, __privateGet(this, _headers2));
  }
  /**
   *  The response body, or ``null`` if there was no body.
   */
  get body() {
    return __privateGet(this, _body2) == null ? null : new Uint8Array(__privateGet(this, _body2));
  }
  /**
   *  The response body as a UTF-8 encoded string, or the empty
   *  string (i.e. ``""``) if there was no body.
   *
   *  An error is thrown if the body is invalid UTF-8 data.
   */
  get bodyText() {
    try {
      return __privateGet(this, _body2) == null ? "" : toUtf8String(__privateGet(this, _body2));
    } catch (error) {
      assert(false, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
        operation: "bodyText",
        info: { response: this }
      });
    }
  }
  /**
   *  The response body, decoded as JSON.
   *
   *  An error is thrown if the body is invalid JSON-encoded data
   *  or if there was no body.
   */
  get bodyJson() {
    try {
      return JSON.parse(this.bodyText);
    } catch (error) {
      assert(false, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
        operation: "bodyJson",
        info: { response: this }
      });
    }
  }
  [Symbol.iterator]() {
    const headers = this.headers;
    const keys = Object.keys(headers);
    let index = 0;
    return {
      next: () => {
        if (index < keys.length) {
          const key = keys[index++];
          return {
            value: [key, headers[key]],
            done: false
          };
        }
        return { value: void 0, done: true };
      }
    };
  }
  /**
   *  Return a Response with matching headers and body, but with
   *  an error status code (i.e. 599) and %%message%% with an
   *  optional %%error%%.
   */
  makeServerError(message, error) {
    let statusMessage;
    if (!message) {
      message = `${this.statusCode} ${this.statusMessage}`;
      statusMessage = `CLIENT ESCALATED SERVER ERROR (${message})`;
    } else {
      statusMessage = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${message})`;
    }
    const response = new _FetchResponse(599, statusMessage, this.headers, this.body, __privateGet(this, _request) || void 0);
    __privateSet(response, _error, { message, error });
    return response;
  }
  /**
   *  If called within a [request.processFunc](FetchRequest-processFunc)
   *  call, causes the request to retry as if throttled for %%stall%%
   *  milliseconds.
   */
  throwThrottleError(message, stall) {
    if (stall == null) {
      stall = -1;
    } else {
      assertArgument(Number.isInteger(stall) && stall >= 0, "invalid stall timeout", "stall", stall);
    }
    const error = new Error(message || "throttling requests");
    defineProperties(error, { stall, throttle: true });
    throw error;
  }
  /**
   *  Get the header value for %%key%%, ignoring case.
   */
  getHeader(key) {
    return this.headers[key.toLowerCase()];
  }
  /**
   *  Returns true if the response has a body.
   */
  hasBody() {
    return __privateGet(this, _body2) != null;
  }
  /**
   *  The request made for this response.
   */
  get request() {
    return __privateGet(this, _request);
  }
  /**
   *  Returns true if this response was a success statusCode.
   */
  ok() {
    return __privateGet(this, _error).message === "" && this.statusCode >= 200 && this.statusCode < 300;
  }
  /**
   *  Throws a ``SERVER_ERROR`` if this response is not ok.
   */
  assertOk() {
    if (this.ok()) {
      return;
    }
    let { message, error } = __privateGet(this, _error);
    if (message === "") {
      message = `server response ${this.statusCode} ${this.statusMessage}`;
    }
    let requestUrl = null;
    if (this.request) {
      requestUrl = this.request.url;
    }
    let responseBody = null;
    try {
      if (__privateGet(this, _body2)) {
        responseBody = toUtf8String(__privateGet(this, _body2));
      }
    } catch (e) {
    }
    assert(false, message, "SERVER_ERROR", {
      request: this.request || "unknown request",
      response: this,
      error,
      info: {
        requestUrl,
        responseBody,
        responseStatus: `${this.statusCode} ${this.statusMessage}`
      }
    });
  }
};
_statusCode = new WeakMap();
_statusMessage = new WeakMap();
_headers2 = new WeakMap();
_body2 = new WeakMap();
_request = new WeakMap();
_error = new WeakMap();
var FetchResponse = _FetchResponse;
function getTime() {
  return (/* @__PURE__ */ new Date()).getTime();
}
function unpercent(value) {
  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {
    return String.fromCharCode(parseInt(code, 16));
  }));
}
function wait(delay) {
  return new Promise((resolve) => setTimeout(resolve, delay));
}

// node_modules/ethers/lib.esm/utils/fixednumber.js
var BN_N1 = BigInt(-1);
var BN_03 = BigInt(0);
var BN_12 = BigInt(1);
var BN_5 = BigInt(5);
var Zeros = "0000";
while (Zeros.length < 80) {
  Zeros += Zeros;
}

// node_modules/ethers/lib.esm/abi/coders/abstract-coder.js
var WordSize = 32;
var Padding = new Uint8Array(WordSize);
var passProperties = ["then"];
var _guard = {};
var resultNames = /* @__PURE__ */ new WeakMap();
function getNames(result) {
  return resultNames.get(result);
}
function setNames(result, names) {
  resultNames.set(result, names);
}
function throwError(name, error) {
  const wrapped = new Error(`deferred error during ABI decoding triggered accessing ${name}`);
  wrapped.error = error;
  throw wrapped;
}
function toObject(names, items, deep) {
  if (names.indexOf(null) >= 0) {
    return items.map((item, index) => {
      if (item instanceof Result) {
        return toObject(getNames(item), item, deep);
      }
      return item;
    });
  }
  return names.reduce((accum, name, index) => {
    let item = items.getValue(name);
    if (!(name in accum)) {
      if (deep && item instanceof Result) {
        item = toObject(getNames(item), item, deep);
      }
      accum[name] = item;
    }
    return accum;
  }, {});
}
var _names;
var _Result = class _Result extends Array {
  /**
   *  @private
   */
  constructor(...args) {
    const guard = args[0];
    let items = args[1];
    let names = (args[2] || []).slice();
    let wrap = true;
    if (guard !== _guard) {
      items = args;
      names = [];
      wrap = false;
    }
    super(items.length);
    // No longer used; but cannot be removed as it will remove the
    // #private field from the .d.ts which may break backwards
    // compatibility
    __privateAdd(this, _names);
    items.forEach((item, index) => {
      this[index] = item;
    });
    const nameCounts = names.reduce((accum, name) => {
      if (typeof name === "string") {
        accum.set(name, (accum.get(name) || 0) + 1);
      }
      return accum;
    }, /* @__PURE__ */ new Map());
    setNames(this, Object.freeze(items.map((item, index) => {
      const name = names[index];
      if (name != null && nameCounts.get(name) === 1) {
        return name;
      }
      return null;
    })));
    __privateSet(this, _names, []);
    if (__privateGet(this, _names) == null) {
      void __privateGet(this, _names);
    }
    if (!wrap) {
      return;
    }
    Object.freeze(this);
    const proxy = new Proxy(this, {
      get: (target, prop, receiver) => {
        if (typeof prop === "string") {
          if (prop.match(/^[0-9]+$/)) {
            const index = getNumber(prop, "%index");
            if (index < 0 || index >= this.length) {
              throw new RangeError("out of result range");
            }
            const item = target[index];
            if (item instanceof Error) {
              throwError(`index ${index}`, item);
            }
            return item;
          }
          if (passProperties.indexOf(prop) >= 0) {
            return Reflect.get(target, prop, receiver);
          }
          const value = target[prop];
          if (value instanceof Function) {
            return function(...args2) {
              return value.apply(this === receiver ? target : this, args2);
            };
          } else if (!(prop in target)) {
            return target.getValue.apply(this === receiver ? target : this, [prop]);
          }
        }
        return Reflect.get(target, prop, receiver);
      }
    });
    setNames(proxy, getNames(this));
    return proxy;
  }
  /**
   *  Returns the Result as a normal Array. If %%deep%%, any children
   *  which are Result objects are also converted to a normal Array.
   *
   *  This will throw if there are any outstanding deferred
   *  errors.
   */
  toArray(deep) {
    const result = [];
    this.forEach((item, index) => {
      if (item instanceof Error) {
        throwError(`index ${index}`, item);
      }
      if (deep && item instanceof _Result) {
        item = item.toArray(deep);
      }
      result.push(item);
    });
    return result;
  }
  /**
   *  Returns the Result as an Object with each name-value pair. If
   *  %%deep%%, any children which are Result objects are also
   *  converted to an Object.
   *
   *  This will throw if any value is unnamed, or if there are
   *  any outstanding deferred errors.
   */
  toObject(deep) {
    const names = getNames(this);
    return names.reduce((accum, name, index) => {
      assert(name != null, `value at index ${index} unnamed`, "UNSUPPORTED_OPERATION", {
        operation: "toObject()"
      });
      return toObject(names, this, deep);
    }, {});
  }
  /**
   *  @_ignore
   */
  slice(start, end) {
    if (start == null) {
      start = 0;
    }
    if (start < 0) {
      start += this.length;
      if (start < 0) {
        start = 0;
      }
    }
    if (end == null) {
      end = this.length;
    }
    if (end < 0) {
      end += this.length;
      if (end < 0) {
        end = 0;
      }
    }
    if (end > this.length) {
      end = this.length;
    }
    const _names2 = getNames(this);
    const result = [], names = [];
    for (let i = start; i < end; i++) {
      result.push(this[i]);
      names.push(_names2[i]);
    }
    return new _Result(_guard, result, names);
  }
  /**
   *  @_ignore
   */
  filter(callback, thisArg) {
    const _names2 = getNames(this);
    const result = [], names = [];
    for (let i = 0; i < this.length; i++) {
      const item = this[i];
      if (item instanceof Error) {
        throwError(`index ${i}`, item);
      }
      if (callback.call(thisArg, item, i, this)) {
        result.push(item);
        names.push(_names2[i]);
      }
    }
    return new _Result(_guard, result, names);
  }
  /**
   *  @_ignore
   */
  map(callback, thisArg) {
    const result = [];
    for (let i = 0; i < this.length; i++) {
      const item = this[i];
      if (item instanceof Error) {
        throwError(`index ${i}`, item);
      }
      result.push(callback.call(thisArg, item, i, this));
    }
    return result;
  }
  /**
   *  Returns the value for %%name%%.
   *
   *  Since it is possible to have a key whose name conflicts with
   *  a method on a [[Result]] or its superclass Array, or any
   *  JavaScript keyword, this ensures all named values are still
   *  accessible by name.
   */
  getValue(name) {
    const index = getNames(this).indexOf(name);
    if (index === -1) {
      return void 0;
    }
    const value = this[index];
    if (value instanceof Error) {
      throwError(`property ${JSON.stringify(name)}`, value.error);
    }
    return value;
  }
  /**
   *  Creates a new [[Result]] for %%items%% with each entry
   *  also accessible by its corresponding name in %%keys%%.
   */
  static fromItems(items, keys) {
    return new _Result(_guard, items, keys);
  }
};
_names = new WeakMap();
var Result = _Result;
function getValue(value) {
  let bytes3 = toBeArray(value);
  assert(bytes3.length <= WordSize, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: bytes3, length: WordSize, offset: bytes3.length });
  if (bytes3.length !== WordSize) {
    bytes3 = getBytesCopy(concat([Padding.slice(bytes3.length % WordSize), bytes3]));
  }
  return bytes3;
}
var Coder = class {
  constructor(name, type, localName, dynamic) {
    // The coder name:
    //   - address, uint256, tuple, array, etc.
    __publicField(this, "name");
    // The fully expanded type, including composite types:
    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
    __publicField(this, "type");
    // The localName bound in the signature, in this example it is "baz":
    //   - tuple(address foo, uint bar) baz
    __publicField(this, "localName");
    // Whether this type is dynamic:
    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
    __publicField(this, "dynamic");
    defineProperties(this, { name, type, localName, dynamic }, {
      name: "string",
      type: "string",
      localName: "string",
      dynamic: "boolean"
    });
  }
  _throwError(message, value) {
    assertArgument(false, message, this.localName, value);
  }
};
var _data, _dataLength, _Writer_instances, writeData_fn;
var Writer = class {
  constructor() {
    __privateAdd(this, _Writer_instances);
    // An array of WordSize lengthed objects to concatenation
    __privateAdd(this, _data);
    __privateAdd(this, _dataLength);
    __privateSet(this, _data, []);
    __privateSet(this, _dataLength, 0);
  }
  get data() {
    return concat(__privateGet(this, _data));
  }
  get length() {
    return __privateGet(this, _dataLength);
  }
  appendWriter(writer) {
    return __privateMethod(this, _Writer_instances, writeData_fn).call(this, getBytesCopy(writer.data));
  }
  // Arrayish item; pad on the right to *nearest* WordSize
  writeBytes(value) {
    let bytes3 = getBytesCopy(value);
    const paddingOffset = bytes3.length % WordSize;
    if (paddingOffset) {
      bytes3 = getBytesCopy(concat([bytes3, Padding.slice(paddingOffset)]));
    }
    return __privateMethod(this, _Writer_instances, writeData_fn).call(this, bytes3);
  }
  // Numeric item; pad on the left *to* WordSize
  writeValue(value) {
    return __privateMethod(this, _Writer_instances, writeData_fn).call(this, getValue(value));
  }
  // Inserts a numeric place-holder, returning a callback that can
  // be used to asjust the value later
  writeUpdatableValue() {
    const offset = __privateGet(this, _data).length;
    __privateGet(this, _data).push(Padding);
    __privateSet(this, _dataLength, __privateGet(this, _dataLength) + WordSize);
    return (value) => {
      __privateGet(this, _data)[offset] = getValue(value);
    };
  }
};
_data = new WeakMap();
_dataLength = new WeakMap();
_Writer_instances = new WeakSet();
writeData_fn = function(data) {
  __privateGet(this, _data).push(data);
  __privateSet(this, _dataLength, __privateGet(this, _dataLength) + data.length);
  return data.length;
};
var _data2, _offset, _bytesRead, _parent, _maxInflation, _Reader_instances, incrementBytesRead_fn, peekBytes_fn;
var _Reader = class _Reader {
  constructor(data, allowLoose, maxInflation) {
    __privateAdd(this, _Reader_instances);
    // Allows incomplete unpadded data to be read; otherwise an error
    // is raised if attempting to overrun the buffer. This is required
    // to deal with an old Solidity bug, in which event data for
    // external (not public thoguh) was tightly packed.
    __publicField(this, "allowLoose");
    __privateAdd(this, _data2);
    __privateAdd(this, _offset);
    __privateAdd(this, _bytesRead);
    __privateAdd(this, _parent);
    __privateAdd(this, _maxInflation);
    defineProperties(this, { allowLoose: !!allowLoose });
    __privateSet(this, _data2, getBytesCopy(data));
    __privateSet(this, _bytesRead, 0);
    __privateSet(this, _parent, null);
    __privateSet(this, _maxInflation, maxInflation != null ? maxInflation : 1024);
    __privateSet(this, _offset, 0);
  }
  get data() {
    return hexlify(__privateGet(this, _data2));
  }
  get dataLength() {
    return __privateGet(this, _data2).length;
  }
  get consumed() {
    return __privateGet(this, _offset);
  }
  get bytes() {
    return new Uint8Array(__privateGet(this, _data2));
  }
  // Create a sub-reader with the same underlying data, but offset
  subReader(offset) {
    const reader = new _Reader(__privateGet(this, _data2).slice(__privateGet(this, _offset) + offset), this.allowLoose, __privateGet(this, _maxInflation));
    __privateSet(reader, _parent, this);
    return reader;
  }
  // Read bytes
  readBytes(length, loose) {
    let bytes3 = __privateMethod(this, _Reader_instances, peekBytes_fn).call(this, 0, length, !!loose);
    __privateMethod(this, _Reader_instances, incrementBytesRead_fn).call(this, length);
    __privateSet(this, _offset, __privateGet(this, _offset) + bytes3.length);
    return bytes3.slice(0, length);
  }
  // Read a numeric values
  readValue() {
    return toBigInt(this.readBytes(WordSize));
  }
  readIndex() {
    return toNumber(this.readBytes(WordSize));
  }
};
_data2 = new WeakMap();
_offset = new WeakMap();
_bytesRead = new WeakMap();
_parent = new WeakMap();
_maxInflation = new WeakMap();
_Reader_instances = new WeakSet();
incrementBytesRead_fn = function(count) {
  var _a2;
  if (__privateGet(this, _parent)) {
    return __privateMethod(_a2 = __privateGet(this, _parent), _Reader_instances, incrementBytesRead_fn).call(_a2, count);
  }
  __privateSet(this, _bytesRead, __privateGet(this, _bytesRead) + count);
  assert(__privateGet(this, _maxInflation) < 1 || __privateGet(this, _bytesRead) <= __privateGet(this, _maxInflation) * this.dataLength, `compressed ABI data exceeds inflation ratio of ${__privateGet(this, _maxInflation)} ( see: https://github.com/ethers-io/ethers.js/issues/4537 )`, "BUFFER_OVERRUN", {
    buffer: getBytesCopy(__privateGet(this, _data2)),
    offset: __privateGet(this, _offset),
    length: count,
    info: {
      bytesRead: __privateGet(this, _bytesRead),
      dataLength: this.dataLength
    }
  });
};
peekBytes_fn = function(offset, length, loose) {
  let alignedLength = Math.ceil(length / WordSize) * WordSize;
  if (__privateGet(this, _offset) + alignedLength > __privateGet(this, _data2).length) {
    if (this.allowLoose && loose && __privateGet(this, _offset) + length <= __privateGet(this, _data2).length) {
      alignedLength = length;
    } else {
      assert(false, "data out-of-bounds", "BUFFER_OVERRUN", {
        buffer: getBytesCopy(__privateGet(this, _data2)),
        length: __privateGet(this, _data2).length,
        offset: __privateGet(this, _offset) + alignedLength
      });
    }
  }
  return __privateGet(this, _data2).slice(__privateGet(this, _offset), __privateGet(this, _offset) + alignedLength);
};
var Reader = _Reader;

// node_modules/@noble/hashes/esm/_assert.js
function number(n2) {
  if (!Number.isSafeInteger(n2) || n2 < 0)
    throw new Error(`Wrong positive integer: ${n2}`);
}
function bytes(b2, ...lengths) {
  if (!(b2 instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (lengths.length > 0 && !lengths.includes(b2.length))
    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b2.length}`);
}
function hash(hash2) {
  if (typeof hash2 !== "function" || typeof hash2.create !== "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  number(hash2.outputLen);
  number(hash2.blockLen);
}
function exists(instance, checkFinished = true) {
  if (instance.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (checkFinished && instance.finished)
    throw new Error("Hash#digest() has already been called");
}
function output(out, instance) {
  bytes(out);
  const min = instance.outputLen;
  if (out.length < min) {
    throw new Error(`digestInto() expects output buffer of length at least ${min}`);
  }
}

// node_modules/@noble/hashes/esm/crypto.js
var crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;

// node_modules/@noble/hashes/esm/utils.js
var u8a = (a) => a instanceof Uint8Array;
var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
var rotr = (word, shift) => word << 32 - shift | word >>> shift;
var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE)
  throw new Error("Non little-endian hardware is not supported");
var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
var nextTick = async () => {
};
async function asyncLoop(iters, tick, cb) {
  let ts = Date.now();
  for (let i = 0; i < iters; i++) {
    cb(i);
    const diff = Date.now() - ts;
    if (diff >= 0 && diff < tick)
      continue;
    await nextTick();
    ts += diff;
  }
}
function utf8ToBytes(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function toBytes(data) {
  if (typeof data === "string")
    data = utf8ToBytes(data);
  if (!u8a(data))
    throw new Error(`expected Uint8Array, got ${typeof data}`);
  return data;
}
function concatBytes(...arrays) {
  const r2 = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a(a))
      throw new Error("Uint8Array expected");
    r2.set(a, pad);
    pad += a.length;
  });
  return r2;
}
var Hash = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
var toStr = {}.toString;
function checkOpts(defaults, opts) {
  if (opts !== void 0 && toStr.call(opts) !== "[object Object]")
    throw new Error("Options should be object or undefined");
  const merged = Object.assign(defaults, opts);
  return merged;
}
function wrapConstructor(hashCons) {
  const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
  const tmp = hashCons();
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = () => hashCons();
  return hashC;
}
function wrapXOFConstructorWithOpts(hashCons) {
  const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
  const tmp = hashCons({});
  hashC.outputLen = tmp.outputLen;
  hashC.blockLen = tmp.blockLen;
  hashC.create = (opts) => hashCons(opts);
  return hashC;
}
function randomBytes(bytesLength = 32) {
  if (crypto && typeof crypto.getRandomValues === "function") {
    return crypto.getRandomValues(new Uint8Array(bytesLength));
  }
  throw new Error("crypto.getRandomValues must be defined");
}

// node_modules/@noble/hashes/esm/hmac.js
var HMAC = class extends Hash {
  constructor(hash2, _key) {
    super();
    this.finished = false;
    this.destroyed = false;
    hash(hash2);
    const key = toBytes(_key);
    this.iHash = hash2.create();
    if (typeof this.iHash.update !== "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen;
    this.outputLen = this.iHash.outputLen;
    const blockLen = this.blockLen;
    const pad = new Uint8Array(blockLen);
    pad.set(key.length > blockLen ? hash2.create().update(key).digest() : key);
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54;
    this.iHash.update(pad);
    this.oHash = hash2.create();
    for (let i = 0; i < pad.length; i++)
      pad[i] ^= 54 ^ 92;
    this.oHash.update(pad);
    pad.fill(0);
  }
  update(buf) {
    exists(this);
    this.iHash.update(buf);
    return this;
  }
  digestInto(out) {
    exists(this);
    bytes(out, this.outputLen);
    this.finished = true;
    this.iHash.digestInto(out);
    this.oHash.update(out);
    this.oHash.digestInto(out);
    this.destroy();
  }
  digest() {
    const out = new Uint8Array(this.oHash.outputLen);
    this.digestInto(out);
    return out;
  }
  _cloneInto(to) {
    to || (to = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
    to = to;
    to.finished = finished;
    to.destroyed = destroyed;
    to.blockLen = blockLen;
    to.outputLen = outputLen;
    to.oHash = oHash._cloneInto(to.oHash);
    to.iHash = iHash._cloneInto(to.iHash);
    return to;
  }
  destroy() {
    this.destroyed = true;
    this.oHash.destroy();
    this.iHash.destroy();
  }
};
var hmac = (hash2, key, message) => new HMAC(hash2, key).update(message).digest();
hmac.create = (hash2, key) => new HMAC(hash2, key);

// node_modules/@noble/hashes/esm/pbkdf2.js
function pbkdf2Init(hash2, _password, _salt, _opts) {
  hash(hash2);
  const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
  const { c, dkLen, asyncTick } = opts;
  number(c);
  number(dkLen);
  number(asyncTick);
  if (c < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const password = toBytes(_password);
  const salt = toBytes(_salt);
  const DK = new Uint8Array(dkLen);
  const PRF = hmac.create(hash2, password);
  const PRFSalt = PRF._cloneInto().update(salt);
  return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
  PRF.destroy();
  PRFSalt.destroy();
  if (prfW)
    prfW.destroy();
  u.fill(0);
  return DK;
}
function pbkdf2(hash2, password, salt, opts) {
  const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash2, password, salt, opts);
  let prfW;
  const arr = new Uint8Array(4);
  const view = createView(arr);
  const u = new Uint8Array(PRF.outputLen);
  for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
    const Ti = DK.subarray(pos, pos + PRF.outputLen);
    view.setInt32(0, ti, false);
    (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
    Ti.set(u.subarray(0, Ti.length));
    for (let ui = 1; ui < c; ui++) {
      PRF._cloneInto(prfW).update(u).digestInto(u);
      for (let i = 0; i < Ti.length; i++)
        Ti[i] ^= u[i];
    }
  }
  return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}

// node_modules/@noble/hashes/esm/_sha2.js
function setBigUint64(view, byteOffset, value, isLE2) {
  if (typeof view.setBigUint64 === "function")
    return view.setBigUint64(byteOffset, value, isLE2);
  const _32n2 = BigInt(32);
  const _u32_max = BigInt(4294967295);
  const wh = Number(value >> _32n2 & _u32_max);
  const wl = Number(value & _u32_max);
  const h = isLE2 ? 4 : 0;
  const l = isLE2 ? 0 : 4;
  view.setUint32(byteOffset + h, wh, isLE2);
  view.setUint32(byteOffset + l, wl, isLE2);
}
var SHA2 = class extends Hash {
  constructor(blockLen, outputLen, padOffset, isLE2) {
    super();
    this.blockLen = blockLen;
    this.outputLen = outputLen;
    this.padOffset = padOffset;
    this.isLE = isLE2;
    this.finished = false;
    this.length = 0;
    this.pos = 0;
    this.destroyed = false;
    this.buffer = new Uint8Array(blockLen);
    this.view = createView(this.buffer);
  }
  update(data) {
    exists(this);
    const { view, buffer, blockLen } = this;
    data = toBytes(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      if (take === blockLen) {
        const dataView = createView(data);
        for (; blockLen <= len - pos; pos += blockLen)
          this.process(dataView, pos);
        continue;
      }
      buffer.set(data.subarray(pos, pos + take), this.pos);
      this.pos += take;
      pos += take;
      if (this.pos === blockLen) {
        this.process(view, 0);
        this.pos = 0;
      }
    }
    this.length += data.length;
    this.roundClean();
    return this;
  }
  digestInto(out) {
    exists(this);
    output(out, this);
    this.finished = true;
    const { buffer, view, blockLen, isLE: isLE2 } = this;
    let { pos } = this;
    buffer[pos++] = 128;
    this.buffer.subarray(pos).fill(0);
    if (this.padOffset > blockLen - pos) {
      this.process(view, 0);
      pos = 0;
    }
    for (let i = pos; i < blockLen; i++)
      buffer[i] = 0;
    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
    this.process(view, 0);
    const oview = createView(out);
    const len = this.outputLen;
    if (len % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const outLen = len / 4;
    const state = this.get();
    if (outLen > state.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let i = 0; i < outLen; i++)
      oview.setUint32(4 * i, state[i], isLE2);
  }
  digest() {
    const { buffer, outputLen } = this;
    this.digestInto(buffer);
    const res = buffer.slice(0, outputLen);
    this.destroy();
    return res;
  }
  _cloneInto(to) {
    to || (to = new this.constructor());
    to.set(...this.get());
    const { blockLen, buffer, length, finished, destroyed, pos } = this;
    to.length = length;
    to.pos = pos;
    to.finished = finished;
    to.destroyed = destroyed;
    if (length % blockLen)
      to.buffer.set(buffer);
    return to;
  }
};

// node_modules/@noble/hashes/esm/sha256.js
var Chi = (a, b2, c) => a & b2 ^ ~a & c;
var Maj = (a, b2, c) => a & b2 ^ a & c ^ b2 & c;
var SHA256_K = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]);
var IV = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]);
var SHA256_W = new Uint32Array(64);
var SHA256 = class extends SHA2 {
  constructor() {
    super(64, 32, 8, false);
    this.A = IV[0] | 0;
    this.B = IV[1] | 0;
    this.C = IV[2] | 0;
    this.D = IV[3] | 0;
    this.E = IV[4] | 0;
    this.F = IV[5] | 0;
    this.G = IV[6] | 0;
    this.H = IV[7] | 0;
  }
  get() {
    const { A, B, C, D, E, F, G, H } = this;
    return [A, B, C, D, E, F, G, H];
  }
  // prettier-ignore
  set(A, B, C, D, E, F, G, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G | 0;
    this.H = H | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      SHA256_W[i] = view.getUint32(offset, false);
    for (let i = 16; i < 64; i++) {
      const W15 = SHA256_W[i - 15];
      const W2 = SHA256_W[i - 2];
      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ W15 >>> 3;
      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ W2 >>> 10;
      SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
    }
    let { A, B, C, D, E, F, G, H } = this;
    for (let i = 0; i < 64; i++) {
      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
      const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
      const T2 = sigma0 + Maj(A, B, C) | 0;
      H = G;
      G = F;
      F = E;
      E = D + T1 | 0;
      D = C;
      C = B;
      B = A;
      A = T1 + T2 | 0;
    }
    A = A + this.A | 0;
    B = B + this.B | 0;
    C = C + this.C | 0;
    D = D + this.D | 0;
    E = E + this.E | 0;
    F = F + this.F | 0;
    G = G + this.G | 0;
    H = H + this.H | 0;
    this.set(A, B, C, D, E, F, G, H);
  }
  roundClean() {
    SHA256_W.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0);
    this.buffer.fill(0);
  }
};
var SHA224 = class extends SHA256 {
  constructor() {
    super();
    this.A = 3238371032 | 0;
    this.B = 914150663 | 0;
    this.C = 812702999 | 0;
    this.D = 4144912697 | 0;
    this.E = 4290775857 | 0;
    this.F = 1750603025 | 0;
    this.G = 1694076839 | 0;
    this.H = 3204075428 | 0;
    this.outputLen = 28;
  }
};
var sha256 = wrapConstructor(() => new SHA256());
var sha224 = wrapConstructor(() => new SHA224());

// node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = BigInt(2 ** 32 - 1);
var _32n = BigInt(32);
function fromBig(n2, le = false) {
  if (le)
    return { h: Number(n2 & U32_MASK64), l: Number(n2 >> _32n & U32_MASK64) };
  return { h: Number(n2 >> _32n & U32_MASK64) | 0, l: Number(n2 & U32_MASK64) | 0 };
}
function split(lst, le = false) {
  let Ah = new Uint32Array(lst.length);
  let Al = new Uint32Array(lst.length);
  for (let i = 0; i < lst.length; i++) {
    const { h, l } = fromBig(lst[i], le);
    [Ah[i], Al[i]] = [h, l];
  }
  return [Ah, Al];
}
var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
var shrSH = (h, _l, s) => h >>> s;
var shrSL = (h, l, s) => h << 32 - s | l >>> s;
var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
var rotr32H = (_h, l) => l;
var rotr32L = (h, _l) => h;
var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
function add(Ah, Al, Bh, Bl) {
  const l = (Al >>> 0) + (Bl >>> 0);
  return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
var u64 = {
  fromBig,
  split,
  toBig,
  shrSH,
  shrSL,
  rotrSH,
  rotrSL,
  rotrBH,
  rotrBL,
  rotr32H,
  rotr32L,
  rotlSH,
  rotlSL,
  rotlBH,
  rotlBL,
  add,
  add3L,
  add3H,
  add4L,
  add4H,
  add5H,
  add5L
};
var u64_default = u64;

// node_modules/@noble/hashes/esm/sha512.js
var [SHA512_Kh, SHA512_Kl] = (() => u64_default.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((n2) => BigInt(n2))))();
var SHA512_W_H = new Uint32Array(80);
var SHA512_W_L = new Uint32Array(80);
var SHA512 = class extends SHA2 {
  constructor() {
    super(128, 64, 16, false);
    this.Ah = 1779033703 | 0;
    this.Al = 4089235720 | 0;
    this.Bh = 3144134277 | 0;
    this.Bl = 2227873595 | 0;
    this.Ch = 1013904242 | 0;
    this.Cl = 4271175723 | 0;
    this.Dh = 2773480762 | 0;
    this.Dl = 1595750129 | 0;
    this.Eh = 1359893119 | 0;
    this.El = 2917565137 | 0;
    this.Fh = 2600822924 | 0;
    this.Fl = 725511199 | 0;
    this.Gh = 528734635 | 0;
    this.Gl = 4215389547 | 0;
    this.Hh = 1541459225 | 0;
    this.Hl = 327033209 | 0;
  }
  // prettier-ignore
  get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
  // prettier-ignore
  set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4) {
      SHA512_W_H[i] = view.getUint32(offset);
      SHA512_W_L[i] = view.getUint32(offset += 4);
    }
    for (let i = 16; i < 80; i++) {
      const W15h = SHA512_W_H[i - 15] | 0;
      const W15l = SHA512_W_L[i - 15] | 0;
      const s0h = u64_default.rotrSH(W15h, W15l, 1) ^ u64_default.rotrSH(W15h, W15l, 8) ^ u64_default.shrSH(W15h, W15l, 7);
      const s0l = u64_default.rotrSL(W15h, W15l, 1) ^ u64_default.rotrSL(W15h, W15l, 8) ^ u64_default.shrSL(W15h, W15l, 7);
      const W2h = SHA512_W_H[i - 2] | 0;
      const W2l = SHA512_W_L[i - 2] | 0;
      const s1h = u64_default.rotrSH(W2h, W2l, 19) ^ u64_default.rotrBH(W2h, W2l, 61) ^ u64_default.shrSH(W2h, W2l, 6);
      const s1l = u64_default.rotrSL(W2h, W2l, 19) ^ u64_default.rotrBL(W2h, W2l, 61) ^ u64_default.shrSL(W2h, W2l, 6);
      const SUMl = u64_default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
      const SUMh = u64_default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
      SHA512_W_H[i] = SUMh | 0;
      SHA512_W_L[i] = SUMl | 0;
    }
    let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    for (let i = 0; i < 80; i++) {
      const sigma1h = u64_default.rotrSH(Eh, El, 14) ^ u64_default.rotrSH(Eh, El, 18) ^ u64_default.rotrBH(Eh, El, 41);
      const sigma1l = u64_default.rotrSL(Eh, El, 14) ^ u64_default.rotrSL(Eh, El, 18) ^ u64_default.rotrBL(Eh, El, 41);
      const CHIh = Eh & Fh ^ ~Eh & Gh;
      const CHIl = El & Fl ^ ~El & Gl;
      const T1ll = u64_default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
      const T1h = u64_default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
      const T1l = T1ll | 0;
      const sigma0h = u64_default.rotrSH(Ah, Al, 28) ^ u64_default.rotrBH(Ah, Al, 34) ^ u64_default.rotrBH(Ah, Al, 39);
      const sigma0l = u64_default.rotrSL(Ah, Al, 28) ^ u64_default.rotrBL(Ah, Al, 34) ^ u64_default.rotrBL(Ah, Al, 39);
      const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
      const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
      Hh = Gh | 0;
      Hl = Gl | 0;
      Gh = Fh | 0;
      Gl = Fl | 0;
      Fh = Eh | 0;
      Fl = El | 0;
      ({ h: Eh, l: El } = u64_default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
      Dh = Ch | 0;
      Dl = Cl | 0;
      Ch = Bh | 0;
      Cl = Bl | 0;
      Bh = Ah | 0;
      Bl = Al | 0;
      const All = u64_default.add3L(T1l, sigma0l, MAJl);
      Ah = u64_default.add3H(All, T1h, sigma0h, MAJh);
      Al = All | 0;
    }
    ({ h: Ah, l: Al } = u64_default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
    ({ h: Bh, l: Bl } = u64_default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
    ({ h: Ch, l: Cl } = u64_default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
    ({ h: Dh, l: Dl } = u64_default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
    ({ h: Eh, l: El } = u64_default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
    ({ h: Fh, l: Fl } = u64_default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
    ({ h: Gh, l: Gl } = u64_default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
    ({ h: Hh, l: Hl } = u64_default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
    this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
  }
  roundClean() {
    SHA512_W_H.fill(0);
    SHA512_W_L.fill(0);
  }
  destroy() {
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
var SHA512_224 = class extends SHA512 {
  constructor() {
    super();
    this.Ah = 2352822216 | 0;
    this.Al = 424955298 | 0;
    this.Bh = 1944164710 | 0;
    this.Bl = 2312950998 | 0;
    this.Ch = 502970286 | 0;
    this.Cl = 855612546 | 0;
    this.Dh = 1738396948 | 0;
    this.Dl = 1479516111 | 0;
    this.Eh = 258812777 | 0;
    this.El = 2077511080 | 0;
    this.Fh = 2011393907 | 0;
    this.Fl = 79989058 | 0;
    this.Gh = 1067287976 | 0;
    this.Gl = 1780299464 | 0;
    this.Hh = 286451373 | 0;
    this.Hl = 2446758561 | 0;
    this.outputLen = 28;
  }
};
var SHA512_256 = class extends SHA512 {
  constructor() {
    super();
    this.Ah = 573645204 | 0;
    this.Al = 4230739756 | 0;
    this.Bh = 2673172387 | 0;
    this.Bl = 3360449730 | 0;
    this.Ch = 596883563 | 0;
    this.Cl = 1867755857 | 0;
    this.Dh = 2520282905 | 0;
    this.Dl = 1497426621 | 0;
    this.Eh = 2519219938 | 0;
    this.El = 2827943907 | 0;
    this.Fh = 3193839141 | 0;
    this.Fl = 1401305490 | 0;
    this.Gh = 721525244 | 0;
    this.Gl = 746961066 | 0;
    this.Hh = 246885852 | 0;
    this.Hl = 2177182882 | 0;
    this.outputLen = 32;
  }
};
var SHA384 = class extends SHA512 {
  constructor() {
    super();
    this.Ah = 3418070365 | 0;
    this.Al = 3238371032 | 0;
    this.Bh = 1654270250 | 0;
    this.Bl = 914150663 | 0;
    this.Ch = 2438529370 | 0;
    this.Cl = 812702999 | 0;
    this.Dh = 355462360 | 0;
    this.Dl = 4144912697 | 0;
    this.Eh = 1731405415 | 0;
    this.El = 4290775857 | 0;
    this.Fh = 2394180231 | 0;
    this.Fl = 1750603025 | 0;
    this.Gh = 3675008525 | 0;
    this.Gl = 1694076839 | 0;
    this.Hh = 1203062813 | 0;
    this.Hl = 3204075428 | 0;
    this.outputLen = 48;
  }
};
var sha512 = wrapConstructor(() => new SHA512());
var sha512_224 = wrapConstructor(() => new SHA512_224());
var sha512_256 = wrapConstructor(() => new SHA512_256());
var sha384 = wrapConstructor(() => new SHA384());

// node_modules/ethers/lib.esm/crypto/crypto-browser.js
function getGlobal() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("unable to locate global object");
}
var anyGlobal = getGlobal();
var crypto2 = anyGlobal.crypto || anyGlobal.msCrypto;
function createHash(algo) {
  switch (algo) {
    case "sha256":
      return sha256.create();
    case "sha512":
      return sha512.create();
  }
  assertArgument(false, "invalid hashing algorithm name", "algorithm", algo);
}
function createHmac(_algo, key) {
  const algo = { sha256, sha512 }[_algo];
  assertArgument(algo != null, "invalid hmac algorithm", "algorithm", _algo);
  return hmac.create(algo, key);
}
function pbkdf2Sync(password, salt, iterations, keylen, _algo) {
  const algo = { sha256, sha512 }[_algo];
  assertArgument(algo != null, "invalid pbkdf2 algorithm", "algorithm", _algo);
  return pbkdf2(algo, password, salt, { c: iterations, dkLen: keylen });
}
function randomBytes2(length) {
  assert(crypto2 != null, "platform does not support secure random numbers", "UNSUPPORTED_OPERATION", {
    operation: "randomBytes"
  });
  assertArgument(Number.isInteger(length) && length > 0 && length <= 1024, "invalid length", "length", length);
  const result = new Uint8Array(length);
  crypto2.getRandomValues(result);
  return result;
}

// node_modules/ethers/lib.esm/crypto/hmac.js
var locked2 = false;
var _computeHmac = function(algorithm, key, data) {
  return createHmac(algorithm, key).update(data).digest();
};
var __computeHmac = _computeHmac;
function computeHmac(algorithm, _key, _data4) {
  const key = getBytes(_key, "key");
  const data = getBytes(_data4, "data");
  return hexlify(__computeHmac(algorithm, key, data));
}
computeHmac._ = _computeHmac;
computeHmac.lock = function() {
  locked2 = true;
};
computeHmac.register = function(func) {
  if (locked2) {
    throw new Error("computeHmac is locked");
  }
  __computeHmac = func;
};
Object.freeze(computeHmac);

// node_modules/@noble/hashes/esm/sha3.js
var [SHA3_PI, SHA3_ROTL, _SHA3_IOTA] = [[], [], []];
var _0n = BigInt(0);
var _1n = BigInt(1);
var _2n = BigInt(2);
var _7n = BigInt(7);
var _256n = BigInt(256);
var _0x71n = BigInt(113);
for (let round = 0, R = _1n, x = 1, y = 0; round < 24; round++) {
  [x, y] = [y, (2 * x + 3 * y) % 5];
  SHA3_PI.push(2 * (5 * y + x));
  SHA3_ROTL.push((round + 1) * (round + 2) / 2 % 64);
  let t = _0n;
  for (let j = 0; j < 7; j++) {
    R = (R << _1n ^ (R >> _7n) * _0x71n) % _256n;
    if (R & _2n)
      t ^= _1n << (_1n << BigInt(j)) - _1n;
  }
  _SHA3_IOTA.push(t);
}
var [SHA3_IOTA_H, SHA3_IOTA_L] = split(_SHA3_IOTA, true);
var rotlH = (h, l, s) => s > 32 ? rotlBH(h, l, s) : rotlSH(h, l, s);
var rotlL = (h, l, s) => s > 32 ? rotlBL(h, l, s) : rotlSL(h, l, s);
function keccakP(s, rounds = 24) {
  const B = new Uint32Array(5 * 2);
  for (let round = 24 - rounds; round < 24; round++) {
    for (let x = 0; x < 10; x++)
      B[x] = s[x] ^ s[x + 10] ^ s[x + 20] ^ s[x + 30] ^ s[x + 40];
    for (let x = 0; x < 10; x += 2) {
      const idx1 = (x + 8) % 10;
      const idx0 = (x + 2) % 10;
      const B0 = B[idx0];
      const B1 = B[idx0 + 1];
      const Th = rotlH(B0, B1, 1) ^ B[idx1];
      const Tl = rotlL(B0, B1, 1) ^ B[idx1 + 1];
      for (let y = 0; y < 50; y += 10) {
        s[x + y] ^= Th;
        s[x + y + 1] ^= Tl;
      }
    }
    let curH = s[2];
    let curL = s[3];
    for (let t = 0; t < 24; t++) {
      const shift = SHA3_ROTL[t];
      const Th = rotlH(curH, curL, shift);
      const Tl = rotlL(curH, curL, shift);
      const PI = SHA3_PI[t];
      curH = s[PI];
      curL = s[PI + 1];
      s[PI] = Th;
      s[PI + 1] = Tl;
    }
    for (let y = 0; y < 50; y += 10) {
      for (let x = 0; x < 10; x++)
        B[x] = s[y + x];
      for (let x = 0; x < 10; x++)
        s[y + x] ^= ~B[(x + 2) % 10] & B[(x + 4) % 10];
    }
    s[0] ^= SHA3_IOTA_H[round];
    s[1] ^= SHA3_IOTA_L[round];
  }
  B.fill(0);
}
var Keccak = class _Keccak extends Hash {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(blockLen, suffix, outputLen, enableXOF = false, rounds = 24) {
    super();
    this.blockLen = blockLen;
    this.suffix = suffix;
    this.outputLen = outputLen;
    this.enableXOF = enableXOF;
    this.rounds = rounds;
    this.pos = 0;
    this.posOut = 0;
    this.finished = false;
    this.destroyed = false;
    number(outputLen);
    if (0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200);
    this.state32 = u32(this.state);
  }
  keccak() {
    keccakP(this.state32, this.rounds);
    this.posOut = 0;
    this.pos = 0;
  }
  update(data) {
    exists(this);
    const { blockLen, state } = this;
    data = toBytes(data);
    const len = data.length;
    for (let pos = 0; pos < len; ) {
      const take = Math.min(blockLen - this.pos, len - pos);
      for (let i = 0; i < take; i++)
        state[this.pos++] ^= data[pos++];
      if (this.pos === blockLen)
        this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = true;
    const { state, suffix, pos, blockLen } = this;
    state[pos] ^= suffix;
    if ((suffix & 128) !== 0 && pos === blockLen - 1)
      this.keccak();
    state[blockLen - 1] ^= 128;
    this.keccak();
  }
  writeInto(out) {
    exists(this, false);
    bytes(out);
    this.finish();
    const bufferOut = this.state;
    const { blockLen } = this;
    for (let pos = 0, len = out.length; pos < len; ) {
      if (this.posOut >= blockLen)
        this.keccak();
      const take = Math.min(blockLen - this.posOut, len - pos);
      out.set(bufferOut.subarray(this.posOut, this.posOut + take), pos);
      this.posOut += take;
      pos += take;
    }
    return out;
  }
  xofInto(out) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(out);
  }
  xof(bytes3) {
    number(bytes3);
    return this.xofInto(new Uint8Array(bytes3));
  }
  digestInto(out) {
    output(out, this);
    if (this.finished)
      throw new Error("digest() was already called");
    this.writeInto(out);
    this.destroy();
    return out;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = true;
    this.state.fill(0);
  }
  _cloneInto(to) {
    const { blockLen, suffix, outputLen, rounds, enableXOF } = this;
    to || (to = new _Keccak(blockLen, suffix, outputLen, enableXOF, rounds));
    to.state32.set(this.state32);
    to.pos = this.pos;
    to.posOut = this.posOut;
    to.finished = this.finished;
    to.rounds = rounds;
    to.suffix = suffix;
    to.outputLen = outputLen;
    to.enableXOF = enableXOF;
    to.destroyed = this.destroyed;
    return to;
  }
};
var gen = (suffix, blockLen, outputLen) => wrapConstructor(() => new Keccak(blockLen, suffix, outputLen));
var sha3_224 = gen(6, 144, 224 / 8);
var sha3_256 = gen(6, 136, 256 / 8);
var sha3_384 = gen(6, 104, 384 / 8);
var sha3_512 = gen(6, 72, 512 / 8);
var keccak_224 = gen(1, 144, 224 / 8);
var keccak_256 = gen(1, 136, 256 / 8);
var keccak_384 = gen(1, 104, 384 / 8);
var keccak_512 = gen(1, 72, 512 / 8);
var genShake = (suffix, blockLen, outputLen) => wrapXOFConstructorWithOpts((opts = {}) => new Keccak(blockLen, suffix, opts.dkLen === void 0 ? outputLen : opts.dkLen, true));
var shake128 = genShake(31, 168, 128 / 8);
var shake256 = genShake(31, 136, 256 / 8);

// node_modules/ethers/lib.esm/crypto/keccak.js
var locked3 = false;
var _keccak256 = function(data) {
  return keccak_256(data);
};
var __keccak256 = _keccak256;
function keccak256(_data4) {
  const data = getBytes(_data4, "data");
  return hexlify(__keccak256(data));
}
keccak256._ = _keccak256;
keccak256.lock = function() {
  locked3 = true;
};
keccak256.register = function(func) {
  if (locked3) {
    throw new TypeError("keccak256 is locked");
  }
  __keccak256 = func;
};
Object.freeze(keccak256);

// node_modules/@noble/hashes/esm/ripemd160.js
var Rho = new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
var Id = Uint8Array.from({ length: 16 }, (_, i) => i);
var Pi = Id.map((i) => (9 * i + 5) % 16);
var idxL = [Id];
var idxR = [Pi];
for (let i = 0; i < 4; i++)
  for (let j of [idxL, idxR])
    j.push(j[i].map((k) => Rho[k]));
var shifts = [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((i) => new Uint8Array(i));
var shiftsL = idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
var shiftsR = idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
var Kl = new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]);
var Kr = new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]);
var rotl = (word, shift) => word << shift | word >>> 32 - shift;
function f(group, x, y, z) {
  if (group === 0)
    return x ^ y ^ z;
  else if (group === 1)
    return x & y | ~x & z;
  else if (group === 2)
    return (x | ~y) ^ z;
  else if (group === 3)
    return x & z | y & ~z;
  else
    return x ^ (y | ~z);
}
var BUF = new Uint32Array(16);
var RIPEMD160 = class extends SHA2 {
  constructor() {
    super(64, 20, 8, true);
    this.h0 = 1732584193 | 0;
    this.h1 = 4023233417 | 0;
    this.h2 = 2562383102 | 0;
    this.h3 = 271733878 | 0;
    this.h4 = 3285377520 | 0;
  }
  get() {
    const { h0, h1, h2, h3, h4 } = this;
    return [h0, h1, h2, h3, h4];
  }
  set(h0, h1, h2, h3, h4) {
    this.h0 = h0 | 0;
    this.h1 = h1 | 0;
    this.h2 = h2 | 0;
    this.h3 = h3 | 0;
    this.h4 = h4 | 0;
  }
  process(view, offset) {
    for (let i = 0; i < 16; i++, offset += 4)
      BUF[i] = view.getUint32(offset, true);
    let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
    for (let group = 0; group < 5; group++) {
      const rGroup = 4 - group;
      const hbl = Kl[group], hbr = Kr[group];
      const rl = idxL[group], rr = idxR[group];
      const sl = shiftsL[group], sr = shiftsR[group];
      for (let i = 0; i < 16; i++) {
        const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
        al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
      }
      for (let i = 0; i < 16; i++) {
        const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;
        ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr;
      }
    }
    this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
  }
  roundClean() {
    BUF.fill(0);
  }
  destroy() {
    this.destroyed = true;
    this.buffer.fill(0);
    this.set(0, 0, 0, 0, 0);
  }
};
var ripemd160 = wrapConstructor(() => new RIPEMD160());

// node_modules/ethers/lib.esm/crypto/ripemd160.js
var locked4 = false;
var _ripemd160 = function(data) {
  return ripemd160(data);
};
var __ripemd160 = _ripemd160;
function ripemd1602(_data4) {
  const data = getBytes(_data4, "data");
  return hexlify(__ripemd160(data));
}
ripemd1602._ = _ripemd160;
ripemd1602.lock = function() {
  locked4 = true;
};
ripemd1602.register = function(func) {
  if (locked4) {
    throw new TypeError("ripemd160 is locked");
  }
  __ripemd160 = func;
};
Object.freeze(ripemd1602);

// node_modules/ethers/lib.esm/crypto/pbkdf2.js
var locked5 = false;
var _pbkdf2 = function(password, salt, iterations, keylen, algo) {
  return pbkdf2Sync(password, salt, iterations, keylen, algo);
};
var __pbkdf2 = _pbkdf2;
function pbkdf22(_password, _salt, iterations, keylen, algo) {
  const password = getBytes(_password, "password");
  const salt = getBytes(_salt, "salt");
  return hexlify(__pbkdf2(password, salt, iterations, keylen, algo));
}
pbkdf22._ = _pbkdf2;
pbkdf22.lock = function() {
  locked5 = true;
};
pbkdf22.register = function(func) {
  if (locked5) {
    throw new Error("pbkdf2 is locked");
  }
  __pbkdf2 = func;
};
Object.freeze(pbkdf22);

// node_modules/ethers/lib.esm/crypto/random.js
var locked6 = false;
var _randomBytes = function(length) {
  return new Uint8Array(randomBytes2(length));
};
var __randomBytes = _randomBytes;
function randomBytes3(length) {
  return __randomBytes(length);
}
randomBytes3._ = _randomBytes;
randomBytes3.lock = function() {
  locked6 = true;
};
randomBytes3.register = function(func) {
  if (locked6) {
    throw new Error("randomBytes is locked");
  }
  __randomBytes = func;
};
Object.freeze(randomBytes3);

// node_modules/@noble/hashes/esm/scrypt.js
var rotl2 = (a, b2) => a << b2 | a >>> 32 - b2;
function XorAndSalsa(prev, pi, input, ii, out, oi) {
  let y00 = prev[pi++] ^ input[ii++], y01 = prev[pi++] ^ input[ii++];
  let y02 = prev[pi++] ^ input[ii++], y03 = prev[pi++] ^ input[ii++];
  let y04 = prev[pi++] ^ input[ii++], y05 = prev[pi++] ^ input[ii++];
  let y06 = prev[pi++] ^ input[ii++], y07 = prev[pi++] ^ input[ii++];
  let y08 = prev[pi++] ^ input[ii++], y09 = prev[pi++] ^ input[ii++];
  let y10 = prev[pi++] ^ input[ii++], y11 = prev[pi++] ^ input[ii++];
  let y12 = prev[pi++] ^ input[ii++], y13 = prev[pi++] ^ input[ii++];
  let y14 = prev[pi++] ^ input[ii++], y15 = prev[pi++] ^ input[ii++];
  let x00 = y00, x01 = y01, x02 = y02, x03 = y03, x04 = y04, x05 = y05, x06 = y06, x07 = y07, x08 = y08, x09 = y09, x10 = y10, x11 = y11, x12 = y12, x13 = y13, x14 = y14, x15 = y15;
  for (let i = 0; i < 8; i += 2) {
    x04 ^= rotl2(x00 + x12 | 0, 7);
    x08 ^= rotl2(x04 + x00 | 0, 9);
    x12 ^= rotl2(x08 + x04 | 0, 13);
    x00 ^= rotl2(x12 + x08 | 0, 18);
    x09 ^= rotl2(x05 + x01 | 0, 7);
    x13 ^= rotl2(x09 + x05 | 0, 9);
    x01 ^= rotl2(x13 + x09 | 0, 13);
    x05 ^= rotl2(x01 + x13 | 0, 18);
    x14 ^= rotl2(x10 + x06 | 0, 7);
    x02 ^= rotl2(x14 + x10 | 0, 9);
    x06 ^= rotl2(x02 + x14 | 0, 13);
    x10 ^= rotl2(x06 + x02 | 0, 18);
    x03 ^= rotl2(x15 + x11 | 0, 7);
    x07 ^= rotl2(x03 + x15 | 0, 9);
    x11 ^= rotl2(x07 + x03 | 0, 13);
    x15 ^= rotl2(x11 + x07 | 0, 18);
    x01 ^= rotl2(x00 + x03 | 0, 7);
    x02 ^= rotl2(x01 + x00 | 0, 9);
    x03 ^= rotl2(x02 + x01 | 0, 13);
    x00 ^= rotl2(x03 + x02 | 0, 18);
    x06 ^= rotl2(x05 + x04 | 0, 7);
    x07 ^= rotl2(x06 + x05 | 0, 9);
    x04 ^= rotl2(x07 + x06 | 0, 13);
    x05 ^= rotl2(x04 + x07 | 0, 18);
    x11 ^= rotl2(x10 + x09 | 0, 7);
    x08 ^= rotl2(x11 + x10 | 0, 9);
    x09 ^= rotl2(x08 + x11 | 0, 13);
    x10 ^= rotl2(x09 + x08 | 0, 18);
    x12 ^= rotl2(x15 + x14 | 0, 7);
    x13 ^= rotl2(x12 + x15 | 0, 9);
    x14 ^= rotl2(x13 + x12 | 0, 13);
    x15 ^= rotl2(x14 + x13 | 0, 18);
  }
  out[oi++] = y00 + x00 | 0;
  out[oi++] = y01 + x01 | 0;
  out[oi++] = y02 + x02 | 0;
  out[oi++] = y03 + x03 | 0;
  out[oi++] = y04 + x04 | 0;
  out[oi++] = y05 + x05 | 0;
  out[oi++] = y06 + x06 | 0;
  out[oi++] = y07 + x07 | 0;
  out[oi++] = y08 + x08 | 0;
  out[oi++] = y09 + x09 | 0;
  out[oi++] = y10 + x10 | 0;
  out[oi++] = y11 + x11 | 0;
  out[oi++] = y12 + x12 | 0;
  out[oi++] = y13 + x13 | 0;
  out[oi++] = y14 + x14 | 0;
  out[oi++] = y15 + x15 | 0;
}
function BlockMix(input, ii, out, oi, r2) {
  let head = oi + 0;
  let tail = oi + 16 * r2;
  for (let i = 0; i < 16; i++)
    out[tail + i] = input[ii + (2 * r2 - 1) * 16 + i];
  for (let i = 0; i < r2; i++, head += 16, ii += 16) {
    XorAndSalsa(out, tail, input, ii, out, head);
    if (i > 0)
      tail += 16;
    XorAndSalsa(out, head, input, ii += 16, out, tail);
  }
}
function scryptInit(password, salt, _opts) {
  const opts = checkOpts({
    dkLen: 32,
    asyncTick: 10,
    maxmem: 1024 ** 3 + 1024
  }, _opts);
  const { N: N3, r: r2, p, dkLen, asyncTick, maxmem, onProgress } = opts;
  number(N3);
  number(r2);
  number(p);
  number(dkLen);
  number(asyncTick);
  number(maxmem);
  if (onProgress !== void 0 && typeof onProgress !== "function")
    throw new Error("progressCb should be function");
  const blockSize = 128 * r2;
  const blockSize32 = blockSize / 4;
  if (N3 <= 1 || (N3 & N3 - 1) !== 0 || N3 >= 2 ** (blockSize / 8) || N3 > 2 ** 32) {
    throw new Error("Scrypt: N must be larger than 1, a power of 2, less than 2^(128 * r / 8) and less than 2^32");
  }
  if (p < 0 || p > (2 ** 32 - 1) * 32 / blockSize) {
    throw new Error("Scrypt: p must be a positive integer less than or equal to ((2^32 - 1) * 32) / (128 * r)");
  }
  if (dkLen < 0 || dkLen > (2 ** 32 - 1) * 32) {
    throw new Error("Scrypt: dkLen should be positive integer less than or equal to (2^32 - 1) * 32");
  }
  const memUsed = blockSize * (N3 + p);
  if (memUsed > maxmem) {
    throw new Error(`Scrypt: parameters too large, ${memUsed} (128 * r * (N + p)) > ${maxmem} (maxmem)`);
  }
  const B = pbkdf2(sha256, password, salt, { c: 1, dkLen: blockSize * p });
  const B32 = u32(B);
  const V = u32(new Uint8Array(blockSize * N3));
  const tmp = u32(new Uint8Array(blockSize));
  let blockMixCb = () => {
  };
  if (onProgress) {
    const totalBlockMix = 2 * N3 * p;
    const callbackPer = Math.max(Math.floor(totalBlockMix / 1e4), 1);
    let blockMixCnt = 0;
    blockMixCb = () => {
      blockMixCnt++;
      if (onProgress && (!(blockMixCnt % callbackPer) || blockMixCnt === totalBlockMix))
        onProgress(blockMixCnt / totalBlockMix);
    };
  }
  return { N: N3, r: r2, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick };
}
function scryptOutput(password, dkLen, B, V, tmp) {
  const res = pbkdf2(sha256, password, B, { c: 1, dkLen });
  B.fill(0);
  V.fill(0);
  tmp.fill(0);
  return res;
}
function scrypt(password, salt, opts) {
  const { N: N3, r: r2, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb } = scryptInit(password, salt, opts);
  for (let pi = 0; pi < p; pi++) {
    const Pi2 = blockSize32 * pi;
    for (let i = 0; i < blockSize32; i++)
      V[i] = B32[Pi2 + i];
    for (let i = 0, pos = 0; i < N3 - 1; i++) {
      BlockMix(V, pos, V, pos += blockSize32, r2);
      blockMixCb();
    }
    BlockMix(V, (N3 - 1) * blockSize32, B32, Pi2, r2);
    blockMixCb();
    for (let i = 0; i < N3; i++) {
      const j = B32[Pi2 + blockSize32 - 16] % N3;
      for (let k = 0; k < blockSize32; k++)
        tmp[k] = B32[Pi2 + k] ^ V[j * blockSize32 + k];
      BlockMix(tmp, 0, B32, Pi2, r2);
      blockMixCb();
    }
  }
  return scryptOutput(password, dkLen, B, V, tmp);
}
async function scryptAsync(password, salt, opts) {
  const { N: N3, r: r2, p, dkLen, blockSize32, V, B32, B, tmp, blockMixCb, asyncTick } = scryptInit(password, salt, opts);
  for (let pi = 0; pi < p; pi++) {
    const Pi2 = blockSize32 * pi;
    for (let i = 0; i < blockSize32; i++)
      V[i] = B32[Pi2 + i];
    let pos = 0;
    await asyncLoop(N3 - 1, asyncTick, () => {
      BlockMix(V, pos, V, pos += blockSize32, r2);
      blockMixCb();
    });
    BlockMix(V, (N3 - 1) * blockSize32, B32, Pi2, r2);
    blockMixCb();
    await asyncLoop(N3, asyncTick, () => {
      const j = B32[Pi2 + blockSize32 - 16] % N3;
      for (let k = 0; k < blockSize32; k++)
        tmp[k] = B32[Pi2 + k] ^ V[j * blockSize32 + k];
      BlockMix(tmp, 0, B32, Pi2, r2);
      blockMixCb();
    });
  }
  return scryptOutput(password, dkLen, B, V, tmp);
}

// node_modules/ethers/lib.esm/crypto/scrypt.js
var lockedSync = false;
var lockedAsync = false;
var _scryptAsync = async function(passwd, salt, N3, r2, p, dkLen, onProgress) {
  return await scryptAsync(passwd, salt, { N: N3, r: r2, p, dkLen, onProgress });
};
var _scryptSync = function(passwd, salt, N3, r2, p, dkLen) {
  return scrypt(passwd, salt, { N: N3, r: r2, p, dkLen });
};
var __scryptAsync = _scryptAsync;
var __scryptSync = _scryptSync;
async function scrypt2(_passwd, _salt, N3, r2, p, dkLen, progress) {
  const passwd = getBytes(_passwd, "passwd");
  const salt = getBytes(_salt, "salt");
  return hexlify(await __scryptAsync(passwd, salt, N3, r2, p, dkLen, progress));
}
scrypt2._ = _scryptAsync;
scrypt2.lock = function() {
  lockedAsync = true;
};
scrypt2.register = function(func) {
  if (lockedAsync) {
    throw new Error("scrypt is locked");
  }
  __scryptAsync = func;
};
Object.freeze(scrypt2);
function scryptSync(_passwd, _salt, N3, r2, p, dkLen) {
  const passwd = getBytes(_passwd, "passwd");
  const salt = getBytes(_salt, "salt");
  return hexlify(__scryptSync(passwd, salt, N3, r2, p, dkLen));
}
scryptSync._ = _scryptSync;
scryptSync.lock = function() {
  lockedSync = true;
};
scryptSync.register = function(func) {
  if (lockedSync) {
    throw new Error("scryptSync is locked");
  }
  __scryptSync = func;
};
Object.freeze(scryptSync);

// node_modules/ethers/lib.esm/crypto/sha2.js
var _sha256 = function(data) {
  return createHash("sha256").update(data).digest();
};
var _sha512 = function(data) {
  return createHash("sha512").update(data).digest();
};
var __sha256 = _sha256;
var __sha512 = _sha512;
var locked256 = false;
var locked512 = false;
function sha2562(_data4) {
  const data = getBytes(_data4, "data");
  return hexlify(__sha256(data));
}
sha2562._ = _sha256;
sha2562.lock = function() {
  locked256 = true;
};
sha2562.register = function(func) {
  if (locked256) {
    throw new Error("sha256 is locked");
  }
  __sha256 = func;
};
Object.freeze(sha2562);
function sha5122(_data4) {
  const data = getBytes(_data4, "data");
  return hexlify(__sha512(data));
}
sha5122._ = _sha512;
sha5122.lock = function() {
  locked512 = true;
};
sha5122.register = function(func) {
  if (locked512) {
    throw new Error("sha512 is locked");
  }
  __sha512 = func;
};
Object.freeze(sha2562);

// node_modules/@noble/curves/esm/abstract/utils.js
var utils_exports = {};
__export(utils_exports, {
  bitGet: () => bitGet,
  bitLen: () => bitLen,
  bitMask: () => bitMask,
  bitSet: () => bitSet,
  bytesToHex: () => bytesToHex,
  bytesToNumberBE: () => bytesToNumberBE,
  bytesToNumberLE: () => bytesToNumberLE,
  concatBytes: () => concatBytes2,
  createHmacDrbg: () => createHmacDrbg,
  ensureBytes: () => ensureBytes,
  equalBytes: () => equalBytes,
  hexToBytes: () => hexToBytes,
  hexToNumber: () => hexToNumber,
  numberToBytesBE: () => numberToBytesBE,
  numberToBytesLE: () => numberToBytesLE,
  numberToHexUnpadded: () => numberToHexUnpadded,
  numberToVarBytesBE: () => numberToVarBytesBE,
  utf8ToBytes: () => utf8ToBytes2,
  validateObject: () => validateObject
});
var _0n2 = BigInt(0);
var _1n2 = BigInt(1);
var _2n2 = BigInt(2);
var u8a2 = (a) => a instanceof Uint8Array;
var hexes2 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
function bytesToHex(bytes3) {
  if (!u8a2(bytes3))
    throw new Error("Uint8Array expected");
  let hex = "";
  for (let i = 0; i < bytes3.length; i++) {
    hex += hexes2[bytes3[i]];
  }
  return hex;
}
function numberToHexUnpadded(num) {
  const hex = num.toString(16);
  return hex.length & 1 ? `0${hex}` : hex;
}
function hexToNumber(hex) {
  if (typeof hex !== "string")
    throw new Error("hex string expected, got " + typeof hex);
  return BigInt(hex === "" ? "0" : `0x${hex}`);
}
function hexToBytes(hex) {
  if (typeof hex !== "string")
    throw new Error("hex string expected, got " + typeof hex);
  const len = hex.length;
  if (len % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + len);
  const array = new Uint8Array(len / 2);
  for (let i = 0; i < array.length; i++) {
    const j = i * 2;
    const hexByte = hex.slice(j, j + 2);
    const byte = Number.parseInt(hexByte, 16);
    if (Number.isNaN(byte) || byte < 0)
      throw new Error("Invalid byte sequence");
    array[i] = byte;
  }
  return array;
}
function bytesToNumberBE(bytes3) {
  return hexToNumber(bytesToHex(bytes3));
}
function bytesToNumberLE(bytes3) {
  if (!u8a2(bytes3))
    throw new Error("Uint8Array expected");
  return hexToNumber(bytesToHex(Uint8Array.from(bytes3).reverse()));
}
function numberToBytesBE(n2, len) {
  return hexToBytes(n2.toString(16).padStart(len * 2, "0"));
}
function numberToBytesLE(n2, len) {
  return numberToBytesBE(n2, len).reverse();
}
function numberToVarBytesBE(n2) {
  return hexToBytes(numberToHexUnpadded(n2));
}
function ensureBytes(title, hex, expectedLength) {
  let res;
  if (typeof hex === "string") {
    try {
      res = hexToBytes(hex);
    } catch (e) {
      throw new Error(`${title} must be valid hex string, got "${hex}". Cause: ${e}`);
    }
  } else if (u8a2(hex)) {
    res = Uint8Array.from(hex);
  } else {
    throw new Error(`${title} must be hex string or Uint8Array`);
  }
  const len = res.length;
  if (typeof expectedLength === "number" && len !== expectedLength)
    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);
  return res;
}
function concatBytes2(...arrays) {
  const r2 = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
  let pad = 0;
  arrays.forEach((a) => {
    if (!u8a2(a))
      throw new Error("Uint8Array expected");
    r2.set(a, pad);
    pad += a.length;
  });
  return r2;
}
function equalBytes(b1, b2) {
  if (b1.length !== b2.length)
    return false;
  for (let i = 0; i < b1.length; i++)
    if (b1[i] !== b2[i])
      return false;
  return true;
}
function utf8ToBytes2(str) {
  if (typeof str !== "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
  return new Uint8Array(new TextEncoder().encode(str));
}
function bitLen(n2) {
  let len;
  for (len = 0; n2 > _0n2; n2 >>= _1n2, len += 1)
    ;
  return len;
}
function bitGet(n2, pos) {
  return n2 >> BigInt(pos) & _1n2;
}
var bitSet = (n2, pos, value) => {
  return n2 | (value ? _1n2 : _0n2) << BigInt(pos);
};
var bitMask = (n2) => (_2n2 << BigInt(n2 - 1)) - _1n2;
var u8n = (data) => new Uint8Array(data);
var u8fr = (arr) => Uint8Array.from(arr);
function createHmacDrbg(hashLen, qByteLen, hmacFn) {
  if (typeof hashLen !== "number" || hashLen < 2)
    throw new Error("hashLen must be a number");
  if (typeof qByteLen !== "number" || qByteLen < 2)
    throw new Error("qByteLen must be a number");
  if (typeof hmacFn !== "function")
    throw new Error("hmacFn must be a function");
  let v = u8n(hashLen);
  let k = u8n(hashLen);
  let i = 0;
  const reset = () => {
    v.fill(1);
    k.fill(0);
    i = 0;
  };
  const h = (...b2) => hmacFn(k, v, ...b2);
  const reseed = (seed = u8n()) => {
    k = h(u8fr([0]), seed);
    v = h();
    if (seed.length === 0)
      return;
    k = h(u8fr([1]), seed);
    v = h();
  };
  const gen2 = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let len = 0;
    const out = [];
    while (len < qByteLen) {
      v = h();
      const sl = v.slice();
      out.push(sl);
      len += v.length;
    }
    return concatBytes2(...out);
  };
  const genUntil = (seed, pred) => {
    reset();
    reseed(seed);
    let res = void 0;
    while (!(res = pred(gen2())))
      reseed();
    reset();
    return res;
  };
  return genUntil;
}
var validatorFns = {
  bigint: (val) => typeof val === "bigint",
  function: (val) => typeof val === "function",
  boolean: (val) => typeof val === "boolean",
  string: (val) => typeof val === "string",
  stringOrUint8Array: (val) => typeof val === "string" || val instanceof Uint8Array,
  isSafeInteger: (val) => Number.isSafeInteger(val),
  array: (val) => Array.isArray(val),
  field: (val, object2) => object2.Fp.isValid(val),
  hash: (val) => typeof val === "function" && Number.isSafeInteger(val.outputLen)
};
function validateObject(object2, validators, optValidators = {}) {
  const checkField = (fieldName, type, isOptional) => {
    const checkVal = validatorFns[type];
    if (typeof checkVal !== "function")
      throw new Error(`Invalid validator "${type}", expected function`);
    const val = object2[fieldName];
    if (isOptional && val === void 0)
      return;
    if (!checkVal(val, object2)) {
      throw new Error(`Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`);
    }
  };
  for (const [fieldName, type] of Object.entries(validators))
    checkField(fieldName, type, false);
  for (const [fieldName, type] of Object.entries(optValidators))
    checkField(fieldName, type, true);
  return object2;
}

// node_modules/@noble/curves/esm/abstract/modular.js
var _0n3 = BigInt(0);
var _1n3 = BigInt(1);
var _2n3 = BigInt(2);
var _3n = BigInt(3);
var _4n = BigInt(4);
var _5n = BigInt(5);
var _8n = BigInt(8);
var _9n = BigInt(9);
var _16n = BigInt(16);
function mod(a, b2) {
  const result = a % b2;
  return result >= _0n3 ? result : b2 + result;
}
function pow(num, power, modulo) {
  if (modulo <= _0n3 || power < _0n3)
    throw new Error("Expected power/modulo > 0");
  if (modulo === _1n3)
    return _0n3;
  let res = _1n3;
  while (power > _0n3) {
    if (power & _1n3)
      res = res * num % modulo;
    num = num * num % modulo;
    power >>= _1n3;
  }
  return res;
}
function pow2(x, power, modulo) {
  let res = x;
  while (power-- > _0n3) {
    res *= res;
    res %= modulo;
  }
  return res;
}
function invert(number2, modulo) {
  if (number2 === _0n3 || modulo <= _0n3) {
    throw new Error(`invert: expected positive integers, got n=${number2} mod=${modulo}`);
  }
  let a = mod(number2, modulo);
  let b2 = modulo;
  let x = _0n3, y = _1n3, u = _1n3, v = _0n3;
  while (a !== _0n3) {
    const q = b2 / a;
    const r2 = b2 % a;
    const m = x - u * q;
    const n2 = y - v * q;
    b2 = a, a = r2, x = u, y = v, u = m, v = n2;
  }
  const gcd = b2;
  if (gcd !== _1n3)
    throw new Error("invert: does not exist");
  return mod(x, modulo);
}
function tonelliShanks(P) {
  const legendreC = (P - _1n3) / _2n3;
  let Q, S, Z;
  for (Q = P - _1n3, S = 0; Q % _2n3 === _0n3; Q /= _2n3, S++)
    ;
  for (Z = _2n3; Z < P && pow(Z, legendreC, P) !== P - _1n3; Z++)
    ;
  if (S === 1) {
    const p1div4 = (P + _1n3) / _4n;
    return function tonelliFast(Fp2, n2) {
      const root = Fp2.pow(n2, p1div4);
      if (!Fp2.eql(Fp2.sqr(root), n2))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  const Q1div2 = (Q + _1n3) / _2n3;
  return function tonelliSlow(Fp2, n2) {
    if (Fp2.pow(n2, legendreC) === Fp2.neg(Fp2.ONE))
      throw new Error("Cannot find square root");
    let r2 = S;
    let g = Fp2.pow(Fp2.mul(Fp2.ONE, Z), Q);
    let x = Fp2.pow(n2, Q1div2);
    let b2 = Fp2.pow(n2, Q);
    while (!Fp2.eql(b2, Fp2.ONE)) {
      if (Fp2.eql(b2, Fp2.ZERO))
        return Fp2.ZERO;
      let m = 1;
      for (let t2 = Fp2.sqr(b2); m < r2; m++) {
        if (Fp2.eql(t2, Fp2.ONE))
          break;
        t2 = Fp2.sqr(t2);
      }
      const ge2 = Fp2.pow(g, _1n3 << BigInt(r2 - m - 1));
      g = Fp2.sqr(ge2);
      x = Fp2.mul(x, ge2);
      b2 = Fp2.mul(b2, g);
      r2 = m;
    }
    return x;
  };
}
function FpSqrt(P) {
  if (P % _4n === _3n) {
    const p1div4 = (P + _1n3) / _4n;
    return function sqrt3mod4(Fp2, n2) {
      const root = Fp2.pow(n2, p1div4);
      if (!Fp2.eql(Fp2.sqr(root), n2))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _8n === _5n) {
    const c1 = (P - _5n) / _8n;
    return function sqrt5mod8(Fp2, n2) {
      const n22 = Fp2.mul(n2, _2n3);
      const v = Fp2.pow(n22, c1);
      const nv = Fp2.mul(n2, v);
      const i = Fp2.mul(Fp2.mul(nv, _2n3), v);
      const root = Fp2.mul(nv, Fp2.sub(i, Fp2.ONE));
      if (!Fp2.eql(Fp2.sqr(root), n2))
        throw new Error("Cannot find square root");
      return root;
    };
  }
  if (P % _16n === _9n) {
  }
  return tonelliShanks(P);
}
var FIELD_FIELDS = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function validateField(field) {
  const initial = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  };
  const opts = FIELD_FIELDS.reduce((map, val) => {
    map[val] = "function";
    return map;
  }, initial);
  return validateObject(field, opts);
}
function FpPow(f2, num, power) {
  if (power < _0n3)
    throw new Error("Expected power > 0");
  if (power === _0n3)
    return f2.ONE;
  if (power === _1n3)
    return num;
  let p = f2.ONE;
  let d = num;
  while (power > _0n3) {
    if (power & _1n3)
      p = f2.mul(p, d);
    d = f2.sqr(d);
    power >>= _1n3;
  }
  return p;
}
function FpInvertBatch(f2, nums) {
  const tmp = new Array(nums.length);
  const lastMultiplied = nums.reduce((acc, num, i) => {
    if (f2.is0(num))
      return acc;
    tmp[i] = acc;
    return f2.mul(acc, num);
  }, f2.ONE);
  const inverted = f2.inv(lastMultiplied);
  nums.reduceRight((acc, num, i) => {
    if (f2.is0(num))
      return acc;
    tmp[i] = f2.mul(acc, tmp[i]);
    return f2.mul(acc, num);
  }, inverted);
  return tmp;
}
function nLength(n2, nBitLength) {
  const _nBitLength = nBitLength !== void 0 ? nBitLength : n2.toString(2).length;
  const nByteLength = Math.ceil(_nBitLength / 8);
  return { nBitLength: _nBitLength, nByteLength };
}
function Field(ORDER, bitLen2, isLE2 = false, redef = {}) {
  if (ORDER <= _0n3)
    throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);
  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen2);
  if (BYTES > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const sqrtP = FpSqrt(ORDER);
  const f2 = Object.freeze({
    ORDER,
    BITS,
    BYTES,
    MASK: bitMask(BITS),
    ZERO: _0n3,
    ONE: _1n3,
    create: (num) => mod(num, ORDER),
    isValid: (num) => {
      if (typeof num !== "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);
      return _0n3 <= num && num < ORDER;
    },
    is0: (num) => num === _0n3,
    isOdd: (num) => (num & _1n3) === _1n3,
    neg: (num) => mod(-num, ORDER),
    eql: (lhs, rhs) => lhs === rhs,
    sqr: (num) => mod(num * num, ORDER),
    add: (lhs, rhs) => mod(lhs + rhs, ORDER),
    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),
    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),
    pow: (num, power) => FpPow(f2, num, power),
    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),
    // Same as above, but doesn't normalize
    sqrN: (num) => num * num,
    addN: (lhs, rhs) => lhs + rhs,
    subN: (lhs, rhs) => lhs - rhs,
    mulN: (lhs, rhs) => lhs * rhs,
    inv: (num) => invert(num, ORDER),
    sqrt: redef.sqrt || ((n2) => sqrtP(f2, n2)),
    invertBatch: (lst) => FpInvertBatch(f2, lst),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (a, b2, c) => c ? b2 : a,
    toBytes: (num) => isLE2 ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES),
    fromBytes: (bytes3) => {
      if (bytes3.length !== BYTES)
        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes3.length}`);
      return isLE2 ? bytesToNumberLE(bytes3) : bytesToNumberBE(bytes3);
    }
  });
  return Object.freeze(f2);
}
function getFieldBytesLength(fieldOrder) {
  if (typeof fieldOrder !== "bigint")
    throw new Error("field order must be bigint");
  const bitLength = fieldOrder.toString(2).length;
  return Math.ceil(bitLength / 8);
}
function getMinHashLength(fieldOrder) {
  const length = getFieldBytesLength(fieldOrder);
  return length + Math.ceil(length / 2);
}
function mapHashToField(key, fieldOrder, isLE2 = false) {
  const len = key.length;
  const fieldLen = getFieldBytesLength(fieldOrder);
  const minLen = getMinHashLength(fieldOrder);
  if (len < 16 || len < minLen || len > 1024)
    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);
  const num = isLE2 ? bytesToNumberBE(key) : bytesToNumberLE(key);
  const reduced = mod(num, fieldOrder - _1n3) + _1n3;
  return isLE2 ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);
}

// node_modules/@noble/curves/esm/abstract/curve.js
var _0n4 = BigInt(0);
var _1n4 = BigInt(1);
function wNAF(c, bits) {
  const constTimeNegate = (condition, item) => {
    const neg = item.negate();
    return condition ? neg : item;
  };
  const opts = (W) => {
    const windows = Math.ceil(bits / W) + 1;
    const windowSize = 2 ** (W - 1);
    return { windows, windowSize };
  };
  return {
    constTimeNegate,
    // non-const time multiplication ladder
    unsafeLadder(elm, n2) {
      let p = c.ZERO;
      let d = elm;
      while (n2 > _0n4) {
        if (n2 & _1n4)
          p = p.add(d);
        d = d.double();
        n2 >>= _1n4;
      }
      return p;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(elm, W) {
      const { windows, windowSize } = opts(W);
      const points = [];
      let p = elm;
      let base = p;
      for (let window2 = 0; window2 < windows; window2++) {
        base = p;
        points.push(base);
        for (let i = 1; i < windowSize; i++) {
          base = base.add(p);
          points.push(base);
        }
        p = base.double();
      }
      return points;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(W, precomputes, n2) {
      const { windows, windowSize } = opts(W);
      let p = c.ZERO;
      let f2 = c.BASE;
      const mask2 = BigInt(2 ** W - 1);
      const maxNumber = 2 ** W;
      const shiftBy = BigInt(W);
      for (let window2 = 0; window2 < windows; window2++) {
        const offset = window2 * windowSize;
        let wbits = Number(n2 & mask2);
        n2 >>= shiftBy;
        if (wbits > windowSize) {
          wbits -= maxNumber;
          n2 += _1n4;
        }
        const offset1 = offset;
        const offset2 = offset + Math.abs(wbits) - 1;
        const cond1 = window2 % 2 !== 0;
        const cond2 = wbits < 0;
        if (wbits === 0) {
          f2 = f2.add(constTimeNegate(cond1, precomputes[offset1]));
        } else {
          p = p.add(constTimeNegate(cond2, precomputes[offset2]));
        }
      }
      return { p, f: f2 };
    },
    wNAFCached(P, precomputesMap, n2, transform) {
      const W = P._WINDOW_SIZE || 1;
      let comp = precomputesMap.get(P);
      if (!comp) {
        comp = this.precomputeWindow(P, W);
        if (W !== 1) {
          precomputesMap.set(P, transform(comp));
        }
      }
      return this.wNAF(W, comp, n2);
    }
  };
}
function validateBasic(curve) {
  validateField(curve.Fp);
  validateObject(curve, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  });
  return Object.freeze({
    ...nLength(curve.n, curve.nBitLength),
    ...curve,
    ...{ p: curve.Fp.ORDER }
  });
}

// node_modules/@noble/curves/esm/abstract/weierstrass.js
function validatePointOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo, Fp: Fp2, a } = opts;
  if (endo) {
    if (!Fp2.eql(a, Fp2.ZERO)) {
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    }
    if (typeof endo !== "object" || typeof endo.beta !== "bigint" || typeof endo.splitScalar !== "function") {
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
    }
  }
  return Object.freeze({ ...opts });
}
var { bytesToNumberBE: b2n, hexToBytes: h2b } = utils_exports;
var DER = {
  // asn.1 DER encoding utils
  Err: class DERErr extends Error {
    constructor(m = "") {
      super(m);
    }
  },
  _parseInt(data) {
    const { Err: E } = DER;
    if (data.length < 2 || data[0] !== 2)
      throw new E("Invalid signature integer tag");
    const len = data[1];
    const res = data.subarray(2, len + 2);
    if (!len || res.length !== len)
      throw new E("Invalid signature integer: wrong length");
    if (res[0] & 128)
      throw new E("Invalid signature integer: negative");
    if (res[0] === 0 && !(res[1] & 128))
      throw new E("Invalid signature integer: unnecessary leading zero");
    return { d: b2n(res), l: data.subarray(len + 2) };
  },
  toSig(hex) {
    const { Err: E } = DER;
    const data = typeof hex === "string" ? h2b(hex) : hex;
    if (!(data instanceof Uint8Array))
      throw new Error("ui8a expected");
    let l = data.length;
    if (l < 2 || data[0] != 48)
      throw new E("Invalid signature tag");
    if (data[1] !== l - 2)
      throw new E("Invalid signature: incorrect length");
    const { d: r2, l: sBytes } = DER._parseInt(data.subarray(2));
    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);
    if (rBytesLeft.length)
      throw new E("Invalid signature: left bytes after parsing");
    return { r: r2, s };
  },
  hexFromSig(sig) {
    const slice = (s2) => Number.parseInt(s2[0], 16) & 8 ? "00" + s2 : s2;
    const h = (num) => {
      const hex = num.toString(16);
      return hex.length & 1 ? `0${hex}` : hex;
    };
    const s = slice(h(sig.s));
    const r2 = slice(h(sig.r));
    const shl = s.length / 2;
    const rhl = r2.length / 2;
    const sl = h(shl);
    const rl = h(rhl);
    return `30${h(rhl + shl + 4)}02${rl}${r2}02${sl}${s}`;
  }
};
var _0n5 = BigInt(0);
var _1n5 = BigInt(1);
var _2n4 = BigInt(2);
var _3n2 = BigInt(3);
var _4n2 = BigInt(4);
function weierstrassPoints(opts) {
  const CURVE = validatePointOpts(opts);
  const { Fp: Fp2 } = CURVE;
  const toBytes2 = CURVE.toBytes || ((_c, point, _isCompressed) => {
    const a = point.toAffine();
    return concatBytes2(Uint8Array.from([4]), Fp2.toBytes(a.x), Fp2.toBytes(a.y));
  });
  const fromBytes = CURVE.fromBytes || ((bytes3) => {
    const tail = bytes3.subarray(1);
    const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
    const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
    return { x, y };
  });
  function weierstrassEquation(x) {
    const { a, b: b2 } = CURVE;
    const x2 = Fp2.sqr(x);
    const x3 = Fp2.mul(x2, x);
    return Fp2.add(Fp2.add(x3, Fp2.mul(x, a)), b2);
  }
  if (!Fp2.eql(Fp2.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))
    throw new Error("bad generator point: equation left != right");
  function isWithinCurveOrder(num) {
    return typeof num === "bigint" && _0n5 < num && num < CURVE.n;
  }
  function assertGE(num) {
    if (!isWithinCurveOrder(num))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function normPrivateKeyToScalar(key) {
    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n: n2 } = CURVE;
    if (lengths && typeof key !== "bigint") {
      if (key instanceof Uint8Array)
        key = bytesToHex(key);
      if (typeof key !== "string" || !lengths.includes(key.length))
        throw new Error("Invalid key");
      key = key.padStart(nByteLength * 2, "0");
    }
    let num;
    try {
      num = typeof key === "bigint" ? key : bytesToNumberBE(ensureBytes("private key", key, nByteLength));
    } catch (error) {
      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);
    }
    if (wrapPrivateKey)
      num = mod(num, n2);
    assertGE(num);
    return num;
  }
  const pointPrecomputes = /* @__PURE__ */ new Map();
  function assertPrjPoint(other) {
    if (!(other instanceof Point2))
      throw new Error("ProjectivePoint expected");
  }
  class Point2 {
    constructor(px, py, pz) {
      this.px = px;
      this.py = py;
      this.pz = pz;
      if (px == null || !Fp2.isValid(px))
        throw new Error("x required");
      if (py == null || !Fp2.isValid(py))
        throw new Error("y required");
      if (pz == null || !Fp2.isValid(pz))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(p) {
      const { x, y } = p || {};
      if (!p || !Fp2.isValid(x) || !Fp2.isValid(y))
        throw new Error("invalid affine point");
      if (p instanceof Point2)
        throw new Error("projective point not allowed");
      const is0 = (i) => Fp2.eql(i, Fp2.ZERO);
      if (is0(x) && is0(y))
        return Point2.ZERO;
      return new Point2(x, y, Fp2.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(points) {
      const toInv = Fp2.invertBatch(points.map((p) => p.pz));
      return points.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(hex) {
      const P = Point2.fromAffine(fromBytes(ensureBytes("pointHex", hex)));
      P.assertValidity();
      return P;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(privateKey) {
      return Point2.BASE.multiply(normPrivateKeyToScalar(privateKey));
    }
    // "Private method", don't use it directly
    _setWindowSize(windowSize) {
      this._WINDOW_SIZE = windowSize;
      pointPrecomputes.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (CURVE.allowInfinityPoint && !Fp2.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x, y } = this.toAffine();
      if (!Fp2.isValid(x) || !Fp2.isValid(y))
        throw new Error("bad point: x or y not FE");
      const left = Fp2.sqr(y);
      const right = weierstrassEquation(x);
      if (!Fp2.eql(left, right))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y } = this.toAffine();
      if (Fp2.isOdd)
        return !Fp2.isOdd(y);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      const U1 = Fp2.eql(Fp2.mul(X1, Z2), Fp2.mul(X2, Z1));
      const U2 = Fp2.eql(Fp2.mul(Y1, Z2), Fp2.mul(Y2, Z1));
      return U1 && U2;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new Point2(this.px, Fp2.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a, b: b2 } = CURVE;
      const b3 = Fp2.mul(b2, _3n2);
      const { px: X1, py: Y1, pz: Z1 } = this;
      let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
      let t0 = Fp2.mul(X1, X1);
      let t1 = Fp2.mul(Y1, Y1);
      let t2 = Fp2.mul(Z1, Z1);
      let t3 = Fp2.mul(X1, Y1);
      t3 = Fp2.add(t3, t3);
      Z3 = Fp2.mul(X1, Z1);
      Z3 = Fp2.add(Z3, Z3);
      X3 = Fp2.mul(a, Z3);
      Y3 = Fp2.mul(b3, t2);
      Y3 = Fp2.add(X3, Y3);
      X3 = Fp2.sub(t1, Y3);
      Y3 = Fp2.add(t1, Y3);
      Y3 = Fp2.mul(X3, Y3);
      X3 = Fp2.mul(t3, X3);
      Z3 = Fp2.mul(b3, Z3);
      t2 = Fp2.mul(a, t2);
      t3 = Fp2.sub(t0, t2);
      t3 = Fp2.mul(a, t3);
      t3 = Fp2.add(t3, Z3);
      Z3 = Fp2.add(t0, t0);
      t0 = Fp2.add(Z3, t0);
      t0 = Fp2.add(t0, t2);
      t0 = Fp2.mul(t0, t3);
      Y3 = Fp2.add(Y3, t0);
      t2 = Fp2.mul(Y1, Z1);
      t2 = Fp2.add(t2, t2);
      t0 = Fp2.mul(t2, t3);
      X3 = Fp2.sub(X3, t0);
      Z3 = Fp2.mul(t2, t1);
      Z3 = Fp2.add(Z3, Z3);
      Z3 = Fp2.add(Z3, Z3);
      return new Point2(X3, Y3, Z3);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(other) {
      assertPrjPoint(other);
      const { px: X1, py: Y1, pz: Z1 } = this;
      const { px: X2, py: Y2, pz: Z2 } = other;
      let X3 = Fp2.ZERO, Y3 = Fp2.ZERO, Z3 = Fp2.ZERO;
      const a = CURVE.a;
      const b3 = Fp2.mul(CURVE.b, _3n2);
      let t0 = Fp2.mul(X1, X2);
      let t1 = Fp2.mul(Y1, Y2);
      let t2 = Fp2.mul(Z1, Z2);
      let t3 = Fp2.add(X1, Y1);
      let t4 = Fp2.add(X2, Y2);
      t3 = Fp2.mul(t3, t4);
      t4 = Fp2.add(t0, t1);
      t3 = Fp2.sub(t3, t4);
      t4 = Fp2.add(X1, Z1);
      let t5 = Fp2.add(X2, Z2);
      t4 = Fp2.mul(t4, t5);
      t5 = Fp2.add(t0, t2);
      t4 = Fp2.sub(t4, t5);
      t5 = Fp2.add(Y1, Z1);
      X3 = Fp2.add(Y2, Z2);
      t5 = Fp2.mul(t5, X3);
      X3 = Fp2.add(t1, t2);
      t5 = Fp2.sub(t5, X3);
      Z3 = Fp2.mul(a, t4);
      X3 = Fp2.mul(b3, t2);
      Z3 = Fp2.add(X3, Z3);
      X3 = Fp2.sub(t1, Z3);
      Z3 = Fp2.add(t1, Z3);
      Y3 = Fp2.mul(X3, Z3);
      t1 = Fp2.add(t0, t0);
      t1 = Fp2.add(t1, t0);
      t2 = Fp2.mul(a, t2);
      t4 = Fp2.mul(b3, t4);
      t1 = Fp2.add(t1, t2);
      t2 = Fp2.sub(t0, t2);
      t2 = Fp2.mul(a, t2);
      t4 = Fp2.add(t4, t2);
      t0 = Fp2.mul(t1, t4);
      Y3 = Fp2.add(Y3, t0);
      t0 = Fp2.mul(t5, t4);
      X3 = Fp2.mul(t3, X3);
      X3 = Fp2.sub(X3, t0);
      t0 = Fp2.mul(t3, t1);
      Z3 = Fp2.mul(t5, Z3);
      Z3 = Fp2.add(Z3, t0);
      return new Point2(X3, Y3, Z3);
    }
    subtract(other) {
      return this.add(other.negate());
    }
    is0() {
      return this.equals(Point2.ZERO);
    }
    wNAF(n2) {
      return wnaf.wNAFCached(this, pointPrecomputes, n2, (comp) => {
        const toInv = Fp2.invertBatch(comp.map((p) => p.pz));
        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point2.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(n2) {
      const I = Point2.ZERO;
      if (n2 === _0n5)
        return I;
      assertGE(n2);
      if (n2 === _1n5)
        return this;
      const { endo } = CURVE;
      if (!endo)
        return wnaf.unsafeLadder(this, n2);
      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
      let k1p = I;
      let k2p = I;
      let d = this;
      while (k1 > _0n5 || k2 > _0n5) {
        if (k1 & _1n5)
          k1p = k1p.add(d);
        if (k2 & _1n5)
          k2p = k2p.add(d);
        d = d.double();
        k1 >>= _1n5;
        k2 >>= _1n5;
      }
      if (k1neg)
        k1p = k1p.negate();
      if (k2neg)
        k2p = k2p.negate();
      k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
      return k1p.add(k2p);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(scalar) {
      assertGE(scalar);
      let n2 = scalar;
      let point, fake;
      const { endo } = CURVE;
      if (endo) {
        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n2);
        let { p: k1p, f: f1p } = this.wNAF(k1);
        let { p: k2p, f: f2p } = this.wNAF(k2);
        k1p = wnaf.constTimeNegate(k1neg, k1p);
        k2p = wnaf.constTimeNegate(k2neg, k2p);
        k2p = new Point2(Fp2.mul(k2p.px, endo.beta), k2p.py, k2p.pz);
        point = k1p.add(k2p);
        fake = f1p.add(f2p);
      } else {
        const { p, f: f2 } = this.wNAF(n2);
        point = p;
        fake = f2;
      }
      return Point2.normalizeZ([point, fake])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(Q, a, b2) {
      const G = Point2.BASE;
      const mul = (P, a2) => a2 === _0n5 || a2 === _1n5 || !P.equals(G) ? P.multiplyUnsafe(a2) : P.multiply(a2);
      const sum = mul(this, a).add(mul(Q, b2));
      return sum.is0() ? void 0 : sum;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(iz) {
      const { px: x, py: y, pz: z } = this;
      const is0 = this.is0();
      if (iz == null)
        iz = is0 ? Fp2.ONE : Fp2.inv(z);
      const ax = Fp2.mul(x, iz);
      const ay = Fp2.mul(y, iz);
      const zz = Fp2.mul(z, iz);
      if (is0)
        return { x: Fp2.ZERO, y: Fp2.ZERO };
      if (!Fp2.eql(zz, Fp2.ONE))
        throw new Error("invZ was invalid");
      return { x: ax, y: ay };
    }
    isTorsionFree() {
      const { h: cofactor, isTorsionFree } = CURVE;
      if (cofactor === _1n5)
        return true;
      if (isTorsionFree)
        return isTorsionFree(Point2, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: cofactor, clearCofactor } = CURVE;
      if (cofactor === _1n5)
        return this;
      if (clearCofactor)
        return clearCofactor(Point2, this);
      return this.multiplyUnsafe(CURVE.h);
    }
    toRawBytes(isCompressed = true) {
      this.assertValidity();
      return toBytes2(Point2, this, isCompressed);
    }
    toHex(isCompressed = true) {
      return bytesToHex(this.toRawBytes(isCompressed));
    }
  }
  Point2.BASE = new Point2(CURVE.Gx, CURVE.Gy, Fp2.ONE);
  Point2.ZERO = new Point2(Fp2.ZERO, Fp2.ONE, Fp2.ZERO);
  const _bits = CURVE.nBitLength;
  const wnaf = wNAF(Point2, CURVE.endo ? Math.ceil(_bits / 2) : _bits);
  return {
    CURVE,
    ProjectivePoint: Point2,
    normPrivateKeyToScalar,
    weierstrassEquation,
    isWithinCurveOrder
  };
}
function validateOpts(curve) {
  const opts = validateBasic(curve);
  validateObject(opts, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  });
  return Object.freeze({ lowS: true, ...opts });
}
function weierstrass(curveDef) {
  const CURVE = validateOpts(curveDef);
  const { Fp: Fp2, n: CURVE_ORDER } = CURVE;
  const compressedLen = Fp2.BYTES + 1;
  const uncompressedLen = 2 * Fp2.BYTES + 1;
  function isValidFieldElement(num) {
    return _0n5 < num && num < Fp2.ORDER;
  }
  function modN2(a) {
    return mod(a, CURVE_ORDER);
  }
  function invN(a) {
    return invert(a, CURVE_ORDER);
  }
  const { ProjectivePoint: Point2, normPrivateKeyToScalar, weierstrassEquation, isWithinCurveOrder } = weierstrassPoints({
    ...CURVE,
    toBytes(_c, point, isCompressed) {
      const a = point.toAffine();
      const x = Fp2.toBytes(a.x);
      const cat = concatBytes2;
      if (isCompressed) {
        return cat(Uint8Array.from([point.hasEvenY() ? 2 : 3]), x);
      } else {
        return cat(Uint8Array.from([4]), x, Fp2.toBytes(a.y));
      }
    },
    fromBytes(bytes3) {
      const len = bytes3.length;
      const head = bytes3[0];
      const tail = bytes3.subarray(1);
      if (len === compressedLen && (head === 2 || head === 3)) {
        const x = bytesToNumberBE(tail);
        if (!isValidFieldElement(x))
          throw new Error("Point is not on curve");
        const y2 = weierstrassEquation(x);
        let y = Fp2.sqrt(y2);
        const isYOdd = (y & _1n5) === _1n5;
        const isHeadOdd = (head & 1) === 1;
        if (isHeadOdd !== isYOdd)
          y = Fp2.neg(y);
        return { x, y };
      } else if (len === uncompressedLen && head === 4) {
        const x = Fp2.fromBytes(tail.subarray(0, Fp2.BYTES));
        const y = Fp2.fromBytes(tail.subarray(Fp2.BYTES, 2 * Fp2.BYTES));
        return { x, y };
      } else {
        throw new Error(`Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`);
      }
    }
  });
  const numToNByteStr = (num) => bytesToHex(numberToBytesBE(num, CURVE.nByteLength));
  function isBiggerThanHalfOrder(number2) {
    const HALF = CURVE_ORDER >> _1n5;
    return number2 > HALF;
  }
  function normalizeS(s) {
    return isBiggerThanHalfOrder(s) ? modN2(-s) : s;
  }
  const slcNum = (b2, from, to) => bytesToNumberBE(b2.slice(from, to));
  class Signature2 {
    constructor(r2, s, recovery) {
      this.r = r2;
      this.s = s;
      this.recovery = recovery;
      this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(hex) {
      const l = CURVE.nByteLength;
      hex = ensureBytes("compactSignature", hex, l * 2);
      return new Signature2(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(hex) {
      const { r: r2, s } = DER.toSig(ensureBytes("DER", hex));
      return new Signature2(r2, s);
    }
    assertValidity() {
      if (!isWithinCurveOrder(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!isWithinCurveOrder(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(recovery) {
      return new Signature2(this.r, this.s, recovery);
    }
    recoverPublicKey(msgHash) {
      const { r: r2, s, recovery: rec } = this;
      const h = bits2int_modN(ensureBytes("msgHash", msgHash));
      if (rec == null || ![0, 1, 2, 3].includes(rec))
        throw new Error("recovery id invalid");
      const radj = rec === 2 || rec === 3 ? r2 + CURVE.n : r2;
      if (radj >= Fp2.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const prefix = (rec & 1) === 0 ? "02" : "03";
      const R = Point2.fromHex(prefix + numToNByteStr(radj));
      const ir = invN(radj);
      const u1 = modN2(-h * ir);
      const u2 = modN2(s * ir);
      const Q = Point2.BASE.multiplyAndAddUnsafe(R, u1, u2);
      if (!Q)
        throw new Error("point at infinify");
      Q.assertValidity();
      return Q;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return isBiggerThanHalfOrder(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new Signature2(this.r, modN2(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return hexToBytes(this.toDERHex());
    }
    toDERHex() {
      return DER.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return hexToBytes(this.toCompactHex());
    }
    toCompactHex() {
      return numToNByteStr(this.r) + numToNByteStr(this.s);
    }
  }
  const utils = {
    isValidPrivateKey(privateKey) {
      try {
        normPrivateKeyToScalar(privateKey);
        return true;
      } catch (error) {
        return false;
      }
    },
    normPrivateKeyToScalar,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const length = getMinHashLength(CURVE.n);
      return mapHashToField(CURVE.randomBytes(length), CURVE.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(windowSize = 8, point = Point2.BASE) {
      point._setWindowSize(windowSize);
      point.multiply(BigInt(3));
      return point;
    }
  };
  function getPublicKey(privateKey, isCompressed = true) {
    return Point2.fromPrivateKey(privateKey).toRawBytes(isCompressed);
  }
  function isProbPub(item) {
    const arr = item instanceof Uint8Array;
    const str = typeof item === "string";
    const len = (arr || str) && item.length;
    if (arr)
      return len === compressedLen || len === uncompressedLen;
    if (str)
      return len === 2 * compressedLen || len === 2 * uncompressedLen;
    if (item instanceof Point2)
      return true;
    return false;
  }
  function getSharedSecret(privateA, publicB, isCompressed = true) {
    if (isProbPub(privateA))
      throw new Error("first arg must be private key");
    if (!isProbPub(publicB))
      throw new Error("second arg must be public key");
    const b2 = Point2.fromHex(publicB);
    return b2.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);
  }
  const bits2int = CURVE.bits2int || function(bytes3) {
    const num = bytesToNumberBE(bytes3);
    const delta = bytes3.length * 8 - CURVE.nBitLength;
    return delta > 0 ? num >> BigInt(delta) : num;
  };
  const bits2int_modN = CURVE.bits2int_modN || function(bytes3) {
    return modN2(bits2int(bytes3));
  };
  const ORDER_MASK = bitMask(CURVE.nBitLength);
  function int2octets(num) {
    if (typeof num !== "bigint")
      throw new Error("bigint expected");
    if (!(_0n5 <= num && num < ORDER_MASK))
      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);
    return numberToBytesBE(num, CURVE.nByteLength);
  }
  function prepSig(msgHash, privateKey, opts = defaultSigOpts) {
    if (["recovered", "canonical"].some((k) => k in opts))
      throw new Error("sign() legacy options not supported");
    const { hash: hash2, randomBytes: randomBytes4 } = CURVE;
    let { lowS, prehash, extraEntropy: ent } = opts;
    if (lowS == null)
      lowS = true;
    msgHash = ensureBytes("msgHash", msgHash);
    if (prehash)
      msgHash = ensureBytes("prehashed msgHash", hash2(msgHash));
    const h1int = bits2int_modN(msgHash);
    const d = normPrivateKeyToScalar(privateKey);
    const seedArgs = [int2octets(d), int2octets(h1int)];
    if (ent != null) {
      const e = ent === true ? randomBytes4(Fp2.BYTES) : ent;
      seedArgs.push(ensureBytes("extraEntropy", e));
    }
    const seed = concatBytes2(...seedArgs);
    const m = h1int;
    function k2sig(kBytes) {
      const k = bits2int(kBytes);
      if (!isWithinCurveOrder(k))
        return;
      const ik = invN(k);
      const q = Point2.BASE.multiply(k).toAffine();
      const r2 = modN2(q.x);
      if (r2 === _0n5)
        return;
      const s = modN2(ik * modN2(m + r2 * d));
      if (s === _0n5)
        return;
      let recovery = (q.x === r2 ? 0 : 2) | Number(q.y & _1n5);
      let normS = s;
      if (lowS && isBiggerThanHalfOrder(s)) {
        normS = normalizeS(s);
        recovery ^= 1;
      }
      return new Signature2(r2, normS, recovery);
    }
    return { seed, k2sig };
  }
  const defaultSigOpts = { lowS: CURVE.lowS, prehash: false };
  const defaultVerOpts = { lowS: CURVE.lowS, prehash: false };
  function sign(msgHash, privKey, opts = defaultSigOpts) {
    const { seed, k2sig } = prepSig(msgHash, privKey, opts);
    const C = CURVE;
    const drbg = createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);
    return drbg(seed, k2sig);
  }
  Point2.BASE._setWindowSize(8);
  function verify(signature, msgHash, publicKey, opts = defaultVerOpts) {
    var _a2;
    const sg = signature;
    msgHash = ensureBytes("msgHash", msgHash);
    publicKey = ensureBytes("publicKey", publicKey);
    if ("strict" in opts)
      throw new Error("options.strict was renamed to lowS");
    const { lowS, prehash } = opts;
    let _sig = void 0;
    let P;
    try {
      if (typeof sg === "string" || sg instanceof Uint8Array) {
        try {
          _sig = Signature2.fromDER(sg);
        } catch (derError) {
          if (!(derError instanceof DER.Err))
            throw derError;
          _sig = Signature2.fromCompact(sg);
        }
      } else if (typeof sg === "object" && typeof sg.r === "bigint" && typeof sg.s === "bigint") {
        const { r: r3, s: s2 } = sg;
        _sig = new Signature2(r3, s2);
      } else {
        throw new Error("PARSE");
      }
      P = Point2.fromHex(publicKey);
    } catch (error) {
      if (error.message === "PARSE")
        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);
      return false;
    }
    if (lowS && _sig.hasHighS())
      return false;
    if (prehash)
      msgHash = CURVE.hash(msgHash);
    const { r: r2, s } = _sig;
    const h = bits2int_modN(msgHash);
    const is = invN(s);
    const u1 = modN2(h * is);
    const u2 = modN2(r2 * is);
    const R = (_a2 = Point2.BASE.multiplyAndAddUnsafe(P, u1, u2)) == null ? void 0 : _a2.toAffine();
    if (!R)
      return false;
    const v = modN2(R.x);
    return v === r2;
  }
  return {
    CURVE,
    getPublicKey,
    getSharedSecret,
    sign,
    verify,
    ProjectivePoint: Point2,
    Signature: Signature2,
    utils
  };
}
function SWUFpSqrtRatio(Fp2, Z) {
  const q = Fp2.ORDER;
  let l = _0n5;
  for (let o = q - _1n5; o % _2n4 === _0n5; o /= _2n4)
    l += _1n5;
  const c1 = l;
  const _2n_pow_c1_1 = _2n4 << c1 - _1n5 - _1n5;
  const _2n_pow_c1 = _2n_pow_c1_1 * _2n4;
  const c2 = (q - _1n5) / _2n_pow_c1;
  const c3 = (c2 - _1n5) / _2n4;
  const c4 = _2n_pow_c1 - _1n5;
  const c5 = _2n_pow_c1_1;
  const c6 = Fp2.pow(Z, c2);
  const c7 = Fp2.pow(Z, (c2 + _1n5) / _2n4);
  let sqrtRatio = (u, v) => {
    let tv1 = c6;
    let tv2 = Fp2.pow(v, c4);
    let tv3 = Fp2.sqr(tv2);
    tv3 = Fp2.mul(tv3, v);
    let tv5 = Fp2.mul(u, tv3);
    tv5 = Fp2.pow(tv5, c3);
    tv5 = Fp2.mul(tv5, tv2);
    tv2 = Fp2.mul(tv5, v);
    tv3 = Fp2.mul(tv5, u);
    let tv4 = Fp2.mul(tv3, tv2);
    tv5 = Fp2.pow(tv4, c5);
    let isQR = Fp2.eql(tv5, Fp2.ONE);
    tv2 = Fp2.mul(tv3, c7);
    tv5 = Fp2.mul(tv4, tv1);
    tv3 = Fp2.cmov(tv2, tv3, isQR);
    tv4 = Fp2.cmov(tv5, tv4, isQR);
    for (let i = c1; i > _1n5; i--) {
      let tv52 = i - _2n4;
      tv52 = _2n4 << tv52 - _1n5;
      let tvv5 = Fp2.pow(tv4, tv52);
      const e1 = Fp2.eql(tvv5, Fp2.ONE);
      tv2 = Fp2.mul(tv3, tv1);
      tv1 = Fp2.mul(tv1, tv1);
      tvv5 = Fp2.mul(tv4, tv1);
      tv3 = Fp2.cmov(tv2, tv3, e1);
      tv4 = Fp2.cmov(tvv5, tv4, e1);
    }
    return { isValid: isQR, value: tv3 };
  };
  if (Fp2.ORDER % _4n2 === _3n2) {
    const c12 = (Fp2.ORDER - _3n2) / _4n2;
    const c22 = Fp2.sqrt(Fp2.neg(Z));
    sqrtRatio = (u, v) => {
      let tv1 = Fp2.sqr(v);
      const tv2 = Fp2.mul(u, v);
      tv1 = Fp2.mul(tv1, tv2);
      let y1 = Fp2.pow(tv1, c12);
      y1 = Fp2.mul(y1, tv2);
      const y2 = Fp2.mul(y1, c22);
      const tv3 = Fp2.mul(Fp2.sqr(y1), v);
      const isQR = Fp2.eql(tv3, u);
      let y = Fp2.cmov(y2, y1, isQR);
      return { isValid: isQR, value: y };
    };
  }
  return sqrtRatio;
}
function mapToCurveSimpleSWU(Fp2, opts) {
  validateField(Fp2);
  if (!Fp2.isValid(opts.A) || !Fp2.isValid(opts.B) || !Fp2.isValid(opts.Z))
    throw new Error("mapToCurveSimpleSWU: invalid opts");
  const sqrtRatio = SWUFpSqrtRatio(Fp2, opts.Z);
  if (!Fp2.isOdd)
    throw new Error("Fp.isOdd is not implemented!");
  return (u) => {
    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;
    tv1 = Fp2.sqr(u);
    tv1 = Fp2.mul(tv1, opts.Z);
    tv2 = Fp2.sqr(tv1);
    tv2 = Fp2.add(tv2, tv1);
    tv3 = Fp2.add(tv2, Fp2.ONE);
    tv3 = Fp2.mul(tv3, opts.B);
    tv4 = Fp2.cmov(opts.Z, Fp2.neg(tv2), !Fp2.eql(tv2, Fp2.ZERO));
    tv4 = Fp2.mul(tv4, opts.A);
    tv2 = Fp2.sqr(tv3);
    tv6 = Fp2.sqr(tv4);
    tv5 = Fp2.mul(tv6, opts.A);
    tv2 = Fp2.add(tv2, tv5);
    tv2 = Fp2.mul(tv2, tv3);
    tv6 = Fp2.mul(tv6, tv4);
    tv5 = Fp2.mul(tv6, opts.B);
    tv2 = Fp2.add(tv2, tv5);
    x = Fp2.mul(tv1, tv3);
    const { isValid, value } = sqrtRatio(tv2, tv6);
    y = Fp2.mul(tv1, u);
    y = Fp2.mul(y, value);
    x = Fp2.cmov(x, tv3, isValid);
    y = Fp2.cmov(y, value, isValid);
    const e1 = Fp2.isOdd(u) === Fp2.isOdd(y);
    y = Fp2.cmov(Fp2.neg(y), y, e1);
    x = Fp2.div(x, tv4);
    return { x, y };
  };
}

// node_modules/@noble/curves/esm/abstract/hash-to-curve.js
function validateDST(dst) {
  if (dst instanceof Uint8Array)
    return dst;
  if (typeof dst === "string")
    return utf8ToBytes2(dst);
  throw new Error("DST must be Uint8Array or string");
}
var os2ip = bytesToNumberBE;
function i2osp(value, length) {
  if (value < 0 || value >= 1 << 8 * length) {
    throw new Error(`bad I2OSP call: value=${value} length=${length}`);
  }
  const res = Array.from({ length }).fill(0);
  for (let i = length - 1; i >= 0; i--) {
    res[i] = value & 255;
    value >>>= 8;
  }
  return new Uint8Array(res);
}
function strxor(a, b2) {
  const arr = new Uint8Array(a.length);
  for (let i = 0; i < a.length; i++) {
    arr[i] = a[i] ^ b2[i];
  }
  return arr;
}
function isBytes(item) {
  if (!(item instanceof Uint8Array))
    throw new Error("Uint8Array expected");
}
function isNum(item) {
  if (!Number.isSafeInteger(item))
    throw new Error("number expected");
}
function expand_message_xmd(msg, DST, lenInBytes, H) {
  isBytes(msg);
  isBytes(DST);
  isNum(lenInBytes);
  if (DST.length > 255)
    DST = H(concatBytes2(utf8ToBytes2("H2C-OVERSIZE-DST-"), DST));
  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;
  const ell = Math.ceil(lenInBytes / b_in_bytes);
  if (ell > 255)
    throw new Error("Invalid xmd length");
  const DST_prime = concatBytes2(DST, i2osp(DST.length, 1));
  const Z_pad = i2osp(0, r_in_bytes);
  const l_i_b_str = i2osp(lenInBytes, 2);
  const b2 = new Array(ell);
  const b_0 = H(concatBytes2(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));
  b2[0] = H(concatBytes2(b_0, i2osp(1, 1), DST_prime));
  for (let i = 1; i <= ell; i++) {
    const args = [strxor(b_0, b2[i - 1]), i2osp(i + 1, 1), DST_prime];
    b2[i] = H(concatBytes2(...args));
  }
  const pseudo_random_bytes = concatBytes2(...b2);
  return pseudo_random_bytes.slice(0, lenInBytes);
}
function expand_message_xof(msg, DST, lenInBytes, k, H) {
  isBytes(msg);
  isBytes(DST);
  isNum(lenInBytes);
  if (DST.length > 255) {
    const dkLen = Math.ceil(2 * k / 8);
    DST = H.create({ dkLen }).update(utf8ToBytes2("H2C-OVERSIZE-DST-")).update(DST).digest();
  }
  if (lenInBytes > 65535 || DST.length > 255)
    throw new Error("expand_message_xof: invalid lenInBytes");
  return H.create({ dkLen: lenInBytes }).update(msg).update(i2osp(lenInBytes, 2)).update(DST).update(i2osp(DST.length, 1)).digest();
}
function hash_to_field(msg, count, options) {
  validateObject(options, {
    DST: "stringOrUint8Array",
    p: "bigint",
    m: "isSafeInteger",
    k: "isSafeInteger",
    hash: "hash"
  });
  const { p, k, m, hash: hash2, expand, DST: _DST } = options;
  isBytes(msg);
  isNum(count);
  const DST = validateDST(_DST);
  const log2p = p.toString(2).length;
  const L = Math.ceil((log2p + k) / 8);
  const len_in_bytes = count * m * L;
  let prb;
  if (expand === "xmd") {
    prb = expand_message_xmd(msg, DST, len_in_bytes, hash2);
  } else if (expand === "xof") {
    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash2);
  } else if (expand === "_internal_pass") {
    prb = msg;
  } else {
    throw new Error('expand must be "xmd" or "xof"');
  }
  const u = new Array(count);
  for (let i = 0; i < count; i++) {
    const e = new Array(m);
    for (let j = 0; j < m; j++) {
      const elm_offset = L * (j + i * m);
      const tv = prb.subarray(elm_offset, elm_offset + L);
      e[j] = mod(os2ip(tv), p);
    }
    u[i] = e;
  }
  return u;
}
function isogenyMap(field, map) {
  const COEFF = map.map((i) => Array.from(i).reverse());
  return (x, y) => {
    const [xNum, xDen, yNum, yDen] = COEFF.map((val) => val.reduce((acc, i) => field.add(field.mul(acc, x), i)));
    x = field.div(xNum, xDen);
    y = field.mul(y, field.div(yNum, yDen));
    return { x, y };
  };
}
function createHasher(Point2, mapToCurve, def) {
  if (typeof mapToCurve !== "function")
    throw new Error("mapToCurve() must be defined");
  return {
    // Encodes byte string to elliptic curve.
    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    hashToCurve(msg, options) {
      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options });
      const u0 = Point2.fromAffine(mapToCurve(u[0]));
      const u1 = Point2.fromAffine(mapToCurve(u[1]));
      const P = u0.add(u1).clearCofactor();
      P.assertValidity();
      return P;
    },
    // Encodes byte string to elliptic curve.
    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3
    encodeToCurve(msg, options) {
      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options });
      const P = Point2.fromAffine(mapToCurve(u[0])).clearCofactor();
      P.assertValidity();
      return P;
    }
  };
}

// node_modules/@noble/curves/esm/_shortw_utils.js
function getHash(hash2) {
  return {
    hash: hash2,
    hmac: (key, ...msgs) => hmac(hash2, key, concatBytes(...msgs)),
    randomBytes
  };
}
function createCurve(curveDef, defHash) {
  const create = (hash2) => weierstrass({ ...curveDef, ...getHash(hash2) });
  return Object.freeze({ ...create(defHash), create });
}

// node_modules/@noble/curves/esm/secp256k1.js
var secp256k1P = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f");
var secp256k1N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var _1n6 = BigInt(1);
var _2n5 = BigInt(2);
var divNearest = (a, b2) => (a + b2 / _2n5) / b2;
function sqrtMod(y) {
  const P = secp256k1P;
  const _3n3 = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);
  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);
  const b2 = y * y * y % P;
  const b3 = b2 * b2 * y % P;
  const b6 = pow2(b3, _3n3, P) * b3 % P;
  const b9 = pow2(b6, _3n3, P) * b3 % P;
  const b11 = pow2(b9, _2n5, P) * b2 % P;
  const b22 = pow2(b11, _11n, P) * b11 % P;
  const b44 = pow2(b22, _22n, P) * b22 % P;
  const b88 = pow2(b44, _44n, P) * b44 % P;
  const b176 = pow2(b88, _88n, P) * b88 % P;
  const b220 = pow2(b176, _44n, P) * b44 % P;
  const b223 = pow2(b220, _3n3, P) * b3 % P;
  const t1 = pow2(b223, _23n, P) * b22 % P;
  const t2 = pow2(t1, _6n, P) * b2 % P;
  const root = pow2(t2, _2n5, P);
  if (!Fp.eql(Fp.sqr(root), y))
    throw new Error("Cannot find square root");
  return root;
}
var Fp = Field(secp256k1P, void 0, void 0, { sqrt: sqrtMod });
var secp256k1 = createCurve({
  a: BigInt(0),
  b: BigInt(7),
  Fp,
  n: secp256k1N,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: true,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (k) => {
      const n2 = secp256k1N;
      const a1 = BigInt("0x3086d221a7d46bcde86c90e49284eb15");
      const b1 = -_1n6 * BigInt("0xe4437ed6010e88286f547fa90abfe4c3");
      const a2 = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8");
      const b2 = a1;
      const POW_2_128 = BigInt("0x100000000000000000000000000000000");
      const c1 = divNearest(b2 * k, n2);
      const c2 = divNearest(-b1 * k, n2);
      let k1 = mod(k - c1 * a1 - c2 * a2, n2);
      let k2 = mod(-c1 * b1 - c2 * b2, n2);
      const k1neg = k1 > POW_2_128;
      const k2neg = k2 > POW_2_128;
      if (k1neg)
        k1 = n2 - k1;
      if (k2neg)
        k2 = n2 - k2;
      if (k1 > POW_2_128 || k2 > POW_2_128) {
        throw new Error("splitScalar: Endomorphism failed, k=" + k);
      }
      return { k1neg, k1, k2neg, k2 };
    }
  }
}, sha256);
var _0n6 = BigInt(0);
var fe = (x) => typeof x === "bigint" && _0n6 < x && x < secp256k1P;
var ge = (x) => typeof x === "bigint" && _0n6 < x && x < secp256k1N;
var TAGGED_HASH_PREFIXES = {};
function taggedHash(tag, ...messages) {
  let tagP = TAGGED_HASH_PREFIXES[tag];
  if (tagP === void 0) {
    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));
    tagP = concatBytes2(tagH, tagH);
    TAGGED_HASH_PREFIXES[tag] = tagP;
  }
  return sha256(concatBytes2(tagP, ...messages));
}
var pointToBytes = (point) => point.toRawBytes(true).slice(1);
var numTo32b = (n2) => numberToBytesBE(n2, 32);
var modP = (x) => mod(x, secp256k1P);
var modN = (x) => mod(x, secp256k1N);
var Point = secp256k1.ProjectivePoint;
var GmulAdd = (Q, a, b2) => Point.BASE.multiplyAndAddUnsafe(Q, a, b2);
function schnorrGetExtPubKey(priv) {
  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv);
  let p = Point.fromPrivateKey(d_);
  const scalar = p.hasEvenY() ? d_ : modN(-d_);
  return { scalar, bytes: pointToBytes(p) };
}
function lift_x(x) {
  if (!fe(x))
    throw new Error("bad x: need 0 < x < p");
  const xx = modP(x * x);
  const c = modP(xx * x + BigInt(7));
  let y = sqrtMod(c);
  if (y % _2n5 !== _0n6)
    y = modP(-y);
  const p = new Point(x, y, _1n6);
  p.assertValidity();
  return p;
}
function challenge(...args) {
  return modN(bytesToNumberBE(taggedHash("BIP0340/challenge", ...args)));
}
function schnorrGetPublicKey(privateKey) {
  return schnorrGetExtPubKey(privateKey).bytes;
}
function schnorrSign(message, privateKey, auxRand = randomBytes(32)) {
  const m = ensureBytes("message", message);
  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey);
  const a = ensureBytes("auxRand", auxRand, 32);
  const t = numTo32b(d ^ bytesToNumberBE(taggedHash("BIP0340/aux", a)));
  const rand = taggedHash("BIP0340/nonce", t, px, m);
  const k_ = modN(bytesToNumberBE(rand));
  if (k_ === _0n6)
    throw new Error("sign failed: k is zero");
  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_);
  const e = challenge(rx, px, m);
  const sig = new Uint8Array(64);
  sig.set(rx, 0);
  sig.set(numTo32b(modN(k + e * d)), 32);
  if (!schnorrVerify(sig, m, px))
    throw new Error("sign: Invalid signature produced");
  return sig;
}
function schnorrVerify(signature, message, publicKey) {
  const sig = ensureBytes("signature", signature, 64);
  const m = ensureBytes("message", message);
  const pub = ensureBytes("publicKey", publicKey, 32);
  try {
    const P = lift_x(bytesToNumberBE(pub));
    const r2 = bytesToNumberBE(sig.subarray(0, 32));
    if (!fe(r2))
      return false;
    const s = bytesToNumberBE(sig.subarray(32, 64));
    if (!ge(s))
      return false;
    const e = challenge(numTo32b(r2), pointToBytes(P), m);
    const R = GmulAdd(P, s, modN(-e));
    if (!R || !R.hasEvenY() || R.toAffine().x !== r2)
      return false;
    return true;
  } catch (error) {
    return false;
  }
}
var schnorr = (() => ({
  getPublicKey: schnorrGetPublicKey,
  sign: schnorrSign,
  verify: schnorrVerify,
  utils: {
    randomPrivateKey: secp256k1.utils.randomPrivateKey,
    lift_x,
    pointToBytes,
    numberToBytesBE,
    bytesToNumberBE,
    taggedHash,
    mod
  }
}))();
var isoMap = (() => isogenyMap(Fp, [
  // xNum
  [
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7",
    "0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581",
    "0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262",
    "0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c"
  ],
  // xDen
  [
    "0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b",
    "0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ],
  // yNum
  [
    "0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c",
    "0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3",
    "0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931",
    "0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84"
  ],
  // yDen
  [
    "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b",
    "0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573",
    "0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f",
    "0x0000000000000000000000000000000000000000000000000000000000000001"
    // LAST 1
  ]
].map((i) => i.map((j) => BigInt(j)))))();
var mapSWU = (() => mapToCurveSimpleSWU(Fp, {
  A: BigInt("0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533"),
  B: BigInt("1771"),
  Z: Fp.create(BigInt("-11"))
}))();
var htf = (() => createHasher(secp256k1.ProjectivePoint, (scalars) => {
  const { x, y } = mapSWU(Fp.create(scalars[0]));
  return isoMap(x, y);
}, {
  DST: "secp256k1_XMD:SHA-256_SSWU_RO_",
  encodeDST: "secp256k1_XMD:SHA-256_SSWU_NU_",
  p: Fp.ORDER,
  m: 1,
  k: 128,
  expand: "xmd",
  hash: sha256
}))();
var hashToCurve = (() => htf.hashToCurve)();
var encodeToCurve = (() => htf.encodeToCurve)();

// node_modules/ethers/lib.esm/constants/hashes.js
var ZeroHash = "0x0000000000000000000000000000000000000000000000000000000000000000";

// node_modules/ethers/lib.esm/constants/numbers.js
var N = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
var WeiPerEther = BigInt("1000000000000000000");
var MaxUint256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var MinInt256 = BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
var MaxInt256 = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");

// node_modules/ethers/lib.esm/crypto/signature.js
var BN_04 = BigInt(0);
var BN_13 = BigInt(1);
var BN_2 = BigInt(2);
var BN_27 = BigInt(27);
var BN_28 = BigInt(28);
var BN_35 = BigInt(35);
var _guard2 = {};
function toUint256(value) {
  return zeroPadValue(toBeArray(value), 32);
}
var _r, _s, _v, _networkV;
var _Signature = class _Signature {
  /**
   *  @private
   */
  constructor(guard, r2, s, v) {
    __privateAdd(this, _r);
    __privateAdd(this, _s);
    __privateAdd(this, _v);
    __privateAdd(this, _networkV);
    assertPrivate(guard, _guard2, "Signature");
    __privateSet(this, _r, r2);
    __privateSet(this, _s, s);
    __privateSet(this, _v, v);
    __privateSet(this, _networkV, null);
  }
  /**
   *  The ``r`` value for a signautre.
   *
   *  This represents the ``x`` coordinate of a "reference" or
   *  challenge point, from which the ``y`` can be computed.
   */
  get r() {
    return __privateGet(this, _r);
  }
  set r(value) {
    assertArgument(dataLength(value) === 32, "invalid r", "value", value);
    __privateSet(this, _r, hexlify(value));
  }
  /**
   *  The ``s`` value for a signature.
   */
  get s() {
    return __privateGet(this, _s);
  }
  set s(_value) {
    assertArgument(dataLength(_value) === 32, "invalid s", "value", _value);
    const value = hexlify(_value);
    assertArgument(parseInt(value.substring(0, 3)) < 8, "non-canonical s", "value", value);
    __privateSet(this, _s, value);
  }
  /**
   *  The ``v`` value for a signature.
   *
   *  Since a given ``x`` value for ``r`` has two possible values for
   *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
   *  values to use.
   *
   *  It is normalized to the values ``27`` or ``28`` for legacy
   *  purposes.
   */
  get v() {
    return __privateGet(this, _v);
  }
  set v(value) {
    const v = getNumber(value, "value");
    assertArgument(v === 27 || v === 28, "invalid v", "v", value);
    __privateSet(this, _v, v);
  }
  /**
   *  The EIP-155 ``v`` for legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get networkV() {
    return __privateGet(this, _networkV);
  }
  /**
   *  The chain ID for EIP-155 legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get legacyChainId() {
    const v = this.networkV;
    if (v == null) {
      return null;
    }
    return _Signature.getChainId(v);
  }
  /**
   *  The ``yParity`` for the signature.
   *
   *  See ``v`` for more details on how this value is used.
   */
  get yParity() {
    return this.v === 27 ? 0 : 1;
  }
  /**
   *  The [[link-eip-2098]] compact representation of the ``yParity``
   *  and ``s`` compacted into a single ``bytes32``.
   */
  get yParityAndS() {
    const yParityAndS = getBytes(this.s);
    if (this.yParity) {
      yParityAndS[0] |= 128;
    }
    return hexlify(yParityAndS);
  }
  /**
   *  The [[link-eip-2098]] compact representation.
   */
  get compactSerialized() {
    return concat([this.r, this.yParityAndS]);
  }
  /**
   *  The serialized representation.
   */
  get serialized() {
    return concat([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
  }
  /**
   *  Returns a new identical [[Signature]].
   */
  clone() {
    const clone = new _Signature(_guard2, this.r, this.s, this.v);
    if (this.networkV) {
      __privateSet(clone, _networkV, this.networkV);
    }
    return clone;
  }
  /**
   *  Returns a representation that is compatible with ``JSON.stringify``.
   */
  toJSON() {
    const networkV = this.networkV;
    return {
      _type: "signature",
      networkV: networkV != null ? networkV.toString() : null,
      r: this.r,
      s: this.s,
      v: this.v
    };
  }
  /**
   *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
   *
   *  @example:
   *    Signature.getChainId(45)
   *    //_result:
   *
   *    Signature.getChainId(46)
   *    //_result:
   */
  static getChainId(v) {
    const bv = getBigInt(v, "v");
    if (bv == BN_27 || bv == BN_28) {
      return BN_04;
    }
    assertArgument(bv >= BN_35, "invalid EIP-155 v", "v", v);
    return (bv - BN_35) / BN_2;
  }
  /**
   *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
   *
   *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
   *  property to include the chain ID.
   *
   *  @example:
   *    Signature.getChainIdV(5, 27)
   *    //_result:
   *
   *    Signature.getChainIdV(5, 28)
   *    //_result:
   *
   */
  static getChainIdV(chainId, v) {
    return getBigInt(chainId) * BN_2 + BigInt(35 + v - 27);
  }
  /**
   *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
   *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
   *
   *  @example:
   *    // The values 0 and 1 imply v is actually yParity
   *    Signature.getNormalizedV(0)
   *    //_result:
   *
   *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
   *    Signature.getNormalizedV(27)
   *    //_result:
   *
   *    // Legacy EIP-155 transaction (i.e. >= 35)
   *    Signature.getNormalizedV(46)
   *    //_result:
   *
   *    // Invalid values throw
   *    Signature.getNormalizedV(5)
   *    //_error:
   */
  static getNormalizedV(v) {
    const bv = getBigInt(v);
    if (bv === BN_04 || bv === BN_27) {
      return 27;
    }
    if (bv === BN_13 || bv === BN_28) {
      return 28;
    }
    assertArgument(bv >= BN_35, "invalid v", "v", v);
    return bv & BN_13 ? 27 : 28;
  }
  /**
   *  Creates a new [[Signature]].
   *
   *  If no %%sig%% is provided, a new [[Signature]] is created
   *  with default values.
   *
   *  If %%sig%% is a string, it is parsed.
   */
  static from(sig) {
    function assertError(check, message) {
      assertArgument(check, message, "signature", sig);
    }
    ;
    if (sig == null) {
      return new _Signature(_guard2, ZeroHash, ZeroHash, 27);
    }
    if (typeof sig === "string") {
      const bytes3 = getBytes(sig, "signature");
      if (bytes3.length === 64) {
        const r3 = hexlify(bytes3.slice(0, 32));
        const s2 = bytes3.slice(32, 64);
        const v2 = s2[0] & 128 ? 28 : 27;
        s2[0] &= 127;
        return new _Signature(_guard2, r3, hexlify(s2), v2);
      }
      if (bytes3.length === 65) {
        const r3 = hexlify(bytes3.slice(0, 32));
        const s2 = bytes3.slice(32, 64);
        assertError((s2[0] & 128) === 0, "non-canonical s");
        const v2 = _Signature.getNormalizedV(bytes3[64]);
        return new _Signature(_guard2, r3, hexlify(s2), v2);
      }
      assertError(false, "invalid raw signature length");
    }
    if (sig instanceof _Signature) {
      return sig.clone();
    }
    const _r2 = sig.r;
    assertError(_r2 != null, "missing r");
    const r2 = toUint256(_r2);
    const s = function(s2, yParityAndS) {
      if (s2 != null) {
        return toUint256(s2);
      }
      if (yParityAndS != null) {
        assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
        const bytes3 = getBytes(yParityAndS);
        bytes3[0] &= 127;
        return hexlify(bytes3);
      }
      assertError(false, "missing s");
    }(sig.s, sig.yParityAndS);
    assertError((getBytes(s)[0] & 128) == 0, "non-canonical s");
    const { networkV, v } = function(_v2, yParityAndS, yParity) {
      if (_v2 != null) {
        const v2 = getBigInt(_v2);
        return {
          networkV: v2 >= BN_35 ? v2 : void 0,
          v: _Signature.getNormalizedV(v2)
        };
      }
      if (yParityAndS != null) {
        assertError(isHexString(yParityAndS, 32), "invalid yParityAndS");
        return { v: getBytes(yParityAndS)[0] & 128 ? 28 : 27 };
      }
      if (yParity != null) {
        switch (getNumber(yParity, "sig.yParity")) {
          case 0:
            return { v: 27 };
          case 1:
            return { v: 28 };
        }
        assertError(false, "invalid yParity");
      }
      assertError(false, "missing v");
    }(sig.v, sig.yParityAndS, sig.yParity);
    const result = new _Signature(_guard2, r2, s, v);
    if (networkV) {
      __privateSet(result, _networkV, networkV);
    }
    assertError(sig.yParity == null || getNumber(sig.yParity, "sig.yParity") === result.yParity, "yParity mismatch");
    assertError(sig.yParityAndS == null || sig.yParityAndS === result.yParityAndS, "yParityAndS mismatch");
    return result;
  }
};
_r = new WeakMap();
_s = new WeakMap();
_v = new WeakMap();
_networkV = new WeakMap();
var Signature = _Signature;

// node_modules/ethers/lib.esm/address/address.js
var BN_05 = BigInt(0);
var BN_36 = BigInt(36);
function getChecksumAddress(address) {
  address = address.toLowerCase();
  const chars = address.substring(2).split("");
  const expanded = new Uint8Array(40);
  for (let i = 0; i < 40; i++) {
    expanded[i] = chars[i].charCodeAt(0);
  }
  const hashed = getBytes(keccak256(expanded));
  for (let i = 0; i < 40; i += 2) {
    if (hashed[i >> 1] >> 4 >= 8) {
      chars[i] = chars[i].toUpperCase();
    }
    if ((hashed[i >> 1] & 15) >= 8) {
      chars[i + 1] = chars[i + 1].toUpperCase();
    }
  }
  return "0x" + chars.join("");
}
var ibanLookup = {};
for (let i = 0; i < 10; i++) {
  ibanLookup[String(i)] = String(i);
}
for (let i = 0; i < 26; i++) {
  ibanLookup[String.fromCharCode(65 + i)] = String(10 + i);
}
var safeDigits = 15;
function ibanChecksum(address) {
  address = address.toUpperCase();
  address = address.substring(4) + address.substring(0, 2) + "00";
  let expanded = address.split("").map((c) => {
    return ibanLookup[c];
  }).join("");
  while (expanded.length >= safeDigits) {
    let block = expanded.substring(0, safeDigits);
    expanded = parseInt(block, 10) % 97 + expanded.substring(block.length);
  }
  let checksum2 = String(98 - parseInt(expanded, 10) % 97);
  while (checksum2.length < 2) {
    checksum2 = "0" + checksum2;
  }
  return checksum2;
}
var Base36 = function() {
  ;
  const result = {};
  for (let i = 0; i < 36; i++) {
    const key = "0123456789abcdefghijklmnopqrstuvwxyz"[i];
    result[key] = BigInt(i);
  }
  return result;
}();
function fromBase36(value) {
  value = value.toLowerCase();
  let result = BN_05;
  for (let i = 0; i < value.length; i++) {
    result = result * BN_36 + Base36[value[i]];
  }
  return result;
}
function getAddress(address) {
  assertArgument(typeof address === "string", "invalid address", "address", address);
  if (address.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    if (!address.startsWith("0x")) {
      address = "0x" + address;
    }
    const result = getChecksumAddress(address);
    assertArgument(!address.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || result === address, "bad address checksum", "address", address);
    return result;
  }
  if (address.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    assertArgument(address.substring(2, 4) === ibanChecksum(address), "bad icap checksum", "address", address);
    let result = fromBase36(address.substring(4)).toString(16);
    while (result.length < 40) {
      result = "0" + result;
    }
    return getChecksumAddress("0x" + result);
  }
  assertArgument(false, "invalid address", "address", address);
}

// node_modules/ethers/lib.esm/address/contract-address.js
function getCreate2Address(_from, _salt, _initCodeHash) {
  const from = getAddress(_from);
  const salt = getBytes(_salt, "salt");
  const initCodeHash = getBytes(_initCodeHash, "initCodeHash");
  assertArgument(salt.length === 32, "salt must be 32 bytes", "salt", _salt);
  assertArgument(initCodeHash.length === 32, "initCodeHash must be 32 bytes", "initCodeHash", _initCodeHash);
  return getAddress(dataSlice(keccak256(concat(["0xff", from, salt, initCodeHash])), 12));
}

// node_modules/ethers/lib.esm/address/checks.js
function isAddressable(value) {
  return value && typeof value.getAddress === "function";
}
async function checkAddress(target, promise) {
  const result = await promise;
  if (result == null || result === "0x0000000000000000000000000000000000000000") {
    assert(typeof target !== "string", "unconfigured name", "UNCONFIGURED_NAME", { value: target });
    assertArgument(false, "invalid AddressLike value; did not resolve to a value address", "target", target);
  }
  return getAddress(result);
}
function resolveAddress(target, resolver) {
  if (typeof target === "string") {
    if (target.match(/^0x[0-9a-f]{40}$/i)) {
      return getAddress(target);
    }
    assert(resolver != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" });
    return checkAddress(target, resolver.resolveName(target));
  } else if (isAddressable(target)) {
    return checkAddress(target, target.getAddress());
  } else if (target && typeof target.then === "function") {
    return checkAddress(target, target);
  }
  assertArgument(false, "unsupported addressable value", "target", target);
}

// node_modules/ethers/lib.esm/abi/typed.js
var _gaurd = {};
function n(value, width) {
  let signed2 = false;
  if (width < 0) {
    signed2 = true;
    width *= -1;
  }
  return new Typed(_gaurd, `${signed2 ? "" : "u"}int${width}`, value, { signed: signed2, width });
}
function b(value, size) {
  return new Typed(_gaurd, `bytes${size ? size : ""}`, value, { size });
}
var _typedSymbol = Symbol.for("_ethers_typed");
var _options;
var _Typed = class _Typed {
  /**
   *  @_ignore:
   */
  constructor(gaurd, type, value, options) {
    /**
     *  The type, as a Solidity-compatible type.
     */
    __publicField(this, "type");
    /**
     *  The actual value.
     */
    __publicField(this, "value");
    __privateAdd(this, _options);
    /**
     *  @_ignore:
     */
    __publicField(this, "_typedSymbol");
    if (options == null) {
      options = null;
    }
    assertPrivate(_gaurd, gaurd, "Typed");
    defineProperties(this, { _typedSymbol, type, value });
    __privateSet(this, _options, options);
    this.format();
  }
  /**
   *  Format the type as a Human-Readable type.
   */
  format() {
    if (this.type === "array") {
      throw new Error("");
    } else if (this.type === "dynamicArray") {
      throw new Error("");
    } else if (this.type === "tuple") {
      return `tuple(${this.value.map((v) => v.format()).join(",")})`;
    }
    return this.type;
  }
  /**
   *  The default value returned by this type.
   */
  defaultValue() {
    return 0;
  }
  /**
   *  The minimum value for numeric types.
   */
  minValue() {
    return 0;
  }
  /**
   *  The maximum value for numeric types.
   */
  maxValue() {
    return 0;
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
   */
  isBigInt() {
    return !!this.type.match(/^u?int[0-9]+$/);
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
   */
  isData() {
    return this.type.startsWith("bytes");
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
   */
  isString() {
    return this.type === "string";
  }
  /**
   *  Returns the tuple name, if this is a tuple. Throws otherwise.
   */
  get tupleName() {
    if (this.type !== "tuple") {
      throw TypeError("not a tuple");
    }
    return __privateGet(this, _options);
  }
  // Returns the length of this type as an array
  // - `null` indicates the length is unforced, it could be dynamic
  // - `-1` indicates the length is dynamic
  // - any other value indicates it is a static array and is its length
  /**
   *  Returns the length of the array type or ``-1`` if it is dynamic.
   *
   *  Throws if the type is not an array.
   */
  get arrayLength() {
    if (this.type !== "array") {
      throw TypeError("not an array");
    }
    if (__privateGet(this, _options) === true) {
      return -1;
    }
    if (__privateGet(this, _options) === false) {
      return this.value.length;
    }
    return null;
  }
  /**
   *  Returns a new **Typed** of %%type%% with the %%value%%.
   */
  static from(type, value) {
    return new _Typed(_gaurd, type, value);
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static uint8(v) {
    return n(v, 8);
  }
  /**
   *  Return a new ``uint16`` type for %%v%%.
   */
  static uint16(v) {
    return n(v, 16);
  }
  /**
   *  Return a new ``uint24`` type for %%v%%.
   */
  static uint24(v) {
    return n(v, 24);
  }
  /**
   *  Return a new ``uint32`` type for %%v%%.
   */
  static uint32(v) {
    return n(v, 32);
  }
  /**
   *  Return a new ``uint40`` type for %%v%%.
   */
  static uint40(v) {
    return n(v, 40);
  }
  /**
   *  Return a new ``uint48`` type for %%v%%.
   */
  static uint48(v) {
    return n(v, 48);
  }
  /**
   *  Return a new ``uint56`` type for %%v%%.
   */
  static uint56(v) {
    return n(v, 56);
  }
  /**
   *  Return a new ``uint64`` type for %%v%%.
   */
  static uint64(v) {
    return n(v, 64);
  }
  /**
   *  Return a new ``uint72`` type for %%v%%.
   */
  static uint72(v) {
    return n(v, 72);
  }
  /**
   *  Return a new ``uint80`` type for %%v%%.
   */
  static uint80(v) {
    return n(v, 80);
  }
  /**
   *  Return a new ``uint88`` type for %%v%%.
   */
  static uint88(v) {
    return n(v, 88);
  }
  /**
   *  Return a new ``uint96`` type for %%v%%.
   */
  static uint96(v) {
    return n(v, 96);
  }
  /**
   *  Return a new ``uint104`` type for %%v%%.
   */
  static uint104(v) {
    return n(v, 104);
  }
  /**
   *  Return a new ``uint112`` type for %%v%%.
   */
  static uint112(v) {
    return n(v, 112);
  }
  /**
   *  Return a new ``uint120`` type for %%v%%.
   */
  static uint120(v) {
    return n(v, 120);
  }
  /**
   *  Return a new ``uint128`` type for %%v%%.
   */
  static uint128(v) {
    return n(v, 128);
  }
  /**
   *  Return a new ``uint136`` type for %%v%%.
   */
  static uint136(v) {
    return n(v, 136);
  }
  /**
   *  Return a new ``uint144`` type for %%v%%.
   */
  static uint144(v) {
    return n(v, 144);
  }
  /**
   *  Return a new ``uint152`` type for %%v%%.
   */
  static uint152(v) {
    return n(v, 152);
  }
  /**
   *  Return a new ``uint160`` type for %%v%%.
   */
  static uint160(v) {
    return n(v, 160);
  }
  /**
   *  Return a new ``uint168`` type for %%v%%.
   */
  static uint168(v) {
    return n(v, 168);
  }
  /**
   *  Return a new ``uint176`` type for %%v%%.
   */
  static uint176(v) {
    return n(v, 176);
  }
  /**
   *  Return a new ``uint184`` type for %%v%%.
   */
  static uint184(v) {
    return n(v, 184);
  }
  /**
   *  Return a new ``uint192`` type for %%v%%.
   */
  static uint192(v) {
    return n(v, 192);
  }
  /**
   *  Return a new ``uint200`` type for %%v%%.
   */
  static uint200(v) {
    return n(v, 200);
  }
  /**
   *  Return a new ``uint208`` type for %%v%%.
   */
  static uint208(v) {
    return n(v, 208);
  }
  /**
   *  Return a new ``uint216`` type for %%v%%.
   */
  static uint216(v) {
    return n(v, 216);
  }
  /**
   *  Return a new ``uint224`` type for %%v%%.
   */
  static uint224(v) {
    return n(v, 224);
  }
  /**
   *  Return a new ``uint232`` type for %%v%%.
   */
  static uint232(v) {
    return n(v, 232);
  }
  /**
   *  Return a new ``uint240`` type for %%v%%.
   */
  static uint240(v) {
    return n(v, 240);
  }
  /**
   *  Return a new ``uint248`` type for %%v%%.
   */
  static uint248(v) {
    return n(v, 248);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint256(v) {
    return n(v, 256);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint(v) {
    return n(v, 256);
  }
  /**
   *  Return a new ``int8`` type for %%v%%.
   */
  static int8(v) {
    return n(v, -8);
  }
  /**
   *  Return a new ``int16`` type for %%v%%.
   */
  static int16(v) {
    return n(v, -16);
  }
  /**
   *  Return a new ``int24`` type for %%v%%.
   */
  static int24(v) {
    return n(v, -24);
  }
  /**
   *  Return a new ``int32`` type for %%v%%.
   */
  static int32(v) {
    return n(v, -32);
  }
  /**
   *  Return a new ``int40`` type for %%v%%.
   */
  static int40(v) {
    return n(v, -40);
  }
  /**
   *  Return a new ``int48`` type for %%v%%.
   */
  static int48(v) {
    return n(v, -48);
  }
  /**
   *  Return a new ``int56`` type for %%v%%.
   */
  static int56(v) {
    return n(v, -56);
  }
  /**
   *  Return a new ``int64`` type for %%v%%.
   */
  static int64(v) {
    return n(v, -64);
  }
  /**
   *  Return a new ``int72`` type for %%v%%.
   */
  static int72(v) {
    return n(v, -72);
  }
  /**
   *  Return a new ``int80`` type for %%v%%.
   */
  static int80(v) {
    return n(v, -80);
  }
  /**
   *  Return a new ``int88`` type for %%v%%.
   */
  static int88(v) {
    return n(v, -88);
  }
  /**
   *  Return a new ``int96`` type for %%v%%.
   */
  static int96(v) {
    return n(v, -96);
  }
  /**
   *  Return a new ``int104`` type for %%v%%.
   */
  static int104(v) {
    return n(v, -104);
  }
  /**
   *  Return a new ``int112`` type for %%v%%.
   */
  static int112(v) {
    return n(v, -112);
  }
  /**
   *  Return a new ``int120`` type for %%v%%.
   */
  static int120(v) {
    return n(v, -120);
  }
  /**
   *  Return a new ``int128`` type for %%v%%.
   */
  static int128(v) {
    return n(v, -128);
  }
  /**
   *  Return a new ``int136`` type for %%v%%.
   */
  static int136(v) {
    return n(v, -136);
  }
  /**
   *  Return a new ``int144`` type for %%v%%.
   */
  static int144(v) {
    return n(v, -144);
  }
  /**
   *  Return a new ``int52`` type for %%v%%.
   */
  static int152(v) {
    return n(v, -152);
  }
  /**
   *  Return a new ``int160`` type for %%v%%.
   */
  static int160(v) {
    return n(v, -160);
  }
  /**
   *  Return a new ``int168`` type for %%v%%.
   */
  static int168(v) {
    return n(v, -168);
  }
  /**
   *  Return a new ``int176`` type for %%v%%.
   */
  static int176(v) {
    return n(v, -176);
  }
  /**
   *  Return a new ``int184`` type for %%v%%.
   */
  static int184(v) {
    return n(v, -184);
  }
  /**
   *  Return a new ``int92`` type for %%v%%.
   */
  static int192(v) {
    return n(v, -192);
  }
  /**
   *  Return a new ``int200`` type for %%v%%.
   */
  static int200(v) {
    return n(v, -200);
  }
  /**
   *  Return a new ``int208`` type for %%v%%.
   */
  static int208(v) {
    return n(v, -208);
  }
  /**
   *  Return a new ``int216`` type for %%v%%.
   */
  static int216(v) {
    return n(v, -216);
  }
  /**
   *  Return a new ``int224`` type for %%v%%.
   */
  static int224(v) {
    return n(v, -224);
  }
  /**
   *  Return a new ``int232`` type for %%v%%.
   */
  static int232(v) {
    return n(v, -232);
  }
  /**
   *  Return a new ``int240`` type for %%v%%.
   */
  static int240(v) {
    return n(v, -240);
  }
  /**
   *  Return a new ``int248`` type for %%v%%.
   */
  static int248(v) {
    return n(v, -248);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int256(v) {
    return n(v, -256);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int(v) {
    return n(v, -256);
  }
  /**
   *  Return a new ``bytes1`` type for %%v%%.
   */
  static bytes1(v) {
    return b(v, 1);
  }
  /**
   *  Return a new ``bytes2`` type for %%v%%.
   */
  static bytes2(v) {
    return b(v, 2);
  }
  /**
   *  Return a new ``bytes3`` type for %%v%%.
   */
  static bytes3(v) {
    return b(v, 3);
  }
  /**
   *  Return a new ``bytes4`` type for %%v%%.
   */
  static bytes4(v) {
    return b(v, 4);
  }
  /**
   *  Return a new ``bytes5`` type for %%v%%.
   */
  static bytes5(v) {
    return b(v, 5);
  }
  /**
   *  Return a new ``bytes6`` type for %%v%%.
   */
  static bytes6(v) {
    return b(v, 6);
  }
  /**
   *  Return a new ``bytes7`` type for %%v%%.
   */
  static bytes7(v) {
    return b(v, 7);
  }
  /**
   *  Return a new ``bytes8`` type for %%v%%.
   */
  static bytes8(v) {
    return b(v, 8);
  }
  /**
   *  Return a new ``bytes9`` type for %%v%%.
   */
  static bytes9(v) {
    return b(v, 9);
  }
  /**
   *  Return a new ``bytes10`` type for %%v%%.
   */
  static bytes10(v) {
    return b(v, 10);
  }
  /**
   *  Return a new ``bytes11`` type for %%v%%.
   */
  static bytes11(v) {
    return b(v, 11);
  }
  /**
   *  Return a new ``bytes12`` type for %%v%%.
   */
  static bytes12(v) {
    return b(v, 12);
  }
  /**
   *  Return a new ``bytes13`` type for %%v%%.
   */
  static bytes13(v) {
    return b(v, 13);
  }
  /**
   *  Return a new ``bytes14`` type for %%v%%.
   */
  static bytes14(v) {
    return b(v, 14);
  }
  /**
   *  Return a new ``bytes15`` type for %%v%%.
   */
  static bytes15(v) {
    return b(v, 15);
  }
  /**
   *  Return a new ``bytes16`` type for %%v%%.
   */
  static bytes16(v) {
    return b(v, 16);
  }
  /**
   *  Return a new ``bytes17`` type for %%v%%.
   */
  static bytes17(v) {
    return b(v, 17);
  }
  /**
   *  Return a new ``bytes18`` type for %%v%%.
   */
  static bytes18(v) {
    return b(v, 18);
  }
  /**
   *  Return a new ``bytes19`` type for %%v%%.
   */
  static bytes19(v) {
    return b(v, 19);
  }
  /**
   *  Return a new ``bytes20`` type for %%v%%.
   */
  static bytes20(v) {
    return b(v, 20);
  }
  /**
   *  Return a new ``bytes21`` type for %%v%%.
   */
  static bytes21(v) {
    return b(v, 21);
  }
  /**
   *  Return a new ``bytes22`` type for %%v%%.
   */
  static bytes22(v) {
    return b(v, 22);
  }
  /**
   *  Return a new ``bytes23`` type for %%v%%.
   */
  static bytes23(v) {
    return b(v, 23);
  }
  /**
   *  Return a new ``bytes24`` type for %%v%%.
   */
  static bytes24(v) {
    return b(v, 24);
  }
  /**
   *  Return a new ``bytes25`` type for %%v%%.
   */
  static bytes25(v) {
    return b(v, 25);
  }
  /**
   *  Return a new ``bytes26`` type for %%v%%.
   */
  static bytes26(v) {
    return b(v, 26);
  }
  /**
   *  Return a new ``bytes27`` type for %%v%%.
   */
  static bytes27(v) {
    return b(v, 27);
  }
  /**
   *  Return a new ``bytes28`` type for %%v%%.
   */
  static bytes28(v) {
    return b(v, 28);
  }
  /**
   *  Return a new ``bytes29`` type for %%v%%.
   */
  static bytes29(v) {
    return b(v, 29);
  }
  /**
   *  Return a new ``bytes30`` type for %%v%%.
   */
  static bytes30(v) {
    return b(v, 30);
  }
  /**
   *  Return a new ``bytes31`` type for %%v%%.
   */
  static bytes31(v) {
    return b(v, 31);
  }
  /**
   *  Return a new ``bytes32`` type for %%v%%.
   */
  static bytes32(v) {
    return b(v, 32);
  }
  /**
   *  Return a new ``address`` type for %%v%%.
   */
  static address(v) {
    return new _Typed(_gaurd, "address", v);
  }
  /**
   *  Return a new ``bool`` type for %%v%%.
   */
  static bool(v) {
    return new _Typed(_gaurd, "bool", !!v);
  }
  /**
   *  Return a new ``bytes`` type for %%v%%.
   */
  static bytes(v) {
    return new _Typed(_gaurd, "bytes", v);
  }
  /**
   *  Return a new ``string`` type for %%v%%.
   */
  static string(v) {
    return new _Typed(_gaurd, "string", v);
  }
  /**
   *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
   */
  static array(v, dynamic) {
    throw new Error("not implemented yet");
    return new _Typed(_gaurd, "array", v, dynamic);
  }
  /**
   *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
   */
  static tuple(v, name) {
    throw new Error("not implemented yet");
    return new _Typed(_gaurd, "tuple", v, name);
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static overrides(v) {
    return new _Typed(_gaurd, "overrides", Object.assign({}, v));
  }
  /**
   *  Returns true only if %%value%% is a [[Typed]] instance.
   */
  static isTyped(value) {
    return value && typeof value === "object" && "_typedSymbol" in value && value._typedSymbol === _typedSymbol;
  }
  /**
   *  If the value is a [[Typed]] instance, validates the underlying value
   *  and returns it, otherwise returns value directly.
   *
   *  This is useful for functions that with to accept either a [[Typed]]
   *  object or values.
   */
  static dereference(value, type) {
    if (_Typed.isTyped(value)) {
      if (value.type !== type) {
        throw new Error(`invalid type: expecetd ${type}, got ${value.type}`);
      }
      return value.value;
    }
    return value;
  }
};
_options = new WeakMap();
var Typed = _Typed;

// node_modules/ethers/lib.esm/abi/coders/address.js
var AddressCoder = class extends Coder {
  constructor(localName) {
    super("address", "address", localName, false);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(writer, _value) {
    let value = Typed.dereference(_value, "string");
    try {
      value = getAddress(value);
    } catch (error) {
      return this._throwError(error.message, _value);
    }
    return writer.writeValue(value);
  }
  decode(reader) {
    return getAddress(toBeHex(reader.readValue(), 20));
  }
};

// node_modules/ethers/lib.esm/abi/coders/anonymous.js
var AnonymousCoder = class extends Coder {
  constructor(coder) {
    super(coder.name, coder.type, "_", coder.dynamic);
    __publicField(this, "coder");
    this.coder = coder;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(writer, value) {
    return this.coder.encode(writer, value);
  }
  decode(reader) {
    return this.coder.decode(reader);
  }
};

// node_modules/ethers/lib.esm/abi/coders/array.js
function pack(writer, coders, values) {
  let arrayValues = [];
  if (Array.isArray(values)) {
    arrayValues = values;
  } else if (values && typeof values === "object") {
    let unique = {};
    arrayValues = coders.map((coder) => {
      const name = coder.localName;
      assert(name, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
      assert(!unique[name], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder }, value: values });
      unique[name] = true;
      return values[name];
    });
  } else {
    assertArgument(false, "invalid tuple value", "tuple", values);
  }
  assertArgument(coders.length === arrayValues.length, "types/value length mismatch", "tuple", values);
  let staticWriter = new Writer();
  let dynamicWriter = new Writer();
  let updateFuncs = [];
  coders.forEach((coder, index) => {
    let value = arrayValues[index];
    if (coder.dynamic) {
      let dynamicOffset = dynamicWriter.length;
      coder.encode(dynamicWriter, value);
      let updateFunc = staticWriter.writeUpdatableValue();
      updateFuncs.push((baseOffset) => {
        updateFunc(baseOffset + dynamicOffset);
      });
    } else {
      coder.encode(staticWriter, value);
    }
  });
  updateFuncs.forEach((func) => {
    func(staticWriter.length);
  });
  let length = writer.appendWriter(staticWriter);
  length += writer.appendWriter(dynamicWriter);
  return length;
}
function unpack(reader, coders) {
  let values = [];
  let keys = [];
  let baseReader = reader.subReader(0);
  coders.forEach((coder) => {
    let value = null;
    if (coder.dynamic) {
      let offset = reader.readIndex();
      let offsetReader = baseReader.subReader(offset);
      try {
        value = coder.decode(offsetReader);
      } catch (error) {
        if (isError(error, "BUFFER_OVERRUN")) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    } else {
      try {
        value = coder.decode(reader);
      } catch (error) {
        if (isError(error, "BUFFER_OVERRUN")) {
          throw error;
        }
        value = error;
        value.baseType = coder.name;
        value.name = coder.localName;
        value.type = coder.type;
      }
    }
    if (value == void 0) {
      throw new Error("investigate");
    }
    values.push(value);
    keys.push(coder.localName || null);
  });
  return Result.fromItems(values, keys);
}
var ArrayCoder = class extends Coder {
  constructor(coder, length, localName) {
    const type = coder.type + "[" + (length >= 0 ? length : "") + "]";
    const dynamic = length === -1 || coder.dynamic;
    super("array", type, localName, dynamic);
    __publicField(this, "coder");
    __publicField(this, "length");
    defineProperties(this, { coder, length });
  }
  defaultValue() {
    const defaultChild = this.coder.defaultValue();
    const result = [];
    for (let i = 0; i < this.length; i++) {
      result.push(defaultChild);
    }
    return result;
  }
  encode(writer, _value) {
    const value = Typed.dereference(_value, "array");
    if (!Array.isArray(value)) {
      this._throwError("expected array value", value);
    }
    let count = this.length;
    if (count === -1) {
      count = value.length;
      writer.writeValue(value.length);
    }
    assertArgumentCount(value.length, count, "coder array" + (this.localName ? " " + this.localName : ""));
    let coders = [];
    for (let i = 0; i < value.length; i++) {
      coders.push(this.coder);
    }
    return pack(writer, coders, value);
  }
  decode(reader) {
    let count = this.length;
    if (count === -1) {
      count = reader.readIndex();
      assert(count * WordSize <= reader.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: reader.bytes, offset: count * WordSize, length: reader.dataLength });
    }
    let coders = [];
    for (let i = 0; i < count; i++) {
      coders.push(new AnonymousCoder(this.coder));
    }
    return unpack(reader, coders);
  }
};

// node_modules/ethers/lib.esm/abi/coders/boolean.js
var BooleanCoder = class extends Coder {
  constructor(localName) {
    super("bool", "bool", localName, false);
  }
  defaultValue() {
    return false;
  }
  encode(writer, _value) {
    const value = Typed.dereference(_value, "bool");
    return writer.writeValue(value ? 1 : 0);
  }
  decode(reader) {
    return !!reader.readValue();
  }
};

// node_modules/ethers/lib.esm/abi/coders/bytes.js
var DynamicBytesCoder = class extends Coder {
  constructor(type, localName) {
    super(type, type, localName, true);
  }
  defaultValue() {
    return "0x";
  }
  encode(writer, value) {
    value = getBytesCopy(value);
    let length = writer.writeValue(value.length);
    length += writer.writeBytes(value);
    return length;
  }
  decode(reader) {
    return reader.readBytes(reader.readIndex(), true);
  }
};
var BytesCoder = class extends DynamicBytesCoder {
  constructor(localName) {
    super("bytes", localName);
  }
  decode(reader) {
    return hexlify(super.decode(reader));
  }
};

// node_modules/ethers/lib.esm/abi/coders/fixed-bytes.js
var FixedBytesCoder = class extends Coder {
  constructor(size, localName) {
    let name = "bytes" + String(size);
    super(name, name, localName, false);
    __publicField(this, "size");
    defineProperties(this, { size }, { size: "number" });
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(writer, _value) {
    let data = getBytesCopy(Typed.dereference(_value, this.type));
    if (data.length !== this.size) {
      this._throwError("incorrect data length", _value);
    }
    return writer.writeBytes(data);
  }
  decode(reader) {
    return hexlify(reader.readBytes(this.size));
  }
};

// node_modules/ethers/lib.esm/abi/coders/null.js
var Empty = new Uint8Array([]);
var NullCoder = class extends Coder {
  constructor(localName) {
    super("null", "", localName, false);
  }
  defaultValue() {
    return null;
  }
  encode(writer, value) {
    if (value != null) {
      this._throwError("not null", value);
    }
    return writer.writeBytes(Empty);
  }
  decode(reader) {
    reader.readBytes(0);
    return null;
  }
};

// node_modules/ethers/lib.esm/abi/coders/number.js
var BN_06 = BigInt(0);
var BN_14 = BigInt(1);
var BN_MAX_UINT256 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var NumberCoder = class extends Coder {
  constructor(size, signed2, localName) {
    const name = (signed2 ? "int" : "uint") + size * 8;
    super(name, name, localName, false);
    __publicField(this, "size");
    __publicField(this, "signed");
    defineProperties(this, { size, signed: signed2 }, { size: "number", signed: "boolean" });
  }
  defaultValue() {
    return 0;
  }
  encode(writer, _value) {
    let value = getBigInt(Typed.dereference(_value, this.type));
    let maxUintValue = mask(BN_MAX_UINT256, WordSize * 8);
    if (this.signed) {
      let bounds = mask(maxUintValue, this.size * 8 - 1);
      if (value > bounds || value < -(bounds + BN_14)) {
        this._throwError("value out-of-bounds", _value);
      }
      value = toTwos(value, 8 * WordSize);
    } else if (value < BN_06 || value > mask(maxUintValue, this.size * 8)) {
      this._throwError("value out-of-bounds", _value);
    }
    return writer.writeValue(value);
  }
  decode(reader) {
    let value = mask(reader.readValue(), this.size * 8);
    if (this.signed) {
      value = fromTwos(value, this.size * 8);
    }
    return value;
  }
};

// node_modules/ethers/lib.esm/abi/coders/string.js
var StringCoder = class extends DynamicBytesCoder {
  constructor(localName) {
    super("string", localName);
  }
  defaultValue() {
    return "";
  }
  encode(writer, _value) {
    return super.encode(writer, toUtf8Bytes(Typed.dereference(_value, "string")));
  }
  decode(reader) {
    return toUtf8String(super.decode(reader));
  }
};

// node_modules/ethers/lib.esm/abi/coders/tuple.js
var TupleCoder = class extends Coder {
  constructor(coders, localName) {
    let dynamic = false;
    const types = [];
    coders.forEach((coder) => {
      if (coder.dynamic) {
        dynamic = true;
      }
      types.push(coder.type);
    });
    const type = "tuple(" + types.join(",") + ")";
    super("tuple", type, localName, dynamic);
    __publicField(this, "coders");
    defineProperties(this, { coders: Object.freeze(coders.slice()) });
  }
  defaultValue() {
    const values = [];
    this.coders.forEach((coder) => {
      values.push(coder.defaultValue());
    });
    const uniqueNames = this.coders.reduce((accum, coder) => {
      const name = coder.localName;
      if (name) {
        if (!accum[name]) {
          accum[name] = 0;
        }
        accum[name]++;
      }
      return accum;
    }, {});
    this.coders.forEach((coder, index) => {
      let name = coder.localName;
      if (!name || uniqueNames[name] !== 1) {
        return;
      }
      if (name === "length") {
        name = "_length";
      }
      if (values[name] != null) {
        return;
      }
      values[name] = values[index];
    });
    return Object.freeze(values);
  }
  encode(writer, _value) {
    const value = Typed.dereference(_value, "tuple");
    return pack(writer, this.coders, value);
  }
  decode(reader) {
    return unpack(reader, this.coders);
  }
};

// node_modules/ethers/lib.esm/hash/id.js
function id(value) {
  return keccak256(toUtf8Bytes(value));
}

// node_modules/ethers/lib.esm/hash/namehash.js
var Zeros2 = new Uint8Array(32);
Zeros2.fill(0);

// node_modules/ethers/lib.esm/transaction/accesslist.js
function accessSetify(addr, storageKeys) {
  return {
    address: getAddress(addr),
    storageKeys: storageKeys.map((storageKey, index) => {
      assertArgument(isHexString(storageKey, 32), "invalid slot", `storageKeys[${index}]`, storageKey);
      return storageKey.toLowerCase();
    })
  };
}
function accessListify(value) {
  if (Array.isArray(value)) {
    return value.map((set, index) => {
      if (Array.isArray(set)) {
        assertArgument(set.length === 2, "invalid slot set", `value[${index}]`, set);
        return accessSetify(set[0], set[1]);
      }
      assertArgument(set != null && typeof set === "object", "invalid address-slot set", "value", value);
      return accessSetify(set.address, set.storageKeys);
    });
  }
  assertArgument(value != null && typeof value === "object", "invalid access list", "value", value);
  const result = Object.keys(value).map((addr) => {
    const storageKeys = value[addr].reduce((accum, storageKey) => {
      accum[storageKey] = true;
      return accum;
    }, {});
    return accessSetify(addr, Object.keys(storageKeys).sort());
  });
  result.sort((a, b2) => a.address.localeCompare(b2.address));
  return result;
}

// node_modules/ethers/lib.esm/transaction/transaction.js
var BN_07 = BigInt(0);
var BN_22 = BigInt(2);
var BN_272 = BigInt(27);
var BN_282 = BigInt(28);
var BN_352 = BigInt(35);
var BN_MAX_UINT = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var BLOB_SIZE = 4096 * 32;

// node_modules/ethers/lib.esm/hash/solidity.js
var regexBytes = new RegExp("^bytes([0-9]+)$");
var regexNumber = new RegExp("^(u?int)([0-9]*)$");
var regexArray = new RegExp("^(.*)\\[([0-9]*)\\]$");
function _pack(type, value, isArray) {
  switch (type) {
    case "address":
      if (isArray) {
        return getBytes(zeroPadValue(value, 32));
      }
      return getBytes(getAddress(value));
    case "string":
      return toUtf8Bytes(value);
    case "bytes":
      return getBytes(value);
    case "bool":
      value = !!value ? "0x01" : "0x00";
      if (isArray) {
        return getBytes(zeroPadValue(value, 32));
      }
      return getBytes(value);
  }
  let match = type.match(regexNumber);
  if (match) {
    let signed2 = match[1] === "int";
    let size = parseInt(match[2] || "256");
    assertArgument((!match[2] || match[2] === String(size)) && size % 8 === 0 && size !== 0 && size <= 256, "invalid number type", "type", type);
    if (isArray) {
      size = 256;
    }
    if (signed2) {
      value = toTwos(value, size);
    }
    return getBytes(zeroPadValue(toBeArray(value), size / 8));
  }
  match = type.match(regexBytes);
  if (match) {
    const size = parseInt(match[1]);
    assertArgument(String(size) === match[1] && size !== 0 && size <= 32, "invalid bytes type", "type", type);
    assertArgument(dataLength(value) === size, `invalid value for ${type}`, "value", value);
    if (isArray) {
      return getBytes(zeroPadBytes(value, 32));
    }
    return value;
  }
  match = type.match(regexArray);
  if (match && Array.isArray(value)) {
    const baseType = match[1];
    const count = parseInt(match[2] || String(value.length));
    assertArgument(count === value.length, `invalid array length for ${type}`, "value", value);
    const result = [];
    value.forEach(function(value2) {
      result.push(_pack(baseType, value2, true));
    });
    return getBytes(concat(result));
  }
  assertArgument(false, "invalid type", "type", type);
}
function solidityPacked(types, values) {
  assertArgument(types.length === values.length, "wrong number of values; expected ${ types.length }", "values", values);
  const tight = [];
  types.forEach(function(type, index) {
    tight.push(_pack(type, values[index]));
  });
  return hexlify(concat(tight));
}
function solidityPackedKeccak256(types, values) {
  return keccak256(solidityPacked(types, values));
}

// node_modules/ethers/lib.esm/hash/typed-data.js
var padding = new Uint8Array(32);
padding.fill(0);
var BN__1 = BigInt(-1);
var BN_08 = BigInt(0);
var BN_15 = BigInt(1);
var BN_MAX_UINT2562 = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
var hexTrue = toBeHex(BN_15, 32);
var hexFalse = toBeHex(BN_08, 32);
function checkString(key) {
  return function(value) {
    assertArgument(typeof value === "string", `invalid domain value for ${JSON.stringify(key)}`, `domain.${key}`, value);
    return value;
  };
}
var domainChecks = {
  name: checkString("name"),
  version: checkString("version"),
  chainId: function(_value) {
    const value = getBigInt(_value, "domain.chainId");
    assertArgument(value >= 0, "invalid chain ID", "domain.chainId", _value);
    if (Number.isSafeInteger(value)) {
      return Number(value);
    }
    return toQuantity(value);
  },
  verifyingContract: function(value) {
    try {
      return getAddress(value).toLowerCase();
    } catch (error) {
    }
    assertArgument(false, `invalid domain value "verifyingContract"`, "domain.verifyingContract", value);
  },
  salt: function(value) {
    const bytes3 = getBytes(value, "domain.salt");
    assertArgument(bytes3.length === 32, `invalid domain value "salt"`, "domain.salt", value);
    return hexlify(bytes3);
  }
};

// node_modules/ethers/lib.esm/abi/fragments.js
function setify(items) {
  const result = /* @__PURE__ */ new Set();
  items.forEach((k) => result.add(k));
  return Object.freeze(result);
}
var _kwVisibDeploy = "external public payable override";
var KwVisibDeploy = setify(_kwVisibDeploy.split(" "));
var _kwVisib = "constant external internal payable private public pure view override";
var KwVisib = setify(_kwVisib.split(" "));
var _kwTypes = "constructor error event fallback function receive struct";
var KwTypes = setify(_kwTypes.split(" "));
var _kwModifiers = "calldata memory storage payable indexed";
var KwModifiers = setify(_kwModifiers.split(" "));
var _kwOther = "tuple returns";
var _keywords = [_kwTypes, _kwModifiers, _kwOther, _kwVisib].join(" ");
var Keywords = setify(_keywords.split(" "));
var SimpleTokens = {
  "(": "OPEN_PAREN",
  ")": "CLOSE_PAREN",
  "[": "OPEN_BRACKET",
  "]": "CLOSE_BRACKET",
  ",": "COMMA",
  "@": "AT"
};
var regexWhitespacePrefix = new RegExp("^(\\s*)");
var regexNumberPrefix = new RegExp("^([0-9]+)");
var regexIdPrefix = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)");
var regexId = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$");
var regexType = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
var _offset2, _tokens, _TokenString_instances, subTokenString_fn;
var _TokenString = class _TokenString {
  constructor(tokens) {
    __privateAdd(this, _TokenString_instances);
    __privateAdd(this, _offset2);
    __privateAdd(this, _tokens);
    __privateSet(this, _offset2, 0);
    __privateSet(this, _tokens, tokens.slice());
  }
  get offset() {
    return __privateGet(this, _offset2);
  }
  get length() {
    return __privateGet(this, _tokens).length - __privateGet(this, _offset2);
  }
  clone() {
    return new _TokenString(__privateGet(this, _tokens));
  }
  reset() {
    __privateSet(this, _offset2, 0);
  }
  // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
  popKeyword(allowed) {
    const top = this.peek();
    if (top.type !== "KEYWORD" || !allowed.has(top.text)) {
      throw new Error(`expected keyword ${top.text}`);
    }
    return this.pop().text;
  }
  // Pops and returns the value of the next token if it is `type`; throws if out of tokens
  popType(type) {
    if (this.peek().type !== type) {
      const top = this.peek();
      throw new Error(`expected ${type}; got ${top.type} ${JSON.stringify(top.text)}`);
    }
    return this.pop().text;
  }
  // Pops and returns a "(" TOKENS ")"
  popParen() {
    const top = this.peek();
    if (top.type !== "OPEN_PAREN") {
      throw new Error("bad start");
    }
    const result = __privateMethod(this, _TokenString_instances, subTokenString_fn).call(this, __privateGet(this, _offset2) + 1, top.match + 1);
    __privateSet(this, _offset2, top.match + 1);
    return result;
  }
  // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
  popParams() {
    const top = this.peek();
    if (top.type !== "OPEN_PAREN") {
      throw new Error("bad start");
    }
    const result = [];
    while (__privateGet(this, _offset2) < top.match - 1) {
      const link = this.peek().linkNext;
      result.push(__privateMethod(this, _TokenString_instances, subTokenString_fn).call(this, __privateGet(this, _offset2) + 1, link));
      __privateSet(this, _offset2, link);
    }
    __privateSet(this, _offset2, top.match + 1);
    return result;
  }
  // Returns the top Token, throwing if out of tokens
  peek() {
    if (__privateGet(this, _offset2) >= __privateGet(this, _tokens).length) {
      throw new Error("out-of-bounds");
    }
    return __privateGet(this, _tokens)[__privateGet(this, _offset2)];
  }
  // Returns the next value, if it is a keyword in `allowed`
  peekKeyword(allowed) {
    const top = this.peekType("KEYWORD");
    return top != null && allowed.has(top) ? top : null;
  }
  // Returns the value of the next token if it is `type`
  peekType(type) {
    if (this.length === 0) {
      return null;
    }
    const top = this.peek();
    return top.type === type ? top.text : null;
  }
  // Returns the next token; throws if out of tokens
  pop() {
    const result = this.peek();
    __privateWrapper(this, _offset2)._++;
    return result;
  }
  toString() {
    const tokens = [];
    for (let i = __privateGet(this, _offset2); i < __privateGet(this, _tokens).length; i++) {
      const token = __privateGet(this, _tokens)[i];
      tokens.push(`${token.type}:${token.text}`);
    }
    return `<TokenString ${tokens.join(" ")}>`;
  }
};
_offset2 = new WeakMap();
_tokens = new WeakMap();
_TokenString_instances = new WeakSet();
subTokenString_fn = function(from = 0, to = 0) {
  return new _TokenString(__privateGet(this, _tokens).slice(from, to).map((t) => {
    return Object.freeze(Object.assign({}, t, {
      match: t.match - from,
      linkBack: t.linkBack - from,
      linkNext: t.linkNext - from
    }));
  }));
};
var TokenString = _TokenString;
function lex(text) {
  const tokens = [];
  const throwError2 = (message) => {
    const token = offset < text.length ? JSON.stringify(text[offset]) : "$EOI";
    throw new Error(`invalid token ${token} at ${offset}: ${message}`);
  };
  let brackets = [];
  let commas = [];
  let offset = 0;
  while (offset < text.length) {
    let cur = text.substring(offset);
    let match = cur.match(regexWhitespacePrefix);
    if (match) {
      offset += match[1].length;
      cur = text.substring(offset);
    }
    const token = { depth: brackets.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset, value: -1 };
    tokens.push(token);
    let type = SimpleTokens[cur[0]] || "";
    if (type) {
      token.type = type;
      token.text = cur[0];
      offset++;
      if (type === "OPEN_PAREN") {
        brackets.push(tokens.length - 1);
        commas.push(tokens.length - 1);
      } else if (type == "CLOSE_PAREN") {
        if (brackets.length === 0) {
          throwError2("no matching open bracket");
        }
        token.match = brackets.pop();
        tokens[token.match].match = tokens.length - 1;
        token.depth--;
        token.linkBack = commas.pop();
        tokens[token.linkBack].linkNext = tokens.length - 1;
      } else if (type === "COMMA") {
        token.linkBack = commas.pop();
        tokens[token.linkBack].linkNext = tokens.length - 1;
        commas.push(tokens.length - 1);
      } else if (type === "OPEN_BRACKET") {
        token.type = "BRACKET";
      } else if (type === "CLOSE_BRACKET") {
        let suffix = tokens.pop().text;
        if (tokens.length > 0 && tokens[tokens.length - 1].type === "NUMBER") {
          const value = tokens.pop().text;
          suffix = value + suffix;
          tokens[tokens.length - 1].value = getNumber(value);
        }
        if (tokens.length === 0 || tokens[tokens.length - 1].type !== "BRACKET") {
          throw new Error("missing opening bracket");
        }
        tokens[tokens.length - 1].text += suffix;
      }
      continue;
    }
    match = cur.match(regexIdPrefix);
    if (match) {
      token.text = match[1];
      offset += token.text.length;
      if (Keywords.has(token.text)) {
        token.type = "KEYWORD";
        continue;
      }
      if (token.text.match(regexType)) {
        token.type = "TYPE";
        continue;
      }
      token.type = "ID";
      continue;
    }
    match = cur.match(regexNumberPrefix);
    if (match) {
      token.text = match[1];
      token.type = "NUMBER";
      offset += token.text.length;
      continue;
    }
    throw new Error(`unexpected token ${JSON.stringify(cur[0])} at position ${offset}`);
  }
  return new TokenString(tokens.map((t) => Object.freeze(t)));
}
function allowSingle(set, allowed) {
  let included = [];
  for (const key in allowed.keys()) {
    if (set.has(key)) {
      included.push(key);
    }
  }
  if (included.length > 1) {
    throw new Error(`conflicting types: ${included.join(", ")}`);
  }
}
function consumeName(type, tokens) {
  if (tokens.peekKeyword(KwTypes)) {
    const keyword = tokens.pop().text;
    if (keyword !== type) {
      throw new Error(`expected ${type}, got ${keyword}`);
    }
  }
  return tokens.popType("ID");
}
function consumeKeywords(tokens, allowed) {
  const keywords = /* @__PURE__ */ new Set();
  while (true) {
    const keyword = tokens.peekType("KEYWORD");
    if (keyword == null || allowed && !allowed.has(keyword)) {
      break;
    }
    tokens.pop();
    if (keywords.has(keyword)) {
      throw new Error(`duplicate keywords: ${JSON.stringify(keyword)}`);
    }
    keywords.add(keyword);
  }
  return Object.freeze(keywords);
}
function consumeMutability(tokens) {
  let modifiers = consumeKeywords(tokens, KwVisib);
  allowSingle(modifiers, setify("constant payable nonpayable".split(" ")));
  allowSingle(modifiers, setify("pure view payable nonpayable".split(" ")));
  if (modifiers.has("view")) {
    return "view";
  }
  if (modifiers.has("pure")) {
    return "pure";
  }
  if (modifiers.has("payable")) {
    return "payable";
  }
  if (modifiers.has("nonpayable")) {
    return "nonpayable";
  }
  if (modifiers.has("constant")) {
    return "view";
  }
  return "nonpayable";
}
function consumeParams(tokens, allowIndexed) {
  return tokens.popParams().map((t) => ParamType.from(t, allowIndexed));
}
function consumeGas(tokens) {
  if (tokens.peekType("AT")) {
    tokens.pop();
    if (tokens.peekType("NUMBER")) {
      return getBigInt(tokens.pop().text);
    }
    throw new Error("invalid gas");
  }
  return null;
}
function consumeEoi(tokens) {
  if (tokens.length) {
    throw new Error(`unexpected tokens at offset ${tokens.offset}: ${tokens.toString()}`);
  }
}
var regexArrayType = new RegExp(/^(.*)\[([0-9]*)\]$/);
function verifyBasicType(type) {
  const match = type.match(regexType);
  assertArgument(match, "invalid type", "type", type);
  if (type === "uint") {
    return "uint256";
  }
  if (type === "int") {
    return "int256";
  }
  if (match[2]) {
    const length = parseInt(match[2]);
    assertArgument(length !== 0 && length <= 32, "invalid bytes length", "type", type);
  } else if (match[3]) {
    const size = parseInt(match[3]);
    assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid numeric width", "type", type);
  }
  return type;
}
var _guard3 = {};
var internal = Symbol.for("_ethers_internal");
var ParamTypeInternal = "_ParamTypeInternal";
var ErrorFragmentInternal = "_ErrorInternal";
var EventFragmentInternal = "_EventInternal";
var ConstructorFragmentInternal = "_ConstructorInternal";
var FallbackFragmentInternal = "_FallbackInternal";
var FunctionFragmentInternal = "_FunctionInternal";
var StructFragmentInternal = "_StructInternal";
var _ParamType_instances, walkAsync_fn;
var _ParamType = class _ParamType {
  /**
   *  @private
   */
  constructor(guard, name, type, baseType, indexed, components, arrayLength, arrayChildren) {
    __privateAdd(this, _ParamType_instances);
    /**
     *  The local name of the parameter (or ``""`` if unbound)
     */
    __publicField(this, "name");
    /**
     *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
     *  ``"uint256[3][]"``)
     */
    __publicField(this, "type");
    /**
     *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
     */
    __publicField(this, "baseType");
    /**
     *  True if the parameters is indexed.
     *
     *  For non-indexable types this is ``null``.
     */
    __publicField(this, "indexed");
    /**
     *  The components for the tuple.
     *
     *  For non-tuple types this is ``null``.
     */
    __publicField(this, "components");
    /**
     *  The array length, or ``-1`` for dynamic-lengthed arrays.
     *
     *  For non-array types this is ``null``.
     */
    __publicField(this, "arrayLength");
    /**
     *  The type of each child in the array.
     *
     *  For non-array types this is ``null``.
     */
    __publicField(this, "arrayChildren");
    assertPrivate(guard, _guard3, "ParamType");
    Object.defineProperty(this, internal, { value: ParamTypeInternal });
    if (components) {
      components = Object.freeze(components.slice());
    }
    if (baseType === "array") {
      if (arrayLength == null || arrayChildren == null) {
        throw new Error("");
      }
    } else if (arrayLength != null || arrayChildren != null) {
      throw new Error("");
    }
    if (baseType === "tuple") {
      if (components == null) {
        throw new Error("");
      }
    } else if (components != null) {
      throw new Error("");
    }
    defineProperties(this, {
      name,
      type,
      baseType,
      indexed,
      components,
      arrayLength,
      arrayChildren
    });
  }
  /**
   *  Return a string representation of this type.
   *
   *  For example,
   *
   *  ``sighash" => "(uint256,address)"``
   *
   *  ``"minimal" => "tuple(uint256,address) indexed"``
   *
   *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
   */
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      const name = this.name || "";
      if (this.isArray()) {
        const result3 = JSON.parse(this.arrayChildren.format("json"));
        result3.name = name;
        result3.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
        return JSON.stringify(result3);
      }
      const result2 = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name
      };
      if (typeof this.indexed === "boolean") {
        result2.indexed = this.indexed;
      }
      if (this.isTuple()) {
        result2.components = this.components.map((c) => JSON.parse(c.format(format)));
      }
      return JSON.stringify(result2);
    }
    let result = "";
    if (this.isArray()) {
      result += this.arrayChildren.format(format);
      result += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`;
    } else {
      if (this.isTuple()) {
        result += "(" + this.components.map((comp) => comp.format(format)).join(format === "full" ? ", " : ",") + ")";
      } else {
        result += this.type;
      }
    }
    if (format !== "sighash") {
      if (this.indexed === true) {
        result += " indexed";
      }
      if (format === "full" && this.name) {
        result += " " + this.name;
      }
    }
    return result;
  }
  /**
   *  Returns true if %%this%% is an Array type.
   *
   *  This provides a type gaurd ensuring that [[arrayChildren]]
   *  and [[arrayLength]] are non-null.
   */
  isArray() {
    return this.baseType === "array";
  }
  /**
   *  Returns true if %%this%% is a Tuple type.
   *
   *  This provides a type gaurd ensuring that [[components]]
   *  is non-null.
   */
  isTuple() {
    return this.baseType === "tuple";
  }
  /**
   *  Returns true if %%this%% is an Indexable type.
   *
   *  This provides a type gaurd ensuring that [[indexed]]
   *  is non-null.
   */
  isIndexable() {
    return this.indexed != null;
  }
  /**
   *  Walks the **ParamType** with %%value%%, calling %%process%%
   *  on each type, destructing the %%value%% recursively.
   */
  walk(value, process2) {
    if (this.isArray()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid array value");
      }
      if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
        throw new Error("array is wrong length");
      }
      const _this = this;
      return value.map((v) => _this.arrayChildren.walk(v, process2));
    }
    if (this.isTuple()) {
      if (!Array.isArray(value)) {
        throw new Error("invalid tuple value");
      }
      if (value.length !== this.components.length) {
        throw new Error("array is wrong length");
      }
      const _this = this;
      return value.map((v, i) => _this.components[i].walk(v, process2));
    }
    return process2(this.type, value);
  }
  /**
   *  Walks the **ParamType** with %%value%%, asynchronously calling
   *  %%process%% on each type, destructing the %%value%% recursively.
   *
   *  This can be used to resolve ENS names by walking and resolving each
   *  ``"address"`` type.
   */
  async walkAsync(value, process2) {
    const promises = [];
    const result = [value];
    __privateMethod(this, _ParamType_instances, walkAsync_fn).call(this, promises, value, process2, (value2) => {
      result[0] = value2;
    });
    if (promises.length) {
      await Promise.all(promises);
    }
    return result[0];
  }
  /**
   *  Creates a new **ParamType** for %%obj%%.
   *
   *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
   *  otherwise the ``indexed`` keyword will throw an error.
   */
  static from(obj, allowIndexed) {
    if (_ParamType.isParamType(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _ParamType.from(lex(obj), allowIndexed);
      } catch (error) {
        assertArgument(false, "invalid param type", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      let type2 = "", baseType = "";
      let comps = null;
      if (consumeKeywords(obj, setify(["tuple"])).has("tuple") || obj.peekType("OPEN_PAREN")) {
        baseType = "tuple";
        comps = obj.popParams().map((t) => _ParamType.from(t));
        type2 = `tuple(${comps.map((c) => c.format()).join(",")})`;
      } else {
        type2 = verifyBasicType(obj.popType("TYPE"));
        baseType = type2;
      }
      let arrayChildren = null;
      let arrayLength = null;
      while (obj.length && obj.peekType("BRACKET")) {
        const bracket = obj.pop();
        arrayChildren = new _ParamType(_guard3, "", type2, baseType, null, comps, arrayLength, arrayChildren);
        arrayLength = bracket.value;
        type2 += bracket.text;
        baseType = "array";
        comps = null;
      }
      let indexed2 = null;
      const keywords = consumeKeywords(obj, KwModifiers);
      if (keywords.has("indexed")) {
        if (!allowIndexed) {
          throw new Error("");
        }
        indexed2 = true;
      }
      const name2 = obj.peekType("ID") ? obj.pop().text : "";
      if (obj.length) {
        throw new Error("leftover tokens");
      }
      return new _ParamType(_guard3, name2, type2, baseType, indexed2, comps, arrayLength, arrayChildren);
    }
    const name = obj.name;
    assertArgument(!name || typeof name === "string" && name.match(regexId), "invalid name", "obj.name", name);
    let indexed = obj.indexed;
    if (indexed != null) {
      assertArgument(allowIndexed, "parameter cannot be indexed", "obj.indexed", obj.indexed);
      indexed = !!indexed;
    }
    let type = obj.type;
    let arrayMatch = type.match(regexArrayType);
    if (arrayMatch) {
      const arrayLength = parseInt(arrayMatch[2] || "-1");
      const arrayChildren = _ParamType.from({
        type: arrayMatch[1],
        components: obj.components
      });
      return new _ParamType(_guard3, name || "", type, "array", indexed, null, arrayLength, arrayChildren);
    }
    if (type === "tuple" || type.startsWith(
      "tuple("
      /* fix: ) */
    ) || type.startsWith(
      "("
      /* fix: ) */
    )) {
      const comps = obj.components != null ? obj.components.map((c) => _ParamType.from(c)) : null;
      const tuple = new _ParamType(_guard3, name || "", type, "tuple", indexed, comps, null, null);
      return tuple;
    }
    type = verifyBasicType(obj.type);
    return new _ParamType(_guard3, name || "", type, type, indexed, null, null, null);
  }
  /**
   *  Returns true if %%value%% is a **ParamType**.
   */
  static isParamType(value) {
    return value && value[internal] === ParamTypeInternal;
  }
};
_ParamType_instances = new WeakSet();
walkAsync_fn = function(promises, value, process2, setValue) {
  if (this.isArray()) {
    if (!Array.isArray(value)) {
      throw new Error("invalid array value");
    }
    if (this.arrayLength !== -1 && value.length !== this.arrayLength) {
      throw new Error("array is wrong length");
    }
    const childType = this.arrayChildren;
    const result2 = value.slice();
    result2.forEach((value2, index) => {
      var _a2;
      __privateMethod(_a2 = childType, _ParamType_instances, walkAsync_fn).call(_a2, promises, value2, process2, (value3) => {
        result2[index] = value3;
      });
    });
    setValue(result2);
    return;
  }
  if (this.isTuple()) {
    const components = this.components;
    let result2;
    if (Array.isArray(value)) {
      result2 = value.slice();
    } else {
      if (value == null || typeof value !== "object") {
        throw new Error("invalid tuple value");
      }
      result2 = components.map((param) => {
        if (!param.name) {
          throw new Error("cannot use object value with unnamed components");
        }
        if (!(param.name in value)) {
          throw new Error(`missing value for component ${param.name}`);
        }
        return value[param.name];
      });
    }
    if (result2.length !== this.components.length) {
      throw new Error("array is wrong length");
    }
    result2.forEach((value2, index) => {
      var _a2;
      __privateMethod(_a2 = components[index], _ParamType_instances, walkAsync_fn).call(_a2, promises, value2, process2, (value3) => {
        result2[index] = value3;
      });
    });
    setValue(result2);
    return;
  }
  const result = process2(this.type, value);
  if (result.then) {
    promises.push(async function() {
      setValue(await result);
    }());
  } else {
    setValue(result);
  }
};
var ParamType = _ParamType;
var Fragment = class _Fragment {
  /**
   *  @private
   */
  constructor(guard, type, inputs) {
    /**
     *  The type of the fragment.
     */
    __publicField(this, "type");
    /**
     *  The inputs for the fragment.
     */
    __publicField(this, "inputs");
    assertPrivate(guard, _guard3, "Fragment");
    inputs = Object.freeze(inputs.slice());
    defineProperties(this, { type, inputs });
  }
  /**
   *  Creates a new **Fragment** for %%obj%%, wich can be any supported
   *  ABI frgament type.
   */
  static from(obj) {
    if (typeof obj === "string") {
      try {
        _Fragment.from(JSON.parse(obj));
      } catch (e) {
      }
      return _Fragment.from(lex(obj));
    }
    if (obj instanceof TokenString) {
      const type = obj.peekKeyword(KwTypes);
      switch (type) {
        case "constructor":
          return ConstructorFragment.from(obj);
        case "error":
          return ErrorFragment.from(obj);
        case "event":
          return EventFragment.from(obj);
        case "fallback":
        case "receive":
          return FallbackFragment.from(obj);
        case "function":
          return FunctionFragment.from(obj);
        case "struct":
          return StructFragment.from(obj);
      }
    } else if (typeof obj === "object") {
      switch (obj.type) {
        case "constructor":
          return ConstructorFragment.from(obj);
        case "error":
          return ErrorFragment.from(obj);
        case "event":
          return EventFragment.from(obj);
        case "fallback":
        case "receive":
          return FallbackFragment.from(obj);
        case "function":
          return FunctionFragment.from(obj);
        case "struct":
          return StructFragment.from(obj);
      }
      assert(false, `unsupported type: ${obj.type}`, "UNSUPPORTED_OPERATION", {
        operation: "Fragment.from"
      });
    }
    assertArgument(false, "unsupported frgament object", "obj", obj);
  }
  /**
   *  Returns true if %%value%% is a [[ConstructorFragment]].
   */
  static isConstructor(value) {
    return ConstructorFragment.isFragment(value);
  }
  /**
   *  Returns true if %%value%% is an [[ErrorFragment]].
   */
  static isError(value) {
    return ErrorFragment.isFragment(value);
  }
  /**
   *  Returns true if %%value%% is an [[EventFragment]].
   */
  static isEvent(value) {
    return EventFragment.isFragment(value);
  }
  /**
   *  Returns true if %%value%% is a [[FunctionFragment]].
   */
  static isFunction(value) {
    return FunctionFragment.isFragment(value);
  }
  /**
   *  Returns true if %%value%% is a [[StructFragment]].
   */
  static isStruct(value) {
    return StructFragment.isFragment(value);
  }
};
var NamedFragment = class extends Fragment {
  /**
   *  @private
   */
  constructor(guard, type, name, inputs) {
    super(guard, type, inputs);
    /**
     *  The name of the fragment.
     */
    __publicField(this, "name");
    assertArgument(typeof name === "string" && name.match(regexId), "invalid identifier", "name", name);
    inputs = Object.freeze(inputs.slice());
    defineProperties(this, { name });
  }
};
function joinParams(format, params) {
  return "(" + params.map((p) => p.format(format)).join(format === "full" ? ", " : ",") + ")";
}
var ErrorFragment = class _ErrorFragment extends NamedFragment {
  /**
   *  @private
   */
  constructor(guard, name, inputs) {
    super(guard, "error", name, inputs);
    Object.defineProperty(this, internal, { value: ErrorFragmentInternal });
  }
  /**
   *  The Custom Error selector.
   */
  get selector() {
    return id(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this fragment as %%format%%.
   */
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((input) => JSON.parse(input.format(format)))
      });
    }
    const result = [];
    if (format !== "sighash") {
      result.push("error");
    }
    result.push(this.name + joinParams(format, this.inputs));
    return result.join(" ");
  }
  /**
   *  Returns a new **ErrorFragment** for %%obj%%.
   */
  static from(obj) {
    if (_ErrorFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      return _ErrorFragment.from(lex(obj));
    } else if (obj instanceof TokenString) {
      const name = consumeName("error", obj);
      const inputs = consumeParams(obj);
      consumeEoi(obj);
      return new _ErrorFragment(_guard3, name, inputs);
    }
    return new _ErrorFragment(_guard3, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **ErrorFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === ErrorFragmentInternal;
  }
};
var EventFragment = class _EventFragment extends NamedFragment {
  /**
   *  @private
   */
  constructor(guard, name, inputs, anonymous) {
    super(guard, "event", name, inputs);
    /**
     *  Whether this event is anonymous.
     */
    __publicField(this, "anonymous");
    Object.defineProperty(this, internal, { value: EventFragmentInternal });
    defineProperties(this, { anonymous });
  }
  /**
   *  The Event topic hash.
   */
  get topicHash() {
    return id(this.format("sighash"));
  }
  /**
   *  Returns a string representation of this event as %%format%%.
   */
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
      });
    }
    const result = [];
    if (format !== "sighash") {
      result.push("event");
    }
    result.push(this.name + joinParams(format, this.inputs));
    if (format !== "sighash" && this.anonymous) {
      result.push("anonymous");
    }
    return result.join(" ");
  }
  /**
   *  Return the topic hash for an event with %%name%% and %%params%%.
   */
  static getTopicHash(name, params) {
    params = (params || []).map((p) => ParamType.from(p));
    const fragment = new _EventFragment(_guard3, name, params, false);
    return fragment.topicHash;
  }
  /**
   *  Returns a new **EventFragment** for %%obj%%.
   */
  static from(obj) {
    if (_EventFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _EventFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid event fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const name = consumeName("event", obj);
      const inputs = consumeParams(obj, true);
      const anonymous = !!consumeKeywords(obj, setify(["anonymous"])).has("anonymous");
      consumeEoi(obj);
      return new _EventFragment(_guard3, name, inputs, anonymous);
    }
    return new _EventFragment(_guard3, obj.name, obj.inputs ? obj.inputs.map((p) => ParamType.from(p, true)) : [], !!obj.anonymous);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **EventFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === EventFragmentInternal;
  }
};
var ConstructorFragment = class _ConstructorFragment extends Fragment {
  /**
   *  @private
   */
  constructor(guard, type, inputs, payable, gas) {
    super(guard, type, inputs);
    /**
     *  Whether the constructor can receive an endowment.
     */
    __publicField(this, "payable");
    /**
     *  The recommended gas limit for deployment or ``null``.
     */
    __publicField(this, "gas");
    Object.defineProperty(this, internal, { value: ConstructorFragmentInternal });
    defineProperties(this, { payable, gas });
  }
  /**
   *  Returns a string representation of this constructor as %%format%%.
   */
  format(format) {
    assert(format != null && format !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" });
    if (format === "json") {
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.payable ? "payable" : "undefined",
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((i) => JSON.parse(i.format(format)))
      });
    }
    const result = [`constructor${joinParams(format, this.inputs)}`];
    if (this.payable) {
      result.push("payable");
    }
    if (this.gas != null) {
      result.push(`@${this.gas.toString()}`);
    }
    return result.join(" ");
  }
  /**
   *  Returns a new **ConstructorFragment** for %%obj%%.
   */
  static from(obj) {
    if (_ConstructorFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _ConstructorFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid constuctor fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      consumeKeywords(obj, setify(["constructor"]));
      const inputs = consumeParams(obj);
      const payable = !!consumeKeywords(obj, KwVisibDeploy).has("payable");
      const gas = consumeGas(obj);
      consumeEoi(obj);
      return new _ConstructorFragment(_guard3, "constructor", inputs, payable, gas);
    }
    return new _ConstructorFragment(_guard3, "constructor", obj.inputs ? obj.inputs.map(ParamType.from) : [], !!obj.payable, obj.gas != null ? obj.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **ConstructorFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === ConstructorFragmentInternal;
  }
};
var FallbackFragment = class _FallbackFragment extends Fragment {
  constructor(guard, inputs, payable) {
    super(guard, "fallback", inputs);
    /**
     *  If the function can be sent value during invocation.
     */
    __publicField(this, "payable");
    Object.defineProperty(this, internal, { value: FallbackFragmentInternal });
    defineProperties(this, { payable });
  }
  /**
   *  Returns a string representation of this fallback as %%format%%.
   */
  format(format) {
    const type = this.inputs.length === 0 ? "receive" : "fallback";
    if (format === "json") {
      const stateMutability = this.payable ? "payable" : "nonpayable";
      return JSON.stringify({ type, stateMutability });
    }
    return `${type}()${this.payable ? " payable" : ""}`;
  }
  /**
   *  Returns a new **FallbackFragment** for %%obj%%.
   */
  static from(obj) {
    if (_FallbackFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _FallbackFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid fallback fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const errorObj = obj.toString();
      const topIsValid = obj.peekKeyword(setify(["fallback", "receive"]));
      assertArgument(topIsValid, "type must be fallback or receive", "obj", errorObj);
      const type = obj.popKeyword(setify(["fallback", "receive"]));
      if (type === "receive") {
        const inputs2 = consumeParams(obj);
        assertArgument(inputs2.length === 0, `receive cannot have arguments`, "obj.inputs", inputs2);
        consumeKeywords(obj, setify(["payable"]));
        consumeEoi(obj);
        return new _FallbackFragment(_guard3, [], true);
      }
      let inputs = consumeParams(obj);
      if (inputs.length) {
        assertArgument(inputs.length === 1 && inputs[0].type === "bytes", "invalid fallback inputs", "obj.inputs", inputs.map((i) => i.format("minimal")).join(", "));
      } else {
        inputs = [ParamType.from("bytes")];
      }
      const mutability = consumeMutability(obj);
      assertArgument(mutability === "nonpayable" || mutability === "payable", "fallback cannot be constants", "obj.stateMutability", mutability);
      if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
        const outputs = consumeParams(obj);
        assertArgument(outputs.length === 1 && outputs[0].type === "bytes", "invalid fallback outputs", "obj.outputs", outputs.map((i) => i.format("minimal")).join(", "));
      }
      consumeEoi(obj);
      return new _FallbackFragment(_guard3, inputs, mutability === "payable");
    }
    if (obj.type === "receive") {
      return new _FallbackFragment(_guard3, [], true);
    }
    if (obj.type === "fallback") {
      const inputs = [ParamType.from("bytes")];
      const payable = obj.stateMutability === "payable";
      return new _FallbackFragment(_guard3, inputs, payable);
    }
    assertArgument(false, "invalid fallback description", "obj", obj);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FallbackFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === FallbackFragmentInternal;
  }
};
var FunctionFragment = class _FunctionFragment extends NamedFragment {
  /**
   *  @private
   */
  constructor(guard, name, stateMutability, inputs, outputs, gas) {
    super(guard, "function", name, inputs);
    /**
     *  If the function is constant (e.g. ``pure`` or ``view`` functions).
     */
    __publicField(this, "constant");
    /**
     *  The returned types for the result of calling this function.
     */
    __publicField(this, "outputs");
    /**
     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
     *  or ``pure``)
     */
    __publicField(this, "stateMutability");
    /**
     *  If the function can be sent value during invocation.
     */
    __publicField(this, "payable");
    /**
     *  The recommended gas limit to send when calling this function.
     */
    __publicField(this, "gas");
    Object.defineProperty(this, internal, { value: FunctionFragmentInternal });
    outputs = Object.freeze(outputs.slice());
    const constant = stateMutability === "view" || stateMutability === "pure";
    const payable = stateMutability === "payable";
    defineProperties(this, { constant, gas, outputs, payable, stateMutability });
  }
  /**
   *  The Function selector.
   */
  get selector() {
    return id(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this function as %%format%%.
   */
  format(format) {
    if (format == null) {
      format = "sighash";
    }
    if (format === "json") {
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((i) => JSON.parse(i.format(format))),
        outputs: this.outputs.map((o) => JSON.parse(o.format(format)))
      });
    }
    const result = [];
    if (format !== "sighash") {
      result.push("function");
    }
    result.push(this.name + joinParams(format, this.inputs));
    if (format !== "sighash") {
      if (this.stateMutability !== "nonpayable") {
        result.push(this.stateMutability);
      }
      if (this.outputs && this.outputs.length) {
        result.push("returns");
        result.push(joinParams(format, this.outputs));
      }
      if (this.gas != null) {
        result.push(`@${this.gas.toString()}`);
      }
    }
    return result.join(" ");
  }
  /**
   *  Return the selector for a function with %%name%% and %%params%%.
   */
  static getSelector(name, params) {
    params = (params || []).map((p) => ParamType.from(p));
    const fragment = new _FunctionFragment(_guard3, name, "view", params, [], null);
    return fragment.selector;
  }
  /**
   *  Returns a new **FunctionFragment** for %%obj%%.
   */
  static from(obj) {
    if (_FunctionFragment.isFragment(obj)) {
      return obj;
    }
    if (typeof obj === "string") {
      try {
        return _FunctionFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid function fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const name = consumeName("function", obj);
      const inputs = consumeParams(obj);
      const mutability = consumeMutability(obj);
      let outputs = [];
      if (consumeKeywords(obj, setify(["returns"])).has("returns")) {
        outputs = consumeParams(obj);
      }
      const gas = consumeGas(obj);
      consumeEoi(obj);
      return new _FunctionFragment(_guard3, name, mutability, inputs, outputs, gas);
    }
    let stateMutability = obj.stateMutability;
    if (stateMutability == null) {
      stateMutability = "payable";
      if (typeof obj.constant === "boolean") {
        stateMutability = "view";
        if (!obj.constant) {
          stateMutability = "payable";
          if (typeof obj.payable === "boolean" && !obj.payable) {
            stateMutability = "nonpayable";
          }
        }
      } else if (typeof obj.payable === "boolean" && !obj.payable) {
        stateMutability = "nonpayable";
      }
    }
    return new _FunctionFragment(_guard3, obj.name, stateMutability, obj.inputs ? obj.inputs.map(ParamType.from) : [], obj.outputs ? obj.outputs.map(ParamType.from) : [], obj.gas != null ? obj.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FunctionFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === FunctionFragmentInternal;
  }
};
var StructFragment = class _StructFragment extends NamedFragment {
  /**
   *  @private
   */
  constructor(guard, name, inputs) {
    super(guard, "struct", name, inputs);
    Object.defineProperty(this, internal, { value: StructFragmentInternal });
  }
  /**
   *  Returns a string representation of this struct as %%format%%.
   */
  format() {
    throw new Error("@TODO");
  }
  /**
   *  Returns a new **StructFragment** for %%obj%%.
   */
  static from(obj) {
    if (typeof obj === "string") {
      try {
        return _StructFragment.from(lex(obj));
      } catch (error) {
        assertArgument(false, "invalid struct fragment", "obj", obj);
      }
    } else if (obj instanceof TokenString) {
      const name = consumeName("struct", obj);
      const inputs = consumeParams(obj);
      consumeEoi(obj);
      return new _StructFragment(_guard3, name, inputs);
    }
    return new _StructFragment(_guard3, obj.name, obj.inputs ? obj.inputs.map(ParamType.from) : []);
  }
  // @TODO: fix this return type
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **StructFragment**.
   */
  static isFragment(value) {
    return value && value[internal] === StructFragmentInternal;
  }
};

// node_modules/ethers/lib.esm/abi/abi-coder.js
var PanicReasons = /* @__PURE__ */ new Map();
PanicReasons.set(0, "GENERIC_PANIC");
PanicReasons.set(1, "ASSERT_FALSE");
PanicReasons.set(17, "OVERFLOW");
PanicReasons.set(18, "DIVIDE_BY_ZERO");
PanicReasons.set(33, "ENUM_RANGE_ERROR");
PanicReasons.set(34, "BAD_STORAGE_DATA");
PanicReasons.set(49, "STACK_UNDERFLOW");
PanicReasons.set(50, "ARRAY_RANGE_ERROR");
PanicReasons.set(65, "OUT_OF_MEMORY");
PanicReasons.set(81, "UNINITIALIZED_FUNCTION_CALL");
var paramTypeBytes = new RegExp(/^bytes([0-9]*)$/);
var paramTypeNumber = new RegExp(/^(u?int)([0-9]*)$/);
var defaultCoder = null;
var defaultMaxInflation = 1024;
function getBuiltinCallException(action, tx, data, abiCoder) {
  let message = "missing revert data";
  let reason = null;
  const invocation = null;
  let revert = null;
  if (data) {
    message = "execution reverted";
    const bytes3 = getBytes(data);
    data = hexlify(data);
    if (bytes3.length === 0) {
      message += " (no data present; likely require(false) occurred";
      reason = "require(false)";
    } else if (bytes3.length % 32 !== 4) {
      message += " (could not decode reason; invalid data length)";
    } else if (hexlify(bytes3.slice(0, 4)) === "0x08c379a0") {
      try {
        reason = abiCoder.decode(["string"], bytes3.slice(4))[0];
        revert = {
          signature: "Error(string)",
          name: "Error",
          args: [reason]
        };
        message += `: ${JSON.stringify(reason)}`;
      } catch (error) {
        message += " (could not decode reason; invalid string data)";
      }
    } else if (hexlify(bytes3.slice(0, 4)) === "0x4e487b71") {
      try {
        const code = Number(abiCoder.decode(["uint256"], bytes3.slice(4))[0]);
        revert = {
          signature: "Panic(uint256)",
          name: "Panic",
          args: [code]
        };
        reason = `Panic due to ${PanicReasons.get(code) || "UNKNOWN"}(${code})`;
        message += `: ${reason}`;
      } catch (error) {
        message += " (could not decode panic code)";
      }
    } else {
      message += " (unknown custom error)";
    }
  }
  const transaction = {
    to: tx.to ? getAddress(tx.to) : null,
    data: tx.data || "0x"
  };
  if (tx.from) {
    transaction.from = getAddress(tx.from);
  }
  return makeError(message, "CALL_EXCEPTION", {
    action,
    data,
    reason,
    transaction,
    invocation,
    revert
  });
}
var _AbiCoder_instances, getCoder_fn;
var _AbiCoder = class _AbiCoder {
  constructor() {
    __privateAdd(this, _AbiCoder_instances);
  }
  /**
   *  Get the default values for the given %%types%%.
   *
   *  For example, a ``uint`` is by default ``0`` and ``bool``
   *  is by default ``false``.
   */
  getDefaultValue(types) {
    const coders = types.map((type) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.defaultValue();
  }
  /**
   *  Encode the %%values%% as the %%types%% into ABI data.
   *
   *  @returns DataHexstring
   */
  encode(types, values) {
    assertArgumentCount(values.length, types.length, "types/values length mismatch");
    const coders = types.map((type) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    const writer = new Writer();
    coder.encode(writer, values);
    return writer.data;
  }
  /**
   *  Decode the ABI %%data%% as the %%types%% into values.
   *
   *  If %%loose%% decoding is enabled, then strict padding is
   *  not enforced. Some older versions of Solidity incorrectly
   *  padded event data emitted from ``external`` functions.
   */
  decode(types, data, loose) {
    const coders = types.map((type) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, ParamType.from(type)));
    const coder = new TupleCoder(coders, "_");
    return coder.decode(new Reader(data, loose, defaultMaxInflation));
  }
  static _setDefaultMaxInflation(value) {
    assertArgument(typeof value === "number" && Number.isInteger(value), "invalid defaultMaxInflation factor", "value", value);
    defaultMaxInflation = value;
  }
  /**
   *  Returns the shared singleton instance of a default [[AbiCoder]].
   *
   *  On the first call, the instance is created internally.
   */
  static defaultAbiCoder() {
    if (defaultCoder == null) {
      defaultCoder = new _AbiCoder();
    }
    return defaultCoder;
  }
  /**
   *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
   *  result %%data%% for the [[CallExceptionAction]] %%action%% against
   *  the Transaction %%tx%%.
   */
  static getBuiltinCallException(action, tx, data) {
    return getBuiltinCallException(action, tx, data, _AbiCoder.defaultAbiCoder());
  }
};
_AbiCoder_instances = new WeakSet();
getCoder_fn = function(param) {
  if (param.isArray()) {
    return new ArrayCoder(__privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, param.arrayChildren), param.arrayLength, param.name);
  }
  if (param.isTuple()) {
    return new TupleCoder(param.components.map((c) => __privateMethod(this, _AbiCoder_instances, getCoder_fn).call(this, c)), param.name);
  }
  switch (param.baseType) {
    case "address":
      return new AddressCoder(param.name);
    case "bool":
      return new BooleanCoder(param.name);
    case "string":
      return new StringCoder(param.name);
    case "bytes":
      return new BytesCoder(param.name);
    case "":
      return new NullCoder(param.name);
  }
  let match = param.type.match(paramTypeNumber);
  if (match) {
    let size = parseInt(match[2] || "256");
    assertArgument(size !== 0 && size <= 256 && size % 8 === 0, "invalid " + match[1] + " bit length", "param", param);
    return new NumberCoder(size / 8, match[1] === "int", param.name);
  }
  match = param.type.match(paramTypeBytes);
  if (match) {
    let size = parseInt(match[1]);
    assertArgument(size !== 0 && size <= 32, "invalid bytes length", "param", param);
    return new FixedBytesCoder(size, param.name);
  }
  assertArgument(false, "invalid type", "type", param.type);
};
var AbiCoder = _AbiCoder;

// node_modules/ethers/lib.esm/abi/interface.js
var LogDescription = class {
  /**
   *  @_ignore:
   */
  constructor(fragment, topic, args) {
    /**
     *  The matching fragment for the ``topic0``.
     */
    __publicField(this, "fragment");
    /**
     *  The name of the Event.
     */
    __publicField(this, "name");
    /**
     *  The full Event signature.
     */
    __publicField(this, "signature");
    /**
     *  The topic hash for the Event.
     */
    __publicField(this, "topic");
    /**
     *  The arguments passed into the Event with ``emit``.
     */
    __publicField(this, "args");
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      signature,
      topic,
      args
    });
  }
};
var TransactionDescription = class {
  /**
   *  @_ignore:
   */
  constructor(fragment, selector, args, value) {
    /**
     *  The matching fragment from the transaction ``data``.
     */
    __publicField(this, "fragment");
    /**
     *  The name of the Function from the transaction ``data``.
     */
    __publicField(this, "name");
    /**
     *  The arguments passed to the Function from the transaction ``data``.
     */
    __publicField(this, "args");
    /**
     *  The full Function signature from the transaction ``data``.
     */
    __publicField(this, "signature");
    /**
     *  The selector for the Function from the transaction ``data``.
     */
    __publicField(this, "selector");
    /**
     *  The ``value`` (in wei) from the transaction.
     */
    __publicField(this, "value");
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      args,
      signature,
      selector,
      value
    });
  }
};
var ErrorDescription = class {
  /**
   *  @_ignore:
   */
  constructor(fragment, selector, args) {
    /**
     *  The matching fragment.
     */
    __publicField(this, "fragment");
    /**
     *  The name of the Error.
     */
    __publicField(this, "name");
    /**
     *  The arguments passed to the Error with ``revert``.
     */
    __publicField(this, "args");
    /**
     *  The full Error signature.
     */
    __publicField(this, "signature");
    /**
     *  The selector for the Error.
     */
    __publicField(this, "selector");
    const name = fragment.name, signature = fragment.format();
    defineProperties(this, {
      fragment,
      name,
      args,
      signature,
      selector
    });
  }
};
var Indexed = class {
  /**
   *  @_ignore:
   */
  constructor(hash2) {
    /**
     *  The ``keccak256`` of the value logged.
     */
    __publicField(this, "hash");
    /**
     *  @_ignore:
     */
    __publicField(this, "_isIndexed");
    defineProperties(this, { hash: hash2, _isIndexed: true });
  }
  /**
   *  Returns ``true`` if %%value%% is an **Indexed**.
   *
   *  This provides a Type Guard for property access.
   */
  static isIndexed(value) {
    return !!(value && value._isIndexed);
  }
};
var PanicReasons2 = {
  "0": "generic panic",
  "1": "assert(false)",
  "17": "arithmetic overflow",
  "18": "division or modulo by zero",
  "33": "enum overflow",
  "34": "invalid encoded storage byte array accessed",
  "49": "out-of-bounds array access; popping on an empty array",
  "50": "out-of-bounds access of an array or bytesN",
  "65": "out of memory",
  "81": "uninitialized function"
};
var BuiltinErrors = {
  "0x08c379a0": {
    signature: "Error(string)",
    name: "Error",
    inputs: ["string"],
    reason: (message) => {
      return `reverted with reason string ${JSON.stringify(message)}`;
    }
  },
  "0x4e487b71": {
    signature: "Panic(uint256)",
    name: "Panic",
    inputs: ["uint256"],
    reason: (code) => {
      let reason = "unknown panic code";
      if (code >= 0 && code <= 255 && PanicReasons2[code.toString()]) {
        reason = PanicReasons2[code.toString()];
      }
      return `reverted with panic code 0x${code.toString(16)} (${reason})`;
    }
  }
};
var _errors, _events, _functions, _abiCoder, _Interface_instances, getFunction_fn, getEvent_fn;
var _Interface = class _Interface {
  /**
   *  Create a new Interface for the %%fragments%%.
   */
  constructor(fragments) {
    __privateAdd(this, _Interface_instances);
    /**
     *  All the Contract ABI members (i.e. methods, events, errors, etc).
     */
    __publicField(this, "fragments");
    /**
     *  The Contract constructor.
     */
    __publicField(this, "deploy");
    /**
     *  The Fallback method, if any.
     */
    __publicField(this, "fallback");
    /**
     *  If receiving ether is supported.
     */
    __publicField(this, "receive");
    __privateAdd(this, _errors);
    __privateAdd(this, _events);
    __privateAdd(this, _functions);
    //    #structs: Map<string, StructFragment>;
    __privateAdd(this, _abiCoder);
    let abi = [];
    if (typeof fragments === "string") {
      abi = JSON.parse(fragments);
    } else {
      abi = fragments;
    }
    __privateSet(this, _functions, /* @__PURE__ */ new Map());
    __privateSet(this, _errors, /* @__PURE__ */ new Map());
    __privateSet(this, _events, /* @__PURE__ */ new Map());
    const frags = [];
    for (const a of abi) {
      try {
        frags.push(Fragment.from(a));
      } catch (error) {
        console.log(`[Warning] Invalid Fragment ${JSON.stringify(a)}:`, error.message);
      }
    }
    defineProperties(this, {
      fragments: Object.freeze(frags)
    });
    let fallback = null;
    let receive = false;
    __privateSet(this, _abiCoder, this.getAbiCoder());
    this.fragments.forEach((fragment, index) => {
      let bucket;
      switch (fragment.type) {
        case "constructor":
          if (this.deploy) {
            console.log("duplicate definition - constructor");
            return;
          }
          defineProperties(this, { deploy: fragment });
          return;
        case "fallback":
          if (fragment.inputs.length === 0) {
            receive = true;
          } else {
            assertArgument(!fallback || fragment.payable !== fallback.payable, "conflicting fallback fragments", `fragments[${index}]`, fragment);
            fallback = fragment;
            receive = fallback.payable;
          }
          return;
        case "function":
          bucket = __privateGet(this, _functions);
          break;
        case "event":
          bucket = __privateGet(this, _events);
          break;
        case "error":
          bucket = __privateGet(this, _errors);
          break;
        default:
          return;
      }
      const signature = fragment.format();
      if (bucket.has(signature)) {
        return;
      }
      bucket.set(signature, fragment);
    });
    if (!this.deploy) {
      defineProperties(this, {
        deploy: ConstructorFragment.from("constructor()")
      });
    }
    defineProperties(this, { fallback, receive });
  }
  /**
   *  Returns the entire Human-Readable ABI, as an array of
   *  signatures, optionally as %%minimal%% strings, which
   *  removes parameter names and unneceesary spaces.
   */
  format(minimal) {
    const format = minimal ? "minimal" : "full";
    const abi = this.fragments.map((f2) => f2.format(format));
    return abi;
  }
  /**
   *  Return the JSON-encoded ABI. This is the format Solidiy
   *  returns.
   */
  formatJson() {
    const abi = this.fragments.map((f2) => f2.format("json"));
    return JSON.stringify(abi.map((j) => JSON.parse(j)));
  }
  /**
   *  The ABI coder that will be used to encode and decode binary
   *  data.
   */
  getAbiCoder() {
    return AbiCoder.defaultAbiCoder();
  }
  /**
   *  Get the function name for %%key%%, which may be a function selector,
   *  function name or function signature that belongs to the ABI.
   */
  getFunctionName(key) {
    const fragment = __privateMethod(this, _Interface_instances, getFunction_fn).call(this, key, null, false);
    assertArgument(fragment, "no matching function", "key", key);
    return fragment.name;
  }
  /**
   *  Returns true if %%key%% (a function selector, function name or
   *  function signature) is present in the ABI.
   *
   *  In the case of a function name, the name may be ambiguous, so
   *  accessing the [[FunctionFragment]] may require refinement.
   */
  hasFunction(key) {
    return !!__privateMethod(this, _Interface_instances, getFunction_fn).call(this, key, null, false);
  }
  /**
   *  Get the [[FunctionFragment]] for %%key%%, which may be a function
   *  selector, function name or function signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple functions match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single function in
   *  the ABI, this will throw.
   */
  getFunction(key, values) {
    return __privateMethod(this, _Interface_instances, getFunction_fn).call(this, key, values || null, true);
  }
  /**
   *  Iterate over all functions, calling %%callback%%, sorted by their name.
   */
  forEachFunction(callback) {
    const names = Array.from(__privateGet(this, _functions).keys());
    names.sort((a, b2) => a.localeCompare(b2));
    for (let i = 0; i < names.length; i++) {
      const name = names[i];
      callback(__privateGet(this, _functions).get(name), i);
    }
  }
  /**
   *  Get the event name for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   */
  getEventName(key) {
    const fragment = __privateMethod(this, _Interface_instances, getEvent_fn).call(this, key, null, false);
    assertArgument(fragment, "no matching event", "key", key);
    return fragment.name;
  }
  /**
   *  Returns true if %%key%% (an event topic hash, event name or
   *  event signature) is present in the ABI.
   *
   *  In the case of an event name, the name may be ambiguous, so
   *  accessing the [[EventFragment]] may require refinement.
   */
  hasEvent(key) {
    return !!__privateMethod(this, _Interface_instances, getEvent_fn).call(this, key, null, false);
  }
  /**
   *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple events match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single event in
   *  the ABI, this will throw.
   */
  getEvent(key, values) {
    return __privateMethod(this, _Interface_instances, getEvent_fn).call(this, key, values || null, true);
  }
  /**
   *  Iterate over all events, calling %%callback%%, sorted by their name.
   */
  forEachEvent(callback) {
    const names = Array.from(__privateGet(this, _events).keys());
    names.sort((a, b2) => a.localeCompare(b2));
    for (let i = 0; i < names.length; i++) {
      const name = names[i];
      callback(__privateGet(this, _events).get(name), i);
    }
  }
  /**
   *  Get the [[ErrorFragment]] for %%key%%, which may be an error
   *  selector, error name or error signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple errors match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single error in
   *  the ABI, this will throw.
   */
  getError(key, values) {
    if (isHexString(key)) {
      const selector = key.toLowerCase();
      if (BuiltinErrors[selector]) {
        return ErrorFragment.from(BuiltinErrors[selector].signature);
      }
      for (const fragment of __privateGet(this, _errors).values()) {
        if (selector === fragment.selector) {
          return fragment;
        }
      }
      return null;
    }
    if (key.indexOf("(") === -1) {
      const matching = [];
      for (const [name, fragment] of __privateGet(this, _errors)) {
        if (name.split(
          "("
          /* fix:) */
        )[0] === key) {
          matching.push(fragment);
        }
      }
      if (matching.length === 0) {
        if (key === "Error") {
          return ErrorFragment.from("error Error(string)");
        }
        if (key === "Panic") {
          return ErrorFragment.from("error Panic(uint256)");
        }
        return null;
      } else if (matching.length > 1) {
        const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
        assertArgument(false, `ambiguous error description (i.e. ${matchStr})`, "name", key);
      }
      return matching[0];
    }
    key = ErrorFragment.from(key).format();
    if (key === "Error(string)") {
      return ErrorFragment.from("error Error(string)");
    }
    if (key === "Panic(uint256)") {
      return ErrorFragment.from("error Panic(uint256)");
    }
    const result = __privateGet(this, _errors).get(key);
    if (result) {
      return result;
    }
    return null;
  }
  /**
   *  Iterate over all errors, calling %%callback%%, sorted by their name.
   */
  forEachError(callback) {
    const names = Array.from(__privateGet(this, _errors).keys());
    names.sort((a, b2) => a.localeCompare(b2));
    for (let i = 0; i < names.length; i++) {
      const name = names[i];
      callback(__privateGet(this, _errors).get(name), i);
    }
  }
  // Get the 4-byte selector used by Solidity to identify a function
  /*
  getSelector(fragment: ErrorFragment | FunctionFragment): string {
      if (typeof(fragment) === "string") {
          const matches: Array<Fragment> = [ ];
  
          try { matches.push(this.getFunction(fragment)); } catch (error) { }
          try { matches.push(this.getError(<string>fragment)); } catch (_) { }
  
          if (matches.length === 0) {
              logger.throwArgumentError("unknown fragment", "key", fragment);
          } else if (matches.length > 1) {
              logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
          }
  
          fragment = matches[0];
      }
  
      return dataSlice(id(fragment.format()), 0, 4);
  }
      */
  // Get the 32-byte topic hash used by Solidity to identify an event
  /*
  getEventTopic(fragment: EventFragment): string {
      //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
      return id(fragment.format());
  }
  */
  _decodeParams(params, data) {
    return __privateGet(this, _abiCoder).decode(params, data);
  }
  _encodeParams(params, values) {
    return __privateGet(this, _abiCoder).encode(params, values);
  }
  /**
   *  Encodes a ``tx.data`` object for deploying the Contract with
   *  the %%values%% as the constructor arguments.
   */
  encodeDeploy(values) {
    return this._encodeParams(this.deploy.inputs, values || []);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified error (see [[getError]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeErrorResult(fragment, data) {
    if (typeof fragment === "string") {
      const f2 = this.getError(fragment);
      assertArgument(f2, "unknown error", "fragment", fragment);
      fragment = f2;
    }
    assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match error ${fragment.name}.`, "data", data);
    return this._decodeParams(fragment.inputs, dataSlice(data, 4));
  }
  /**
   *  Encodes the transaction revert data for a call result that
   *  reverted from the the Contract with the sepcified %%error%%
   *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeErrorResult(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getError(fragment);
      assertArgument(f2, "unknown error", "fragment", fragment);
      fragment = f2;
    }
    return concat([
      fragment.selector,
      this._encodeParams(fragment.inputs, values || [])
    ]);
  }
  /**
   *  Decodes the %%data%% from a transaction ``tx.data`` for
   *  the function specified (see [[getFunction]] for valid values
   *  for %%fragment%%).
   *
   *  Most developers should prefer the [[parseTransaction]] method
   *  instead, which will automatically detect the fragment.
   */
  decodeFunctionData(fragment, data) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    assertArgument(dataSlice(data, 0, 4) === fragment.selector, `data signature does not match function ${fragment.name}.`, "data", data);
    return this._decodeParams(fragment.inputs, dataSlice(data, 4));
  }
  /**
   *  Encodes the ``tx.data`` for a transaction that calls the function
   *  specified (see [[getFunction]] for valid values for %%fragment%%) with
   *  the %%values%%.
   */
  encodeFunctionData(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    return concat([
      fragment.selector,
      this._encodeParams(fragment.inputs, values || [])
    ]);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeFunctionResult(fragment, data) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    let message = "invalid length for result data";
    const bytes3 = getBytesCopy(data);
    if (bytes3.length % 32 === 0) {
      try {
        return __privateGet(this, _abiCoder).decode(fragment.outputs, bytes3);
      } catch (error) {
        message = "could not decode result data";
      }
    }
    assert(false, message, "BAD_DATA", {
      value: hexlify(bytes3),
      info: { method: fragment.name, signature: fragment.format() }
    });
  }
  makeError(_data4, tx) {
    const data = getBytes(_data4, "data");
    const error = AbiCoder.getBuiltinCallException("call", tx, data);
    const customPrefix = "execution reverted (unknown custom error)";
    if (error.message.startsWith(customPrefix)) {
      const selector = hexlify(data.slice(0, 4));
      const ef = this.getError(selector);
      if (ef) {
        try {
          const args = __privateGet(this, _abiCoder).decode(ef.inputs, data.slice(4));
          error.revert = {
            name: ef.name,
            signature: ef.format(),
            args
          };
          error.reason = error.revert.signature;
          error.message = `execution reverted: ${error.reason}`;
        } catch (e) {
          error.message = `execution reverted (coult not decode custom error)`;
        }
      }
    }
    const parsed = this.parseTransaction(tx);
    if (parsed) {
      error.invocation = {
        method: parsed.name,
        signature: parsed.signature,
        args: parsed.args
      };
    }
    return error;
  }
  /**
   *  Encodes the result data (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values
   *  for %%fragment%%) with %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeFunctionResult(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getFunction(fragment);
      assertArgument(f2, "unknown function", "fragment", fragment);
      fragment = f2;
    }
    return hexlify(__privateGet(this, _abiCoder).encode(fragment.outputs, values || []));
  }
  /*
      spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
          const promises: Array<Promise<>> = [ ];
          const process = function(type: ParamType, value: any): any {
              if (type.baseType === "array") {
                  return descend(type.child
              }
              if (type. === "address") {
              }
          };
  
          const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
              if (inputs.length !== values.length) { throw new Error("length mismatch"); }
              
          };
  
          const result: Array<any> = [ ];
          values.forEach((value, index) => {
              if (value == null) {
                  topics.push(null);
              } else if (param.baseType === "array" || param.baseType === "tuple") {
                  logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
              } else if (Array.isArray(value)) {
                  topics.push(value.map((value) => encodeTopic(param, value)));
              } else {
                  topics.push(encodeTopic(param, value));
              }
          });
      }
  */
  // Create the filter for the event with search criteria (e.g. for eth_filterLog)
  encodeFilterTopics(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getEvent(fragment);
      assertArgument(f2, "unknown event", "eventFragment", fragment);
      fragment = f2;
    }
    assert(values.length <= fragment.inputs.length, `too many arguments for ${fragment.format()}`, "UNEXPECTED_ARGUMENT", { count: values.length, expectedCount: fragment.inputs.length });
    const topics = [];
    if (!fragment.anonymous) {
      topics.push(fragment.topicHash);
    }
    const encodeTopic = (param, value) => {
      if (param.type === "string") {
        return id(value);
      } else if (param.type === "bytes") {
        return keccak256(hexlify(value));
      }
      if (param.type === "bool" && typeof value === "boolean") {
        value = value ? "0x01" : "0x00";
      } else if (param.type.match(/^u?int/)) {
        value = toBeHex(value);
      } else if (param.type.match(/^bytes/)) {
        value = zeroPadBytes(value, 32);
      } else if (param.type === "address") {
        __privateGet(this, _abiCoder).encode(["address"], [value]);
      }
      return zeroPadValue(hexlify(value), 32);
    };
    values.forEach((value, index) => {
      const param = fragment.inputs[index];
      if (!param.indexed) {
        assertArgument(value == null, "cannot filter non-indexed parameters; must be null", "contract." + param.name, value);
        return;
      }
      if (value == null) {
        topics.push(null);
      } else if (param.baseType === "array" || param.baseType === "tuple") {
        assertArgument(false, "filtering with tuples or arrays not supported", "contract." + param.name, value);
      } else if (Array.isArray(value)) {
        topics.push(value.map((value2) => encodeTopic(param, value2)));
      } else {
        topics.push(encodeTopic(param, value));
      }
    });
    while (topics.length && topics[topics.length - 1] === null) {
      topics.pop();
    }
    return topics;
  }
  encodeEventLog(fragment, values) {
    if (typeof fragment === "string") {
      const f2 = this.getEvent(fragment);
      assertArgument(f2, "unknown event", "eventFragment", fragment);
      fragment = f2;
    }
    const topics = [];
    const dataTypes = [];
    const dataValues = [];
    if (!fragment.anonymous) {
      topics.push(fragment.topicHash);
    }
    assertArgument(values.length === fragment.inputs.length, "event arguments/values mismatch", "values", values);
    fragment.inputs.forEach((param, index) => {
      const value = values[index];
      if (param.indexed) {
        if (param.type === "string") {
          topics.push(id(value));
        } else if (param.type === "bytes") {
          topics.push(keccak256(value));
        } else if (param.baseType === "tuple" || param.baseType === "array") {
          throw new Error("not implemented");
        } else {
          topics.push(__privateGet(this, _abiCoder).encode([param.type], [value]));
        }
      } else {
        dataTypes.push(param);
        dataValues.push(value);
      }
    });
    return {
      data: __privateGet(this, _abiCoder).encode(dataTypes, dataValues),
      topics
    };
  }
  // Decode a filter for the event and the search criteria
  decodeEventLog(fragment, data, topics) {
    if (typeof fragment === "string") {
      const f2 = this.getEvent(fragment);
      assertArgument(f2, "unknown event", "eventFragment", fragment);
      fragment = f2;
    }
    if (topics != null && !fragment.anonymous) {
      const eventTopic = fragment.topicHash;
      assertArgument(isHexString(topics[0], 32) && topics[0].toLowerCase() === eventTopic, "fragment/topic mismatch", "topics[0]", topics[0]);
      topics = topics.slice(1);
    }
    const indexed = [];
    const nonIndexed = [];
    const dynamic = [];
    fragment.inputs.forEach((param, index) => {
      if (param.indexed) {
        if (param.type === "string" || param.type === "bytes" || param.baseType === "tuple" || param.baseType === "array") {
          indexed.push(ParamType.from({ type: "bytes32", name: param.name }));
          dynamic.push(true);
        } else {
          indexed.push(param);
          dynamic.push(false);
        }
      } else {
        nonIndexed.push(param);
        dynamic.push(false);
      }
    });
    const resultIndexed = topics != null ? __privateGet(this, _abiCoder).decode(indexed, concat(topics)) : null;
    const resultNonIndexed = __privateGet(this, _abiCoder).decode(nonIndexed, data, true);
    const values = [];
    const keys = [];
    let nonIndexedIndex = 0, indexedIndex = 0;
    fragment.inputs.forEach((param, index) => {
      let value = null;
      if (param.indexed) {
        if (resultIndexed == null) {
          value = new Indexed(null);
        } else if (dynamic[index]) {
          value = new Indexed(resultIndexed[indexedIndex++]);
        } else {
          try {
            value = resultIndexed[indexedIndex++];
          } catch (error) {
            value = error;
          }
        }
      } else {
        try {
          value = resultNonIndexed[nonIndexedIndex++];
        } catch (error) {
          value = error;
        }
      }
      values.push(value);
      keys.push(param.name || null);
    });
    return Result.fromItems(values, keys);
  }
  /**
   *  Parses a transaction, finding the matching function and extracts
   *  the parameter values along with other useful function details.
   *
   *  If the matching function cannot be found, return null.
   */
  parseTransaction(tx) {
    const data = getBytes(tx.data, "tx.data");
    const value = getBigInt(tx.value != null ? tx.value : 0, "tx.value");
    const fragment = this.getFunction(hexlify(data.slice(0, 4)));
    if (!fragment) {
      return null;
    }
    const args = __privateGet(this, _abiCoder).decode(fragment.inputs, data.slice(4));
    return new TransactionDescription(fragment, fragment.selector, args, value);
  }
  parseCallResult(data) {
    throw new Error("@TODO");
  }
  /**
   *  Parses a receipt log, finding the matching event and extracts
   *  the parameter values along with other useful event details.
   *
   *  If the matching event cannot be found, returns null.
   */
  parseLog(log) {
    const fragment = this.getEvent(log.topics[0]);
    if (!fragment || fragment.anonymous) {
      return null;
    }
    return new LogDescription(fragment, fragment.topicHash, this.decodeEventLog(fragment, log.data, log.topics));
  }
  /**
   *  Parses a revert data, finding the matching error and extracts
   *  the parameter values along with other useful error details.
   *
   *  If the matching error cannot be found, returns null.
   */
  parseError(data) {
    const hexData = hexlify(data);
    const fragment = this.getError(dataSlice(hexData, 0, 4));
    if (!fragment) {
      return null;
    }
    const args = __privateGet(this, _abiCoder).decode(fragment.inputs, dataSlice(hexData, 4));
    return new ErrorDescription(fragment, fragment.selector, args);
  }
  /**
   *  Creates a new [[Interface]] from the ABI %%value%%.
   *
   *  The %%value%% may be provided as an existing [[Interface]] object,
   *  a JSON-encoded ABI or any Human-Readable ABI format.
   */
  static from(value) {
    if (value instanceof _Interface) {
      return value;
    }
    if (typeof value === "string") {
      return new _Interface(JSON.parse(value));
    }
    if (typeof value.formatJson === "function") {
      return new _Interface(value.formatJson());
    }
    if (typeof value.format === "function") {
      return new _Interface(value.format("json"));
    }
    return new _Interface(value);
  }
};
_errors = new WeakMap();
_events = new WeakMap();
_functions = new WeakMap();
_abiCoder = new WeakMap();
_Interface_instances = new WeakSet();
// Find a function definition by any means necessary (unless it is ambiguous)
getFunction_fn = function(key, values, forceUnique) {
  if (isHexString(key)) {
    const selector = key.toLowerCase();
    for (const fragment of __privateGet(this, _functions).values()) {
      if (selector === fragment.selector) {
        return fragment;
      }
    }
    return null;
  }
  if (key.indexOf("(") === -1) {
    const matching = [];
    for (const [name, fragment] of __privateGet(this, _functions)) {
      if (name.split(
        "("
        /* fix:) */
      )[0] === key) {
        matching.push(fragment);
      }
    }
    if (values) {
      const lastValue = values.length > 0 ? values[values.length - 1] : null;
      let valueLength = values.length;
      let allowOptions = true;
      if (Typed.isTyped(lastValue) && lastValue.type === "overrides") {
        allowOptions = false;
        valueLength--;
      }
      for (let i = matching.length - 1; i >= 0; i--) {
        const inputs = matching[i].inputs.length;
        if (inputs !== valueLength && (!allowOptions || inputs !== valueLength - 1)) {
          matching.splice(i, 1);
        }
      }
      for (let i = matching.length - 1; i >= 0; i--) {
        const inputs = matching[i].inputs;
        for (let j = 0; j < values.length; j++) {
          if (!Typed.isTyped(values[j])) {
            continue;
          }
          if (j >= inputs.length) {
            if (values[j].type === "overrides") {
              continue;
            }
            matching.splice(i, 1);
            break;
          }
          if (values[j].type !== inputs[j].baseType) {
            matching.splice(i, 1);
            break;
          }
        }
      }
    }
    if (matching.length === 1 && values && values.length !== matching[0].inputs.length) {
      const lastArg = values[values.length - 1];
      if (lastArg == null || Array.isArray(lastArg) || typeof lastArg !== "object") {
        matching.splice(0, 1);
      }
    }
    if (matching.length === 0) {
      return null;
    }
    if (matching.length > 1 && forceUnique) {
      const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
      assertArgument(false, `ambiguous function description (i.e. matches ${matchStr})`, "key", key);
    }
    return matching[0];
  }
  const result = __privateGet(this, _functions).get(FunctionFragment.from(key).format());
  if (result) {
    return result;
  }
  return null;
};
// Find an event definition by any means necessary (unless it is ambiguous)
getEvent_fn = function(key, values, forceUnique) {
  if (isHexString(key)) {
    const eventTopic = key.toLowerCase();
    for (const fragment of __privateGet(this, _events).values()) {
      if (eventTopic === fragment.topicHash) {
        return fragment;
      }
    }
    return null;
  }
  if (key.indexOf("(") === -1) {
    const matching = [];
    for (const [name, fragment] of __privateGet(this, _events)) {
      if (name.split(
        "("
        /* fix:) */
      )[0] === key) {
        matching.push(fragment);
      }
    }
    if (values) {
      for (let i = matching.length - 1; i >= 0; i--) {
        if (matching[i].inputs.length < values.length) {
          matching.splice(i, 1);
        }
      }
      for (let i = matching.length - 1; i >= 0; i--) {
        const inputs = matching[i].inputs;
        for (let j = 0; j < values.length; j++) {
          if (!Typed.isTyped(values[j])) {
            continue;
          }
          if (values[j].type !== inputs[j].baseType) {
            matching.splice(i, 1);
            break;
          }
        }
      }
    }
    if (matching.length === 0) {
      return null;
    }
    if (matching.length > 1 && forceUnique) {
      const matchStr = matching.map((m) => JSON.stringify(m.format())).join(", ");
      assertArgument(false, `ambiguous event description (i.e. matches ${matchStr})`, "key", key);
    }
    return matching[0];
  }
  const result = __privateGet(this, _events).get(EventFragment.from(key).format());
  if (result) {
    return result;
  }
  return null;
};
var Interface = _Interface;

// node_modules/ethers/lib.esm/providers/provider.js
var BN_09 = BigInt(0);
function toJson(value) {
  if (value == null) {
    return null;
  }
  return value.toString();
}
function copyRequest(req) {
  const result = {};
  if (req.to) {
    result.to = req.to;
  }
  if (req.from) {
    result.from = req.from;
  }
  if (req.data) {
    result.data = hexlify(req.data);
  }
  const bigIntKeys = "chainId,gasLimit,gasPrice,maxFeePerBlobGas,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
  for (const key of bigIntKeys) {
    if (!(key in req) || req[key] == null) {
      continue;
    }
    result[key] = getBigInt(req[key], `request.${key}`);
  }
  const numberKeys = "type,nonce".split(/,/);
  for (const key of numberKeys) {
    if (!(key in req) || req[key] == null) {
      continue;
    }
    result[key] = getNumber(req[key], `request.${key}`);
  }
  if (req.accessList) {
    result.accessList = accessListify(req.accessList);
  }
  if ("blockTag" in req) {
    result.blockTag = req.blockTag;
  }
  if ("enableCcipRead" in req) {
    result.enableCcipRead = !!req.enableCcipRead;
  }
  if ("customData" in req) {
    result.customData = req.customData;
  }
  if ("blobVersionedHashes" in req && req.blobVersionedHashes) {
    result.blobVersionedHashes = req.blobVersionedHashes.slice();
  }
  if ("kzg" in req) {
    result.kzg = req.kzg;
  }
  if ("blobs" in req && req.blobs) {
    result.blobs = req.blobs.map((b2) => {
      if (isBytesLike(b2)) {
        return hexlify(b2);
      }
      return Object.assign({}, b2);
    });
  }
  return result;
}
var Log = class {
  /**
   *  @_ignore:
   */
  constructor(log, provider) {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */
    __publicField(this, "provider");
    /**
     *  The transaction hash of the transaction this log occurred in. Use the
     *  [[Log-getTransaction]] to get the [[TransactionResponse]].
     */
    __publicField(this, "transactionHash");
    /**
     *  The block hash of the block this log occurred in. Use the
     *  [[Log-getBlock]] to get the [[Block]].
     */
    __publicField(this, "blockHash");
    /**
     *  The block number of the block this log occurred in. It is preferred
     *  to use the [[Block-hash]] when fetching the related [[Block]],
     *  since in the case of an orphaned block, the block at that height may
     *  have changed.
     */
    __publicField(this, "blockNumber");
    /**
     *  If the **Log** represents a block that was removed due to an orphaned
     *  block, this will be true.
     *
     *  This can only happen within an orphan event listener.
     */
    __publicField(this, "removed");
    /**
     *  The address of the contract that emitted this log.
     */
    __publicField(this, "address");
    /**
     *  The data included in this log when it was emitted.
     */
    __publicField(this, "data");
    /**
     *  The indexed topics included in this log when it was emitted.
     *
     *  All topics are included in the bloom filters, so they can be
     *  efficiently filtered using the [[Provider-getLogs]] method.
     */
    __publicField(this, "topics");
    /**
     *  The index within the block this log occurred at. This is generally
     *  not useful to developers, but can be used with the various roots
     *  to proof inclusion within a block.
     */
    __publicField(this, "index");
    /**
     *  The index within the transaction of this log.
     */
    __publicField(this, "transactionIndex");
    this.provider = provider;
    const topics = Object.freeze(log.topics.slice());
    defineProperties(this, {
      transactionHash: log.transactionHash,
      blockHash: log.blockHash,
      blockNumber: log.blockNumber,
      removed: log.removed,
      address: log.address,
      data: log.data,
      topics,
      index: log.index,
      transactionIndex: log.transactionIndex
    });
  }
  /**
   *  Returns a JSON-compatible object.
   */
  toJSON() {
    const { address, blockHash, blockNumber, data, index, removed, topics, transactionHash, transactionIndex } = this;
    return {
      _type: "log",
      address,
      blockHash,
      blockNumber,
      data,
      index,
      removed,
      topics,
      transactionHash,
      transactionIndex
    };
  }
  /**
   *  Returns the block that this log occurred in.
   */
  async getBlock() {
    const block = await this.provider.getBlock(this.blockHash);
    assert(!!block, "failed to find transaction", "UNKNOWN_ERROR", {});
    return block;
  }
  /**
   *  Returns the transaction that this log occurred in.
   */
  async getTransaction() {
    const tx = await this.provider.getTransaction(this.transactionHash);
    assert(!!tx, "failed to find transaction", "UNKNOWN_ERROR", {});
    return tx;
  }
  /**
   *  Returns the transaction receipt fot the transaction that this
   *  log occurred in.
   */
  async getTransactionReceipt() {
    const receipt = await this.provider.getTransactionReceipt(this.transactionHash);
    assert(!!receipt, "failed to find transaction receipt", "UNKNOWN_ERROR", {});
    return receipt;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return createRemovedLogFilter(this);
  }
};
var _logs;
var TransactionReceipt = class {
  /**
   *  @_ignore:
   */
  constructor(tx, provider) {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */
    __publicField(this, "provider");
    /**
     *  The address the transaction was sent to.
     */
    __publicField(this, "to");
    /**
     *  The sender of the transaction.
     */
    __publicField(this, "from");
    /**
     *  The address of the contract if the transaction was directly
     *  responsible for deploying one.
     *
     *  This is non-null **only** if the ``to`` is empty and the ``data``
     *  was successfully executed as initcode.
     */
    __publicField(this, "contractAddress");
    /**
     *  The transaction hash.
     */
    __publicField(this, "hash");
    /**
     *  The index of this transaction within the block transactions.
     */
    __publicField(this, "index");
    /**
     *  The block hash of the [[Block]] this transaction was included in.
     */
    __publicField(this, "blockHash");
    /**
     *  The block number of the [[Block]] this transaction was included in.
     */
    __publicField(this, "blockNumber");
    /**
     *  The bloom filter bytes that represent all logs that occurred within
     *  this transaction. This is generally not useful for most developers,
     *  but can be used to validate the included logs.
     */
    __publicField(this, "logsBloom");
    /**
     *  The actual amount of gas used by this transaction.
     *
     *  When creating a transaction, the amount of gas that will be used can
     *  only be approximated, but the sender must pay the gas fee for the
     *  entire gas limit. After the transaction, the difference is refunded.
     */
    __publicField(this, "gasUsed");
    /**
     *  The gas used for BLObs. See [[link-eip-4844]].
     */
    __publicField(this, "blobGasUsed");
    /**
     *  The amount of gas used by all transactions within the block for this
     *  and all transactions with a lower ``index``.
     *
     *  This is generally not useful for developers but can be used to
     *  validate certain aspects of execution.
     */
    __publicField(this, "cumulativeGasUsed");
    /**
     *  The actual gas price used during execution.
     *
     *  Due to the complexity of [[link-eip-1559]] this value can only
     *  be caluclated after the transaction has been mined, snce the base
     *  fee is protocol-enforced.
     */
    __publicField(this, "gasPrice");
    /**
     *  The price paid per BLOB in gas. See [[link-eip-4844]].
     */
    __publicField(this, "blobGasPrice");
    /**
     *  The [[link-eip-2718]] transaction type.
     */
    __publicField(this, "type");
    //readonly byzantium!: boolean;
    /**
     *  The status of this transaction, indicating success (i.e. ``1``) or
     *  a revert (i.e. ``0``).
     *
     *  This is available in post-byzantium blocks, but some backends may
     *  backfill this value.
     */
    __publicField(this, "status");
    /**
     *  The root hash of this transaction.
     *
     *  This is no present and was only included in pre-byzantium blocks, but
     *  could be used to validate certain parts of the receipt.
     */
    __publicField(this, "root");
    __privateAdd(this, _logs);
    __privateSet(this, _logs, Object.freeze(tx.logs.map((log) => {
      return new Log(log, provider);
    })));
    let gasPrice = BN_09;
    if (tx.effectiveGasPrice != null) {
      gasPrice = tx.effectiveGasPrice;
    } else if (tx.gasPrice != null) {
      gasPrice = tx.gasPrice;
    }
    defineProperties(this, {
      provider,
      to: tx.to,
      from: tx.from,
      contractAddress: tx.contractAddress,
      hash: tx.hash,
      index: tx.index,
      blockHash: tx.blockHash,
      blockNumber: tx.blockNumber,
      logsBloom: tx.logsBloom,
      gasUsed: tx.gasUsed,
      cumulativeGasUsed: tx.cumulativeGasUsed,
      blobGasUsed: tx.blobGasUsed,
      gasPrice,
      blobGasPrice: tx.blobGasPrice,
      type: tx.type,
      //byzantium: tx.byzantium,
      status: tx.status,
      root: tx.root
    });
  }
  /**
   *  The logs for this transaction.
   */
  get logs() {
    return __privateGet(this, _logs);
  }
  /**
   *  Returns a JSON-compatible representation.
   */
  toJSON() {
    const {
      to,
      from,
      contractAddress,
      hash: hash2,
      index,
      blockHash,
      blockNumber,
      logsBloom,
      logs,
      //byzantium, 
      status,
      root
    } = this;
    return {
      _type: "TransactionReceipt",
      blockHash,
      blockNumber,
      //byzantium, 
      contractAddress,
      cumulativeGasUsed: toJson(this.cumulativeGasUsed),
      from,
      gasPrice: toJson(this.gasPrice),
      blobGasUsed: toJson(this.blobGasUsed),
      blobGasPrice: toJson(this.blobGasPrice),
      gasUsed: toJson(this.gasUsed),
      hash: hash2,
      index,
      logs,
      logsBloom,
      root,
      status,
      to
    };
  }
  /**
   *  @_ignore:
   */
  get length() {
    return this.logs.length;
  }
  [Symbol.iterator]() {
    let index = 0;
    return {
      next: () => {
        if (index < this.length) {
          return { value: this.logs[index++], done: false };
        }
        return { value: void 0, done: true };
      }
    };
  }
  /**
   *  The total fee for this transaction, in wei.
   */
  get fee() {
    return this.gasUsed * this.gasPrice;
  }
  /**
   *  Resolves to the block this transaction occurred in.
   */
  async getBlock() {
    const block = await this.provider.getBlock(this.blockHash);
    if (block == null) {
      throw new Error("TODO");
    }
    return block;
  }
  /**
   *  Resolves to the transaction this transaction occurred in.
   */
  async getTransaction() {
    const tx = await this.provider.getTransaction(this.hash);
    if (tx == null) {
      throw new Error("TODO");
    }
    return tx;
  }
  /**
   *  Resolves to the return value of the execution of this transaction.
   *
   *  Support for this feature is limited, as it requires an archive node
   *  with the ``debug_`` or ``trace_`` API enabled.
   */
  async getResult() {
    return await this.provider.getTransactionResult(this.hash);
  }
  /**
   *  Resolves to the number of confirmations this transaction has.
   */
  async confirmations() {
    return await this.provider.getBlockNumber() - this.blockNumber + 1;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return createRemovedTransactionFilter(this);
  }
  /**
   *  @_ignore:
   */
  reorderedEvent(other) {
    assert(!other || other.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" });
    return createReorderedTransactionFilter(this, other);
  }
};
_logs = new WeakMap();
var _startBlock;
var _TransactionResponse = class _TransactionResponse {
  /**
   *  @_ignore:
   */
  constructor(tx, provider) {
    /**
     *  The provider this is connected to, which will influence how its
     *  methods will resolve its async inspection methods.
     */
    __publicField(this, "provider");
    /**
     *  The block number of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */
    __publicField(this, "blockNumber");
    /**
     *  The blockHash of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */
    __publicField(this, "blockHash");
    /**
     *  The index within the block that this transaction resides at.
     */
    __publicField(this, "index");
    /**
     *  The transaction hash.
     */
    __publicField(this, "hash");
    /**
     *  The [[link-eip-2718]] transaction envelope type. This is
     *  ``0`` for legacy transactions types.
     */
    __publicField(this, "type");
    /**
     *  The receiver of this transaction.
     *
     *  If ``null``, then the transaction is an initcode transaction.
     *  This means the result of executing the [[data]] will be deployed
     *  as a new contract on chain (assuming it does not revert) and the
     *  address may be computed using [[getCreateAddress]].
     */
    __publicField(this, "to");
    /**
     *  The sender of this transaction. It is implicitly computed
     *  from the transaction pre-image hash (as the digest) and the
     *  [[signature]] using ecrecover.
     */
    __publicField(this, "from");
    /**
     *  The nonce, which is used to prevent replay attacks and offer
     *  a method to ensure transactions from a given sender are explicitly
     *  ordered.
     *
     *  When sending a transaction, this must be equal to the number of
     *  transactions ever sent by [[from]].
     */
    __publicField(this, "nonce");
    /**
     *  The maximum units of gas this transaction can consume. If execution
     *  exceeds this, the entries transaction is reverted and the sender
     *  is charged for the full amount, despite not state changes being made.
     */
    __publicField(this, "gasLimit");
    /**
     *  The gas price can have various values, depending on the network.
     *
     *  In modern networks, for transactions that are included this is
     *  the //effective gas price// (the fee per gas that was actually
     *  charged), while for transactions that have not been included yet
     *  is the [[maxFeePerGas]].
     *
     *  For legacy transactions, or transactions on legacy networks, this
     *  is the fee that will be charged per unit of gas the transaction
     *  consumes.
     */
    __publicField(this, "gasPrice");
    /**
     *  The maximum priority fee (per unit of gas) to allow a
     *  validator to charge the sender. This is inclusive of the
     *  [[maxFeeFeePerGas]].
     */
    __publicField(this, "maxPriorityFeePerGas");
    /**
     *  The maximum fee (per unit of gas) to allow this transaction
     *  to charge the sender.
     */
    __publicField(this, "maxFeePerGas");
    /**
     *  The [[link-eip-4844]] max fee per BLOb gas.
     */
    __publicField(this, "maxFeePerBlobGas");
    /**
     *  The data.
     */
    __publicField(this, "data");
    /**
     *  The value, in wei. Use [[formatEther]] to format this value
     *  as ether.
     */
    __publicField(this, "value");
    /**
     *  The chain ID.
     */
    __publicField(this, "chainId");
    /**
     *  The signature.
     */
    __publicField(this, "signature");
    /**
     *  The [[link-eip-2930]] access list for transaction types that
     *  support it, otherwise ``null``.
     */
    __publicField(this, "accessList");
    /**
     *  The [[link-eip-4844]] BLOb versioned hashes.
     */
    __publicField(this, "blobVersionedHashes");
    __privateAdd(this, _startBlock);
    this.provider = provider;
    this.blockNumber = tx.blockNumber != null ? tx.blockNumber : null;
    this.blockHash = tx.blockHash != null ? tx.blockHash : null;
    this.hash = tx.hash;
    this.index = tx.index;
    this.type = tx.type;
    this.from = tx.from;
    this.to = tx.to || null;
    this.gasLimit = tx.gasLimit;
    this.nonce = tx.nonce;
    this.data = tx.data;
    this.value = tx.value;
    this.gasPrice = tx.gasPrice;
    this.maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? tx.maxPriorityFeePerGas : null;
    this.maxFeePerGas = tx.maxFeePerGas != null ? tx.maxFeePerGas : null;
    this.maxFeePerBlobGas = tx.maxFeePerBlobGas != null ? tx.maxFeePerBlobGas : null;
    this.chainId = tx.chainId;
    this.signature = tx.signature;
    this.accessList = tx.accessList != null ? tx.accessList : null;
    this.blobVersionedHashes = tx.blobVersionedHashes != null ? tx.blobVersionedHashes : null;
    __privateSet(this, _startBlock, -1);
  }
  /**
   *  Returns a JSON-compatible representation of this transaction.
   */
  toJSON() {
    const { blockNumber, blockHash, index, hash: hash2, type, to, from, nonce, data, signature, accessList, blobVersionedHashes } = this;
    return {
      _type: "TransactionResponse",
      accessList,
      blockNumber,
      blockHash,
      blobVersionedHashes,
      chainId: toJson(this.chainId),
      data,
      from,
      gasLimit: toJson(this.gasLimit),
      gasPrice: toJson(this.gasPrice),
      hash: hash2,
      maxFeePerGas: toJson(this.maxFeePerGas),
      maxPriorityFeePerGas: toJson(this.maxPriorityFeePerGas),
      maxFeePerBlobGas: toJson(this.maxFeePerBlobGas),
      nonce,
      signature,
      to,
      index,
      type,
      value: toJson(this.value)
    };
  }
  /**
   *  Resolves to the Block that this transaction was included in.
   *
   *  This will return null if the transaction has not been included yet.
   */
  async getBlock() {
    let blockNumber = this.blockNumber;
    if (blockNumber == null) {
      const tx = await this.getTransaction();
      if (tx) {
        blockNumber = tx.blockNumber;
      }
    }
    if (blockNumber == null) {
      return null;
    }
    const block = this.provider.getBlock(blockNumber);
    if (block == null) {
      throw new Error("TODO");
    }
    return block;
  }
  /**
   *  Resolves to this transaction being re-requested from the
   *  provider. This can be used if you have an unmined transaction
   *  and wish to get an up-to-date populated instance.
   */
  async getTransaction() {
    return this.provider.getTransaction(this.hash);
  }
  /**
   *  Resolve to the number of confirmations this transaction has.
   */
  async confirmations() {
    if (this.blockNumber == null) {
      const { tx, blockNumber: blockNumber2 } = await resolveProperties({
        tx: this.getTransaction(),
        blockNumber: this.provider.getBlockNumber()
      });
      if (tx == null || tx.blockNumber == null) {
        return 0;
      }
      return blockNumber2 - tx.blockNumber + 1;
    }
    const blockNumber = await this.provider.getBlockNumber();
    return blockNumber - this.blockNumber + 1;
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(_confirms, _timeout2) {
    const confirms = _confirms == null ? 1 : _confirms;
    const timeout = _timeout2 == null ? 0 : _timeout2;
    let startBlock = __privateGet(this, _startBlock);
    let nextScan = -1;
    let stopScanning = startBlock === -1 ? true : false;
    const checkReplacement = async () => {
      if (stopScanning) {
        return null;
      }
      const { blockNumber, nonce } = await resolveProperties({
        blockNumber: this.provider.getBlockNumber(),
        nonce: this.provider.getTransactionCount(this.from)
      });
      if (nonce < this.nonce) {
        startBlock = blockNumber;
        return;
      }
      if (stopScanning) {
        return null;
      }
      const mined = await this.getTransaction();
      if (mined && mined.blockNumber != null) {
        return;
      }
      if (nextScan === -1) {
        nextScan = startBlock - 3;
        if (nextScan < __privateGet(this, _startBlock)) {
          nextScan = __privateGet(this, _startBlock);
        }
      }
      while (nextScan <= blockNumber) {
        if (stopScanning) {
          return null;
        }
        const block = await this.provider.getBlock(nextScan, true);
        if (block == null) {
          return;
        }
        for (const hash2 of block) {
          if (hash2 === this.hash) {
            return;
          }
        }
        for (let i = 0; i < block.length; i++) {
          const tx = await block.getTransaction(i);
          if (tx.from === this.from && tx.nonce === this.nonce) {
            if (stopScanning) {
              return null;
            }
            const receipt2 = await this.provider.getTransactionReceipt(tx.hash);
            if (receipt2 == null) {
              return;
            }
            if (blockNumber - receipt2.blockNumber + 1 < confirms) {
              return;
            }
            let reason = "replaced";
            if (tx.data === this.data && tx.to === this.to && tx.value === this.value) {
              reason = "repriced";
            } else if (tx.data === "0x" && tx.from === tx.to && tx.value === BN_09) {
              reason = "cancelled";
            }
            assert(false, "transaction was replaced", "TRANSACTION_REPLACED", {
              cancelled: reason === "replaced" || reason === "cancelled",
              reason,
              replacement: tx.replaceableTransaction(startBlock),
              hash: tx.hash,
              receipt: receipt2
            });
          }
        }
        nextScan++;
      }
      return;
    };
    const checkReceipt = (receipt2) => {
      if (receipt2 == null || receipt2.status !== 0) {
        return receipt2;
      }
      assert(false, "transaction execution reverted", "CALL_EXCEPTION", {
        action: "sendTransaction",
        data: null,
        reason: null,
        invocation: null,
        revert: null,
        transaction: {
          to: receipt2.to,
          from: receipt2.from,
          data: ""
          // @TODO: in v7, split out sendTransaction properties
        },
        receipt: receipt2
      });
    };
    const receipt = await this.provider.getTransactionReceipt(this.hash);
    if (confirms === 0) {
      return checkReceipt(receipt);
    }
    if (receipt) {
      if (await receipt.confirmations() >= confirms) {
        return checkReceipt(receipt);
      }
    } else {
      await checkReplacement();
      if (confirms === 0) {
        return null;
      }
    }
    const waiter = new Promise((resolve, reject) => {
      const cancellers = [];
      const cancel = () => {
        cancellers.forEach((c) => c());
      };
      cancellers.push(() => {
        stopScanning = true;
      });
      if (timeout > 0) {
        const timer = setTimeout(() => {
          cancel();
          reject(makeError("wait for transaction timeout", "TIMEOUT"));
        }, timeout);
        cancellers.push(() => {
          clearTimeout(timer);
        });
      }
      const txListener = async (receipt2) => {
        if (await receipt2.confirmations() >= confirms) {
          cancel();
          try {
            resolve(checkReceipt(receipt2));
          } catch (error) {
            reject(error);
          }
        }
      };
      cancellers.push(() => {
        this.provider.off(this.hash, txListener);
      });
      this.provider.on(this.hash, txListener);
      if (startBlock >= 0) {
        const replaceListener = async () => {
          try {
            await checkReplacement();
          } catch (error) {
            if (isError(error, "TRANSACTION_REPLACED")) {
              cancel();
              reject(error);
              return;
            }
          }
          if (!stopScanning) {
            this.provider.once("block", replaceListener);
          }
        };
        cancellers.push(() => {
          this.provider.off("block", replaceListener);
        });
        this.provider.once("block", replaceListener);
      }
    });
    return await waiter;
  }
  /**
   *  Returns ``true`` if this transaction has been included.
   *
   *  This is effective only as of the time the TransactionResponse
   *  was instantiated. To get up-to-date information, use
   *  [[getTransaction]].
   *
   *  This provides a Type Guard that this transaction will have
   *  non-null property values for properties that are null for
   *  unmined transactions.
   */
  isMined() {
    return this.blockHash != null;
  }
  /**
   *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
   *  transaction.
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLegacy() {
    return this.type === 0;
  }
  /**
   *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
   *  transaction. See [[link-eip-2070]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isBerlin() {
    return this.type === 1;
  }
  /**
   *  Returns true if the transaction is a London (i.e. ``type == 2``)
   *  transaction. See [[link-eip-1559]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLondon() {
    return this.type === 2;
  }
  /**
   *  Returns true if hte transaction is a Cancun (i.e. ``type == 3``)
   *  transaction. See [[link-eip-4844]].
   */
  isCancun() {
    return this.type === 3;
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that evict this transaction.
   */
  removedEvent() {
    assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    return createRemovedTransactionFilter(this);
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that re-order this event against %%other%%.
   */
  reorderedEvent(other) {
    assert(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    assert(!other || other.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" });
    return createReorderedTransactionFilter(this, other);
  }
  /**
   *  Returns a new TransactionResponse instance which has the ability to
   *  detect (and throw an error) if the transaction is replaced, which
   *  will begin scanning at %%startBlock%%.
   *
   *  This should generally not be used by developers and is intended
   *  primarily for internal use. Setting an incorrect %%startBlock%% can
   *  have devastating performance consequences if used incorrectly.
   */
  replaceableTransaction(startBlock) {
    assertArgument(Number.isInteger(startBlock) && startBlock >= 0, "invalid startBlock", "startBlock", startBlock);
    const tx = new _TransactionResponse(this, this.provider);
    __privateSet(tx, _startBlock, startBlock);
    return tx;
  }
};
_startBlock = new WeakMap();
var TransactionResponse = _TransactionResponse;
function createReorderedTransactionFilter(tx, other) {
  return { orphan: "reorder-transaction", tx, other };
}
function createRemovedTransactionFilter(tx) {
  return { orphan: "drop-transaction", tx };
}
function createRemovedLogFilter(log) {
  return { orphan: "drop-log", log: {
    transactionHash: log.transactionHash,
    blockHash: log.blockHash,
    blockNumber: log.blockNumber,
    address: log.address,
    data: log.data,
    topics: Object.freeze(log.topics.slice()),
    index: log.index
  } };
}

// node_modules/ethers/lib.esm/contract/wrappers.js
var EventLog = class extends Log {
  /**
   * @_ignore:
   */
  constructor(log, iface, fragment) {
    super(log, log.provider);
    /**
     *  The Contract Interface.
     */
    __publicField(this, "interface");
    /**
     *  The matching event.
     */
    __publicField(this, "fragment");
    /**
     *  The parsed arguments passed to the event by ``emit``.
     */
    __publicField(this, "args");
    const args = iface.decodeEventLog(fragment, log.data, log.topics);
    defineProperties(this, { args, fragment, interface: iface });
  }
  /**
   *  The name of the event.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The signature of the event.
   */
  get eventSignature() {
    return this.fragment.format();
  }
};
var UndecodedEventLog = class extends Log {
  /**
   * @_ignore:
   */
  constructor(log, error) {
    super(log, log.provider);
    /**
     *  The error encounted when trying to decode the log.
     */
    __publicField(this, "error");
    defineProperties(this, { error });
  }
};
var _iface;
var ContractTransactionReceipt = class extends TransactionReceipt {
  /**
   *  @_ignore:
   */
  constructor(iface, provider, tx) {
    super(tx, provider);
    __privateAdd(this, _iface);
    __privateSet(this, _iface, iface);
  }
  /**
   *  The parsed logs for any [[Log]] which has a matching event in the
   *  Contract ABI.
   */
  get logs() {
    return super.logs.map((log) => {
      const fragment = log.topics.length ? __privateGet(this, _iface).getEvent(log.topics[0]) : null;
      if (fragment) {
        try {
          return new EventLog(log, __privateGet(this, _iface), fragment);
        } catch (error) {
          return new UndecodedEventLog(log, error);
        }
      }
      return log;
    });
  }
};
_iface = new WeakMap();
var _iface2;
var ContractTransactionResponse = class extends TransactionResponse {
  /**
   *  @_ignore:
   */
  constructor(iface, provider, tx) {
    super(tx, provider);
    __privateAdd(this, _iface2);
    __privateSet(this, _iface2, iface);
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(confirms, timeout) {
    const receipt = await super.wait(confirms, timeout);
    if (receipt == null) {
      return null;
    }
    return new ContractTransactionReceipt(__privateGet(this, _iface2), this.provider, receipt);
  }
};
_iface2 = new WeakMap();
var ContractUnknownEventPayload = class extends EventPayload {
  /**
   *  @_event:
   */
  constructor(contract, listener, filter, log) {
    super(contract, listener, filter);
    /**
     *  The log with no matching events.
     */
    __publicField(this, "log");
    defineProperties(this, { log });
  }
  /**
   *  Resolves to the block the event occured in.
   */
  async getBlock() {
    return await this.log.getBlock();
  }
  /**
   *  Resolves to the transaction the event occured in.
   */
  async getTransaction() {
    return await this.log.getTransaction();
  }
  /**
   *  Resolves to the transaction receipt the event occured in.
   */
  async getTransactionReceipt() {
    return await this.log.getTransactionReceipt();
  }
};
var ContractEventPayload = class extends ContractUnknownEventPayload {
  /**
   *  @_ignore:
   */
  constructor(contract, listener, filter, fragment, _log) {
    super(contract, listener, filter, new EventLog(_log, contract.interface, fragment));
    const args = contract.interface.decodeEventLog(fragment, this.log.data, this.log.topics);
    defineProperties(this, { args, fragment });
  }
  /**
   *  The event name.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The event signature.
   */
  get eventSignature() {
    return this.fragment.format();
  }
};

// node_modules/ethers/lib.esm/contract/contract.js
var BN_010 = BigInt(0);
function canCall(value) {
  return value && typeof value.call === "function";
}
function canEstimate(value) {
  return value && typeof value.estimateGas === "function";
}
function canResolve(value) {
  return value && typeof value.resolveName === "function";
}
function canSend(value) {
  return value && typeof value.sendTransaction === "function";
}
function getResolver(value) {
  if (value != null) {
    if (canResolve(value)) {
      return value;
    }
    if (value.provider) {
      return value.provider;
    }
  }
  return void 0;
}
var _filter;
var PreparedTopicFilter = class {
  constructor(contract, fragment, args) {
    __privateAdd(this, _filter);
    __publicField(this, "fragment");
    defineProperties(this, { fragment });
    if (fragment.inputs.length < args.length) {
      throw new Error("too many arguments");
    }
    const runner = getRunner(contract.runner, "resolveName");
    const resolver = canResolve(runner) ? runner : null;
    __privateSet(this, _filter, async function() {
      const resolvedArgs = await Promise.all(fragment.inputs.map((param, index) => {
        const arg = args[index];
        if (arg == null) {
          return null;
        }
        return param.walkAsync(args[index], (type, value) => {
          if (type === "address") {
            if (Array.isArray(value)) {
              return Promise.all(value.map((v) => resolveAddress(v, resolver)));
            }
            return resolveAddress(value, resolver);
          }
          return value;
        });
      }));
      return contract.interface.encodeFilterTopics(fragment, resolvedArgs);
    }());
  }
  getTopicFilter() {
    return __privateGet(this, _filter);
  }
};
_filter = new WeakMap();
function getRunner(value, feature) {
  if (value == null) {
    return null;
  }
  if (typeof value[feature] === "function") {
    return value;
  }
  if (value.provider && typeof value.provider[feature] === "function") {
    return value.provider;
  }
  return null;
}
function getProvider(value) {
  if (value == null) {
    return null;
  }
  return value.provider || null;
}
async function copyOverrides(arg, allowed) {
  const _overrides = Typed.dereference(arg, "overrides");
  assertArgument(typeof _overrides === "object", "invalid overrides parameter", "overrides", arg);
  const overrides = copyRequest(_overrides);
  assertArgument(overrides.to == null || (allowed || []).indexOf("to") >= 0, "cannot override to", "overrides.to", overrides.to);
  assertArgument(overrides.data == null || (allowed || []).indexOf("data") >= 0, "cannot override data", "overrides.data", overrides.data);
  if (overrides.from) {
    overrides.from = overrides.from;
  }
  return overrides;
}
async function resolveArgs(_runner, inputs, args) {
  const runner = getRunner(_runner, "resolveName");
  const resolver = canResolve(runner) ? runner : null;
  return await Promise.all(inputs.map((param, index) => {
    return param.walkAsync(args[index], (type, value) => {
      value = Typed.dereference(value, type);
      if (type === "address") {
        return resolveAddress(value, resolver);
      }
      return value;
    });
  }));
}
function buildWrappedFallback(contract) {
  const populateTransaction = async function(overrides) {
    const tx = await copyOverrides(overrides, ["data"]);
    tx.to = await contract.getAddress();
    if (tx.from) {
      tx.from = await resolveAddress(tx.from, getResolver(contract.runner));
    }
    const iface = contract.interface;
    const noValue = getBigInt(tx.value || BN_010, "overrides.value") === BN_010;
    const noData = (tx.data || "0x") === "0x";
    if (iface.fallback && !iface.fallback.payable && iface.receive && !noData && !noValue) {
      assertArgument(false, "cannot send data to receive or send value to non-payable fallback", "overrides", overrides);
    }
    assertArgument(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
    const payable = iface.receive || iface.fallback && iface.fallback.payable;
    assertArgument(payable || noValue, "cannot send value to non-payable fallback", "overrides.value", tx.value);
    assertArgument(iface.fallback || noData, "cannot send data to receive-only contract", "overrides.data", tx.data);
    return tx;
  };
  const staticCall = async function(overrides) {
    const runner = getRunner(contract.runner, "call");
    assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const tx = await populateTransaction(overrides);
    try {
      return await runner.call(tx);
    } catch (error) {
      if (isCallException(error) && error.data) {
        throw contract.interface.makeError(error.data, tx);
      }
      throw error;
    }
  };
  const send = async function(overrides) {
    const runner = contract.runner;
    assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const tx = await runner.sendTransaction(await populateTransaction(overrides));
    const provider = getProvider(contract.runner);
    return new ContractTransactionResponse(contract.interface, provider, tx);
  };
  const estimateGas = async function(overrides) {
    const runner = getRunner(contract.runner, "estimateGas");
    assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
    return await runner.estimateGas(await populateTransaction(overrides));
  };
  const method = async (overrides) => {
    return await send(overrides);
  };
  defineProperties(method, {
    _contract: contract,
    estimateGas,
    populateTransaction,
    send,
    staticCall
  });
  return method;
}
function buildWrappedMethod(contract, key) {
  const getFragment = function(...args) {
    const fragment = contract.interface.getFunction(key, args);
    assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key, args }
    });
    return fragment;
  };
  const populateTransaction = async function(...args) {
    const fragment = getFragment(...args);
    let overrides = {};
    if (fragment.inputs.length + 1 === args.length) {
      overrides = await copyOverrides(args.pop());
      if (overrides.from) {
        overrides.from = await resolveAddress(overrides.from, getResolver(contract.runner));
      }
    }
    if (fragment.inputs.length !== args.length) {
      throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
    }
    const resolvedArgs = await resolveArgs(contract.runner, fragment.inputs, args);
    return Object.assign({}, overrides, await resolveProperties({
      to: contract.getAddress(),
      data: contract.interface.encodeFunctionData(fragment, resolvedArgs)
    }));
  };
  const staticCall = async function(...args) {
    const result = await staticCallResult(...args);
    if (result.length === 1) {
      return result[0];
    }
    return result;
  };
  const send = async function(...args) {
    const runner = contract.runner;
    assert(canSend(runner), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const tx = await runner.sendTransaction(await populateTransaction(...args));
    const provider = getProvider(contract.runner);
    return new ContractTransactionResponse(contract.interface, provider, tx);
  };
  const estimateGas = async function(...args) {
    const runner = getRunner(contract.runner, "estimateGas");
    assert(canEstimate(runner), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" });
    return await runner.estimateGas(await populateTransaction(...args));
  };
  const staticCallResult = async function(...args) {
    const runner = getRunner(contract.runner, "call");
    assert(canCall(runner), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const tx = await populateTransaction(...args);
    let result = "0x";
    try {
      result = await runner.call(tx);
    } catch (error) {
      if (isCallException(error) && error.data) {
        throw contract.interface.makeError(error.data, tx);
      }
      throw error;
    }
    const fragment = getFragment(...args);
    return contract.interface.decodeFunctionResult(fragment, result);
  };
  const method = async (...args) => {
    const fragment = getFragment(...args);
    if (fragment.constant) {
      return await staticCall(...args);
    }
    return await send(...args);
  };
  defineProperties(method, {
    name: contract.interface.getFunctionName(key),
    _contract: contract,
    _key: key,
    getFragment,
    estimateGas,
    populateTransaction,
    send,
    staticCall,
    staticCallResult
  });
  Object.defineProperty(method, "fragment", {
    configurable: false,
    enumerable: true,
    get: () => {
      const fragment = contract.interface.getFunction(key);
      assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key }
      });
      return fragment;
    }
  });
  return method;
}
function buildWrappedEvent(contract, key) {
  const getFragment = function(...args) {
    const fragment = contract.interface.getEvent(key, args);
    assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key, args }
    });
    return fragment;
  };
  const method = function(...args) {
    return new PreparedTopicFilter(contract, getFragment(...args), args);
  };
  defineProperties(method, {
    name: contract.interface.getEventName(key),
    _contract: contract,
    _key: key,
    getFragment
  });
  Object.defineProperty(method, "fragment", {
    configurable: false,
    enumerable: true,
    get: () => {
      const fragment = contract.interface.getEvent(key);
      assert(fragment, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key }
      });
      return fragment;
    }
  });
  return method;
}
var internal2 = Symbol.for("_ethersInternal_contract");
var internalValues = /* @__PURE__ */ new WeakMap();
function setInternal(contract, values) {
  internalValues.set(contract[internal2], values);
}
function getInternal(contract) {
  return internalValues.get(contract[internal2]);
}
function isDeferred(value) {
  return value && typeof value === "object" && "getTopicFilter" in value && typeof value.getTopicFilter === "function" && value.fragment;
}
async function getSubInfo(contract, event) {
  let topics;
  let fragment = null;
  if (Array.isArray(event)) {
    const topicHashify = function(name) {
      if (isHexString(name, 32)) {
        return name;
      }
      const fragment2 = contract.interface.getEvent(name);
      assertArgument(fragment2, "unknown fragment", "name", name);
      return fragment2.topicHash;
    };
    topics = event.map((e) => {
      if (e == null) {
        return null;
      }
      if (Array.isArray(e)) {
        return e.map(topicHashify);
      }
      return topicHashify(e);
    });
  } else if (event === "*") {
    topics = [null];
  } else if (typeof event === "string") {
    if (isHexString(event, 32)) {
      topics = [event];
    } else {
      fragment = contract.interface.getEvent(event);
      assertArgument(fragment, "unknown fragment", "event", event);
      topics = [fragment.topicHash];
    }
  } else if (isDeferred(event)) {
    topics = await event.getTopicFilter();
  } else if ("fragment" in event) {
    fragment = event.fragment;
    topics = [fragment.topicHash];
  } else {
    assertArgument(false, "unknown event name", "event", event);
  }
  topics = topics.map((t) => {
    if (t == null) {
      return null;
    }
    if (Array.isArray(t)) {
      const items = Array.from(new Set(t.map((t2) => t2.toLowerCase())).values());
      if (items.length === 1) {
        return items[0];
      }
      items.sort();
      return items;
    }
    return t.toLowerCase();
  });
  const tag = topics.map((t) => {
    if (t == null) {
      return "null";
    }
    if (Array.isArray(t)) {
      return t.join("|");
    }
    return t;
  }).join("&");
  return { fragment, tag, topics };
}
async function hasSub(contract, event) {
  const { subs } = getInternal(contract);
  return subs.get((await getSubInfo(contract, event)).tag) || null;
}
async function getSub(contract, operation, event) {
  const provider = getProvider(contract.runner);
  assert(provider, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation });
  const { fragment, tag, topics } = await getSubInfo(contract, event);
  const { addr, subs } = getInternal(contract);
  let sub = subs.get(tag);
  if (!sub) {
    const address = addr ? addr : contract;
    const filter = { address, topics };
    const listener = (log) => {
      let foundFragment = fragment;
      if (foundFragment == null) {
        try {
          foundFragment = contract.interface.getEvent(log.topics[0]);
        } catch (error) {
        }
      }
      if (foundFragment) {
        const _foundFragment = foundFragment;
        const args = fragment ? contract.interface.decodeEventLog(fragment, log.data, log.topics) : [];
        emit(contract, event, args, (listener2) => {
          return new ContractEventPayload(contract, listener2, event, _foundFragment, log);
        });
      } else {
        emit(contract, event, [], (listener2) => {
          return new ContractUnknownEventPayload(contract, listener2, event, log);
        });
      }
    };
    let starting = [];
    const start = () => {
      if (starting.length) {
        return;
      }
      starting.push(provider.on(filter, listener));
    };
    const stop = async () => {
      if (starting.length == 0) {
        return;
      }
      let started = starting;
      starting = [];
      await Promise.all(started);
      provider.off(filter, listener);
    };
    sub = { tag, listeners: [], start, stop };
    subs.set(tag, sub);
  }
  return sub;
}
var lastEmit = Promise.resolve();
async function _emit(contract, event, args, payloadFunc) {
  await lastEmit;
  const sub = await hasSub(contract, event);
  if (!sub) {
    return false;
  }
  const count = sub.listeners.length;
  sub.listeners = sub.listeners.filter(({ listener, once }) => {
    const passArgs = Array.from(args);
    if (payloadFunc) {
      passArgs.push(payloadFunc(once ? null : listener));
    }
    try {
      listener.call(contract, ...passArgs);
    } catch (error) {
    }
    return !once;
  });
  if (sub.listeners.length === 0) {
    sub.stop();
    getInternal(contract).subs.delete(sub.tag);
  }
  return count > 0;
}
async function emit(contract, event, args, payloadFunc) {
  try {
    await lastEmit;
  } catch (error) {
  }
  const resultPromise = _emit(contract, event, args, payloadFunc);
  lastEmit = resultPromise;
  return await resultPromise;
}
var passProperties2 = ["then"];
var _a;
_a = internal2;
var _BaseContract = class _BaseContract {
  /**
   *  Creates a new contract connected to %%target%% with the %%abi%% and
   *  optionally connected to a %%runner%% to perform operations on behalf
   *  of.
   */
  constructor(target, abi, runner, _deployTx) {
    /**
     *  The target to connect to.
     *
     *  This can be an address, ENS name or any [[Addressable]], such as
     *  another contract. To get the resovled address, use the ``getAddress``
     *  method.
     */
    __publicField(this, "target");
    /**
     *  The contract Interface.
     */
    __publicField(this, "interface");
    /**
     *  The connected runner. This is generally a [[Provider]] or a
     *  [[Signer]], which dictates what operations are supported.
     *
     *  For example, a **Contract** connected to a [[Provider]] may
     *  only execute read-only operations.
     */
    __publicField(this, "runner");
    /**
     *  All the Events available on this contract.
     */
    __publicField(this, "filters");
    /**
     *  @_ignore:
     */
    __publicField(this, _a);
    /**
     *  The fallback or receive function if any.
     */
    __publicField(this, "fallback");
    assertArgument(typeof target === "string" || isAddressable(target), "invalid value for Contract target", "target", target);
    if (runner == null) {
      runner = null;
    }
    const iface = Interface.from(abi);
    defineProperties(this, { target, runner, interface: iface });
    Object.defineProperty(this, internal2, { value: {} });
    let addrPromise;
    let addr = null;
    let deployTx = null;
    if (_deployTx) {
      const provider = getProvider(runner);
      deployTx = new ContractTransactionResponse(this.interface, provider, _deployTx);
    }
    let subs = /* @__PURE__ */ new Map();
    if (typeof target === "string") {
      if (isHexString(target)) {
        addr = target;
        addrPromise = Promise.resolve(target);
      } else {
        const resolver = getRunner(runner, "resolveName");
        if (!canResolve(resolver)) {
          throw makeError("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
            operation: "resolveName"
          });
        }
        addrPromise = resolver.resolveName(target).then((addr2) => {
          if (addr2 == null) {
            throw makeError("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
              value: target
            });
          }
          getInternal(this).addr = addr2;
          return addr2;
        });
      }
    } else {
      addrPromise = target.getAddress().then((addr2) => {
        if (addr2 == null) {
          throw new Error("TODO");
        }
        getInternal(this).addr = addr2;
        return addr2;
      });
    }
    setInternal(this, { addrPromise, addr, deployTx, subs });
    const filters = new Proxy({}, {
      get: (target2, prop, receiver) => {
        if (typeof prop === "symbol" || passProperties2.indexOf(prop) >= 0) {
          return Reflect.get(target2, prop, receiver);
        }
        try {
          return this.getEvent(prop);
        } catch (error) {
          if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
            throw error;
          }
        }
        return void 0;
      },
      has: (target2, prop) => {
        if (passProperties2.indexOf(prop) >= 0) {
          return Reflect.has(target2, prop);
        }
        return Reflect.has(target2, prop) || this.interface.hasEvent(String(prop));
      }
    });
    defineProperties(this, { filters });
    defineProperties(this, {
      fallback: iface.receive || iface.fallback ? buildWrappedFallback(this) : null
    });
    return new Proxy(this, {
      get: (target2, prop, receiver) => {
        if (typeof prop === "symbol" || prop in target2 || passProperties2.indexOf(prop) >= 0) {
          return Reflect.get(target2, prop, receiver);
        }
        try {
          return target2.getFunction(prop);
        } catch (error) {
          if (!isError(error, "INVALID_ARGUMENT") || error.argument !== "key") {
            throw error;
          }
        }
        return void 0;
      },
      has: (target2, prop) => {
        if (typeof prop === "symbol" || prop in target2 || passProperties2.indexOf(prop) >= 0) {
          return Reflect.has(target2, prop);
        }
        return target2.interface.hasFunction(prop);
      }
    });
  }
  /**
   *  Return a new Contract instance with the same target and ABI, but
   *  a different %%runner%%.
   */
  connect(runner) {
    return new _BaseContract(this.target, this.interface, runner);
  }
  /**
   *  Return a new Contract instance with the same ABI and runner, but
   *  a different %%target%%.
   */
  attach(target) {
    return new _BaseContract(target, this.interface, this.runner);
  }
  /**
   *  Return the resolved address of this Contract.
   */
  async getAddress() {
    return await getInternal(this).addrPromise;
  }
  /**
   *  Return the deployed bytecode or null if no bytecode is found.
   */
  async getDeployedCode() {
    const provider = getProvider(this.runner);
    assert(provider, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
    const code = await provider.getCode(await this.getAddress());
    if (code === "0x") {
      return null;
    }
    return code;
  }
  /**
   *  Resolve to this Contract once the bytecode has been deployed, or
   *  resolve immediately if already deployed.
   */
  async waitForDeployment() {
    const deployTx = this.deploymentTransaction();
    if (deployTx) {
      await deployTx.wait();
      return this;
    }
    const code = await this.getDeployedCode();
    if (code != null) {
      return this;
    }
    const provider = getProvider(this.runner);
    assert(provider != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" });
    return new Promise((resolve, reject) => {
      const checkCode = async () => {
        try {
          const code2 = await this.getDeployedCode();
          if (code2 != null) {
            return resolve(this);
          }
          provider.once("block", checkCode);
        } catch (error) {
          reject(error);
        }
      };
      checkCode();
    });
  }
  /**
   *  Return the transaction used to deploy this contract.
   *
   *  This is only available if this instance was returned from a
   *  [[ContractFactory]].
   */
  deploymentTransaction() {
    return getInternal(this).deployTx;
  }
  /**
   *  Return the function for a given name. This is useful when a contract
   *  method name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getFunction(key) {
    if (typeof key !== "string") {
      key = key.format();
    }
    const func = buildWrappedMethod(this, key);
    return func;
  }
  /**
   *  Return the event for a given name. This is useful when a contract
   *  event name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getEvent(key) {
    if (typeof key !== "string") {
      key = key.format();
    }
    return buildWrappedEvent(this, key);
  }
  /**
   *  @_ignore:
   */
  async queryTransaction(hash2) {
    throw new Error("@TODO");
  }
  /*
      // @TODO: this is a non-backwards compatible change, but will be added
      //        in v7 and in a potential SmartContract class in an upcoming
      //        v6 release
      async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
          const provider = getProvider(this.runner);
          assert(provider, "contract runner does not have a provider",
              "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
  
          const receipt = await provider.getTransactionReceipt(hash);
          if (receipt == null) { return null; }
  
          return new ContractTransactionReceipt(this.interface, provider, receipt);
      }
      */
  /**
   *  Provide historic access to event data for %%event%% in the range
   *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
   *  inclusive.
   */
  async queryFilter(event, fromBlock, toBlock) {
    if (fromBlock == null) {
      fromBlock = 0;
    }
    if (toBlock == null) {
      toBlock = "latest";
    }
    const { addr, addrPromise } = getInternal(this);
    const address = addr ? addr : await addrPromise;
    const { fragment, topics } = await getSubInfo(this, event);
    const filter = { address, topics, fromBlock, toBlock };
    const provider = getProvider(this.runner);
    assert(provider, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" });
    return (await provider.getLogs(filter)).map((log) => {
      let foundFragment = fragment;
      if (foundFragment == null) {
        try {
          foundFragment = this.interface.getEvent(log.topics[0]);
        } catch (error) {
        }
      }
      if (foundFragment) {
        try {
          return new EventLog(log, this.interface, foundFragment);
        } catch (error) {
          return new UndecodedEventLog(log, error);
        }
      }
      return new Log(log, provider);
    });
  }
  /**
   *  Add an event %%listener%% for the %%event%%.
   */
  async on(event, listener) {
    const sub = await getSub(this, "on", event);
    sub.listeners.push({ listener, once: false });
    sub.start();
    return this;
  }
  /**
   *  Add an event %%listener%% for the %%event%%, but remove the listener
   *  after it is fired once.
   */
  async once(event, listener) {
    const sub = await getSub(this, "once", event);
    sub.listeners.push({ listener, once: true });
    sub.start();
    return this;
  }
  /**
   *  Emit an %%event%% calling all listeners with %%args%%.
   *
   *  Resolves to ``true`` if any listeners were called.
   */
  async emit(event, ...args) {
    return await emit(this, event, args, null);
  }
  /**
   *  Resolves to the number of listeners of %%event%% or the total number
   *  of listeners if unspecified.
   */
  async listenerCount(event) {
    if (event) {
      const sub = await hasSub(this, event);
      if (!sub) {
        return 0;
      }
      return sub.listeners.length;
    }
    const { subs } = getInternal(this);
    let total = 0;
    for (const { listeners } of subs.values()) {
      total += listeners.length;
    }
    return total;
  }
  /**
   *  Resolves to the listeners subscribed to %%event%% or all listeners
   *  if unspecified.
   */
  async listeners(event) {
    if (event) {
      const sub = await hasSub(this, event);
      if (!sub) {
        return [];
      }
      return sub.listeners.map(({ listener }) => listener);
    }
    const { subs } = getInternal(this);
    let result = [];
    for (const { listeners } of subs.values()) {
      result = result.concat(listeners.map(({ listener }) => listener));
    }
    return result;
  }
  /**
   *  Remove the %%listener%% from the listeners for %%event%% or remove
   *  all listeners if unspecified.
   */
  async off(event, listener) {
    const sub = await hasSub(this, event);
    if (!sub) {
      return this;
    }
    if (listener) {
      const index = sub.listeners.map(({ listener: listener2 }) => listener2).indexOf(listener);
      if (index >= 0) {
        sub.listeners.splice(index, 1);
      }
    }
    if (listener == null || sub.listeners.length === 0) {
      sub.stop();
      getInternal(this).subs.delete(sub.tag);
    }
    return this;
  }
  /**
   *  Remove all the listeners for %%event%% or remove all listeners if
   *  unspecified.
   */
  async removeAllListeners(event) {
    if (event) {
      const sub = await hasSub(this, event);
      if (!sub) {
        return this;
      }
      sub.stop();
      getInternal(this).subs.delete(sub.tag);
    } else {
      const { subs } = getInternal(this);
      for (const { tag, stop } of subs.values()) {
        stop();
        subs.delete(tag);
      }
    }
    return this;
  }
  /**
   *  Alias for [on].
   */
  async addListener(event, listener) {
    return await this.on(event, listener);
  }
  /**
   *  Alias for [off].
   */
  async removeListener(event, listener) {
    return await this.off(event, listener);
  }
  /**
   *  Create a new Class for the %%abi%%.
   */
  static buildClass(abi) {
    class CustomContract extends _BaseContract {
      constructor(address, runner = null) {
        super(address, abi, runner);
      }
    }
    return CustomContract;
  }
  /**
   *  Create a new BaseContract with a specified Interface.
   */
  static from(target, abi, runner) {
    if (runner == null) {
      runner = null;
    }
    const contract = new this(target, abi, runner);
    return contract;
  }
};
var BaseContract = _BaseContract;
function _ContractBase() {
  return BaseContract;
}
var Contract = class extends _ContractBase() {
};

// node_modules/ethers/lib.esm/providers/ens-resolver.js
var matcherIpfs = new RegExp("^(ipfs)://(.*)$", "i");
var matchers = [
  new RegExp("^(https)://(.*)$", "i"),
  new RegExp("^(data):(.*)$", "i"),
  matcherIpfs,
  new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
];

// node_modules/ethers/lib.esm/providers/format.js
var BN_011 = BigInt(0);
function allowNull(format, nullValue) {
  return function(value) {
    if (value == null) {
      return nullValue;
    }
    return format(value);
  };
}
function arrayOf(format, allowNull2) {
  return (array) => {
    if (allowNull2 && array == null) {
      return null;
    }
    if (!Array.isArray(array)) {
      throw new Error("not an array");
    }
    return array.map((i) => format(i));
  };
}
function object(format, altNames) {
  return (value) => {
    const result = {};
    for (const key in format) {
      let srcKey = key;
      if (altNames && key in altNames && !(srcKey in value)) {
        for (const altKey of altNames[key]) {
          if (altKey in value) {
            srcKey = altKey;
            break;
          }
        }
      }
      try {
        const nv = format[key](value[srcKey]);
        if (nv !== void 0) {
          result[key] = nv;
        }
      } catch (error) {
        const message = error instanceof Error ? error.message : "not-an-error";
        assert(false, `invalid value for value.${key} (${message})`, "BAD_DATA", { value });
      }
    }
    return result;
  };
}
function formatBoolean(value) {
  switch (value) {
    case true:
    case "true":
      return true;
    case false:
    case "false":
      return false;
  }
  assertArgument(false, `invalid boolean; ${JSON.stringify(value)}`, "value", value);
}
function formatData(value) {
  assertArgument(isHexString(value, true), "invalid data", "value", value);
  return value;
}
function formatHash(value) {
  assertArgument(isHexString(value, 32), "invalid hash", "value", value);
  return value;
}
var _formatLog = object({
  address: getAddress,
  blockHash: formatHash,
  blockNumber: getNumber,
  data: formatData,
  index: getNumber,
  removed: allowNull(formatBoolean, false),
  topics: arrayOf(formatHash),
  transactionHash: formatHash,
  transactionIndex: getNumber
}, {
  index: ["logIndex"]
});
var _formatBlock = object({
  hash: allowNull(formatHash),
  parentHash: formatHash,
  parentBeaconBlockRoot: allowNull(formatHash, null),
  number: getNumber,
  timestamp: getNumber,
  nonce: allowNull(formatData),
  difficulty: getBigInt,
  gasLimit: getBigInt,
  gasUsed: getBigInt,
  stateRoot: allowNull(formatHash, null),
  receiptsRoot: allowNull(formatHash, null),
  blobGasUsed: allowNull(getBigInt, null),
  excessBlobGas: allowNull(getBigInt, null),
  miner: allowNull(getAddress),
  prevRandao: allowNull(formatHash, null),
  extraData: formatData,
  baseFeePerGas: allowNull(getBigInt)
}, {
  prevRandao: ["mixHash"]
});
var _formatReceiptLog = object({
  transactionIndex: getNumber,
  blockNumber: getNumber,
  transactionHash: formatHash,
  address: getAddress,
  topics: arrayOf(formatHash),
  data: formatData,
  index: getNumber,
  blockHash: formatHash
}, {
  index: ["logIndex"]
});
function formatReceiptLog(value) {
  return _formatReceiptLog(value);
}
var _formatTransactionReceipt = object({
  to: allowNull(getAddress, null),
  from: allowNull(getAddress, null),
  contractAddress: allowNull(getAddress, null),
  // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
  index: getNumber,
  root: allowNull(hexlify),
  gasUsed: getBigInt,
  blobGasUsed: allowNull(getBigInt, null),
  logsBloom: allowNull(formatData),
  blockHash: formatHash,
  hash: formatHash,
  logs: arrayOf(formatReceiptLog),
  blockNumber: getNumber,
  //confirmations: allowNull(getNumber, null),
  cumulativeGasUsed: getBigInt,
  effectiveGasPrice: allowNull(getBigInt),
  blobGasPrice: allowNull(getBigInt, null),
  status: allowNull(getNumber),
  type: allowNull(getNumber, 0)
}, {
  effectiveGasPrice: ["gasPrice"],
  hash: ["transactionHash"],
  index: ["transactionIndex"]
});

// node_modules/ethers/lib.esm/providers/abstract-provider.js
var BN_23 = BigInt(2);
var empty = new Uint8Array([]);

// node_modules/ethers/lib.esm/providers/provider-jsonrpc.js
var Primitive = "bigint,boolean,function,number,string,symbol".split(/,/g);
var defaultOptions = {
  polling: false,
  staticNetwork: null,
  batchStallTime: 10,
  batchMaxSize: 1 << 20,
  batchMaxCount: 100,
  cacheTimeout: 250,
  pollingInterval: 4e3
};

// node_modules/ethers/lib.esm/providers/ws-browser.js
function getGlobal2() {
  if (typeof self !== "undefined") {
    return self;
  }
  if (typeof window !== "undefined") {
    return window;
  }
  if (typeof global !== "undefined") {
    return global;
  }
  throw new Error("unable to locate global object");
}
var _WebSocket = getGlobal2().WebSocket;

// node_modules/ethers/lib.esm/providers/provider-fallback.js
var BN_16 = BigInt("1");
var BN_24 = BigInt("2");

// node_modules/ethers/lib.esm/providers/default-provider.js
var Testnets = "goerli kovan sepolia classicKotti optimism-goerli arbitrum-goerli matic-mumbai bnbt".split(" ");

// node_modules/ethers/lib.esm/wordlists/decode-owl.js
var subsChrs = " !#$%&'()*+,-./<=>?@[]^_`{|}~";
var Word = /^[a-z]*$/i;
function unfold(words2, sep) {
  let initial = 97;
  return words2.reduce((accum, word) => {
    if (word === sep) {
      initial++;
    } else if (word.match(Word)) {
      accum.push(String.fromCharCode(initial) + word);
    } else {
      initial = 97;
      accum.push(word);
    }
    return accum;
  }, []);
}
function decode(data, subs) {
  for (let i = subsChrs.length - 1; i >= 0; i--) {
    data = data.split(subsChrs[i]).join(subs.substring(2 * i, 2 * i + 2));
  }
  const clumps = [];
  const leftover = data.replace(/(:|([0-9])|([A-Z][a-z]*))/g, (all, item, semi, word) => {
    if (semi) {
      for (let i = parseInt(semi); i >= 0; i--) {
        clumps.push(";");
      }
    } else {
      clumps.push(item.toLowerCase());
    }
    return "";
  });
  if (leftover) {
    throw new Error(`leftovers: ${JSON.stringify(leftover)}`);
  }
  return unfold(unfold(clumps, ";"), ":");
}
function decodeOwl(data) {
  assertArgument(data[0] === "0", "unsupported auwl data", "data", data);
  return decode(data.substring(1 + 2 * subsChrs.length), data.substring(1, 1 + 2 * subsChrs.length));
}

// node_modules/ethers/lib.esm/wordlists/wordlist.js
var Wordlist = class {
  /**
   *  Creates a new Wordlist instance.
   *
   *  Sub-classes MUST call this if they provide their own constructor,
   *  passing in the locale string of the language.
   *
   *  Generally there is no need to create instances of a Wordlist,
   *  since each language-specific Wordlist creates an instance and
   *  there is no state kept internally, so they are safe to share.
   */
  constructor(locale) {
    __publicField(this, "locale");
    defineProperties(this, { locale });
  }
  /**
   *  Sub-classes may override this to provide a language-specific
   *  method for spliting %%phrase%% into individual words.
   *
   *  By default, %%phrase%% is split using any sequences of
   *  white-space as defined by regular expressions (i.e. ``/\s+/``).
   */
  split(phrase) {
    return phrase.toLowerCase().split(/\s+/g);
  }
  /**
   *  Sub-classes may override this to provider a language-specific
   *  method for joining %%words%% into a phrase.
   *
   *  By default, %%words%% are joined by a single space.
   */
  join(words2) {
    return words2.join(" ");
  }
};

// node_modules/ethers/lib.esm/wordlists/wordlist-owl.js
var _data3, _checksum, _words, _WordlistOwl_instances, loadWords_fn;
var WordlistOwl = class extends Wordlist {
  /**
   *  Creates a new Wordlist for %%locale%% using the OWL %%data%%
   *  and validated against the %%checksum%%.
   */
  constructor(locale, data, checksum2) {
    super(locale);
    __privateAdd(this, _WordlistOwl_instances);
    __privateAdd(this, _data3);
    __privateAdd(this, _checksum);
    __privateAdd(this, _words);
    __privateSet(this, _data3, data);
    __privateSet(this, _checksum, checksum2);
    __privateSet(this, _words, null);
  }
  /**
   *  The OWL-encoded data.
   */
  get _data() {
    return __privateGet(this, _data3);
  }
  /**
   *  Decode all the words for the wordlist.
   */
  _decodeWords() {
    return decodeOwl(__privateGet(this, _data3));
  }
  getWord(index) {
    const words2 = __privateMethod(this, _WordlistOwl_instances, loadWords_fn).call(this);
    assertArgument(index >= 0 && index < words2.length, `invalid word index: ${index}`, "index", index);
    return words2[index];
  }
  getWordIndex(word) {
    return __privateMethod(this, _WordlistOwl_instances, loadWords_fn).call(this).indexOf(word);
  }
};
_data3 = new WeakMap();
_checksum = new WeakMap();
_words = new WeakMap();
_WordlistOwl_instances = new WeakSet();
loadWords_fn = function() {
  if (__privateGet(this, _words) == null) {
    const words2 = this._decodeWords();
    const checksum2 = id(words2.join("\n") + "\n");
    if (checksum2 !== __privateGet(this, _checksum)) {
      throw new Error(`BIP39 Wordlist for ${this.locale} FAILED`);
    }
    __privateSet(this, _words, words2);
  }
  return __privateGet(this, _words);
};

// node_modules/ethers/lib.esm/wordlists/lang-en.js
var words = "0erleonalorenseinceregesticitStanvetearctssi#ch2Athck&tneLl0And#Il.yLeOutO=S|S%b/ra@SurdU'0Ce[Cid|CountCu'Hie=IdOu,-Qui*Ro[TT]T%T*[Tu$0AptDD-tD*[Ju,M.UltV<)Vi)0Rob-0FairF%dRaid0A(EEntRee0Ead0MRRp%tS!_rmBumCoholErtI&LLeyLowMo,O}PhaReadySoT Ways0A>urAz(gOngOuntU'd0Aly,Ch%Ci|G G!GryIm$K!Noun)Nu$O` Sw T&naTiqueXietyY1ArtOlogyPe?P!Pro=Ril1ChCt-EaEnaGueMMedM%MyOundR<+Re,Ri=RowTTefa@Ti,Tw%k0KPe@SaultSetSi,SumeThma0H!>OmTa{T&dT.udeTra@0Ct]D.Gu,NtTh%ToTumn0Era+OcadoOid0AkeA*AyEsomeFulKw?d0Is:ByChel%C#D+GL<)Lc#y~MbooN<aNn RRelyRga(R*lSeS-SketTt!3A^AnAutyCau'ComeEfF%eG(Ha=H(dLie=LowLtN^Nef./TrayTt Twe&Y#d3Cyc!DKeNdOlogyRdR`Tt _{AdeAmeAnketA,EakE[IndOodO[omOu'UeUrUsh_rdAtDyIlMbNeNusOkO,Rd R(gRrowSsTtomUn)XY_{etA(AndA[A=EadEezeI{Id+IefIghtIngIskOccoliOk&OnzeOomO` OwnUsh2Bb!DdyD+tFf$oIldLbLkL!tNd!Nk Rd&Rg R,SS(e[SyTt Y Zz:Bba+B(B!CtusGeKe~LmM aMpNN$N)lNdyNn#NoeNvasNy#Pab!P.$Pta(RRb#RdRgoRpetRryRtSeShS(o/!Su$TT$ogT^Teg%yTt!UghtU'Ut]Ve3Il(gL yM|NsusNturyRe$Rta(_irAlkAmp]An+AosApt Ar+A'AtEapE{Ee'EfErryE,I{&IefIldIm}yOi)Oo'R#-U{!UnkUrn0G?Nnam#Rc!Tiz&TyVil_imApArifyAwAyE<ErkEv I{I|IffImbIn-IpO{OgO'O`OudOwnUbUmpU, Ut^_^A,C#utDeFfeeIlInL!@L%LumnMb(eMeMf%tM-Mm#Mp<yNc tNdu@NfirmNg*[N}@Nsid NtrolNv()OkOlPp PyR$ReRnR*@/Tt#U^UntryUp!Ur'Us(V Yo>_{Ad!AftAmA}AshAt AwlAzyEamEd.EekEwI{etImeIspIt-OpO[Ou^OwdUci$UelUi'Umb!Un^UshYY,$2BeLtu*PPbo?dRiousRr|Rta(R=Sh]/omTe3C!:DMa+MpN)Ng R(gShUght WnY3AlBa>BrisCadeCemb CideCl(eC%a>C*a'ErF&'F(eFyG*eLayLiv M<dMi'Ni$Nti,NyP?tP&dPos.P`PutyRi=ScribeS tSignSkSpair/royTailTe@VelopVi)Vo>3AgramAlAm#dAryCeE'lEtFf G.$Gn.yLemmaNn NosaurRe@RtSag*eScov Sea'ShSmi[S%d Splay/<)V tVideV%)Zzy5Ct%Cum|G~Lph(Ma(Na>NkeyN%OrSeUb!Ve_ftAg#AmaA,-AwEamE[IftIllInkIpI=OpUmY2CkMbNeR(g/T^Ty1Arf1Nam-:G G!RlyRnR`Sily/Sy1HoOlogyOnomy0GeItUca>1F%t0G1GhtTh 2BowD E@r-Eg<tEm|Eph<tEvat%I>Se0B?kBodyBra)Er+Ot]PloyPow Pty0Ab!A@DD![D%'EmyErgyF%)Ga+G(eH<)JoyLi,OughR-hRollSu*T Ti*TryVelope1Isode0U$Uip0AA'OdeOs]R%Upt0CapeSayS&)Ta>0Ern$H-s1Id&)IlOkeOl=1A@Amp!Ce[Ch<+C.eCludeCu'Ecu>Erci'Hau,Hib.I!I,ItOt-P<dPe@Pi*Pla(Po'P*[T&dTra0EEbrow:Br-CeCultyDeIntI`~L'MeMilyMousNNcyNtasyRmSh]TT$Th TigueUltV%.e3Atu*Bru?yD $EEdElMa!N)/iv$T^V W3B Ct]EldGu*LeLmLt N$NdNeNg NishReRmR,Sc$ShTT}[X_gAmeAshAtAv%EeIghtIpOatO{O%Ow UidUshY_mCusGIlLd~owOdOtR)Re,R+tRkRtu}RumRw?dSsil/ UndX_gi!AmeEqu|EshI&dIn+OgOntO,OwnOz&U.2ElNNnyRna)RyTu*:D+tInLaxy~ yMePRa+Rba+Rd&Rl-Rm|SSpTeTh U+Ze3N $NiusN*Nt!Nu(e/u*2O,0AntFtGg!Ng RaffeRlVe_dAn)A*A[IdeImp'ObeOomOryO=OwUe_tDde[LdOdO'RillaSpelSsipV nWn_bA)A(AntApeA[Av.yEatE&IdIefItOc yOupOwUnt_rdE[IdeIltIt?N3M:B.IrLfMm M, NdPpyRb%RdRshR=,TVeWkZ?d3AdAl`ArtAvyD+hogIght~oLmetLpNRo3Dd&Gh~NtPRe/%y5BbyCkeyLdLeLiday~owMeNeyOdPeRnRr%R'Sp.$/TelUrV 5BGeM<Mb!M%Nd*dNgryNtRd!RryRtSb<d3Brid:1EOn0EaEntifyLe2N%e4LLeg$L}[0A+Ita>M&'Mu}Pa@Po'Pro=Pul'0ChCludeComeC*a'DexD-a>Do%Du,ryF<tFl-tF%mHa!H .Iti$Je@JuryMa>N Noc|PutQuiryS<eSe@SideSpi*/$lTa@T e,ToVe,V.eVol=3On0L<dOla>Sue0Em1Ory:CketGu?RZz3AlousAns~yWel9BInKeUr}yY5D+I)MpNg!Ni%Nk/:Ng?oo3EnEpT^upY3CkDD}yNdNgdomSsTT^&TeTt&Wi4EeIfeO{Ow:BBelB%Dd DyKeMpNgua+PtopR+T T(UghUndryVaWWnWsu.Y Zy3Ad AfArnA=Ctu*FtGG$G&dIsu*M#NdNg`NsOp?dSs#Tt Vel3ArB tyBr?yC&'FeFtGhtKeMbM.NkOnQuid/Tt!VeZ?d5AdAnB, C$CkG-NelyNgOpTt yUdUn+VeY$5CkyGga+Mb N?N^Xury3R-s:Ch(eDG-G}tIdIlInJ%KeMm$NNa+Nda>NgoNs]Nu$P!Rb!R^Rg(R(eRketRria+SkSs/ T^T i$ThTrixTt XimumZe3AdowAnAsu*AtCh<-D$DiaLodyLtMb M%yNt]NuRcyR+R.RryShSsa+T$Thod3Dd!DnightLk~]M-NdNimumN%Nu>Rac!Rr%S ySs/akeXXedXtu*5Bi!DelDifyMM|N.%NkeyN, N`OnR$ReRn(gSqu.oTh T]T%Unta(U'VeVie5ChFf(LeLtiplySc!SeumShroomS-/Tu$3Self/ yTh:I=MePk(Rrow/yT]Tu*3ArCkEdGati=G!@I` PhewR=/TTw%kUtr$V WsXt3CeGht5B!I'M(eeOd!Rm$R`SeTab!TeTh(gTi)VelW5C!?Mb R'T:K0EyJe@Li+Scu*S =Ta(Vious0CurE<Tob 0Or1FF Fi)T&2L1Ay0DI=Ymp-0It0CeEI#L(eLy1EnEraIn]Po'T]1An+B.Ch?dD D(?yG<I|Ig($Ph<0Tr-h0H 0Tdo%T TputTside0AlEnEr0NN 0Yg&0/ 0O}:CtDd!GeIrLa)LmNdaNelN-N` P RadeR|RkRrotRtySsT^ThTi|TrolTt nU'VeYm|3A)AnutArAs<tL-<NN$tyNcilOp!Pp Rfe@Rm.Rs#T2O}OtoRa'Ys-$0AnoCn-Ctu*E)GGe#~LotNkO} Pe/olT^Zza_)A}tA,-A>AyEa'Ed+U{UgUn+2EmEtIntL?LeLi)NdNyOlPul?Rt]S.]Ssib!/TatoTt yV tyWd W _@i)Ai'Ed-tEf Epa*Es|EttyEv|I)IdeIm?yIntI%.yIs#Iva>IzeOb!mO)[Odu)Of.OgramOje@Omo>OofOp tyOsp O>@OudOvide2Bl-Dd(g~LpL'Mpk(N^PilPpyR^a'R.yRpo'R'ShTZz!3Ramid:99Al.yAntumArt E,]I{ItIzO>:Bb.Cco#CeCkD?DioIlInI'~yMpN^NdomN+PidReTeTh V&WZ%3AdyAlAs#BelBuildC$lCei=CipeC%dCyc!Du)F!@F%mFu'G]G*tGul?Je@LaxLea'LiefLyMa(Memb M(dMo=Nd NewNtOp&PairPeatPla)P%tQui*ScueSemb!Si,Sour)Sp#'SultTi*T*atTurnUn]Ve$ViewW?d2Y`m0BBb#CeChDeD+F!GhtGidNgOtPp!SkTu$V$V 5AdA,BotBu,CketM<)OfOkieOmSeTa>UghUndU>Y$5Bb DeGLeNNwayR$:DDd!D}[FeIlLadLm#L#LtLu>MeMp!NdTisfyToshiU)Usa+VeY1A!AnA*Att E}HemeHoolI&)I[%sOrp]OutRapRe&RiptRub1AAr^As#AtC#dC*tCt]Cur.yEdEkGm|Le@~M(?Ni%N'Nt&)RiesRvi)Ss]Tt!TupV&_dowAftAllowA*EdEllEriffIeldIftI}IpIv O{OeOotOpOrtOuld O=RimpRugUff!Y0Bl(gCkDeE+GhtGnL|Lk~yLv Mil?Mp!N)NgR&/ Tua>XZe1A>Et^IIllInIrtUll0AbAmEepEnd I)IdeIghtImOg<OtOwUsh0AllArtI!OkeOo`0A{AkeApIffOw0ApCc Ci$CkDaFtL?Ldi LidLut]L=Me#eNgOnRryRtUlUndUpUr)U`0A)A*Ati$AwnEakEci$EedEllEndH eI)Id IkeInIr.L.OilOns%O#OrtOtRayReadR(gY0Ua*UeezeUir*l_b!AdiumAffA+AirsAmpAndArtA>AyEakEelEmEpE*oI{IllIngO{Oma^O}OolOryO=Ra>gyReetRikeR#gRugg!Ud|UffUmb!Y!0Bje@Bm.BwayC)[ChDd&Ff G?G+,ItMm NNnyN'tP PplyP*meReRfa)R+Rpri'RroundR=ySpe@/a(1AllowAmpApArmE?EetIftImIngIt^Ord1MbolMptomRup/em:B!Ck!GIlL|LkNkPeR+tSk/eTtooXi3A^Am~NN<tNnisNtRm/Xt_nkAtEmeEnE%yE*EyIngIsOughtReeRi=RowUmbUnd 0CketDeG LtMb MeNyPRedSsueT!5A,BaccoDayDdl EGe` I!tK&MatoM%rowNeNgueNightOlO`PP-Pp!R^RnadoRtoi'SsT$Uri,W?dW WnY_{AdeAff-Ag-A(Ansf ApAshA=lAyEatEeEndI$IbeI{Igg ImIpOphyOub!U{UeUlyUmpetU,U`Y2BeIt]Mb!NaN}lRkeyRnRt!1El=EntyI)InI,O1PeP-$:5Ly5B*lla0Ab!Awa*C!Cov D DoFairFoldHappyIf%mIqueItIv 'KnownLo{TilUsu$Veil1Da>GradeHoldOnP Set1B<Ge0A+EEdEfulE![U$0Il.y:C<tCuumGueLidL!yL=NNishP%Rious/Ult3H-!L=tNd%Ntu*NueRbRifyRs]RyS'lT <3Ab!Br<tCiousCt%yDeoEw~a+Nta+Ol(Rtu$RusSaS.Su$T$Vid5C$I)IdLc<oLumeTeYa+:GeG#ItLk~LnutNtRfa*RmRri%ShSp/eT VeY3Al`Ap#ArA'lA` BDd(gEk&dIrdLcome/T_!AtEatEelEnE*IpIsp 0DeD`FeLd~NNdowNeNgNkNn Nt ReSdomSeShT}[5LfM<Nd OdOlRdRkRldRryR`_pE{E,!I,I>Ong::Rd3Ar~ow9UUngU`:3BraRo9NeO";
var checksum = "0x3c8acc1e7b08d8e76f9fda015ef48dc8c710a73cb7e0f77b2c18a9b5a7adde60";
var wordlist = null;
var LangEn = class _LangEn extends WordlistOwl {
  /**
   *  Creates a new instance of the English language Wordlist.
   *
   *  This should be unnecessary most of the time as the exported
   *  [[langEn]] should suffice.
   *
   *  @_ignore:
   */
  constructor() {
    super("en", words, checksum);
  }
  /**
   *  Returns a singleton instance of a ``LangEn``, creating it
   *  if this is the first time being called.
   */
  static wordlist() {
    if (wordlist == null) {
      wordlist = new _LangEn();
    }
    return wordlist;
  }
};

// node_modules/ethers/node_modules/aes-js/lib.esm/aes.js
var _AES_key;
var _AES_Kd;
var _AES_Ke;
_AES_key = /* @__PURE__ */ new WeakMap(), _AES_Kd = /* @__PURE__ */ new WeakMap(), _AES_Ke = /* @__PURE__ */ new WeakMap();

// node_modules/ethers/node_modules/aes-js/lib.esm/mode-cbc.js
var _CBC_iv;
var _CBC_lastBlock;
_CBC_iv = /* @__PURE__ */ new WeakMap(), _CBC_lastBlock = /* @__PURE__ */ new WeakMap();

// node_modules/ethers/node_modules/aes-js/lib.esm/mode-cfb.js
var __classPrivateFieldGet2 = function(receiver, state, kind, f2) {
  if (kind === "a" && !f2) throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f2 : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f2 : kind === "a" ? f2.call(receiver) : f2 ? f2.value : state.get(receiver);
};
var _CFB_instances;
var _CFB_iv;
var _CFB_shiftRegister;
var _CFB_shift;
_CFB_iv = /* @__PURE__ */ new WeakMap(), _CFB_shiftRegister = /* @__PURE__ */ new WeakMap(), _CFB_instances = /* @__PURE__ */ new WeakSet(), _CFB_shift = function _CFB_shift2(data) {
  const segmentSize = this.segmentSize / 8;
  __classPrivateFieldGet2(this, _CFB_shiftRegister, "f").set(__classPrivateFieldGet2(this, _CFB_shiftRegister, "f").subarray(segmentSize));
  __classPrivateFieldGet2(this, _CFB_shiftRegister, "f").set(data.subarray(0, segmentSize), 16 - segmentSize);
};

// node_modules/ethers/node_modules/aes-js/lib.esm/mode-ctr.js
var _CTR_remaining;
var _CTR_remainingIndex;
var _CTR_counter;
_CTR_remaining = /* @__PURE__ */ new WeakMap(), _CTR_remainingIndex = /* @__PURE__ */ new WeakMap(), _CTR_counter = /* @__PURE__ */ new WeakMap();

// node_modules/ethers/node_modules/aes-js/lib.esm/mode-ofb.js
var _OFB_iv;
var _OFB_lastPrecipher;
var _OFB_lastPrecipherIndex;
_OFB_iv = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipher = /* @__PURE__ */ new WeakMap(), _OFB_lastPrecipherIndex = /* @__PURE__ */ new WeakMap();

// node_modules/ethers/lib.esm/wallet/hdwallet.js
var MasterSecret = new Uint8Array([66, 105, 116, 99, 111, 105, 110, 32, 115, 101, 101, 100]);
var N2 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");

// node_modules/ethers/lib.esm/wordlists/wordlists-browser.js
var wordlists = {
  en: LangEn.wordlist()
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/escrow-extension.js
var import_byte_utils6 = __toESM(require_dist6());
var import_assert11 = __toESM(require_assert2());

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/time-locks/time-locks.js
var import_byte_utils4 = __toESM(require_dist6());
var import_assert9 = __toESM(require_assert2());

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/time-locks/src-time-locks.js
var import_byte_utils2 = __toESM(require_dist6());
var import_fusion_sdk2 = __toESM(require_dist5());
var import_assert7 = __toESM(require_assert2());

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/time-locks/base-time-lock.js
var import_byte_utils = __toESM(require_dist6());
var import_assert6 = __toESM(require_assert2());
var BaseTimeLock = class _BaseTimeLock {
  constructor(deployedAt) {
    this.deployedAt = deployedAt;
    (0, import_assert6.default)(deployedAt !== 0n, "deployedAt must be > 0n");
    (0, import_assert6.default)(deployedAt <= import_byte_utils.UINT_32_MAX, "deployedAt can not be > uint32 max value");
  }
  getRescueStart(rescueDelay = _BaseTimeLock.DEFAULT_RESCUE_DELAY) {
    return this.deployedAt + rescueDelay;
  }
};
BaseTimeLock.DEFAULT_RESCUE_DELAY = 604800n;

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/time-locks/src-time-locks.js
var SrcStage;
(function(SrcStage2) {
  SrcStage2[SrcStage2["FinalityLock"] = 0] = "FinalityLock";
  SrcStage2[SrcStage2["PrivateWithdrawal"] = 1] = "PrivateWithdrawal";
  SrcStage2[SrcStage2["PublicWithdrawal"] = 2] = "PublicWithdrawal";
  SrcStage2[SrcStage2["PrivateCancellation"] = 3] = "PrivateCancellation";
  SrcStage2[SrcStage2["PublicCancellation"] = 4] = "PublicCancellation";
})(SrcStage || (SrcStage = {}));
var SrcTimeLocks = class _SrcTimeLocks extends BaseTimeLock {
  constructor(deployedAt, _withdrawal, _publicWithdrawal, _cancellation, _publicCancellation) {
    super(deployedAt);
    this._withdrawal = _withdrawal;
    this._publicWithdrawal = _publicWithdrawal;
    this._cancellation = _cancellation;
    this._publicCancellation = _publicCancellation;
    (0, import_assert7.default)(_withdrawal <= import_byte_utils2.UINT_32_MAX, "withdrawal can not be > uint32 max value");
    (0, import_assert7.default)(_withdrawal < _publicWithdrawal, "withdrawal can not be >= publicWithdrawal");
    (0, import_assert7.default)(_publicWithdrawal <= import_byte_utils2.UINT_32_MAX, "publicWithdrawal can not be > uint32 max value");
    (0, import_assert7.default)(_publicWithdrawal < _cancellation, "publicWithdrawal can not be >= cancellation");
    (0, import_assert7.default)(_cancellation <= import_byte_utils2.UINT_32_MAX, "cancellation can not be > uint32 max value");
    (0, import_assert7.default)(_cancellation < _publicCancellation, "cancellation can not be >= publicCancellation");
    (0, import_assert7.default)(_publicCancellation <= import_byte_utils2.UINT_32_MAX, "publicCancellation can not be > uint32 max value");
    (0, import_assert7.default)(deployedAt > _withdrawal, `deployedAt timestamp can not be less than withdrawal delay,deployedAt: ${deployedAt}, withdrawal: ${_withdrawal}`);
    (0, import_assert7.default)(deployedAt > _publicWithdrawal, `deployedAt timestamp can not be less than publicWithdrawal delay,deployedAt: ${deployedAt}, publicWithdrawal: ${_publicWithdrawal}`);
    (0, import_assert7.default)(deployedAt > _cancellation, `deployedAt timestamp can not be less than cancellation delay,deployedAt: ${deployedAt}, cancellation: ${_cancellation}`);
    (0, import_assert7.default)(deployedAt > _publicCancellation, `deployedAt timestamp can not be less than publicCancellation delay,deployedAt: ${deployedAt}, publicCancellation: ${_publicCancellation}`);
  }
  /** Timestamp at which ends `finality lock` and starts `private withdrawal` */
  get privateWithdrawal() {
    return this.deployedAt + this._withdrawal;
  }
  /** Timestamp at which ends `private withdrawal` and starts `public withdrawal` */
  get publicWithdrawal() {
    return this.deployedAt + this._publicWithdrawal;
  }
  /** Timestamp at which ends `public withdrawal` and starts `private cancellation` */
  get privateCancellation() {
    return this.deployedAt + this._cancellation;
  }
  /** Timestamp at which ends `private cancellation` and starts `public cancellation` */
  get publicCancellation() {
    return this.deployedAt + this._publicCancellation;
  }
  static new(params) {
    return new _SrcTimeLocks(params.deployedAt, params.withdrawal, params.publicWithdrawal, params.cancellation, params.publicCancellation);
  }
  /**
   * Return true, when `time` in `finality lock` interval
   *
   * @param time default is `now()`
   */
  isFinalityLock(time = (0, import_fusion_sdk2.now)()) {
    return time < this.privateWithdrawal;
  }
  /**
   * Return true, when `time` in `private withdrawal` interval
   *
   * @param time default is `now()`
   */
  isPrivateWithdrawal(time = (0, import_fusion_sdk2.now)()) {
    return time >= this.privateWithdrawal && time < this.publicWithdrawal;
  }
  /**
   * Return true, when `time` in `public withdrawal` interval
   *
   * @param time default is `now()`
   */
  isPublicWithdrawal(time = (0, import_fusion_sdk2.now)()) {
    return time >= this.publicWithdrawal && time < this.privateCancellation;
  }
  /**
   * Return true, when `time` in `private cancellation` interval
   *
   * @param time default is `now()`
   */
  isPrivateCancellation(time = (0, import_fusion_sdk2.now)()) {
    return time >= this.privateCancellation && time < this.publicCancellation;
  }
  /**
   * Return true, when `time` in `public cancellation` interval
   *
   * @param time default is `now()`
   */
  isPublicCancellation(time = (0, import_fusion_sdk2.now)()) {
    return time >= this.publicCancellation;
  }
  getStage(time = (0, import_fusion_sdk2.now)()) {
    if (this.isFinalityLock(time))
      return SrcStage.FinalityLock;
    if (this.isPrivateWithdrawal(time))
      return SrcStage.PrivateWithdrawal;
    if (this.isPublicWithdrawal(time))
      return SrcStage.PublicWithdrawal;
    if (this.isPrivateCancellation(time))
      return SrcStage.PrivateCancellation;
    if (this.isPublicCancellation(time))
      return SrcStage.PublicCancellation;
    throw new Error("Unreachable");
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/time-locks/dst-time-locks.js
var import_byte_utils3 = __toESM(require_dist6());
var import_fusion_sdk3 = __toESM(require_dist5());
var import_assert8 = __toESM(require_assert2());
var DstStage;
(function(DstStage2) {
  DstStage2[DstStage2["FinalityLock"] = 0] = "FinalityLock";
  DstStage2[DstStage2["PrivateWithdrawal"] = 1] = "PrivateWithdrawal";
  DstStage2[DstStage2["PublicWithdrawal"] = 2] = "PublicWithdrawal";
  DstStage2[DstStage2["PrivateCancellation"] = 3] = "PrivateCancellation";
})(DstStage || (DstStage = {}));
var DstTimeLocks = class _DstTimeLocks extends BaseTimeLock {
  constructor(deployedAt, _withdrawal, _publicWithdrawal, _cancellation) {
    super(deployedAt);
    this._withdrawal = _withdrawal;
    this._publicWithdrawal = _publicWithdrawal;
    this._cancellation = _cancellation;
    (0, import_assert8.default)(_withdrawal <= import_byte_utils3.UINT_32_MAX, "withdrawal can not be > uint32 max value");
    (0, import_assert8.default)(_withdrawal < _publicWithdrawal, "withdrawal can not be >= publicWithdrawal");
    (0, import_assert8.default)(_publicWithdrawal <= import_byte_utils3.UINT_32_MAX, "publicWithdrawal can not be > uint32 max value");
    (0, import_assert8.default)(_publicWithdrawal < _cancellation, "publicWithdrawal can not be >= cancellation");
    (0, import_assert8.default)(_cancellation <= import_byte_utils3.UINT_32_MAX, "cancellation can not be > uint32 max value");
    (0, import_assert8.default)(deployedAt > _withdrawal, `deployedAt timestamp can not be less than withdrawal delay,deployedAt: ${deployedAt}, withdrawal: ${_withdrawal}`);
    (0, import_assert8.default)(deployedAt > _publicWithdrawal, `deployedAt timestamp can not be less than publicWithdrawal delay,deployedAt: ${deployedAt}, publicWithdrawal: ${_publicWithdrawal}`);
    (0, import_assert8.default)(deployedAt > _cancellation, `deployedAt timestamp can not be less than cancellation delay,deployedAt: ${deployedAt}, cancellation: ${_cancellation}`);
  }
  /** Timestamp at which ends `finality lock` and starts `private withdrawal` */
  get privateWithdrawal() {
    return this.deployedAt + this._withdrawal;
  }
  /** Timestamp at which ends `private withdrawal` and starts `public withdrawal` */
  get publicWithdrawal() {
    return this.deployedAt + this._publicWithdrawal;
  }
  /** Timestamp at which ends `public withdrawal` and starts `private cancellation` */
  get privateCancellation() {
    return this.deployedAt + this._cancellation;
  }
  static new(params) {
    return new _DstTimeLocks(params.deployedAt, params.withdrawal, params.publicWithdrawal, params.cancellation);
  }
  /**
   * Return true, when `time` in `finality lock` interval
   *
   * @param time default is `now()`
   */
  isFinalityLock(time = (0, import_fusion_sdk3.now)()) {
    return time < this.privateWithdrawal;
  }
  /**
   * Return true, when `time` in `private withdrawal` interval
   *
   * @param time default is `now()`
   */
  isPrivateWithdrawal(time = (0, import_fusion_sdk3.now)()) {
    return time >= this.privateWithdrawal && time < this.publicWithdrawal;
  }
  /**
   * Return true, when `time` in `public withdrawal` interval
   *
   * @param time default is `now()`
   */
  isPublicWithdrawal(time = (0, import_fusion_sdk3.now)()) {
    return time >= this.publicWithdrawal && time < this.privateCancellation;
  }
  /**
   * Return true, when `time` in `private cancellation` interval
   *
   * @param time default is `now()`
   */
  isPrivateCancellation(time = (0, import_fusion_sdk3.now)()) {
    return time >= this.privateCancellation;
  }
  getStage(time = (0, import_fusion_sdk3.now)()) {
    if (this.isFinalityLock(time))
      return DstStage.FinalityLock;
    if (this.isPrivateWithdrawal(time))
      return DstStage.PrivateWithdrawal;
    if (this.isPublicWithdrawal(time))
      return DstStage.PublicWithdrawal;
    if (this.isPrivateCancellation(time))
      return DstStage.PrivateCancellation;
    throw new Error("Unreachable");
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/time-locks/time-locks.js
var TimeLocks = class _TimeLocks {
  constructor(_srcWithdrawal, _srcPublicWithdrawal, _srcCancellation, _srcPublicCancellation, _dstWithdrawal, _dstPublicWithdrawal, _dstCancellation, _deployedAt) {
    this._srcWithdrawal = _srcWithdrawal;
    this._srcPublicWithdrawal = _srcPublicWithdrawal;
    this._srcCancellation = _srcCancellation;
    this._srcPublicCancellation = _srcPublicCancellation;
    this._dstWithdrawal = _dstWithdrawal;
    this._dstPublicWithdrawal = _dstPublicWithdrawal;
    this._dstCancellation = _dstCancellation;
    this._deployedAt = _deployedAt;
    (0, import_assert9.default)(_deployedAt <= import_byte_utils4.UINT_32_MAX, "deployedAt can not be > uint32 max value");
    (0, import_assert9.default)(_srcWithdrawal <= import_byte_utils4.UINT_32_MAX, "srcWithdrawal can not be > uint32 max value");
    (0, import_assert9.default)(_srcWithdrawal < _srcPublicWithdrawal, "srcWithdrawal can not be >= srcPublicWithdrawal");
    (0, import_assert9.default)(_srcPublicWithdrawal <= import_byte_utils4.UINT_32_MAX, "srcPublicWithdrawal can not be > uint32 max value");
    (0, import_assert9.default)(_srcPublicWithdrawal < _srcCancellation, "srcPublicWithdrawal can not be >= srcCancellation");
    (0, import_assert9.default)(_srcCancellation <= import_byte_utils4.UINT_32_MAX, "srcCancellation can not be > uint32 max value");
    (0, import_assert9.default)(_srcCancellation < _srcPublicCancellation, "srcCancellation can not be >= srcPublicCancellation");
    (0, import_assert9.default)(_srcPublicCancellation <= import_byte_utils4.UINT_32_MAX, "srcPublicCancellation can not be > uint32 max value");
    (0, import_assert9.default)(_dstWithdrawal <= import_byte_utils4.UINT_32_MAX, "dstWithdrawal can not be > uint32 max value");
    (0, import_assert9.default)(_dstWithdrawal < _dstPublicWithdrawal, "dstWithdrawal can not be >= dstPublicWithdrawal");
    (0, import_assert9.default)(_dstPublicWithdrawal <= import_byte_utils4.UINT_32_MAX, "dstPublicWithdrawal can not be > uint32 max value");
    (0, import_assert9.default)(_dstPublicWithdrawal < _dstCancellation, "dstPublicWithdrawal can not be >= dstCancellation");
    (0, import_assert9.default)(_dstCancellation <= import_byte_utils4.UINT_32_MAX, "dstCancellation can not be > uint32 max value");
  }
  get deployedAt() {
    return this._deployedAt;
  }
  static new(params) {
    return new _TimeLocks(params.srcWithdrawal, params.srcPublicWithdrawal, params.srcCancellation, params.srcPublicCancellation, params.dstWithdrawal, params.dstPublicWithdrawal, params.dstCancellation, 0n);
  }
  static fromDurations(durations) {
    return new _TimeLocks(durations.srcFinalityLock, durations.srcFinalityLock + durations.srcPrivateWithdrawal, durations.srcFinalityLock + durations.srcPrivateWithdrawal + durations.srcPublicWithdrawal, durations.srcFinalityLock + durations.srcPrivateWithdrawal + durations.srcPublicWithdrawal + durations.srcPrivateCancellation, durations.dstFinalityLock, durations.dstFinalityLock + durations.dstPrivateWithdrawal, durations.dstFinalityLock + durations.dstPrivateWithdrawal + durations.dstPublicWithdrawal, 0n);
  }
  static fromBigInt(val) {
    const valBN = new import_byte_utils4.BN(val);
    const params = Array.from({ length: 8 }).map((_, i) => {
      return valBN.getMask(new import_byte_utils4.BitMask(BigInt(i) * 32n, BigInt(i + 1) * 32n)).value;
    });
    return new _TimeLocks(...params);
  }
  toJSON() {
    return "0x" + this.build().toString(16);
  }
  build() {
    return [
      this.deployedAt,
      this._dstCancellation,
      this._dstPublicWithdrawal,
      this._dstWithdrawal,
      this._srcPublicCancellation,
      this._srcCancellation,
      this._srcPublicWithdrawal,
      this._srcWithdrawal
    ].reduce((acc, el) => acc << 32n | el);
  }
  setDeployedAt(time) {
    this._deployedAt = time;
    return this;
  }
  toSrcTimeLocks(deployedAt = this.deployedAt) {
    return SrcTimeLocks.new({
      deployedAt,
      withdrawal: this._srcWithdrawal,
      publicWithdrawal: this._srcPublicWithdrawal,
      cancellation: this._srcCancellation,
      publicCancellation: this._srcPublicCancellation
    });
  }
  toDstTimeLocks(deployedAt = this.deployedAt) {
    return DstTimeLocks.new({
      deployedAt,
      withdrawal: this._dstWithdrawal,
      publicWithdrawal: this._dstPublicWithdrawal,
      cancellation: this._dstCancellation
    });
  }
};
TimeLocks.DEFAULT_RESCUE_DELAY = 604800n;
TimeLocks.Web3Type = "uint256";

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/hash-lock/hash-lock.js
var import_merkle_tree = __toESM(require_dist7());
var import_byte_utils5 = __toESM(require_dist6());
var import_assert10 = __toESM(require_assert2());
var HashLock = class _HashLock {
  constructor(val) {
    this.value = val;
  }
  static hashSecret(secret) {
    (0, import_assert10.default)((0, import_byte_utils5.isHexBytes)(secret) && (0, import_byte_utils5.getBytesCount)(secret) === 32n, "secret length must be 32 bytes hex encoded");
    return keccak256(secret);
  }
  static getMerkleLeaves(secrets) {
    return _HashLock.getMerkleLeavesFromSecretHashes(secrets.map(_HashLock.hashSecret));
  }
  static getMerkleLeavesFromSecretHashes(secretHashes) {
    return secretHashes.map((s, idx) => solidityPackedKeccak256(["uint64", "bytes32"], [idx, s]));
  }
  static getProof(leaves, idx) {
    return import_merkle_tree.SimpleMerkleTree.of(leaves).getProof(idx);
  }
  static fromString(value) {
    (0, import_assert10.default)((0, import_byte_utils5.isHexBytes)(value) && (0, import_byte_utils5.getBytesCount)(value) === 32n, "HashLock value must be bytes32 hex encoded");
    return new _HashLock(value);
  }
  /**
   * Create HashLock from keccak256 hash of secret
   */
  static forSingleFill(secret) {
    return new _HashLock(_HashLock.hashSecret(secret));
  }
  static forMultipleFills(leaves) {
    (0, import_assert10.default)(leaves.length > 2, "leaves array must be greater than 2. Or use HashLock.forSingleFill");
    const root = import_merkle_tree.SimpleMerkleTree.of(leaves).root;
    const rootWithCount = import_byte_utils5.BN.fromHex(root).setMask(new import_byte_utils5.BitMask(240n, 256n), BigInt(leaves.length - 1));
    return new _HashLock(rootWithCount.toHex(64));
  }
  /**
   * Only use if HashLockInfo is for multiple fill order
   * Otherwise garbage will be returned
   *
   */
  getPartsCount() {
    return new import_byte_utils5.BN(BigInt(this.value)).getMask(new import_byte_utils5.BitMask(240n, 256n)).value;
  }
  toString() {
    return this.value;
  }
  eq(other) {
    return this.value === other.value;
  }
};
HashLock.Web3Type = "bytes32";

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/escrow-extension.js
var EscrowExtension = class _EscrowExtension extends import_fusion_sdk4.FusionExtension {
  constructor(address, auctionDetails, postInteractionData, makerPermit, hashLockInfo, dstChainId, dstToken, srcSafetyDeposit, dstSafetyDeposit, timeLocks) {
    (0, import_assert11.default)(srcSafetyDeposit <= import_byte_utils6.UINT_128_MAX);
    (0, import_assert11.default)(srcSafetyDeposit <= import_byte_utils6.UINT_128_MAX);
    super(address, auctionDetails, postInteractionData, makerPermit);
    this.hashLockInfo = hashLockInfo;
    this.dstChainId = dstChainId;
    this.dstToken = dstToken;
    this.srcSafetyDeposit = srcSafetyDeposit;
    this.dstSafetyDeposit = dstSafetyDeposit;
    this.timeLocks = timeLocks;
    if (this.dstToken.isZero()) {
      this.dstToken = import_fusion_sdk4.Address.NATIVE_CURRENCY;
    }
  }
  /**
   * Create EscrowExtension from bytes
   * @param bytes 0x prefixed bytes
   */
  static decode(bytes3) {
    const extension = import_fusion_sdk4.Extension.decode(bytes3);
    return _EscrowExtension.fromExtension(extension);
  }
  static fromExtension(extension) {
    const fusionExt = import_fusion_sdk4.FusionExtension.fromExtension(new import_fusion_sdk4.Extension({
      ...extension,
      postInteraction: extension.postInteraction.slice(0, -_EscrowExtension.EXTRA_DATA_LENGTH)
    }));
    const extra = _EscrowExtension.decodeExtraData("0x" + extension.postInteraction.slice(-_EscrowExtension.EXTRA_DATA_LENGTH));
    return new _EscrowExtension(fusionExt.address, fusionExt.auctionDetails, fusionExt.postInteractionData, fusionExt.makerPermit, extra.hashLock, extra.dstChainId, extra.dstToken, extra.srcSafetyDeposit, extra.dstSafetyDeposit, extra.timeLocks);
  }
  /**
   * Decode escrow data not related to fusion
   *
   * @param bytes 0x prefixed bytes
   */
  static decodeExtraData(bytes3) {
    const [hashLock, dstChainId, dstToken, safetyDeposit, timeLocks] = AbiCoder.defaultAbiCoder().decode(_EscrowExtension.EXTRA_DATA_TYPES, bytes3);
    const safetyDepositBN = new import_byte_utils6.BN(safetyDeposit);
    return {
      hashLock: HashLock.fromString(hashLock),
      dstChainId: Number(dstChainId),
      dstToken: new import_fusion_sdk4.Address(dstToken),
      dstSafetyDeposit: safetyDepositBN.getMask(new import_byte_utils6.BitMask(0n, 128n)).value,
      srcSafetyDeposit: safetyDepositBN.getMask(new import_byte_utils6.BitMask(128n, 256n)).value,
      timeLocks: TimeLocks.fromBigInt(timeLocks)
    };
  }
  build() {
    const baseExt = super.build();
    return new import_fusion_sdk4.Extension({
      ...baseExt,
      postInteraction: baseExt.postInteraction + (0, import_byte_utils6.trim0x)(this.encodeExtraData())
    });
  }
  encodeExtraData() {
    const dstToken = this.dstToken.isNative() ? import_fusion_sdk4.Address.ZERO_ADDRESS : this.dstToken;
    return AbiCoder.defaultAbiCoder().encode(_EscrowExtension.EXTRA_DATA_TYPES, [
      this.hashLockInfo.toString(),
      this.dstChainId,
      dstToken.toString(),
      this.srcSafetyDeposit << 128n | this.dstSafetyDeposit,
      this.timeLocks.build()
    ]);
  }
};
EscrowExtension.EXTRA_DATA_TYPES = [
  HashLock.Web3Type,
  "uint256",
  // dst chain id
  "address",
  // dst token
  "uint256",
  // src/dst safety deposit
  TimeLocks.Web3Type
];
EscrowExtension.EXTRA_DATA_LENGTH = 160 * 2;

// node_modules/@1inch/cross-chain-sdk/dist/esm/deployments.js
var import_fusion_sdk5 = __toESM(require_dist5());
var TrueERC20 = new import_fusion_sdk5.Address("0xda0000d4000015a526378bb6fafc650cea5966f8");
var TRUE_ERC20 = {
  [import_fusion_sdk5.NetworkEnum.ETHEREUM]: TrueERC20,
  [import_fusion_sdk5.NetworkEnum.POLYGON]: TrueERC20,
  [import_fusion_sdk5.NetworkEnum.OPTIMISM]: TrueERC20,
  [import_fusion_sdk5.NetworkEnum.BINANCE]: TrueERC20,
  [import_fusion_sdk5.NetworkEnum.AVALANCHE]: TrueERC20,
  [import_fusion_sdk5.NetworkEnum.COINBASE]: TrueERC20,
  [import_fusion_sdk5.NetworkEnum.FANTOM]: TrueERC20,
  [import_fusion_sdk5.NetworkEnum.GNOSIS]: TrueERC20,
  [import_fusion_sdk5.NetworkEnum.ARBITRUM]: TrueERC20
};
var ESCROW_FACTORY_ADDRESS = new import_fusion_sdk5.Address("0xa7bcb4eac8964306f9e3764f67db6a7af6ddf99a");
var ESCROW_SRC_IMPLEMENTATION_ADDRESS = new import_fusion_sdk5.Address("0xcd70bf33cfe59759851db21c83ea47b6b83bef6a");
var ESCROW_DST_IMPLEMENTATION_ADDRESS = new import_fusion_sdk5.Address("0x9c3e06659f1c34f930ce97fcbce6e04ae88e535b");
var ESCROW_SRC_IMPLEMENTATION = {
  [import_fusion_sdk5.NetworkEnum.ETHEREUM]: ESCROW_SRC_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.POLYGON]: ESCROW_SRC_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.OPTIMISM]: ESCROW_SRC_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.BINANCE]: ESCROW_SRC_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.AVALANCHE]: ESCROW_SRC_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.COINBASE]: ESCROW_SRC_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.FANTOM]: ESCROW_SRC_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.GNOSIS]: ESCROW_SRC_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.ARBITRUM]: ESCROW_SRC_IMPLEMENTATION_ADDRESS
};
var ESCROW_DST_IMPLEMENTATION = {
  [import_fusion_sdk5.NetworkEnum.ETHEREUM]: ESCROW_DST_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.POLYGON]: ESCROW_DST_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.OPTIMISM]: ESCROW_DST_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.BINANCE]: ESCROW_DST_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.AVALANCHE]: ESCROW_DST_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.COINBASE]: ESCROW_DST_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.FANTOM]: ESCROW_DST_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.GNOSIS]: ESCROW_DST_IMPLEMENTATION_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.ARBITRUM]: ESCROW_DST_IMPLEMENTATION_ADDRESS
};
var ESCROW_FACTORY = {
  [import_fusion_sdk5.NetworkEnum.ETHEREUM]: ESCROW_FACTORY_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.POLYGON]: ESCROW_FACTORY_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.OPTIMISM]: ESCROW_FACTORY_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.BINANCE]: ESCROW_FACTORY_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.AVALANCHE]: ESCROW_FACTORY_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.COINBASE]: ESCROW_FACTORY_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.FANTOM]: ESCROW_FACTORY_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.GNOSIS]: ESCROW_FACTORY_ADDRESS,
  [import_fusion_sdk5.NetworkEnum.ARBITRUM]: ESCROW_FACTORY_ADDRESS
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/chains.js
var import_fusion_sdk6 = __toESM(require_dist5());
var SupportedChains = [
  import_fusion_sdk6.NetworkEnum.ETHEREUM,
  import_fusion_sdk6.NetworkEnum.POLYGON,
  import_fusion_sdk6.NetworkEnum.BINANCE,
  import_fusion_sdk6.NetworkEnum.OPTIMISM,
  import_fusion_sdk6.NetworkEnum.ARBITRUM,
  import_fusion_sdk6.NetworkEnum.AVALANCHE,
  import_fusion_sdk6.NetworkEnum.GNOSIS,
  import_fusion_sdk6.NetworkEnum.COINBASE
];
var isSupportedChain = (chain) => SupportedChains.includes(chain);

// node_modules/@1inch/cross-chain-sdk/dist/esm/immutables/immutables.js
var import_fusion_sdk7 = __toESM(require_dist5());
var import_byte_utils7 = __toESM(require_dist6());
var import_assert12 = __toESM(require_assert2());
var Immutables = class _Immutables {
  constructor(orderHash, hashLock, maker, taker, token, amount, safetyDeposit, timeLocks) {
    this.orderHash = orderHash;
    this.hashLock = hashLock;
    this.maker = maker;
    this.taker = taker;
    this.token = token;
    this.amount = amount;
    this.safetyDeposit = safetyDeposit;
    this.timeLocks = timeLocks;
    if (this.token.isZero()) {
      this.token = import_fusion_sdk7.Address.NATIVE_CURRENCY;
    }
  }
  static new(params) {
    return new _Immutables(params.orderHash, params.hashLock, params.maker, params.taker, params.token, params.amount, params.safetyDeposit, params.timeLocks);
  }
  /**
   * Create instance from encoded bytes
   * @param bytes 0x prefixed hex string
   */
  static decode(bytes3) {
    (0, import_assert12.default)((0, import_byte_utils7.isHexBytes)(bytes3));
    const res = AbiCoder.defaultAbiCoder().decode([_Immutables.Web3Type], bytes3);
    const data = res.at(0);
    return new _Immutables(data.orderHash, HashLock.fromString(data.hashlock), new import_fusion_sdk7.Address(data.maker), new import_fusion_sdk7.Address(data.taker), new import_fusion_sdk7.Address(data.token), BigInt(data.amount), BigInt(data.safetyDeposit), TimeLocks.fromBigInt(BigInt(data.timelocks)));
  }
  toJSON() {
    return this.build();
  }
  withComplement(dstComplement) {
    return _Immutables.new({ ...this, ...dstComplement });
  }
  withDeployedAt(time) {
    return _Immutables.new({
      ...this,
      timeLocks: TimeLocks.fromBigInt(this.timeLocks.build()).setDeployedAt(time)
    });
  }
  withTaker(taker) {
    return _Immutables.new({ ...this, taker });
  }
  withHashLock(hashLock) {
    return _Immutables.new({ ...this, hashLock });
  }
  withAmount(amount) {
    return _Immutables.new({ ...this, amount });
  }
  /**
   * Return keccak256 hash of instance
   */
  hash() {
    return keccak256(this.encode());
  }
  build() {
    const token = this.token.isNative() ? import_fusion_sdk7.Address.ZERO_ADDRESS : this.token;
    return {
      orderHash: this.orderHash,
      hashlock: this.hashLock.toString(),
      maker: this.maker.toString(),
      taker: this.taker.toString(),
      token: token.toString(),
      amount: this.amount.toString(),
      safetyDeposit: this.safetyDeposit.toString(),
      timelocks: this.timeLocks.build().toString()
    };
  }
  /**
   * Encode instance as bytes
   */
  encode() {
    return AbiCoder.defaultAbiCoder().encode([_Immutables.Web3Type], [this.build()]);
  }
};
Immutables.Web3Type = `tuple(${[
  "bytes32 orderHash",
  "bytes32 hashlock",
  "address maker",
  "address taker",
  "address token",
  "uint256 amount",
  "uint256 safetyDeposit",
  "uint256 timelocks"
]})`;

// node_modules/@1inch/cross-chain-sdk/dist/esm/immutables/dst-immutables-complement.js
var DstImmutablesComplement = class _DstImmutablesComplement {
  constructor(maker, amount, token, safetyDeposit) {
    this.maker = maker;
    this.amount = amount;
    this.token = token;
    this.safetyDeposit = safetyDeposit;
  }
  static new(params) {
    return new _DstImmutablesComplement(params.maker, params.amount, params.token, params.safetyDeposit);
  }
  toJSON() {
    return {
      maker: this.maker.toString(),
      amount: this.amount.toString(),
      token: this.token.toString(),
      safetyDeposit: this.safetyDeposit.toString()
    };
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/cross-chain-order/cross-chain-order.js
var CrossChainOrder = class _CrossChainOrder {
  constructor(extension, orderInfo, extra) {
    this.inner = new InnerOrder(extension, orderInfo, extra);
  }
  get dstChainId() {
    return this.inner.escrowExtension.dstChainId;
  }
  get escrowExtension() {
    return this.inner.escrowExtension;
  }
  get extension() {
    return this.inner.extension;
  }
  get maker() {
    return this.inner.maker;
  }
  get takerAsset() {
    return this.inner.escrowExtension.dstToken;
  }
  get makerAsset() {
    return this.inner.makerAsset;
  }
  get takingAmount() {
    return this.inner.takingAmount;
  }
  get makingAmount() {
    return this.inner.makingAmount;
  }
  get salt() {
    return this.inner.salt;
  }
  /**
   * If zero address, then maker will receive funds
   */
  get receiver() {
    return this.inner.receiver;
  }
  /**
   * Timestamp in sec
   */
  get deadline() {
    return this.inner.deadline;
  }
  /**
   * Timestamp in sec
   */
  get auctionStartTime() {
    return this.inner.auctionStartTime;
  }
  /**
   * Timestamp in sec
   */
  get auctionEndTime() {
    return this.inner.auctionEndTime;
  }
  get nonce() {
    return this.inner.nonce;
  }
  get partialFillAllowed() {
    return this.inner.partialFillAllowed;
  }
  get multipleFillsAllowed() {
    return this.inner.multipleFillsAllowed;
  }
  /**
   * Create new CrossChainOrder
   */
  static new(escrowFactory, orderInfo, escrowParams, details, extra) {
    var _a2, _b;
    const postInteractionData = import_fusion_sdk8.SettlementPostInteractionData.new({
      bankFee: ((_a2 = details.fees) == null ? void 0 : _a2.bankFee) || 0n,
      integratorFee: (_b = details.fees) == null ? void 0 : _b.integratorFee,
      whitelist: details.whitelist,
      resolvingStartTime: details.resolvingStartTime ?? (0, import_fusion_sdk8.now)(),
      customReceiver: orderInfo.receiver
    });
    const ext = new EscrowExtension(escrowFactory, details.auction, postInteractionData, (extra == null ? void 0 : extra.permit) ? new import_fusion_sdk8.Interaction(orderInfo.makerAsset, extra.permit) : void 0, escrowParams.hashLock, escrowParams.dstChainId, orderInfo.takerAsset, escrowParams.srcSafetyDeposit, escrowParams.dstSafetyDeposit, escrowParams.timeLocks);
    (0, import_assert13.default)(isSupportedChain(escrowParams.srcChainId), `Not supported chain ${escrowParams.srcChainId}`);
    (0, import_assert13.default)(isSupportedChain(escrowParams.dstChainId), `Not supported chain ${escrowParams.dstChainId}`);
    (0, import_assert13.default)(escrowParams.srcChainId !== escrowParams.dstChainId, "Chains must be different");
    return new _CrossChainOrder(ext, {
      ...orderInfo,
      takerAsset: TRUE_ERC20[escrowParams.srcChainId]
    }, extra);
  }
  /**
   * Create CrossChainOrder from order data and extension
   *
   */
  static fromDataAndExtension(order, extension) {
    const ext = EscrowExtension.fromExtension(extension);
    const makerTraits = new import_fusion_sdk8.MakerTraits(BigInt(order.makerTraits));
    const deadline = makerTraits.expiration();
    const orderExpirationDelay = deadline === null ? void 0 : deadline - ext.auctionDetails.startTime - ext.auctionDetails.duration;
    return new _CrossChainOrder(ext, {
      makerAsset: new import_fusion_sdk8.Address(order.makerAsset),
      takerAsset: new import_fusion_sdk8.Address(order.takerAsset),
      makingAmount: BigInt(order.makingAmount),
      takingAmount: BigInt(order.takingAmount),
      receiver: new import_fusion_sdk8.Address(order.receiver),
      maker: new import_fusion_sdk8.Address(order.maker),
      salt: BigInt(order.salt) >> 160n
    }, {
      enablePermit2: makerTraits.isPermit2(),
      nonce: makerTraits.nonceOrEpoch(),
      permit: extension.makerPermit === import_fusion_sdk8.ZX ? void 0 : import_fusion_sdk8.Interaction.decode(extension.makerPermit).data,
      orderExpirationDelay,
      allowMultipleFills: makerTraits.isMultipleFillsAllowed(),
      allowPartialFills: makerTraits.isPartialFillAllowed()
    });
  }
  build() {
    return this.inner.build();
  }
  getOrderHash(srcChainId) {
    return this.inner.getOrderHash(srcChainId);
  }
  getTypedData(srcChainId) {
    return this.inner.getTypedData(srcChainId);
  }
  getCalculator() {
    return this.inner.getCalculator();
  }
  /**
   * Calculates required taking amount for passed `makingAmount` at block time `time`
   *
   * @param makingAmount maker swap amount
   * @param time execution time in sec
   * @param blockBaseFee block fee in wei.
   * */
  calcTakingAmount(makingAmount, time, blockBaseFee) {
    return this.inner.calcTakingAmount(makingAmount, time, blockBaseFee);
  }
  /**
   * Check whether address allowed to execute order at the given time
   *
   * @param executor address of executor
   * @param executionTime timestamp in sec at which order planning to execute
   */
  canExecuteAt(executor, executionTime) {
    return this.inner.canExecuteAt(executor, executionTime);
  }
  /**
   * Check is order expired at a given time
   *
   * @param time timestamp in seconds
   */
  isExpiredAt(time) {
    return this.inner.isExpiredAt(time);
  }
  /**
   * Returns how much fee will be credited from a resolver deposit account
   * Token of fee set in Settlement extension constructor
   * Actual deployments can be found at https://github.com/1inch/limit-order-settlement/tree/master/deployments
   *
   * @param filledMakingAmount which resolver fills
   * @see https://github.com/1inch/limit-order-settlement/blob/0e3cae3653092ebb4ea5d2a338c87a54351ad883/contracts/extensions/ResolverFeeExtension.sol#L29
   */
  getResolverFee(filledMakingAmount) {
    return this.inner.getResolverFee(filledMakingAmount);
  }
  /**
   * Check if `wallet` can fill order before other
   */
  isExclusiveResolver(wallet) {
    return this.inner.isExclusiveResolver(wallet);
  }
  /**
   * Check if the auction has exclusive resolver, and it is in the exclusivity period
   *
   * @param time timestamp to check, `now()` by default
   */
  isExclusivityPeriod(time = (0, import_fusion_sdk8.now)()) {
    return this.inner.isExclusivityPeriod(time);
  }
  /**
   * @param srcChainId
   * @param taker executor of fillOrder* transaction
   * @param amount making amount (make sure same amount passed to contact fillOrder method)
   * @param hashLock leaf of a merkle tree for multiple fill
   */
  toSrcImmutables(srcChainId, taker, amount, hashLock = this.escrowExtension.hashLockInfo) {
    const isPartialFill = amount !== this.makingAmount;
    const isLeafHashLock = hashLock !== this.escrowExtension.hashLockInfo;
    if (isPartialFill && !isLeafHashLock) {
      throw new Error("Provide leaf of merkle tree as HashLock for partial fell");
    }
    return Immutables.new({
      hashLock,
      safetyDeposit: this.escrowExtension.srcSafetyDeposit,
      taker,
      maker: this.maker,
      orderHash: this.getOrderHash(srcChainId),
      amount,
      timeLocks: this.escrowExtension.timeLocks,
      token: this.makerAsset
    });
  }
  getMultipleFillIdx(fillAmount, remainingAmount = this.makingAmount) {
    (0, import_assert13.default)(this.inner.multipleFillsAllowed, "Multiple fills disabled for order");
    const partsCount = this.escrowExtension.hashLockInfo.getPartsCount();
    const calculatedIndex = (this.makingAmount - remainingAmount + fillAmount - 1n) * partsCount / this.makingAmount;
    if (remainingAmount === fillAmount) {
      return Number(calculatedIndex + 1n);
    }
    return Number(calculatedIndex);
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/escrow-factory/escrow-factory.js
var import_fusion_sdk9 = __toESM(require_dist5());
var import_byte_utils8 = __toESM(require_dist6());
var import_assert14 = __toESM(require_assert2());
var EscrowFactory = class _EscrowFactory {
  constructor(address) {
    this.address = address;
  }
  /**
   * See https://github.com/1inch/cross-chain-swap/blob/03d99b9604d8f7a5a396720fbe1059f7d94db762/contracts/libraries/ProxyHashLib.sol#L14
   */
  static calcProxyBytecodeHash(impl) {
    return keccak256(`0x3d602d80600a3d3981f3363d3d373d3d3d363d73${(0, import_byte_utils8.trim0x)(impl.toString())}5af43d82803e903d91602b57fd5bf3`);
  }
  /**
   * Calculate address of escrow contract
   *
   * @return escrow address at same the chain as `this.address`
   */
  getEscrowAddress(immutablesHash, implementationAddress) {
    (0, import_assert14.default)((0, import_byte_utils8.isHexBytes)(immutablesHash) && (0, import_byte_utils8.getBytesCount)(immutablesHash) === 32n, "invalid hash");
    return new import_fusion_sdk9.Address(getCreate2Address(this.address.toString(), immutablesHash, _EscrowFactory.calcProxyBytecodeHash(implementationAddress)));
  }
  /**
   * Calculates source escrow address for given params
   *
   * Make sure you call it on source chain escrow factory
   */
  getSrcEscrowAddress(srcImmutables, implementationAddress) {
    return this.getEscrowAddress(srcImmutables.hash(), implementationAddress);
  }
  /**
   * Calculates destination escrow address for given params
   *
   * Make sure you call it on destination chain escrow factory
   */
  getDstEscrowAddress(srcImmutables, complement, blockTime, taker, implementationAddress) {
    return this.getEscrowAddress(srcImmutables.withComplement(complement).withTaker(taker).withDeployedAt(blockTime).hash(), implementationAddress);
  }
  getMultipleFillInteraction(proof, idx, secretHash) {
    const data = AbiCoder.defaultAbiCoder().encode([
      `(
                        bytes32[] proof,
                        uint256 idx,
                        bytes32 secretHash,
                    )`
    ], [{ proof, idx, secretHash }]);
    const dataNoOffset = (0, import_byte_utils8.add0x)(data.slice(66));
    return new import_fusion_sdk9.Interaction(this.address, dataNoOffset);
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/sdk/sdk.js
var import_fusion_sdk16 = __toESM(require_dist5());

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/params.js
function concatQueryParams(params) {
  if (!params) {
    return "";
  }
  const keys = Object.keys(params);
  if (keys.length === 0) {
    return "";
  }
  return "?" + keys.reduce((a, k) => {
    if (!params[k]) {
      return a;
    }
    const value = params[k];
    a.push(k + "=" + encodeURIComponent(Array.isArray(value) ? value.join(",") : value));
    return a;
  }, []).join("&");
}

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/quoter/quote/quote.js
var import_byte_utils9 = __toESM(require_dist6());
var import_fusion_sdk11 = __toESM(require_dist5());

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/quoter/types.js
var PresetEnum;
(function(PresetEnum2) {
  PresetEnum2["fast"] = "fast";
  PresetEnum2["medium"] = "medium";
  PresetEnum2["slow"] = "slow";
  PresetEnum2["custom"] = "custom";
})(PresetEnum || (PresetEnum = {}));

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/quoter/preset.js
var import_fusion_sdk10 = __toESM(require_dist5());
var Preset = class {
  constructor(preset) {
    var _a2, _b;
    this.startAmount = BigInt(preset.startAmount);
    this.secretsCount = preset.secretsCount;
    this.costInDstToken = BigInt(preset.costInDstToken);
    this.auctionDuration = BigInt(preset.auctionDuration);
    this.startAuctionIn = BigInt(preset.startAuctionIn);
    this.initialRateBump = preset.initialRateBump;
    this.auctionStartAmount = BigInt(preset.auctionStartAmount);
    this.auctionEndAmount = BigInt(preset.auctionEndAmount);
    this.points = preset.points;
    this.gasCostInfo = {
      gasPriceEstimate: BigInt(((_a2 = preset.gasCost) == null ? void 0 : _a2.gasPriceEstimate) || 0n),
      gasBumpEstimate: BigInt(((_b = preset.gasCost) == null ? void 0 : _b.gasBumpEstimate) || 0n)
    };
    this.exclusiveResolver = preset.exclusiveResolver ? new import_fusion_sdk10.Address(preset.exclusiveResolver) : void 0;
    this.allowPartialFills = preset.allowPartialFills;
    this.allowMultipleFills = preset.allowMultipleFills;
  }
  createAuctionDetails(additionalWaitPeriod = 0n) {
    return new import_fusion_sdk10.AuctionDetails({
      duration: this.auctionDuration,
      startTime: this.calcAuctionStartTime(additionalWaitPeriod),
      initialRateBump: this.initialRateBump,
      points: this.points,
      gasCost: this.gasCostInfo
    });
  }
  calcAuctionStartTime(additionalWaitPeriod = 0n) {
    return BigInt(Math.floor(Date.now() / 1e3)) + additionalWaitPeriod + this.startAuctionIn;
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/quoter/quote/quote.js
var Quote = class {
  constructor(params, response) {
    this.params = params;
    this.srcTokenAmount = BigInt(response.srcTokenAmount);
    this.dstTokenAmount = BigInt(response.dstTokenAmount);
    this.presets = {
      [PresetEnum.fast]: new Preset(response.presets.fast),
      [PresetEnum.medium]: new Preset(response.presets.medium),
      [PresetEnum.slow]: new Preset(response.presets.slow),
      [PresetEnum.custom]: response.presets.custom ? new Preset(response.presets.custom) : void 0
    };
    this.timeLocks = response.timeLocks;
    this.srcSafetyDeposit = BigInt(response.srcSafetyDeposit);
    this.dstSafetyDeposit = BigInt(response.dstSafetyDeposit);
    this.prices = response.prices;
    this.volume = response.volume;
    this.quoteId = response.quoteId;
    this.whitelist = response.whitelist.map((a) => new import_fusion_sdk11.Address(a));
    this.recommendedPreset = response.recommendedPreset;
    this.srcEscrowFactory = new import_fusion_sdk11.Address(response.srcEscrowFactory);
    this.dstEscrowFactory = new import_fusion_sdk11.Address(response.dstEscrowFactory);
  }
  get srcChainId() {
    return this.params.srcChain;
  }
  get dstChainId() {
    return this.params.dstChain;
  }
  createOrder(params) {
    const preset = this.getPreset((params == null ? void 0 : params.preset) || this.recommendedPreset);
    const auctionDetails = preset.createAuctionDetails(params.delayAuctionStartTimeBy);
    const allowPartialFills = preset.allowPartialFills;
    const allowMultipleFills = preset.allowMultipleFills;
    const isNonceRequired = !allowPartialFills || !allowMultipleFills;
    const nonce = isNonceRequired ? params.nonce ?? (0, import_fusion_sdk11.randBigInt)(import_byte_utils9.UINT_40_MAX) : params.nonce;
    const takerAsset = this.params.dstTokenAddress.isNative() ? import_fusion_sdk11.Address.NATIVE_CURRENCY : this.params.dstTokenAddress;
    return CrossChainOrder.new(this.srcEscrowFactory, {
      makerAsset: this.params.srcTokenAddress,
      takerAsset,
      makingAmount: this.srcTokenAmount,
      takingAmount: preset.auctionEndAmount,
      maker: this.params.walletAddress,
      receiver: params.receiver
    }, {
      hashLock: params.hashLock,
      srcChainId: this.params.srcChain,
      dstChainId: this.params.dstChain,
      srcSafetyDeposit: this.srcSafetyDeposit,
      dstSafetyDeposit: this.dstSafetyDeposit,
      timeLocks: TimeLocks.new({
        srcWithdrawal: BigInt(this.timeLocks.srcWithdrawal),
        srcPublicWithdrawal: BigInt(this.timeLocks.srcPublicWithdrawal),
        srcCancellation: BigInt(this.timeLocks.srcCancellation),
        srcPublicCancellation: BigInt(this.timeLocks.srcPublicCancellation),
        dstWithdrawal: BigInt(this.timeLocks.dstWithdrawal),
        dstPublicWithdrawal: BigInt(this.timeLocks.dstPublicWithdrawal),
        dstCancellation: BigInt(this.timeLocks.dstCancellation)
      })
    }, {
      auction: auctionDetails,
      fees: {
        integratorFee: {
          ratio: (0, import_fusion_sdk11.bpsToRatioFormat)(this.params.fee) || 0n,
          receiver: (params == null ? void 0 : params.takingFeeReceiver) ? new import_fusion_sdk11.Address(params == null ? void 0 : params.takingFeeReceiver) : import_fusion_sdk11.Address.ZERO_ADDRESS
        },
        bankFee: 0n
      },
      whitelist: this.getWhitelist(auctionDetails.startTime, preset.exclusiveResolver)
    }, {
      nonce,
      permit: params.permit,
      allowPartialFills,
      allowMultipleFills,
      orderExpirationDelay: params == null ? void 0 : params.orderExpirationDelay,
      source: this.params.source,
      enablePermit2: params.isPermit2
    });
  }
  getPreset(type = this.recommendedPreset) {
    return this.presets[type];
  }
  getWhitelist(auctionStartTime, exclusiveResolver) {
    if (exclusiveResolver) {
      return this.whitelist.map((resolver) => {
        const isExclusive = resolver.equal(exclusiveResolver);
        return {
          address: resolver,
          allowFrom: isExclusive ? 0n : auctionStartTime
        };
      });
    }
    return this.whitelist.map((resolver) => ({
      address: resolver,
      allowFrom: 0n
    }));
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/quoter/quoter.request.js
var import_fusion_sdk12 = __toESM(require_dist5());
var QuoterRequest = class _QuoterRequest {
  constructor(params) {
    if (params.srcChain === params.dstChain) {
      throw new Error("srcChain and dstChain should be different");
    }
    if (!(0, import_fusion_sdk12.isValidAmount)(params.amount)) {
      throw new Error(`${params.amount} is invalid amount`);
    }
    this.srcChain = params.srcChain;
    this.dstChain = params.dstChain;
    this.srcTokenAddress = new import_fusion_sdk12.Address(params.srcTokenAddress);
    this.dstTokenAddress = new import_fusion_sdk12.Address(params.dstTokenAddress);
    this.walletAddress = new import_fusion_sdk12.Address(params.walletAddress);
    this.enableEstimate = params.enableEstimate || false;
    this.permit = params.permit;
    this.fee = params.fee;
    this.source = params.source || "sdk";
    this.isPermit2 = params.isPermit2 ?? false;
    if (this.srcTokenAddress.isNative()) {
      throw new Error(`cannot swap ${import_fusion_sdk12.Address.NATIVE_CURRENCY}: wrap native currency to it's wrapper fist`);
    }
    if (this.dstTokenAddress.isZero()) {
      throw new Error(`replace ${import_fusion_sdk12.Address.ZERO_ADDRESS} with ${import_fusion_sdk12.Address.NATIVE_CURRENCY}`);
    }
    this.amount = BigInt(params.amount);
    if (this.fee && this.source === "sdk") {
      throw new Error("cannot use fee without source");
    }
  }
  static new(params) {
    return new _QuoterRequest(params);
  }
  build() {
    return {
      srcChain: this.srcChain,
      dstChain: this.dstChain,
      srcTokenAddress: this.srcTokenAddress.toString(),
      dstTokenAddress: this.dstTokenAddress.toString(),
      amount: this.amount.toString(),
      walletAddress: this.walletAddress.toString(),
      enableEstimate: this.enableEstimate,
      permit: this.permit,
      fee: this.fee,
      source: this.source,
      isPermit2: this.isPermit2
    };
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/quoter/quoter.api.js
var QuoterApi = class _QuoterApi {
  constructor(config, httpClient) {
    this.config = config;
    this.httpClient = httpClient;
  }
  async getQuote(params) {
    const queryParams = concatQueryParams(params.build());
    const url = `${this.config.url}/${_QuoterApi.Version}/quote/receive/${queryParams}`;
    const res = await this.httpClient.get(url);
    return new Quote(params, res);
  }
  async getQuoteWithCustomPreset(params, body) {
    const bodyErr = body.validate();
    if (bodyErr) {
      throw new Error(bodyErr);
    }
    const queryParams = concatQueryParams(params.build());
    const bodyParams = body.build();
    const url = `${this.config.url}/${_QuoterApi.Version}/quote/receive/${queryParams}`;
    const res = await this.httpClient.post(url, bodyParams);
    return new Quote(params, res);
  }
};
QuoterApi.Version = "v1.0";

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/quoter/quoter-custom-preset.request.js
var import_fusion_sdk13 = __toESM(require_dist5());
var QuoterCustomPresetRequest = class _QuoterCustomPresetRequest {
  constructor(params) {
    this.customPreset = params.customPreset;
  }
  static new(params) {
    return new _QuoterCustomPresetRequest(params);
  }
  build() {
    return {
      auctionDuration: this.customPreset.auctionDuration,
      auctionEndAmount: this.customPreset.auctionEndAmount,
      auctionStartAmount: this.customPreset.auctionStartAmount,
      points: this.customPreset.points
    };
  }
  validate() {
    if (!(0, import_fusion_sdk13.isValidAmount)(this.customPreset.auctionStartAmount)) {
      return "Invalid auctionStartAmount";
    }
    if (!(0, import_fusion_sdk13.isValidAmount)(this.customPreset.auctionEndAmount)) {
      return "Invalid auctionEndAmount";
    }
    const durationErr = this.validateAuctionDuration(this.customPreset.auctionDuration);
    if (durationErr) {
      return durationErr;
    }
    const pointsErr = this.validatePoints(this.customPreset.points, this.customPreset.auctionStartAmount, this.customPreset.auctionEndAmount);
    if (pointsErr) {
      return pointsErr;
    }
    return null;
  }
  validateAuctionDuration(duration) {
    if (typeof duration !== "number" || isNaN(duration)) {
      return "auctionDuration should be integer";
    }
    if (!Number.isInteger(duration)) {
      return "auctionDuration should be integer (not float)";
    }
    return null;
  }
  validatePoints(points = [], auctionStartAmount, auctionEndAmount) {
    if (!points) {
      return null;
    }
    try {
      const toTokenAmounts = points.map((p) => BigInt(p.toTokenAmount));
      const isValid = toTokenAmounts.every((amount) => amount <= BigInt(auctionStartAmount) && amount >= BigInt(auctionEndAmount));
      if (!isValid) {
        return "points should be in range of auction";
      }
    } catch (e) {
      return `points should be an array of valid amounts`;
    }
    return null;
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/relayer/relayer.request.js
var RelayerRequest = class _RelayerRequest {
  constructor(params) {
    this.order = params.order;
    this.signature = params.signature;
    this.quoteId = params.quoteId;
    this.extension = params.extension;
    this.srcChainId = params.srcChainId;
    this.secretHashes = params.secretHashes;
  }
  static new(params) {
    return new _RelayerRequest(params);
  }
  build() {
    return {
      order: this.order,
      signature: this.signature,
      quoteId: this.quoteId,
      extension: this.extension,
      srcChainId: this.srcChainId,
      secretHashes: this.secretHashes
    };
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/relayer/relayer.api.js
var RelayerApi = class _RelayerApi {
  constructor(config, httpClient) {
    this.config = config;
    this.httpClient = httpClient;
  }
  submit(params) {
    const url = `${this.config.url}/${_RelayerApi.Version}/submit`;
    return this.httpClient.post(url, params);
  }
  submitBatch(params) {
    const url = `${this.config.url}/${_RelayerApi.Version}/submit/many`;
    return this.httpClient.post(url, params);
  }
  submitSecret(orderHash, secret) {
    const url = `${this.config.url}/${_RelayerApi.Version}/submit/secret`;
    return this.httpClient.post(url, {
      orderHash,
      secret
    });
  }
};
RelayerApi.Version = "v1.0";

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/orders/orders.request.js
var import_byte_utils10 = __toESM(require_dist6());
var import_fusion_sdk14 = __toESM(require_dist5());

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/pagination.js
var PaginationRequest = class {
  constructor(page, limit) {
    if (limit != void 0 && (limit < 1 || limit > 500)) {
      throw Error("limit should be in range between 1 and 500");
    }
    if (page != void 0 && page < 1) {
      throw Error(`page should be >= 1`);
    }
    this.page = page;
    this.limit = limit;
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/orders/orders.request.js
var ActiveOrdersRequest = class {
  constructor(params = {}) {
    this.pagination = new PaginationRequest(params.page, params.limit);
  }
  build() {
    return {
      page: this.pagination.page,
      limit: this.pagination.limit
    };
  }
};
var OrderStatusRequest = class {
  constructor(params) {
    this.orderHash = params.orderHash;
    if (this.orderHash.length !== 66) {
      throw Error(`orderHash length should be equals 66`);
    }
    if (!(0, import_byte_utils10.isHexString)(this.orderHash)) {
      throw Error(`orderHash have to be hex`);
    }
  }
  build() {
    return {
      orderHash: this.orderHash
    };
  }
};
var OrdersByMakerRequest = class {
  constructor(params) {
    this.address = params.address;
    this.pagination = new PaginationRequest(params.page, params.limit);
    this.srcChain = params.srcChain;
    this.dstChain = params.dstChain;
    this.srcToken = params.srcToken;
    this.dstToken = params.dstToken;
    this.withToken = params.withToken;
    this.timestampFrom = params.timestampFrom;
    this.timestampTo = params.timestampTo;
    if (!(0, import_fusion_sdk14.isValidAddress)(this.address)) {
      throw Error(`${this.address} is invalid address`);
    }
    if (this.srcToken && !(0, import_fusion_sdk14.isValidAddress)(this.srcToken)) {
      throw Error(`${this.srcToken} is invalid address`);
    }
    if (this.dstToken && !(0, import_fusion_sdk14.isValidAddress)(this.dstToken)) {
      throw Error(`${this.dstToken} is invalid address`);
    }
    if (this.withToken && !(0, import_fusion_sdk14.isValidAddress)(this.withToken)) {
      throw Error(`${this.withToken} is invalid address`);
    }
  }
  buildQueryParams() {
    return {
      limit: this.pagination.limit,
      page: this.pagination.page,
      srcChain: this.srcChain,
      dstChain: this.dstChain,
      srcToken: this.srcToken,
      dstToken: this.dstToken,
      withToken: this.withToken,
      timestampFrom: this.timestampFrom,
      timestampTo: this.timestampTo
    };
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/orders/orders.api.js
var OrdersApi = class _OrdersApi {
  constructor(config, httpClient) {
    this.config = config;
    this.httpClient = httpClient;
  }
  async getActiveOrders(params = new ActiveOrdersRequest()) {
    const queryParams = concatQueryParams(params.build());
    const url = `${this.config.url}/${_OrdersApi.Version}/order/active/${queryParams}`;
    return this.httpClient.get(url);
  }
  async getOrderStatus(params) {
    const url = `${this.config.url}/${_OrdersApi.Version}/order/status/${params.orderHash}`;
    return this.httpClient.get(url);
  }
  async getOrdersByMaker(params) {
    const qp = concatQueryParams(params.buildQueryParams());
    const url = `${this.config.url}/${_OrdersApi.Version}/order/maker/${params.address}/${qp}`;
    return this.httpClient.get(url);
  }
  async getReadyToAcceptSecretFills(orderHash) {
    const url = `${this.config.url}/${_OrdersApi.Version}/order/ready-to-accept-secret-fills/${orderHash}`;
    return this.httpClient.get(url);
  }
  async getReadyToExecutePublicActions() {
    const url = `${this.config.url}/${_OrdersApi.Version}/order/ready-to-execute-public-actions`;
    return this.httpClient.get(url);
  }
  async getPublishedSecrets(orderHash) {
    const url = `${this.config.url}/${_OrdersApi.Version}/order/secrets/${orderHash}`;
    return this.httpClient.get(url);
  }
};
OrdersApi.Version = "v1.0";

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/orders/types.js
var ValidationStatus;
(function(ValidationStatus2) {
  ValidationStatus2["Valid"] = "valid";
  ValidationStatus2["OrderPredicateReturnedFalse"] = "order-predicate-returned-false";
  ValidationStatus2["NotEnoughBalance"] = "not-enough-balance";
  ValidationStatus2["NotEnoughAllowance"] = "not-enough-allowance";
  ValidationStatus2["InvalidPermitSignature"] = "invalid-permit-signature";
  ValidationStatus2["InvalidPermitSpender"] = "invalid-permit-spender";
  ValidationStatus2["InvalidPermitSigner"] = "invalid-permit-signer";
  ValidationStatus2["InvalidSignature"] = "invalid-signature";
  ValidationStatus2["FailedToParsePermitDetails"] = "failed-to-parse-permit-details";
  ValidationStatus2["UnknownPermitVersion"] = "unknown-permit-version";
  ValidationStatus2["WrongEpochManagerAndBitInvalidator"] = "wrong-epoch-manager-and-bit-invalidator";
  ValidationStatus2["FailedToDecodeRemainingMakerAmount"] = "failed-to-decode-remaining";
  ValidationStatus2["UnknownFailure"] = "unknown-failure";
})(ValidationStatus || (ValidationStatus = {}));
var FillStatus;
(function(FillStatus2) {
  FillStatus2["Pending"] = "pending";
  FillStatus2["Executed"] = "executed";
  FillStatus2["Refunding"] = "refunding";
  FillStatus2["Refunded"] = "refunded";
})(FillStatus || (FillStatus = {}));
var OrderStatus;
(function(OrderStatus2) {
  OrderStatus2["Pending"] = "pending";
  OrderStatus2["Executed"] = "executed";
  OrderStatus2["Expired"] = "expired";
  OrderStatus2["Cancelled"] = "cancelled";
  OrderStatus2["Refunding"] = "refunding";
  OrderStatus2["Refunded"] = "refunded";
})(OrderStatus || (OrderStatus = {}));
var EscrowEventSide;
(function(EscrowEventSide2) {
  EscrowEventSide2["Src"] = "src";
  EscrowEventSide2["Dst"] = "dst";
})(EscrowEventSide || (EscrowEventSide = {}));
var EscrowEventAction;
(function(EscrowEventAction2) {
  EscrowEventAction2["SrcEscrowCreated"] = "src_escrow_created";
  EscrowEventAction2["DstEscrowCreated"] = "dst_escrow_created";
  EscrowEventAction2["Withdrawn"] = "withdrawn";
  EscrowEventAction2["FundsRescued"] = "funds_rescued";
  EscrowEventAction2["EscrowCancelled"] = "escrow_cancelled";
})(EscrowEventAction || (EscrowEventAction = {}));
var OrderType;
(function(OrderType2) {
  OrderType2["SingleFill"] = "SingleFill";
  OrderType2["MultipleFills"] = "MultipleFills";
})(OrderType || (OrderType = {}));
var PublicAction;
(function(PublicAction2) {
  PublicAction2["Withdraw"] = "withdraw";
  PublicAction2["Cancel"] = "cancel";
})(PublicAction || (PublicAction = {}));

// node_modules/@1inch/cross-chain-sdk/dist/esm/api/fusion-api.js
var import_fusion_sdk15 = __toESM(require_dist5());
var FusionApi = class {
  constructor(config) {
    const httpProvider = config.httpProvider || new import_fusion_sdk15.AxiosProviderConnector(config.authKey);
    this.quoterApi = new QuoterApi({
      url: `${config.url}/quoter`,
      authKey: config.authKey
    }, httpProvider);
    this.relayerApi = new RelayerApi({
      url: `${config.url}/relayer`,
      authKey: config.authKey
    }, httpProvider);
    this.ordersApi = new OrdersApi({
      url: `${config.url}/orders`,
      authKey: config.authKey
    }, httpProvider);
  }
  getQuote(params) {
    return this.quoterApi.getQuote(params);
  }
  getQuoteWithCustomPreset(params, body) {
    return this.quoterApi.getQuoteWithCustomPreset(params, body);
  }
  getActiveOrders(params = new ActiveOrdersRequest()) {
    return this.ordersApi.getActiveOrders(params);
  }
  getOrderStatus(params) {
    return this.ordersApi.getOrderStatus(params);
  }
  getOrdersByMaker(params) {
    return this.ordersApi.getOrdersByMaker(params);
  }
  getReadyToAcceptSecretFills(orderHash) {
    return this.ordersApi.getReadyToAcceptSecretFills(orderHash);
  }
  getReadyToExecutePublicActions() {
    return this.ordersApi.getReadyToExecutePublicActions();
  }
  getPublishedSecrets(orderHash) {
    return this.ordersApi.getPublishedSecrets(orderHash);
  }
  submitOrder(params) {
    return this.relayerApi.submit(params);
  }
  submitOrderBatch(params) {
    return this.relayerApi.submitBatch(params);
  }
  submitSecret(orderHash, secret) {
    return this.relayerApi.submitSecret(orderHash, secret);
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/sdk/sdk.js
var SDK = class {
  constructor(config) {
    this.config = config;
    this.api = new FusionApi({
      url: config.url,
      httpProvider: config.httpProvider,
      authKey: config.authKey
    });
  }
  async getActiveOrders(params = {}) {
    const request = new ActiveOrdersRequest(params);
    return this.api.getActiveOrders(request);
  }
  async getOrderStatus(orderHash) {
    const request = new OrderStatusRequest({ orderHash });
    return this.api.getOrderStatus(request);
  }
  async getOrdersByMaker(params) {
    const request = new OrdersByMakerRequest(params);
    return this.api.getOrdersByMaker(request);
  }
  async getReadyToAcceptSecretFills(orderHash) {
    return this.api.getReadyToAcceptSecretFills(orderHash);
  }
  async getReadyToExecutePublicActions() {
    return this.api.getReadyToExecutePublicActions();
  }
  async getPublishedSecrets(orderHash) {
    return this.api.getPublishedSecrets(orderHash);
  }
  async submitSecret(orderHash, secret) {
    return this.api.submitSecret(orderHash, secret);
  }
  async getQuote(params) {
    const request = new QuoterRequest({
      srcChain: params.srcChainId,
      dstChain: params.dstChainId,
      srcTokenAddress: params.srcTokenAddress,
      dstTokenAddress: params.dstTokenAddress,
      amount: params.amount,
      walletAddress: params.walletAddress || import_fusion_sdk16.Address.ZERO_ADDRESS.toString(),
      permit: params.permit,
      enableEstimate: !!params.enableEstimate,
      fee: params == null ? void 0 : params.takingFeeBps,
      source: params.source,
      isPermit2: params.isPermit2
    });
    return this.api.getQuote(request);
  }
  async getQuoteWithCustomPreset(params, body) {
    const paramsRequest = new QuoterRequest({
      srcChain: params.srcChainId,
      dstChain: params.dstChainId,
      srcTokenAddress: params.srcTokenAddress,
      dstTokenAddress: params.dstTokenAddress,
      amount: params.amount,
      walletAddress: params.walletAddress || import_fusion_sdk16.Address.ZERO_ADDRESS.toString(),
      permit: params.permit,
      enableEstimate: !!params.enableEstimate,
      fee: params == null ? void 0 : params.takingFeeBps,
      source: params.source,
      isPermit2: params.isPermit2
    });
    const bodyRequest = new QuoterCustomPresetRequest({
      customPreset: body.customPreset
    });
    return this.api.getQuoteWithCustomPreset(paramsRequest, bodyRequest);
  }
  async createOrder(quote, params) {
    var _a2;
    if (!quote.quoteId) {
      throw new Error("request quote with enableEstimate=true");
    }
    const order = quote.createOrder({
      hashLock: params.hashLock,
      receiver: params.receiver ? new import_fusion_sdk16.Address(params.receiver) : void 0,
      preset: params.preset,
      nonce: params.nonce,
      takingFeeReceiver: (_a2 = params.fee) == null ? void 0 : _a2.takingFeeReceiver,
      permit: params.permit,
      isPermit2: params.isPermit2
    });
    const hash2 = order.getOrderHash(quote.srcChainId);
    return { order, hash: hash2, quoteId: quote.quoteId };
  }
  async submitOrder(srcChainId, order, quoteId, secretHashes) {
    if (!this.config.blockchainProvider) {
      throw new Error("blockchainProvider has not set to config");
    }
    if (!order.multipleFillsAllowed && secretHashes.length > 1) {
      throw new Error("with disabled multiple fills you provided secretHashes > 1");
    } else if (order.multipleFillsAllowed && secretHashes) {
      const secretCount = order.escrowExtension.hashLockInfo.getPartsCount() + 1n;
      if (secretHashes.length !== Number(secretCount)) {
        throw new Error("secretHashes length should be equal to number of secrets");
      }
    }
    const orderStruct = order.build();
    const signature = await this.config.blockchainProvider.signTypedData(orderStruct.maker, order.getTypedData(srcChainId));
    const relayerRequest = new RelayerRequest({
      srcChainId,
      order: orderStruct,
      signature,
      quoteId,
      extension: order.extension.encode(),
      secretHashes: secretHashes.length === 1 ? void 0 : secretHashes
    });
    await this.api.submitOrder(relayerRequest);
    return {
      order: orderStruct,
      signature,
      quoteId,
      orderHash: order.getOrderHash(srcChainId),
      extension: relayerRequest.extension
    };
  }
  async placeOrder(quote, params) {
    const { order, quoteId } = await this.createOrder(quote, params);
    return this.submitOrder(quote.srcChainId, order, quoteId, params.secretHashes);
  }
  async buildCancelOrderCallData(orderHash) {
    const getOrderRequest = new OrderStatusRequest({ orderHash });
    const orderData = await this.api.getOrderStatus(getOrderRequest);
    if (!orderData) {
      throw new Error(`Can not get order with the specified orderHash ${orderHash}`);
    }
    const { order } = orderData;
    return (0, import_fusion_sdk16.encodeCancelOrder)(orderHash, new import_fusion_sdk16.MakerTraits(BigInt(order.makerTraits)));
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/ws-api/ws-api.js
var import_fusion_sdk17 = __toESM(require_dist5());

// node_modules/@1inch/cross-chain-sdk/dist/esm/ws-api/types.js
var EventType;
(function(EventType2) {
  EventType2["OrderCreated"] = "order_created";
  EventType2["OrderInvalid"] = "order_invalid";
  EventType2["OrderBalanceChange"] = "order_balance_change";
  EventType2["OrderAllowanceChange"] = "order_allowance_change";
  EventType2["OrderFilled"] = "order_filled";
  EventType2["OrderFilledPartially"] = "order_filled_partially";
  EventType2["OrderCancelled"] = "order_cancelled";
  EventType2["OrderSecretShared"] = "secret_shared";
})(EventType || (EventType = {}));
var RpcMethod;
(function(RpcMethod2) {
  RpcMethod2["GetAllowedMethods"] = "getAllowedMethods";
  RpcMethod2["Ping"] = "ping";
  RpcMethod2["GetActiveOrders"] = "getActiveOrders";
  RpcMethod2["GetSecrets"] = "getSecrets";
})(RpcMethod || (RpcMethod = {}));
var WebSocketEvent;
(function(WebSocketEvent2) {
  WebSocketEvent2["Close"] = "close";
  WebSocketEvent2["Error"] = "error";
  WebSocketEvent2["Message"] = "message";
  WebSocketEvent2["Open"] = "open";
})(WebSocketEvent || (WebSocketEvent = {}));

// node_modules/@1inch/cross-chain-sdk/dist/esm/ws-api/constants.js
var orderEvents = [
  EventType.OrderCreated,
  EventType.OrderInvalid,
  EventType.OrderBalanceChange,
  EventType.OrderAllowanceChange,
  EventType.OrderFilled,
  EventType.OrderFilledPartially,
  EventType.OrderCancelled,
  EventType.OrderSecretShared
];

// node_modules/@1inch/cross-chain-sdk/dist/esm/ws-api/active-websocket-orders-api.js
var ActiveOrdersWebSocketApi = class {
  constructor(provider) {
    this.provider = provider;
  }
  onOrder(cb) {
    this.provider.onMessage((data) => {
      if (orderEvents.includes(data.event)) {
        cb(data);
      }
    });
  }
  onOrderCreated(cb) {
    this.provider.onMessage((data) => {
      if (data.event === EventType.OrderCreated) {
        cb(data);
      }
    });
  }
  onOrderInvalid(cb) {
    this.provider.onMessage((data) => {
      if (data.event === EventType.OrderInvalid) {
        cb(data);
      }
    });
  }
  onOrderBalanceChange(cb) {
    this.provider.onMessage((data) => {
      if (data.event === EventType.OrderBalanceChange) {
        cb(data);
      }
    });
  }
  onOrderAllowanceChange(cb) {
    this.provider.onMessage((data) => {
      if (data.event === EventType.OrderAllowanceChange) {
        cb(data);
      }
    });
  }
  onOrderFilled(cb) {
    this.provider.onMessage((data) => {
      if (data.event === EventType.OrderFilled) {
        cb(data);
      }
    });
  }
  onOrderCancelled(cb) {
    this.provider.onMessage((data) => {
      if (data.event === EventType.OrderCancelled) {
        cb(data);
      }
    });
  }
  onOrderFilledPartially(cb) {
    this.provider.onMessage((data) => {
      if (data.event === EventType.OrderFilledPartially) {
        cb(data);
      }
    });
  }
  onOrderSecretShared(cb) {
    this.provider.onMessage((data) => {
      if (data.event === EventType.OrderSecretShared) {
        cb(data);
      }
    });
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/ws-api/rpc-websocket-api.js
var RpcWebsocketApi = class {
  constructor(provider) {
    this.provider = provider;
  }
  onPong(cb) {
    this.provider.onMessage((data) => {
      if (data.method === RpcMethod.Ping) {
        cb(data.result);
      }
    });
  }
  ping() {
    this.provider.send({ method: RpcMethod.Ping });
  }
  getActiveOrders({ limit, page } = {}) {
    const paginationRequest = new PaginationRequest(page, limit);
    this.provider.send({
      method: RpcMethod.GetActiveOrders,
      param: paginationRequest
    });
  }
  onGetActiveOrders(cb) {
    this.provider.onMessage((data) => {
      if (data.method === RpcMethod.GetActiveOrders) {
        cb(data.result);
      }
    });
  }
  getSecrets({ limit, page } = {}) {
    const paginationRequest = new PaginationRequest(page, limit);
    this.provider.send({
      method: RpcMethod.GetSecrets,
      param: paginationRequest
    });
  }
  onGetSecrets(cb) {
    this.provider.onMessage((data) => {
      if (data.method === RpcMethod.GetSecrets) {
        cb(data.result);
      }
    });
  }
  getAllowedMethods() {
    this.provider.send({ method: RpcMethod.GetAllowedMethods });
  }
  onGetAllowedMethods(cb) {
    this.provider.onMessage((data) => {
      if (data.method === RpcMethod.GetAllowedMethods) {
        cb(data.result);
      }
    });
  }
};

// node_modules/@1inch/cross-chain-sdk/dist/esm/ws-api/url.js
function castUrl(url) {
  if (url.startsWith("http")) {
    return url.replace("http", "ws");
  }
  return url;
}

// node_modules/@1inch/cross-chain-sdk/dist/esm/ws-api/ws-api.js
var WebSocketApi = class _WebSocketApi {
  constructor(configOrProvider) {
    if (instanceOfWsApiConfigWithNetwork(configOrProvider)) {
      const url = castUrl(configOrProvider.url);
      const urlWithNetwork = `${url}/${_WebSocketApi.Version}/${configOrProvider.network}`;
      const configWithUrl = { ...configOrProvider, url: urlWithNetwork };
      const provider = new import_fusion_sdk17.WebsocketClient(configWithUrl);
      this.provider = provider;
      this.rpc = new RpcWebsocketApi(provider);
      this.order = new ActiveOrdersWebSocketApi(provider);
      return;
    }
    this.provider = configOrProvider;
    this.rpc = new RpcWebsocketApi(configOrProvider);
    this.order = new ActiveOrdersWebSocketApi(configOrProvider);
  }
  static new(configOrProvider) {
    return new _WebSocketApi(configOrProvider);
  }
  init() {
    this.provider.init();
  }
  on(event, cb) {
    this.provider.on(event, cb);
  }
  off(event, cb) {
    this.provider.off(event, cb);
  }
  onOpen(cb) {
    this.provider.onOpen(cb);
  }
  send(message) {
    this.provider.send(message);
  }
  close() {
    this.provider.close();
  }
  onMessage(cb) {
    this.provider.onMessage(cb);
  }
  onClose(cb) {
    this.provider.onClose(cb);
  }
  onError(cb) {
    this.provider.onError(cb);
  }
};
WebSocketApi.Version = "v1.0";
function instanceOfWsApiConfigWithNetwork(val) {
  return "url" in val && "network" in val;
}
var export_Address = import_fusion_sdk18.Address;
var export_AmountMode = import_fusion_sdk18.AmountMode;
var export_AuctionCalculator = import_fusion_sdk18.AuctionCalculator;
var export_AuctionDetails = import_fusion_sdk18.AuctionDetails;
var export_Extension = import_fusion_sdk18.Extension;
var export_Interaction = import_fusion_sdk18.Interaction;
var export_LimitOrderContract = import_fusion_sdk18.LimitOrderContract;
var export_MakerTraits = import_fusion_sdk18.MakerTraits;
var export_NetworkEnum = import_fusion_sdk18.NetworkEnum;
var export_PrivateKeyProviderConnector = import_fusion_sdk18.PrivateKeyProviderConnector;
var export_SettlementPostInteractionData = import_fusion_sdk18.SettlementPostInteractionData;
var export_TakerTraits = import_fusion_sdk18.TakerTraits;
var export_Web3ProviderConnector = import_fusion_sdk18.Web3ProviderConnector;
var export_calcMakingAmount = import_fusion_sdk18.calcMakingAmount;
var export_calcTakingAmount = import_fusion_sdk18.calcTakingAmount;
var export_now = import_fusion_sdk18.now;
var export_randBigInt = import_fusion_sdk18.randBigInt;
export {
  ActiveOrdersRequest,
  ActiveOrdersWebSocketApi,
  export_Address as Address,
  export_AmountMode as AmountMode,
  export_AuctionCalculator as AuctionCalculator,
  export_AuctionDetails as AuctionDetails,
  CrossChainOrder,
  DstImmutablesComplement,
  DstStage,
  DstTimeLocks,
  ESCROW_DST_IMPLEMENTATION,
  ESCROW_FACTORY,
  ESCROW_SRC_IMPLEMENTATION,
  EscrowEventAction,
  EscrowEventSide,
  EscrowExtension,
  EscrowFactory,
  EventType,
  export_Extension as Extension,
  FillStatus,
  FusionApi,
  HashLock,
  Immutables,
  export_Interaction as Interaction,
  export_LimitOrderContract as LimitOrderContract,
  export_MakerTraits as MakerTraits,
  export_NetworkEnum as NetworkEnum,
  OrderStatus,
  OrderStatusRequest,
  OrderType,
  OrdersApi,
  OrdersByMakerRequest,
  PaginationRequest,
  Preset,
  PresetEnum,
  export_PrivateKeyProviderConnector as PrivateKeyProviderConnector,
  PublicAction,
  Quote,
  QuoterApi,
  QuoterCustomPresetRequest,
  QuoterRequest,
  RelayerApi,
  RelayerRequest,
  RpcMethod,
  RpcWebsocketApi,
  SDK,
  export_SettlementPostInteractionData as SettlementPostInteractionData,
  SrcStage,
  SrcTimeLocks,
  SupportedChains,
  TRUE_ERC20,
  export_TakerTraits as TakerTraits,
  TimeLocks,
  ValidationStatus,
  export_Web3ProviderConnector as Web3ProviderConnector,
  WebSocketApi,
  WebSocketEvent,
  export_calcMakingAmount as calcMakingAmount,
  export_calcTakingAmount as calcTakingAmount,
  concatQueryParams,
  export_now as now,
  orderEvents,
  export_randBigInt as randBigInt
};
/*! Bundled license information:

@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

aes-js/lib.commonjs/aes.js:
  (*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. *)

assert/build/internal/util/comparisons.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   *)

js-sha3/src/sha3.js:
  (**
   * [js-sha3]{@link https://github.com/emn178/js-sha3}
   *
   * @version 0.8.0
   * @author Chen, Yi-Cyuan [emn178@gmail.com]
   * @copyright Chen, Yi-Cyuan 2015-2018
   * @license MIT
   *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/modular.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/curve.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/abstract/weierstrass.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/_shortw_utils.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@noble/curves/esm/secp256k1.js:
  (*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

aes-js/lib.esm/aes.js:
  (*! MIT License. Copyright 2015-2022 Richard Moore <me@ricmoo.com>. See LICENSE.txt. *)
*/
//# sourceMappingURL=@1inch_cross-chain-sdk.js.map
